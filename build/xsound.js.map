{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/SoundModule/Effector.js","webpack:///./src/SoundModule/index.js","webpack:///./src/AudioModule/index.js","webpack:///./src/OneshotModule/index.js","webpack:///./src/OscillatorModule/index.js","webpack:///./src/SoundModule/Analyser/Visualizer.js","webpack:///./src/StreamModule/index.js","webpack:///./src/MediaModule/index.js","webpack:///./src/XSound/index.js","webpack:///./src/MML/index.js","webpack:///./src/MIDI/index.js","webpack:///./src/MixerModule/index.js","webpack:///./src/StreamModule/NoiseGate.js","webpack:///./src/AudioModule/VocalCanceler.js","webpack:///./src/OscillatorModule/Glide.js","webpack:///./src/OscillatorModule/Oscillator.js","webpack:///./src/SoundModule/EnvelopeGenerator.js","webpack:///./src/SoundModule/Listener.js","webpack:///./src/SoundModule/Panner.js","webpack:///./src/SoundModule/Reverb.js","webpack:///./src/SoundModule/Delay.js","webpack:///./src/SoundModule/Chorus.js","webpack:///./src/SoundModule/Flanger.js","webpack:///./src/SoundModule/Phaser.js","webpack:///./src/SoundModule/Ringmodulator.js","webpack:///./src/SoundModule/Tremolo.js","webpack:///./src/SoundModule/AutopannerFallback.js","webpack:///./src/SoundModule/Autopanner.js","webpack:///./src/SoundModule/Filter.js","webpack:///./src/SoundModule/Equalizer.js","webpack:///./src/SoundModule/Wah.js","webpack:///./src/SoundModule/Distortion.js","webpack:///./src/SoundModule/Compressor.js","webpack:///./src/SoundModule/Session.js","webpack:///./src/SoundModule/Recorder.js","webpack:///./src/SoundModule/Analyser/FFT.js","webpack:///./src/SoundModule/Analyser/Time.js","webpack:///./src/SoundModule/Analyser/TimeOverview.js","webpack:///./src/SoundModule/Analyser/index.js","webpack:///./src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","length","configurable","writable","Effector","context","bufferSize","this","isActive","input","createGain","output","lfo","createOscillator","depth","rate","frequency","processor","createScriptProcessor","start","noteOn","stop","noteOff","values","isStop","startTime","parseFloat","isNaN","currentTime","stopTime","releaseTime","type","state","String","toLowerCase","Boolean","connect","JSON","stringify","params","k","a","u","f","h","v","y","b","g","w","O","S","A","SoundModule","sampleRate","userAgent","navigator","parseInt","test","mastervolume","NUMBER_OF_INPUTS","NUMBER_OF_OUTPUTS","analyser","_Analyser2","recorder","_Recorder2","session","_Session2","compressor","_Compressor2","distortion","_Distortion2","wah","_Wah2","equalizer","_Equalizer2","filter","_Filter2","autopanner","createStereoPanner","_Autopanner2","_AutopannerFallback2","tremolo","_Tremolo2","ringmodulator","_Ringmodulator2","phaser","_Phaser2","flanger","_Flanger2","chorus","_Chorus2","delay","_Delay2","reverb","_Reverb2","panner","_Panner2","listener","_Listener2","envelopegenerator","_EnvelopeGenerator2","replace","gain","source","connects","Array","isArray","disconnect","len","destination","sender","toString","AudioModule","_this","__proto__","getPrototypeOf","createBufferSource","buffer","paused","callbacks","decode","ready","update","ended","error","vocalcanceler","_VocalCanceler2","arguments","setup","param","max","playbackRate","loop","AudioBuffer","duration","numberOfChannels","arrayBuffer","_this2","ArrayBuffer","decodeAudioData","position","processCallback","_this3","pos","noteGrainOn","on","onaudioprocess","event","inputLs","inputBuffer","getChannelData","inputRs","outputLs","outputBuffer","outputRs","Math","floor","timeOverviewL","timeOverviewR","end","off","AudioBufferSourceNode","audio","playbackrate","isSource","OneshotModule","sources","resources","buffers","volumes","isStops","settings","times","transpose","isAnalyser","timeout","successCallback","errorCallback","progressCallback","properties","success","progress","volume","setGenerator","isError","load","url","index","xhr","XMLHttpRequest","ontimeout","ERROR_AJAX_TIMEOUT","onprogress","abort","onerror","ERROR_AJAX","onload","status","response","audioBuffer","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","err","return","ERROR_DECODE","open","responseType","send","st","sp","clear","selectedIndex","bufferIndex","loopStart","loopEnd","window","setTimeout","onended","every","element","set","oneshot","OscillatorModule","glide","_Glide2","states","_Oscillator2","frequencies","oscillator","time","octave","fine","Visualizer","graphics","canvas","svg","interval","timerid","styles","shape","grad","offset","color","wave","grid","text","font","family","size","style","weight","width","cap","join","top","right","bottom","left","HTMLCanvasElement","CANVAS","getContext","SVGElement","SVG","setAttribute","XMLNS","XLINK","grads","prop","data","minDecibels","maxDecibels","drawOnCanvas","drawBySVG","toDataURL","outerHTML","innerWidth","innerHeight","middle","nPlotInterval","CanvasRenderingContext2D","Float32Array","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","x","moveTo","lineTo","stroke","fillStyle","upside","gradient","createLinearGradient","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","gradients","addColorStop","fillRect","linearGradientId","path","document","createElementNS","defs","createSVGLinearGradient","appendChild","rect","linearGradient","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_styles$font","SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW","SVG_LINEAR_GRADIENT_ID_TIME","SVG_LINEAR_GRADIENT_ID_FFT","StreamModule","constraints","video","stream","noisegate","_NoiseGate2","streamCallback","mediaDevices","getUserMedia","Error","createMediaStreamSource","then","catch","isStreaming","level","MediaModule","media","ext","controls","muted","autoplay","listeners","formats","HTMLAudioElement","AUDIO","HTMLVideoElement","VIDEO","format","canPlayType","MediaElementAudioSourceNode","createMediaElementSource","addEventListener","loadstart","pause","min","HTMLMediaElement","channelCount","src","indexOf","play","read","file","Blob","reader","FileReader","code","NOT_FOUND_ERR","SECURITY_ERR","ABORT_ERR","NOT_READABLE_ERR","ENCODING_ERR","result","readAsArrayBuffer","readAsDataURL","readAsText","Event","stopPropagation","preventDefault","dataTransfer","files","target","File","ajax","AudioContext","toFrequencies","indexes","FREQUENCY_RATIO","pow","convertTime","minutes","seconds","milliseconds","ms","fullscreen","Element","webkitRequestFullscreen","ALLOW_KEYBOARD_INPUT","mozRequestFullScreen","msRequestFullscreen","requestFullscreen","exitFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","cancelFullScreen","MML","sequences","timerids","prev","mmls","OscillatorNode","notes","shift","match","REGEXP_MML","ERROR_STRING","timeOf4note","note","trim","REGEXP_TEMPO","bpm","slice","ERROR_TEMPO","ONE_MINUTES","REGEXP_OCTAVE","ERROR_OCTAVE","REGEXP_NOTE","chord","REGEXP_CHORD","pitchname","charAt","computeIndex","toUpperCase","EQUAL_TEMPERAMENT","ERROR_NOTE","push","REST","computeFrequency","durations","split","REGEXP_DURATION","numOf4note","QUARTER_NOTE","reverse","part","sequence","pop","detune","j","num","node","AudioNode","_OscillatorModule2","_OneshotModule2","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","clearTimeout","isPaused","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","mml","dataURL","btoa","toAscii","computedIndex","string","converted","charCode","charCodeAt","MIDI","midiAccess","inputs","outputs","sysex","requestMIDIAccess","inputIterator","outputIterator","MixerModule","close","NoiseGate","abs","VocalCanceler","dataL","dataR","Glide","LINEAR","EXPONENTIAL","diff","t0","t1","cancelScheduledValues","setValueAtTime","Oscillator","setPeriodicWave","setWaveTable","customs","real","imag","WAVE_TYPES","reals","imags","subarray","periodicWave","createPeriodicWave","OCTAVE","sine","square","sawtooth","triangle","EnvelopeGenerator","generators","activeIndexes","activeCounter","attack","decay","sustain","release","t2","t2Value","activeIndex","linearRampToValueAtTime","setTargetAtTime","t3","t4","setTargetValueAtTime","counter","MIN_GAIN","isDisconnect","generator","Listener","positions","z","fronts","ups","setPosition","setOrientation","Panner","createPanner","orientations","refDistance","maxDistance","rolloffFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","panningModel","HRTF","distanceModel","INVERSE_DISTANCE","PANNING_MODELS","DISTANCE_MODELS","equalpower","linear","inverse","exponential","Reverb","rirs","convolver","createConvolver","dry","wet","tone","createBiquadFilter","LOWPASS","Q","SQRT1_2","impulse","onprogresss","Delay","createDelay","MAX_DELAY_TIME","feedback","delayTime","Chorus","mix","depthRate","Function","getOwnPropertyDescriptor","Flanger","Phaser","numberOfStages","filters","MAXIMUM_STAGES","ALLPASS","stage","resonance","Ringmodulator","amplitude","Tremolo","AutopannerFallback","amplitudeL","amplitudeR","splitter","createChannelSplitter","merger","createChannelMerger","lfoSplitter","Autopanner","pan","Filter","maxFrequency","range","FILTER_TYPES","minFrequnecy","lowpass","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass","Equalizer","bass","treble","presence","LOWSHELF","PEAKING","HIGHSHELF","Wah","cutoff","Distortion","createWaveShaper","drive","CLEAN","numberOfSamples","BANDPASS","curve","createCurve","AMOUNTS","CRUNCH","OVERDRIVE","DISTORTION","FUZZ","samples","amount","curves","Compressor","createDynamicsCompressor","threshold","knee","ratio","Session","numberOfInputs","numberOfOutputs","receiver","websocket","tls","host","port","openCallback","closeCallback","scheme","WebSocket","binaryType","onopen","onclose","onmessage","total","byteLength","BYTES_PER_ELEMENT","bufferLs","bufferRs","isConnected","bufferedAmount","readyState","OPEN","stateCallback","waitCallback","intervalid","setInterval","clearInterval","Recorder","mixedLs","mixedRs","numberOfTracks","trackLs","trackRs","activeTrack","gainL","gainR","track","isTrack","recordedLs","recordedRs","channel","tracks","mixes","sum","currentBuffer","numberOfMaxBuffers","currentTrack","mixTrack","qbit","soundLs","soundRs","CHANNEL","QBIT","SIZE","CHUNK_SIZE","RIFF_CHUNK","RATE","BPS","DATA_SIZE","sounds","Uint8Array","binary","Int16Array","URL","webkitURL","mozURL","createObjectURL","waves","blob","fromCharCode","FFT","UINT","textInterval","FLOAT","mindB","maxdB","_canvas","height","drawnSize","fsDivN","nTextInterval","clearRect","createFontString","fillText","measureText","getAttribute","innerHTML","_Visualizer3","textContent","Time","drawTimeDomainFloat32ArrayOnCanvas","drawTimeDomainFloat32ArrayBySVG","TimeOverview","savedImage","plotInterval","getImageData","classList","add","ImageData","_canvas2","putImageData","querySelector","callback","drawNode","move","isDown","draw","getOffsetX","offsetX","offsetLeft","parentNode","pageX","touches","Analyser","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","createAnalyser","_TimeOverview2","_Time2","fft","_FFT2","fftSize","smoothingTimeConstant","frequencyBinCount","domain","getByteTimeDomainData","getFloatTimeDomainData","getByteFrequencyData","getFloatFrequencyData","_XSound2","webkitAudioContext","IS_XSOUND","audiocontext","createJavaScriptNode","createGainNode","createDelayNode","createWaveTable","_AudioModule2","_MediaModule2","_StreamModule2","mixer","_MixerModule2","midi","_MIDI2","_MML2","XSound","SAMPLE_RATE","_SoundModule2","resume","Promise","reject","clone","clones","C","free","sourceList","noConflict","deep","X","getCurrentTime","removeEventListener"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,KACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,KAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,cAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,YAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,cAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA2B,SAC3B,WAAiC,OAAA3B,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAkB,EAAAC,GAAsD,OAAAlB,OAAAmB,UAAAC,eAAA3B,KAAAwB,EAAAC,IAGtDhC,EAAAmC,EAAA,GAIAnC,IAAAoC,EAAA,eAAAd,EAAAe,EAAAnB,GAAA,aAAAJ,OAAAC,eAAAsB,EAAA,cAAAhB,OAAA,QAAAjB,EAAA,oBAAAkB,IAAAe,GAAA,QAAAnB,EAAA,EAAAA,EAAAmB,EAAAC,OAAApB,IAAA,KAAAd,EAAAiC,EAAAnB,GAAAd,EAAAY,WAAAZ,EAAAY,aAAA,EAAAZ,EAAAmC,cAAA,YAAAnC,MAAAoC,UAAA,GAAA1B,OAAAC,eAAAO,EAAAlB,EAAAuB,IAAAvB,IAAA,gBAAAiC,EAAAnB,EAAAd,GAAA,OAAAc,GAAAI,EAAAe,EAAAJ,UAAAf,GAAAd,GAAAkB,EAAAe,EAAAjC,GAAAiC,GAAA,GC5EqBI,aAKjB,SAAAA,EAAYC,EAASC,iGAAYC,KAAAH,GAC7BG,KAAKC,YAELD,KAAKF,QAAUA,EAGfE,KAAKE,MAASJ,EAAQK,aACtBH,KAAKI,OAASN,EAAQK,aAItBH,KAAKK,IAAYP,EAAQQ,mBACzBN,KAAKO,MAAYT,EAAQK,aACzBH,KAAKQ,KAAYR,KAAKK,IAAII,UAC1BT,KAAKU,UAAYZ,EAAQa,sBAAsBZ,EAAY,EAAG,GAG9DC,KAAKK,IAAIO,MAAQZ,KAAKK,IAAIO,OAASZ,KAAKK,IAAIQ,OAC5Cb,KAAKK,IAAIS,KAAQd,KAAKK,IAAIS,MAASd,KAAKK,IAAIU,QAE5Cf,KAAKgB,UAELhB,KAAKiB,UAAS,OAAAzD,EAAAkB,IAAAK,IAAA,QAAAN,MAAA,eAAAM,IAAA,UAAAN,MAAA,eAAAM,IAAA,QAAAN,MAAA,SA0BZyC,GACF,GAAIlB,KAAKC,UAAYD,KAAKiB,OAAQ,CAC9B,IAAIzB,EAAI2B,WAAWD,IAEfE,MAAM5B,IAAOA,EAAIQ,KAAKF,QAAQuB,eAC9B7B,EAAIQ,KAAKF,QAAQuB,aAGrBrB,KAAKK,IAAIO,MAAMpB,GACfQ,KAAKiB,UAGT,OAAOjB,kCASNsB,EAAUC,GACX,GAAIvB,KAAKC,WAAaD,KAAKiB,OAAQ,CAC/B,IAAIzB,EAAI2B,WAAWG,GACfhD,EAAI6C,WAAWI,IAEfH,MAAM5B,IAAOA,EAAIQ,KAAKF,QAAQuB,eAC9B7B,EAAIQ,KAAKF,QAAQuB,cAGjBD,MAAM9C,IAAOA,EAAI,KACjBA,EAAI,GAIR,IAAMkD,EAAOxB,KAAKK,IAAImB,KAChBhB,EAAOR,KAAKK,IAAII,UAAUhC,MAGhCuB,KAAKK,IAAIS,KAAKtB,EAAIlB,GAGlB0B,KAAKK,IAAML,KAAKF,QAAQQ,mBAGxBN,KAAKK,IAAIO,MAAQZ,KAAKK,IAAIO,OAASZ,KAAKK,IAAIQ,OAC5Cb,KAAKK,IAAIS,KAAQd,KAAKK,IAAIS,MAASd,KAAKK,IAAIU,QAG5Cf,KAAKK,IAAImB,KAAkBA,EAC3BxB,KAAKK,IAAII,UAAUhC,MAAQ+B,EAE3BR,KAAKQ,KAAOR,KAAKK,IAAII,UAErBT,KAAKiB,UAGT,OAAOjB,mCAULyB,GACF,gBAAIA,EACOzB,KAAKC,UAGoB,WAAhCyB,OAAOD,GAAOE,cACd3B,KAAKC,UAAYD,KAAKC,SAEtBD,KAAKC,SAAW2B,QAAQH,GAI5BzB,KAAK6B,UAGL7B,KAAKY,MAAMZ,KAAKF,QAAQuB,aAEjBrB,uCASP,YAAAjB,IAAA,SAAAN,MAAA,WASA,OAAOqD,KAAKC,UAAU/B,KAAKgC,6CAK3B,MAAO,6BAAAtD,EAhKMmB,GAgKNJ,EAAAP,QAhKMW,8UCJrBzC,EAAA,KAAAoC,EAAAyC,EACA7E,EAAA,KAAA8E,EAAAD,EACA7E,EAAA,KAAAa,EAAAgE,EACA7E,EAAA,KAAA+E,EAAAF,EACA7E,EAAA,KAAAK,EAAAwE,EACA7E,EAAA,KAAAS,EAAAoE,EACA7E,EAAA,KAAAgF,EAAAH,EACA7E,EAAA,KAAAiF,EAAAJ,EACA7E,EAAA,KAAAmC,EAAA0C,EACA7E,EAAA,KAAAkF,EAAAL,EACA7E,EAAA,KAAAU,EAAAmE,EACA7E,EAAA,KAAAmF,EAAAN,EACA7E,EAAA,KAAAoF,EAAAP,EACA7E,EAAA,KAAAQ,EAAAqE,EACA7E,EAAA,KAAAqF,EAAAR,EACA7E,EAAA,KAAAsF,EAAAT,EACA7E,EAAA,KAAAuF,EAAAV,EACA7E,EAAA,KAAAwF,EAAAX,EACA7E,EAAA,KAAAyF,EAAAZ,EACA7E,EAAA,cAAA6E,EAAAvD,GAAA,OAAAA,KAAAE,WAAAF,GAAAQ,QAAAR,GAAA,IASqBoE,aAYjB,SAAAA,EAAYhD,EAASC,iGAAYC,KAAA8C,GAC7B9C,KAAKF,QAAaA,EAClBE,KAAK+C,WAAajD,EAAQiD,WAE1B,IAAMC,EAAYC,UAAUD,UAE5B,YAAIjD,EACA,OAAQmD,SAASnD,EAAY,KACzB,KAAO,IACP,KAAO,IACP,KAAM,KACN,KAAM,KACN,KAAM,KACN,KAAM,KACN,KAAK,MACDC,KAAKD,WAAamD,SAASnD,EAAY,IACvC,MACJ,QACI,WAED,uBAAuBoD,KAAKH,GACnChD,KAAKD,WAAa,KACX,uBAAuBoD,KAAKH,GACnChD,KAAKD,WAAa,KACX,uBAAuBoD,KAAKH,GACnChD,KAAKD,WAAa,KACX,0BAA0BoD,KAAKH,GACtChD,KAAKD,WAAa,KACX,UAAUoD,KAAKH,GACtBhD,KAAKD,WAAa,KACX,QAAQoD,KAAKH,GACpBhD,KAAKD,WAAa,KACX,mBAAmBoD,KAAKH,GAC/BhD,KAAKD,WAAa,KAElBC,KAAKD,WAAa,MAGtBC,KAAKoD,aAAetD,EAAQK,aAC5BH,KAAKU,UAAeZ,EAAQa,sBAAsBX,KAAKD,WAAY+C,EAAYO,iBAAkBP,EAAYQ,mBAE7GtD,KAAKuD,SAAoB,IAAAC,EAAAtE,QAAaY,GACtCE,KAAKyD,SAAoB,IAAAC,EAAAxE,QAAaY,EAASE,KAAKD,WAAY+C,EAAYO,iBAAkBP,EAAYQ,mBAC1GtD,KAAK2D,QAAoB,IAAAC,EAAA1E,QAAYY,EAASE,KAAKD,WAAY+C,EAAYO,iBAAkBP,EAAYQ,kBAAmBtD,KAAKuD,UACjIvD,KAAK6D,WAAoB,IAAAC,EAAA5E,QAAeY,EAASE,KAAKD,YACtDC,KAAK+D,WAAoB,IAAAC,EAAA9E,QAAeY,EAASE,KAAKD,YACtDC,KAAKiE,IAAoB,IAAAC,EAAAhF,QAAQY,EAASE,KAAKD,YAC/CC,KAAKmE,UAAoB,IAAAC,EAAAlF,QAAcY,EAASE,KAAKD,YACrDC,KAAKqE,OAAoB,IAAAC,EAAApF,QAAWY,EAASE,KAAKD,YAClDC,KAAKuE,WAAoBzE,EAAQ0E,mBAAqB,IAAAC,EAAAvF,QAAeY,EAASE,KAAKD,YAAc,IAAA2E,EAAAxF,QAAuBY,EAASE,KAAKD,YACtIC,KAAK2E,QAAoB,IAAAC,EAAA1F,QAAYY,EAASE,KAAKD,YACnDC,KAAK6E,cAAoB,IAAAC,EAAA5F,QAAkBY,EAASE,KAAKD,YACzDC,KAAK+E,OAAoB,IAAAC,EAAA9F,QAAWY,EAASE,KAAKD,YAClDC,KAAKiF,QAAoB,IAAAC,EAAAhG,QAAYY,EAASE,KAAKD,YACnDC,KAAKmF,OAAoB,IAAAC,EAAAlG,QAAWY,EAASE,KAAKD,YAClDC,KAAKqF,MAAoB,IAAAC,EAAApG,QAAUY,EAASE,KAAKD,YACjDC,KAAKuF,OAAoB,IAAAC,EAAAtG,QAAWY,EAASE,KAAKD,YAClDC,KAAKyF,OAAoB,IAAAC,EAAAxG,QAAWY,EAASE,KAAKD,YAClDC,KAAK2F,SAAoB,IAAAC,EAAA1G,QAAaY,GACtCE,KAAK6F,kBAAoB,IAAAC,EAAA5G,QAAsBY,GAG/CE,KAAKtC,SACDsC,KAAK6D,WACL7D,KAAK+D,WACL/D,KAAKiE,IACLjE,KAAKmE,UACLnE,KAAKqE,OACLrE,KAAKuE,WACLvE,KAAK2E,QACL3E,KAAK6E,cACL7E,KAAK+E,OACL/E,KAAKiF,QACLjF,KAAKmF,OACLnF,KAAKqF,MACLrF,KAAKuF,OACLvF,KAAKyF,iFAcP1G,EAAKN,GACP,IAEI6D,EAAM,KAIV,OANUZ,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,eAOpC,IAAK,eACD,YAAIlD,EACA,OAAOuB,KAAKoD,aAAa4C,KAAKvH,OAGlC6D,EAAMnB,WAAW1C,KACX,GAGa6D,GAFb,IAGFtC,KAAKoD,aAAa4C,KAAKvH,MAAQ6D,oKA+BxCvC,GAEH,OADAC,KAAKU,UAAYV,KAAKF,QAAQa,sBAAsBZ,EAAY+C,EAAYO,iBAAkBP,EAAYQ,mBACnGtD,6CAQP,OAAOA,KAAKU,UAAUX,2CASlBkG,EAAQC,GAERC,MAAMC,QAAQF,KACdlG,KAAKtC,QAAUwI,GAKnBD,EAAOI,WAAW,GAEdrG,KAAKtC,QAAQgC,OAAS,EACtBuG,EAAOpE,QAAQ7B,KAAKtC,QAAQ,GAAGwC,OAE/B+F,EAAOpE,QAAQ7B,KAAKoD,cAGxB,IAAK,IAAI5F,EAAI,EAAG8I,EAAMtG,KAAKtC,QAAQgC,OAAQlC,EAAI8I,EAAK9I,IAEhDwC,KAAKtC,QAAQF,GAAG4C,OAAOiG,WAAW,GAE9B7I,EAAKwC,KAAKtC,QAAQgC,OAAS,EAE3BM,KAAKtC,QAAQF,GAAG4C,OAAOyB,QAAQ7B,KAAKtC,QAAQF,EAAI,GAAG0C,OAEnDF,KAAKtC,QAAQF,GAAG4C,OAAOyB,QAAQ7B,KAAKoD,cAiB5C,OAbApD,KAAKoD,aAAavB,QAAQ7B,KAAKF,QAAQyG,aAGvCvG,KAAKoD,aAAavB,QAAQ7B,KAAKuD,SAASrD,OAGxCF,KAAKoD,aAAavB,QAAQ7B,KAAKyD,SAAS/C,WACxCV,KAAKyD,SAAS/C,UAAUmB,QAAQ7B,KAAKF,QAAQyG,aAG7CvG,KAAKoD,aAAavB,QAAQ7B,KAAK2D,QAAQ6C,QACvCxG,KAAK2D,QAAQ6C,OAAO3E,QAAQ7B,KAAKF,QAAQyG,aAElCvG,oCAQJzC,GACH,IAAMK,EAAI8D,OAAOnE,GAAQwI,QAAQ,KAAM,IAAIpE,cAE3C,OAAQ/D,GACJ,IAAK,WACL,IAAK,WACL,IAAK,UACL,IAAK,aACL,IAAK,aACL,IAAK,MACL,IAAK,YACL,IAAK,SACL,IAAK,aACL,IAAK,UACL,IAAK,gBACL,IAAK,SACL,IAAK,UACL,IAAK,SACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,WACD,OAAOoC,KAAKpC,GAChB,IAAK,oBACL,IAAK,KAED,OAAOoC,KAAK6F,kBAChB,IAAK,QACD,GAAIjI,KAAKoC,KACL,OAAOA,KAAKpC,GAIpB,IAAK,gBACD,GAAIA,KAAKoC,KACL,OAAOA,KAAKpC,GAIpB,IAAK,YACD,GAAIA,KAAKoC,KACL,OAAOA,KAAKpC,+BAczBsD,GACC,IAAI1B,EAAI2B,WAAWD,GAenB,OAbIE,MAAM5B,IAAOA,EAAIQ,KAAKF,QAAQuB,eAC9B7B,EAAIQ,KAAKF,QAAQuB,aAGrBrB,KAAKmF,OAAOvE,MAAMpB,GAClBQ,KAAKiF,QAAQrE,MAAMpB,GACnBQ,KAAK+E,OAAOnE,MAAMpB,GAClBQ,KAAKuE,WAAW3D,MAAMpB,GACtBQ,KAAK2E,QAAQ/D,MAAMpB,GACnBQ,KAAK6E,cAAcjE,MAAMpB,GACzBQ,KAAKiE,IAAIrD,MAAMpB,GACfQ,KAAKqE,OAAOzD,MAAMpB,GAEXQ,iCAQPsB,GACA,IAAI9B,EAAI2B,WAAWG,GAenB,OAbIF,MAAM5B,IAAOA,EAAIQ,KAAKF,QAAQuB,eAC9B7B,EAAIQ,KAAKF,QAAQuB,aAGrBrB,KAAKmF,OAAOrE,KAAKtB,GACjBQ,KAAKiF,QAAQnE,KAAKtB,GAClBQ,KAAK+E,OAAOjE,KAAKtB,GACjBQ,KAAKuE,WAAWzD,KAAKtB,GACrBQ,KAAK2E,QAAQ7D,KAAKtB,GAClBQ,KAAK6E,cAAc/D,KAAKtB,GACxBQ,KAAKiE,IAAInD,KAAKtB,GAGPQ,sCAQP,IAAMgC,KAEN,IAAK,IAAMzE,KAAUyC,KACjB,GAAqD,sBAAjD9B,OAAOmB,UAAUoH,SAAS9I,KAAKqC,KAAKzC,IAAxC,CAIA,IAAMK,EAAIL,EAAOoE,cAEP,iBAAN/D,EACAoE,EAAOpE,GAAKoC,KAAKzC,GAAQyI,KAAKvH,MAC2B,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAKqC,KAAKzC,KAAoC,WAAYyC,KAAKzC,KACjGyE,EAAOpE,GAAKoC,KAAKzC,GAAQyE,UAIjC,OAAOA,mCAQP,OAAOF,KAAKC,UAAU/B,KAAKgC,6CAK3B,MAAO,oBAAAtD,EA/VMoE,KACVO,iBAAoB,EADVP,EAEVQ,kBAAoB,EAAA7D,EAAAP,QAFV4D,0kBC5BrB1F,EAAA,IAAA8E,EAAAjE,EACAb,EAAA,cAAAa,EAAAS,GAAA,OAAAA,KAAAE,WAAAF,GAAAQ,QAAAR,GAAA,IAUqBgI,cAIjB,SAAAA,EAAY5G,iGAASE,KAAA0G,GAAA,IAAAC,oKAAA3G,MAAA0G,EAAAE,WAAA1I,OAAA2I,eAAAH,IAAA/I,KAAAqC,KACXF,IADW,OAGjB6G,EAAKV,OAASnG,EAAQgH,qBACtBH,EAAKI,OAAS,KAEdJ,EAAKtF,YAAc,EAEnBsF,EAAKK,UAELL,EAAKM,WACDC,OAAW,aACXC,MAAW,aACXvG,MAAW,aACXE,KAAW,aACXsG,OAAW,aACXC,MAAW,aACXC,MAAW,cAGfX,EAAKY,cAAgB,IAAAC,EAAAtI,QApBJyH,iXA+Bf5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK0H,MAAMzF,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCM,KAAKjC,KAAKiH,WACoC,sBAA1C/I,OAAOmB,UAAUoH,SAAS9I,KAAKc,KAC/BuB,KAAKiH,UAAUhF,GAAKxD,GAKhC,OAAOuB,mCAWLjB,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAElCrD,sFAAgB2D,EAAGxD,GAEzB,YAAIH,EACA,OAAOA,EAGX,IAAIgE,EAAM,EAENsF,EAAM,EAEV,OAAQ3F,GACJ,IAAK,eACD,YAAIxD,EACA,OAAOuB,KAAKiG,OAAO4B,aAAapJ,MAKpCmJ,EAAM,MAFNtF,EAAMnB,WAAW1C,KACX,GAGa6D,GAAKsF,IACpB5H,KAAKiG,OAAO4B,aAAapJ,MAAQ6D,GAGrC,MACJ,IAAK,OACL,IAAK,UACD,YAAI7D,EACA,OAAOuB,KAAKiG,OAAO6B,KAGvB9H,KAAKiG,OAAO6B,KAAOlG,QAAQnD,GAE3B,MACJ,IAAK,cACD,YAAIA,EACA,OAAOuB,KAAKqB,YAGZrB,KAAK+G,kBAAkBgB,aACvBzF,EAAMnB,WAAW1C,GACjBmJ,EAAM5H,KAAK+G,OAAOiB,SAGb1F,GAFC,GAEaA,GAAKsF,IAChB5H,KAAKgH,OACLhH,KAAKqB,YAAciB,GAEnBtC,KAAKc,OACLd,KAAKY,MAAM0B,MAInBtC,KAAKqB,YAAc,EAGvB,MACJ,IAAK,WACD,OAAQrB,KAAK+G,kBAAkBgB,YAAe/H,KAAK+G,OAAOiB,SAAW,EACzE,IAAK,aACD,OAAQhI,KAAK+G,kBAAkBgB,YAAe/H,KAAK+G,OAAOhE,WAAa/C,KAAK+C,WAChF,IAAK,WACD,OAAQ/C,KAAK+G,kBAAkBgB,YAAe/H,KAAK+G,OAAOkB,iBAAmB,GAMzF,OAAOjI,mCASLkI,GAAa,IAAAC,EAAAnI,KAgBf,OAfIkI,aAAuBE,cAUvBpI,KAAKF,QAAQuI,gBAAgBH,EATL,SAAAnB,GACpBoB,EAAKpB,OAASA,EAEdoB,EAAK5E,SAAS3C,MAAM,gBAAiBmG,GACrCoB,EAAK5E,SAAS3C,MAAM,gBAAiBmG,GAErCoB,EAAKlB,UAAUE,MAAMJ,IAGkC/G,KAAKiH,UAAUK,OAE1EtH,KAAKiH,UAAUC,OAAOgB,IAGnBlI,mCAWLsI,EAAUpC,EAAUqC,GAAiB,IAAAC,EAAAxI,KACvC,GAAKA,KAAK+G,kBAAkBgB,aAAgB/H,KAAKgH,OAAQ,CACrD,IAAM9F,EAAYlB,KAAKF,QAAQuB,YAEzBoH,EAAMtH,WAAWmH,GAEvBtI,KAAKqB,YAAgBoH,GAAO,GAAOA,GAAOzI,KAAK+G,OAAOiB,SAAaS,EAAM,EAEzE,IAAMZ,EAAe7H,KAAKiG,OAAO4B,aAAapJ,MACxCqJ,EAAe9H,KAAKiG,OAAO6B,KAEjC9H,KAAKiG,OAASjG,KAAKF,QAAQgH,qBAG3B9G,KAAKiG,OAAOrF,MAAQZ,KAAKiG,OAAOrF,OAASZ,KAAKiG,OAAOyC,YACrD1I,KAAKiG,OAAOnF,KAAQd,KAAKiG,OAAOnF,MAASd,KAAKiG,OAAOlF,QAErDf,KAAKiG,OAAOc,OAAqB/G,KAAK+G,OACtC/G,KAAKiG,OAAO4B,aAAapJ,MAAQoJ,EACjC7H,KAAKiG,OAAO6B,KAAqBA,EAGjC9H,KAAKiG,OAAOpE,QAAQ7B,KAAKU,WACzBV,KAAK6B,QAAQ7B,KAAKU,UAAWwF,GAE7BlG,KAAKiG,OAAOrF,MAAMM,EAAWuH,EAAMzI,KAAK+G,OAAOiB,SAAWS,GAE1DzI,KAAKuD,SAAS3C,MAAM,QACpBZ,KAAKuD,SAAS3C,MAAM,OAEpBZ,KAAKgH,UAELhH,KAAK2I,GAAGzH,GAERlB,KAAKiH,UAAUrG,MAAMZ,KAAKiG,OAAQjG,KAAKqB,aAEvC,IAAMtB,EAAaC,KAAKU,UAAUX,WAEsB,sBAApD7B,OAAOmB,UAAUoH,SAAS9I,KAAK4K,GAC/BvI,KAAKU,UAAUkI,eAAiBL,EAEhCvI,KAAKU,UAAUkI,eAAiB,SAAAC,GAC5B,IAAMC,EAAWD,EAAME,YAAYC,eAAe,GAC5CC,EAAWJ,EAAME,YAAYC,eAAe,GAC5CE,EAAWL,EAAMM,aAAaH,eAAe,GAC7CI,EAAWP,EAAMM,aAAaH,eAAe,GAEnD,GAAIR,EAAKnH,YAAcgI,KAAKC,MAAMd,EAAKvC,OAAOc,OAAOiB,UAAW,CAC5D,IAAK,IAAIxK,EAAI,EAAGA,EAAIuC,EAAYvC,IAC5B0L,EAAS1L,GAAKgL,EAAKjB,cAAc3G,MAAMkI,EAAQtL,GAAIyL,EAAQzL,IAC3D4L,EAAS5L,GAAKgL,EAAKjB,cAAc3G,MAAMqI,EAAQzL,GAAIsL,EAAQtL,IAE3DgL,EAAKnH,aAAiB,EAAImH,EAAKvC,OAAO4B,aAAapJ,MAAS+J,EAAKvC,OAAOc,OAAOhE,WAEjEsG,KAAKC,MAAMd,EAAKnH,YAAcmH,EAAKvC,OAAOc,OAAOhE,aAC9C,GAAQyF,EAAKvC,OAAOc,OAAOhE,aAGjB,GACvByF,EAAKvB,UAAUG,OAAOoB,EAAKvC,OAAQuC,EAAKnH,aAIhDmH,EAAKjF,SAASgG,cAAcnC,OAAOoB,EAAKnH,aACxCmH,EAAKjF,SAASiG,cAAcpC,OAAOoB,EAAKnH,kBAEpCmH,EAAKvC,OAAO6B,KACZU,EAAKnH,YAAc,EAEnBmH,EAAKiB,OAOzB,OAAOzJ,oCASP,GAAKA,KAAK+G,kBAAkBgB,cAAiB/H,KAAKgH,OAAQ,CACtD,IAAM1F,EAAWtB,KAAKF,QAAQuB,YAE9BrB,KAAKiG,OAAOnF,KAAKQ,GAEjBtB,KAAK0J,IAAIpI,GAETtB,KAAKuD,SAASzC,KAAK,QACnBd,KAAKuD,SAASzC,KAAK,OAKnBd,KAAKU,UAAU2F,WAAW,GAC1BrG,KAAKU,UAAUkI,eAAiB,KAEhC5I,KAAKgH,UACLhH,KAAKiH,UAAUnG,KAAKd,KAAKiG,OAAQjG,KAAKqB,aAG1C,OAAOrB,mCASP,OAAOA,KAAKiG,sCAUTqC,EAAUpC,EAAUqC,GAOvB,OANIvI,KAAKgH,OACLhH,KAAKY,MAAM0H,EAAUpC,EAAUqC,GAE/BvI,KAAKc,OAGFd,mCAYP,OAJAA,KAAKc,OACLd,KAAKqB,YAAc,EACnBrB,KAAKiH,UAAUI,MAAMrH,KAAKiG,OAAQjG,KAAKqB,aAEhCrB,wCAQP,OAAOA,KAAK+G,kBAAkBgB,+CAQ9B,OAAQ/H,KAAKiG,kBAAkB0D,uBAA2B3J,KAAKiG,OAAOc,kBAAkBgB,+CAQxF,OAAO/H,KAAKgH,wCAKZ,IAAMhF,wFASN,OAPAA,EAAO4H,OACHC,aAAkB7J,KAAK8J,WAAa9J,KAAKiG,OAAO4B,aAAapJ,MAAQ,EACrE8I,eACIhH,MAAUP,KAAKuH,cAAcI,MAAM,WAIpC3F,qCAKP,MAAO,oBAAAvC,EAzWMiH,GAyWNjH,EAAAP,QAzWMwH,wkBCXrBzI,GAAAT,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqBuM,cAQjB,SAAAA,EAAYjK,iGAASE,KAAA+J,GAAA,IAAApD,oKAAA3G,MAAA+J,EAAAnD,WAAA1I,OAAA2I,eAAAkD,IAAApM,KAAAqC,KACXF,IADW,OAGjB6G,EAAKqD,WACLrD,EAAKsD,aACLtD,EAAKuD,WACLvD,EAAKwD,WACLxD,EAAKyD,WAGLzD,EAAK0D,YAGL1D,EAAK2D,OACD1J,MAAU,EACVE,KAAU,GAGd6F,EAAK4D,UAAY,EAEjB5D,EAAK1F,UAGL0F,EAAK6D,cAvBY7D,iXAqCfsD,EAAWI,EAAUI,EAASC,EAAiBC,EAAeC,GAAkB,IAAAzC,EAAAnI,KAElF,GAAqD,oBAAjD9B,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAA2B,CACpE,IAAMoD,EAAapD,UAAU,GAEzB,cAAeoD,IACfZ,EAAYY,EAAWZ,WAGvB,aAAcY,IACdR,EAAWQ,EAAWR,UAGtB,YAAaQ,IACbJ,EAAUI,EAAWJ,SAGrB,YAAaI,IACbH,EAAkBG,EAAWC,SAG7B,UAAWD,IACXF,EAAgBE,EAAWvD,OAG3B,aAAcuD,IACdD,EAAmBC,EAAWE,UAIjC5E,MAAMC,QAAQ6D,KACfA,GAAaA,IAGjBjK,KAAKiK,UAAYA,EAEZ9D,MAAMC,QAAQiE,KACfA,GAAYA,IAGhBrK,KAAKkK,QAAQxK,OAASuK,EAAUvK,OAEhC,IAAK,IAAIlC,EAAI,EAAG8I,EAAM+D,EAAS3K,OAAQlC,EAAI8I,EAAK9I,IAAK,CACjD,KAAI,WAAY6M,EAAS7M,IASrB,OAAOwC,KARR,IAAM+G,EAAS7D,SAASmH,EAAS7M,GAAGuJ,OAAQ,IAE3C,KAAKA,GAAU,GAAOA,EAAS/G,KAAKkK,QAAQxK,QAGxC,OAAOM,KAFPqK,EAAS7M,GAAGuJ,OAASA,EAQ7BsD,EAAS7M,GAAGgD,KAAW,SAAU6J,EAAS7M,IAAQ6M,EAAS7M,GAAGgD,MAAQ,EAAMW,WAAWkJ,EAAS7M,GAAGgD,MAAQ,EAC3G6J,EAAS7M,GAAGsK,KAAU,SAAUuC,EAAS7M,IAAMoE,QAAQyI,EAAS7M,GAAGsK,MACnEuC,EAAS7M,GAAGoD,MAAW,UAAWyJ,EAAS7M,IAAQ6M,EAAS7M,GAAGoD,OAAS,EAAMO,WAAWkJ,EAAS7M,GAAGoD,OAAS,EAC9GyJ,EAAS7M,GAAGiM,IAAW,QAASY,EAAS7M,IAAQ6M,EAAS7M,GAAGiM,KAAO,EAAMtI,WAAWkJ,EAAS7M,GAAGiM,KAAO,EACxGY,EAAS7M,GAAGwN,OAAW,WAAYX,EAAS7M,IAAQ6M,EAAS7M,GAAGwN,QAAS,GAAOX,EAAS7M,GAAGwN,QAAU,EAAM7J,WAAWkJ,EAAS7M,GAAGwN,QAAU,EAE7IhL,KAAKoK,QAAQ5M,MACbwC,KAAKmK,QAAQ3M,GAAKwC,KAAKF,QAAQK,aAC/BH,KAAK6F,kBAAkBoF,aAAazN,GAGxCwC,KAAKqK,SAAWA,EA6EhB,IAzEA,IAAIa,KAEExM,EAAIwE,SAASuH,EAAS,IAGtBU,EAAO,SAACC,EAAKC,GACf,IAAMC,EAAM,IAAIC,eAEhBD,EAAIb,QAAW/L,EAAI,EAAKA,EAAI,IAE5B4M,EAAIE,UAAY,SAAAlE,GACP4D,GAA8D,sBAAlDhN,OAAOmB,UAAUoH,SAAS9I,KAAKgN,IAC5CA,EAAcrD,EAAOyC,EAAc0B,oBAGvCP,MAGJI,EAAII,WAAa,SAAA7C,GACTqC,EACAI,EAAIK,QACwD,sBAArDzN,OAAOmB,UAAUoH,SAAS9I,KAAKiN,IACtCA,EAAiB/B,IAIzByC,EAAIM,QAAU,SAAA/C,GACLqC,GAA8D,sBAAlDhN,OAAOmB,UAAUoH,SAAS9I,KAAKgN,IAC5CA,EAAc9B,EAAOkB,EAAc8B,YAGvCX,MAIJI,EAAIQ,OAAS,SAAAjD,GACT,GAAmB,MAAfyC,EAAIS,OAAgB,CACpB,IAAM7D,EAAcoD,EAAIU,SAExB,KAAM9D,aAAuBE,aACzB,OAwBJD,EAAKrI,QAAQuI,gBAAgBH,EArBC,SAAA+D,GAC1B9D,EAAK+B,QAAQmB,GAASY,EADmB,IAAAC,KAAAC,KAAAC,SAAA,IAIzC,QAAAC,EAAAC,EAAqBnE,EAAK+B,QAA1B3L,OAAAgO,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,KACI,YAD+BG,EAAA5N,MAE3B,OANiC,MAAAiO,GAAAP,KAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAUe,sBAApDlO,OAAOmB,UAAUoH,SAAS9I,KAAK+M,IAC/BA,EAAgB7B,EAAOV,EAAK+B,UAIR,SAAA5C,GAC8B,sBAAlDpJ,OAAOmB,UAAUoH,SAAS9I,KAAKgN,IAC/BA,EAAcrD,EAAOyC,EAAc6C,kBAQnDtB,EAAIuB,KAAK,MAAOzB,MAChBE,EAAIwB,aAAe,cACnBxB,EAAIyB,KAAK,OAGJvP,EAAI,EAAG8I,EAAMtG,KAAKiK,UAAUvK,OAAQlC,EAAI8I,EAAK9I,IACjB,iBAAtBwC,KAAKiK,UAAUzM,GAEtB2N,EAAKnL,KAAKiK,UAAUzM,GAAIA,GACjBwC,KAAKiK,UAAUzM,aAAcuK,cAEpC/H,KAAKkK,QAAQ1M,GAAKwC,KAAKiK,UAAUzM,IAIzC,OAAOwC,mCAWLjB,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAElCrD,sFAAgB2D,EAAGxD,GAEzB,YAAIH,EACA,OAAOA,EAGX,IAAIgE,EAAI,KAER,OAAQL,GACJ,IAAK,YACD,YAAIxD,EACA,OAAOuB,KAAKuK,WAGhBjI,EAAInB,WAAW1C,IAEP,IACJuB,KAAKuK,UAAYjI,IASjC,OAAOtC,mCAULkB,EAAWI,GACb,IAAM0L,EAAK7L,WAAWD,GAChB+L,EAAK9L,WAAWG,GAOtB,OALAtB,KAAKsK,MAAM1J,MAASoM,GAAO,EAAKA,EAAK,EACrChN,KAAKsK,MAAMxJ,KAASmM,GAAMD,EAAMC,EAAK,EAErCjN,KAAK6F,kBAAkBqH,UAEhBlN,mCAWLqL,EAAOnF,EAAUqC,GAAiB,IAAAC,EAAAxI,KAC9BmN,EAAgBjK,SAASmI,EAAO,IAEtC,GAAIjK,MAAM+L,IAAmBA,EAAgB,GAAOA,GAAiBnN,KAAKqK,SAAS3K,OAC/E,OAAOM,KAGX,IAAMoN,EAAepN,KAAKqK,SAAS8C,GAAepG,OAC5Cc,EAAe7H,KAAKqK,SAAS8C,GAAe3M,KAC5CsH,EAAe9H,KAAKqK,SAAS8C,GAAerF,KAC5CuF,EAAerN,KAAKqK,SAAS8C,GAAevM,MAC5C0M,EAAetN,KAAKqK,SAAS8C,GAAe1D,IAC5CuB,EAAehL,KAAKqK,SAAS8C,GAAenC,OAElD,KAAMhL,KAAKkK,QAAQkD,aAAwBrF,aAEvC,OAAO/H,KAIPA,KAAKgK,QAAQmD,aAA0BxD,wBACvC3J,KAAKgK,QAAQmD,GAAerM,KAAKd,KAAKF,QAAQuB,aAC9CrB,KAAKgK,QAAQmD,GAAe9G,WAAW,GACvCrG,KAAKgK,QAAQmD,GAAiB,MAGlC,IAAMlH,EAASjG,KAAKF,QAAQgH,qBAG5Bb,EAAOrF,MAAQqF,EAAOrF,OAASqF,EAAOyC,YACtCzC,EAAOnF,KAAQmF,EAAOnF,MAASmF,EAAOlF,QAEtCkF,EAAOc,OAAS/G,KAAKkK,QAAQkD,GAG7BnH,EAAO4B,aAAapJ,MAAQoJ,EAAe7H,KAAKuK,UAChDtE,EAAO6B,KAAqBA,EAC5B7B,EAAOoH,UAAqBA,EAC5BpH,EAAOqH,QAAqBA,EAE5BtN,KAAKmK,QAAQgD,GAAenH,KAAKvH,MAAQuM,EAEzChL,KAAK6F,kBAAkBqH,UAGvBlN,KAAK6F,kBAAkBsB,MAAMgG,EAAelH,EAAQjG,KAAKmK,QAAQgD,IACjEnN,KAAKmK,QAAQgD,GAAetL,QAAQ7B,KAAKU,WACzCV,KAAK6B,QAAQ7B,KAAKU,UAAWwF,GAE7B,IAAMhF,EAAYlB,KAAKF,QAAQuB,YAAcrB,KAAKsK,MAAM1J,MA+DxD,OA7DAqF,EAAOrF,MAAMM,GAEblB,KAAKgK,QAAQmD,GAAiBlH,EAG9BjG,KAAK6F,kBAAkBjF,MAAMM,GAE7BlB,KAAK2I,GAAGzH,GAEHlB,KAAKwK,aACNxK,KAAKuD,SAAS3C,MAAM,QACpBZ,KAAKuD,SAAS3C,MAAM,OACpBZ,KAAKwK,eAGTxK,KAAKoK,QAAQ+C,MAGTnN,KAAKsK,MAAMxJ,KAAO,GAClByM,OAAOC,WAAW,WACdhF,EAAK1H,KAAKqM,IACQ,IAAlBnN,KAAKsK,MAAMxJ,MAInBmF,EAAOwH,QAAU,WACbjF,EAAK4B,QAAQ+C,OAGuC,sBAApDjP,OAAOmB,UAAUoH,SAAS9I,KAAK4K,GAC/BvI,KAAKU,UAAUkI,eAAiBL,EAEhCvI,KAAKU,UAAUkI,eAAiB,SAAAC,GAG5B,GAFAL,EAAKvH,OAASuH,EAAK4B,QAAQsD,MAAM,SAAAC,GAAA,OAAWA,IAExCnF,EAAKvH,OAGLuH,EAAKkB,IAAIlB,EAAK1I,QAAQuB,aAEtBmH,EAAK3C,kBAAkBqH,UAEvB1E,EAAKjF,SAASzC,KAAK,QACnB0H,EAAKjF,SAASzC,KAAK,OACnB0H,EAAKgC,cAGLhC,EAAK9H,UAAU2F,WAAW,GAC1BmC,EAAK9H,UAAUkI,eAAiB,SAC7B,CACH,IAAME,EAAWD,EAAME,YAAYC,eAAe,GAC5CC,EAAWJ,EAAME,YAAYC,eAAe,GAC5CE,EAAWL,EAAMM,aAAaH,eAAe,GAC7CI,EAAWP,EAAMM,aAAaH,eAAe,GAEnDE,EAAS0E,IAAI9E,GACbM,EAASwE,IAAI3E,KAKlBjJ,kCASNqL,GACD,IAAM8B,EAAgBjK,SAASmI,EAAO,IAEtC,GAAIjK,MAAM+L,IAAmBA,EAAgB,GAAOA,GAAiBnN,KAAKqK,SAAS3K,OAC/E,OAAOM,KAGX,IAAMoN,EAAapN,KAAKqK,SAAS8C,GAAepG,OAEhD,KAAO/G,KAAKkK,QAAQkD,aAAwBrF,aAAiB/H,KAAKgK,QAAQmD,aAA0BxD,uBAChG,OAAO3J,KAGX,IAAMsB,EAAWtB,KAAKF,QAAQuB,YAAcrB,KAAKsK,MAAMxJ,KAOvD,OAJAd,KAAK6F,kBAAkB/E,KAAKQ,GAE5BtB,KAAKqE,OAAOvD,KAAKQ,GAEVtB,iCASPqL,GACA,IAAM7N,EAAI0F,SAASmI,EAAO,IAE1B,OAAS7N,GAAK,GAAOA,EAAIwC,KAAKkK,QAAQxK,OAAWM,KAAKkK,QAAQ1M,GAAKwC,KAAKkK,yCAKxE,IAAMlI,wFAMN,OAJAA,EAAO6L,SACHtD,UAAcvK,KAAKuK,WAGhBvI,gCAULqJ,EAAOtM,EAAKN,GACd,IAAM0O,EAAgBjK,SAASmI,EAAO,IAMtC,OAJI3J,OAAO3C,GAAK4C,gBAAiB3B,KAAKqK,SAAS8C,KAC3CnN,KAAKqK,SAAS8C,GAAepO,EAAI4C,eAAiBlD,GAG/CuB,wCAKP,MAAO,sBAAAP,EA5cMsK,KACV8B,WAAqB,QADX9B,EAEV0B,mBAAqB,UAFX1B,EAGV6C,aAAqB,SAAAnN,EAAAP,QAHX6K,0kBCPrB3M,EAAA,IAAA8E,EAAAC,EACA/E,EAAA,KAAAa,EAAAkE,EACA/E,EAAA,cAAA+E,EAAAzD,GAAA,OAAAA,KAAAE,WAAAF,GAAAQ,QAAAR,GAAA,IASqBoP,cAIjB,SAAAA,EAAYhO,iGAASE,KAAA8N,GAAA,IAAAnH,oKAAA3G,MAAA8N,EAAAlH,WAAA1I,OAAA2I,eAAAiH,IAAAnQ,KAAAqC,KACXF,IADW,OAIjB6G,EAAKqD,WAGLrD,EAAK2D,OACD1J,MAAU,EACVE,KAAU,GAId6F,EAAK6D,cAEL7D,EAAKoH,MAAQ,IAAAC,EAAA9O,QAAUY,GAfN6G,iXAwBfsH,GAEFjO,KAAKgK,QAAQtK,OAAS,EAEjByG,MAAMC,QAAQ6H,KACfA,GAAUA,IAGd,IAAK,IAAIzQ,EAAI,EAAG8I,EAAM2H,EAAOvO,OAASlC,EAAI8I,EAAK9I,IAC3CwC,KAAKgK,QAAQxM,GAAK,IAAA0Q,EAAAhP,QAAec,KAAKF,QAAS8B,QAAQqM,EAAOzQ,KAC9DwC,KAAK6F,kBAAkBoF,aAAazN,GAGxC,OAAOwC,mCAWLjB,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAKtC,CACH,IAAMxF,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAElCrD,sFAAgB2D,EAAGxD,GAEzB,gBAAQH,EAAmB0B,KAAO1B,EARlC,IAAK,IAAM2D,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,kCAkBjCf,EAAWI,GACb,IAAM0L,EAAK7L,WAAWD,GAChB+L,EAAK9L,WAAWG,GAOtB,OALAtB,KAAKsK,MAAM1J,MAASoM,GAAO,EAAKA,EAAK,EACrChN,KAAKsK,MAAMxJ,KAASmM,GAAMD,EAAMC,EAAK,EAErCjN,KAAK6F,kBAAkBqH,UAEhBlN,mCAWLmO,EAAajI,EAAUqC,GAAiB,IAAAJ,EAAAnI,KACpCkB,EAAYlB,KAAKF,QAAQuB,YAAcrB,KAAKsK,MAAM1J,MAGnDuF,MAAMC,QAAQ+H,KACfA,GAAeA,IAGnB,IAAK,IAAI3Q,EAAI,EAAG8I,EAAM6H,EAAYzO,OAAQlC,EAAI8I,EAAK9I,IAAK,CACpD,IAAM4E,EAAIjB,WAAWgN,EAAY3Q,IACjC2Q,EAAY3Q,GAAM4E,GAAK,EAAKA,EAAI,EAIpCpC,KAAK6F,kBAAkBqH,UACvBlN,KAAKU,UAAU2F,WAAW,GAC1BrG,KAAKU,UAAUkI,eAAiB,KAGhC5I,KAAK6B,QAAQ7B,KAAKU,UAAWwF,GAE7B,IAAK,IAAI1I,EAAI,EAAG8I,EAAM6H,EAAYzO,OAAQlC,EAAI8I,KACtC9I,GAAKwC,KAAKgK,QAAQtK,QADyBlC,IAAK,CAKpD,IAAM4Q,EAAapO,KAAKgK,QAAQxM,GAC1BiD,EAAa0N,EAAY3Q,GAG/B4Q,EAAWjH,MAAMnH,KAAKU,WAGtBV,KAAK6F,kBAAkBsB,MAAM3J,EAAG4Q,EAAWnI,OAAQmI,EAAWpD,QAE9DhL,KAAK+N,MAAM5G,MAAM1G,GAAWG,MAAMwN,EAAWnI,OAAQ/E,GAErDkN,EAAWxN,MAAMM,GAgDrB,OA5CAlB,KAAK6F,kBAAkBjF,MAAMM,GAE7BlB,KAAK2I,GAAGzH,GAEHlB,KAAKwK,aACNxK,KAAKuD,SAAS3C,MAAM,QACpBZ,KAAKuD,SAAS3C,MAAM,OACpBZ,KAAKwK,eAG+C,sBAApDtM,OAAOmB,UAAUoH,SAAS9I,KAAK4K,GAC/BvI,KAAKU,UAAUkI,eAAiBL,EAEhCvI,KAAKU,UAAUkI,eAAiB,SAAAC,GAC5B,IAAMC,EAAWD,EAAME,YAAYC,eAAe,GAC5CC,EAAWJ,EAAME,YAAYC,eAAe,GAC5CE,EAAWL,EAAMM,aAAaH,eAAe,GAC7CI,EAAWP,EAAMM,aAAaH,eAAe,GAGnD,GAAIb,EAAKtC,kBAAkB5E,SAAU,CAEjC,IAAMK,EAAW6G,EAAKrI,QAAQuB,YAFG6K,KAAAC,KAAAC,SAAA,IAIjC,QAAAC,EAAAC,EAAqBnE,EAAK6B,QAA1BzL,OAAAgO,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,KAAmCG,EAAA5N,MACxBqC,KAAKQ,GALiB,MAAAoL,GAAAP,KAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAQjCjE,EAAKuB,IAAIpI,GAET6G,EAAK5E,SAASzC,KAAK,QACnBqH,EAAK5E,SAASzC,KAAK,OACnBqH,EAAKqC,cAGLrC,EAAKzH,UAAU2F,WAAW,GAC1B8B,EAAKzH,UAAUkI,eAAiB,UAEhCM,EAAS0E,IAAI9E,GACbM,EAASwE,IAAI3E,IAKlBjJ,oCASP,IAAMsB,EAAWtB,KAAKF,QAAQuB,YAAcrB,KAAKsK,MAAMxJ,KAQvD,OALAd,KAAK6F,kBAAkB/E,KAAKQ,GAE5BtB,KAAK+N,MAAMjN,OACXd,KAAKqE,OAAOvD,KAAKQ,GAEVtB,iCASPqL,GACA,IAAM7N,EAAI0F,SAASmI,EAAO,IAE1B,OAAS7N,GAAK,GAAOA,EAAIwC,KAAKgK,QAAQtK,OAAWM,KAAKgK,QAAQxM,GAAKwC,KAAKgK,yCAQxE,OAAOhK,KAAKgK,QAAQtK,wCAKpB,IAAMsC,wFAENA,EAAOoM,YACHL,OACIvM,KAASxB,KAAK+N,MAAMpG,MAAM,QAC1B0G,KAASrO,KAAK+N,MAAMpG,MAAM,UAIlC,IAAK,IAAInK,EAAI,EAAG8I,EAAMtG,KAAKgK,QAAQtK,OAAQlC,EAAI8I,EAAK9I,IAAK,CACrD,IAAMyI,EAASjG,KAAKgK,QAAQxM,GAE5BwE,EAAOoM,WAAP,aAA+B5Q,IAC3BiE,MAAWwE,EAAOxE,QAClBuE,KAAWC,EAAO0B,MAAM,QACxBnG,KAAWyE,EAAO0B,MAAM,QACxB2G,OAAWrI,EAAO0B,MAAM,UACxB4G,KAAWtI,EAAO0B,MAAM,SAIhC,OAAO3F,qCAKP,MAAO,yBAAAvC,EAvPMqO,GAuPNrO,EAAAP,QAvPM4O,0UCPAU,aAcjB,SAAAA,EAAYzL,iGAAY/C,KAAAwO,GACpBxO,KAAK+C,WAAaA,EAElB/C,KAAKC,YAGLD,KAAKyO,SAAW,GAGhBzO,KAAK0O,OAAU,KACf1O,KAAKF,QAAU,KAGfE,KAAK2O,IAAM,KAGX3O,KAAK4O,SAAW,IAChB5O,KAAK6O,QAAW,KAEhB7O,KAAK8O,QACDC,MAAW,OACXC,OAEQC,OAAW,EACXC,MAAW,2BAGXD,OAAW,EACXC,MAAW,yBAGnBC,KAAW,uBACXC,KAAW,uBACXC,KAAW,2BACXC,MACIC,OAAW,QACXC,KAAW,OACXC,MAAW,SACXC,OAAW,UAEfC,MAAW,IACXC,IAAW,QACXC,KAAW,QACXC,IAAW,GACXC,MAAW,GACXC,OAAW,GACXC,KAAW,WAAAzS,EAAAkB,IAAAK,IAAA,QAAAN,MAAA,SASbkP,GAaF,OAZIA,aAAmBuC,mBACnBlQ,KAAKyO,SAAWD,EAAW2B,OAC3BnQ,KAAK0O,OAAWf,EAChB3N,KAAKF,QAAWE,KAAK0O,OAAO0B,WAAW,OAChCzC,aAAmB0C,aAC1BrQ,KAAKyO,SAAWD,EAAW8B,IAC3BtQ,KAAK2O,IAAWhB,EAEhB3N,KAAK2O,IAAI4B,aAAa,QAAe/B,EAAWgC,OAChDxQ,KAAK2O,IAAI4B,aAAa,cAAe/B,EAAWiC,QAG7CzQ,mCAULjB,EAAKN,GACP,IAAMwD,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAI,KAER,OAAQL,GACJ,IAAK,WACD,YAAIxD,EACA,OAAOuB,KAAK4O,SAGoB,SAAhClN,OAAOjD,GAAOkD,cACd3B,KAAK4O,SAAW,QAEhBtM,EAAInB,WAAW1C,KAEN,IACLuB,KAAK4O,SAAWtM,GAIxB,MACJ,IAAK,QACD,YAAI7D,EACA,OAAOuB,KAAK8O,OAAOC,MAKZ,UAFXzM,EAAIZ,OAAOjD,GAAOkD,gBAEW,SAANW,IACnBtC,KAAK8O,OAAOC,MAA8B,aAArB/O,KAAK8O,OAAOK,KAAuB7M,EAAI,QAGhE,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAK8O,OAAOE,KAGlB7I,MAAMC,QAAQ3H,KACfA,GAASA,IAGb,IAAIyM,KATRgB,KAAAC,KAAAC,SAAA,IAWI,QAAAC,EAAAC,EAAoB7N,EAApBF,OAAAgO,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,KAA2B,KAAhBwE,EAAgBrE,EAAA5N,MACvB,KAAK,WAAYiS,GAAW,UAAWA,GAOhC,CACHxF,KACA,MARA,IAAM+D,EAAS9N,WAAWuP,EAAMzB,QAEhC,GAAI7N,MAAM6N,IAAYA,EAAS,GAAOA,EAAS,EAAI,CAC/C/D,KACA,QAjBhB,MAAAwB,GAAAP,KAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAyBSlB,IACDlL,KAAK8O,OAAOE,KAAOvQ,GAGvB,MACJ,IAAK,OACD,YAAIA,EACA,OAAOuB,KAAK8O,OAAO7M,GAGvB,GAA8C,oBAA1C/D,OAAOmB,UAAUoH,SAAS9I,KAAKc,GAC/B,IAAK,IAAMkS,KAAQlS,EACX,4BAA4B0E,KAAKwN,KACjC3Q,KAAK8O,OAAOQ,KAAKqB,GAAQjP,OAAOjD,EAAMkS,KAKlD,MACJ,IAAK,OACL,IAAK,OACL,IAAK,OACL,IAAK,MACL,IAAK,OACD,YAAIlS,EACA,OAAOuB,KAAK8O,OAAO7M,GAGF,iBAAVxD,IACI,SAANwD,GAA4B,aAAVxD,IACnBuB,KAAK8O,OAAOC,MAAQ,QAGxB/O,KAAK8O,OAAO7M,GAAKxD,EAAMkD,eAG3B,MACJ,IAAK,QACL,IAAK,MACL,IAAK,QACL,IAAK,SACL,IAAK,OACD,YAAIlD,EACA,OAAOuB,KAAK8O,OAAO7M,IAGvBK,EAAW,UAANL,EAAiBd,WAAW1C,GAASyE,SAASzE,EAAO,MAEjD,IACLuB,KAAK8O,OAAO7M,GAAKK,kCAgB3BsO,EAAMC,EAAaC,GACrB,OAAQ9Q,KAAKyO,UACT,KAAKD,EAAW2B,OACZnQ,KAAK+Q,aAAaH,EAAMC,EAAaC,GACrC,MACJ,KAAKtC,EAAW8B,IACZtQ,KAAKgR,UAAUJ,EAAMC,EAAaC,GAM1C,OAAO9Q,sCAQP,OAAQA,KAAKyO,UACT,KAAKD,EAAW2B,OACZ,OAAOnQ,KAAK0O,OAAOuC,UAAU,aAAalL,QAAQ,YAAa,sBACnE,KAAKyI,EAAW8B,IACZ,OAAOtQ,KAAK2O,IAAIuC,UACpB,QACI,OAAOlR,oCAWbyB,GACF,gBAAIA,EACOzB,KAAKC,UAGoB,WAAhCyB,OAAOD,GAAOE,cACd3B,KAAKC,UAAYD,KAAKC,SAEtBD,KAAKC,SAAW2B,QAAQH,GAGrBzB,iEAYwBF,EAAS8Q,EAAMO,EAAYC,EAAaC,EAAQC,GAC/E,KAAMxR,aAAmByR,0BACrB,OAAOvR,KAGX,KAAM4Q,aAAgBY,cAClB,OAAOxR,KAGX,IAAI0C,EAAIQ,SAASiO,EAAY,IACzB9O,EAAIa,SAASkO,EAAa,IAC1BxT,EAAIsF,SAASmO,EAAQ,IAOzB,OALIjQ,MAAMsB,KAAKA,EAAI,GACftB,MAAMiB,KAAKA,EAAI,GACfjB,MAAMxD,KAAKA,EAAI,GAGXoC,KAAK8O,OAAOC,OAChB,IAAK,OAEDjP,EAAQ2R,YAAczR,KAAK8O,OAAOK,KAClCrP,EAAQ4R,UAAc1R,KAAK8O,OAAOa,MAClC7P,EAAQ6R,QAAc3R,KAAK8O,OAAOc,IAClC9P,EAAQ8R,SAAc5R,KAAK8O,OAAOe,KAGlC/P,EAAQ+R,YAER,IAAK,IAAIrU,EAAI,EAAG8I,EAAMsK,EAAKlR,OAAQlC,EAAI8I,EAAK9I,IACxC,GAAuB,OAAlB8T,YAA4BA,GAAkC9T,EAAI8T,GAAmB,EAAI,CAC1F,IAAMQ,EAAIzI,KAAKC,MAAO9L,EAAI8I,EAAO5D,GAAK1C,KAAK8O,OAAOmB,KAC5C1N,EAAI8G,KAAKC,OAAO,EAAIsH,EAAKpT,KAAO6E,EAAI,IAAMrC,KAAK8O,OAAOgB,IAElD,IAANtS,EACAsC,EAAQiS,OAAQD,EAAK9R,KAAK8O,OAAOa,MAAQ,EAAMpN,GAE/CzC,EAAQkS,OAAOF,EAAGvP,GAK9BzC,EAAQmS,SAER,MACJ,IAAK,OAEwB,aAArBjS,KAAK8O,OAAOK,OACZrP,EAAQoS,UAAYlS,KAAK8O,OAAOK,MAIpC,IAAK,IAAI3R,EAAI,EAAG8I,EAAMsK,EAAKlR,OAAQlC,EAAI8I,EAAK9I,IACxC,GAAuB,OAAlB8T,YAA4BA,GAAkC9T,EAAI8T,GAAmB,EAAI,CAC1F,IAAMQ,EAAIzI,KAAKC,MAAO9L,EAAI8I,EAAO5D,GAAK1C,KAAK8O,OAAOmB,KAC5C1N,GAAK,EAAI8G,KAAKC,MAAMsH,EAAKpT,IAAM6E,EAAI,IAGzC,GAAyB,aAArBrC,KAAK8O,OAAOK,KAAqB,CACjC,IAAMgD,EAAYf,EAAc,EAAKpR,KAAK8O,OAAOgB,IAC3CsC,EAAWtS,EAAQuS,qBAAqB,EAAGF,EAAQ,EAAIA,EAAS5P,GAFrC+P,KAAAC,KAAAC,SAAA,IAIjC,QAAAC,EAAAC,EAAwB1S,KAAK8O,OAAOE,KAApCzQ,OAAAgO,cAAA+F,GAAAG,EAAAC,EAAAlG,QAAAC,MAAA6F,KAA0C,KAA/BK,EAA+BF,EAAAhU,MACtC2T,EAASQ,aAAaD,EAAU1D,OAAQ0D,EAAUzD,QALrB,MAAAxC,GAAA6F,KAAAC,EAAA9F,EAAA,aAAA4F,GAAAI,EAAA/F,QAAA+F,EAAA/F,SAAA,WAAA4F,EAAA,MAAAC,GAQjC1S,EAAQoS,UAAYE,EAGxBtS,EAAQ+S,SAASf,EAAGlU,EAAGoC,KAAK8O,OAAOa,MAAOpN,IAS1D,OAAOvC,6DAaqB4Q,EAAMO,EAAYC,EAAaC,EAAQC,EAAewB,GAClF,IAAIpQ,EAAIQ,SAASiO,EAAY,IACzB9O,EAAIa,SAASkO,EAAa,IAC1BxT,EAAIsF,SAASmO,EAAQ,IAMzB,OAJIjQ,MAAMsB,KAAKA,EAAI,GACftB,MAAMiB,KAAKA,EAAI,GACfjB,MAAMxD,KAAKA,EAAI,GAEXoC,KAAK8O,OAAOC,OAChB,IAAK,OAMD,IAJA,IAAMgE,EAAOC,SAASC,gBAAgBzE,EAAWgC,MAAO,QAEpD1S,EAAI,GAECN,EAAI,EAAG8I,EAAMsK,EAAKlR,OAAQlC,EAAI8I,EAAK9I,IACxC,GAAuB,OAAlB8T,YAA4BA,GAAkC9T,EAAI8T,GAAmB,EAAI,CAC1F,IAAMQ,EAAIzI,KAAKC,MAAO9L,EAAI8I,EAAO5D,GAAK1C,KAAK8O,OAAOmB,KAC5C1N,EAAI8G,KAAKC,OAAO,EAAIsH,EAAKpT,KAAO6E,EAAI,IAAMrC,KAAK8O,OAAOgB,IAGxDhS,GADM,IAANN,EACAM,KAASgU,EAAK9R,KAAK8O,OAAOa,MAAQ,GAAlC,IAAwCpN,EAExCzE,KAAUgU,EAAV,IAAevP,EAa3B,OARAwQ,EAAKxC,aAAa,IAAKzS,GAEvBiV,EAAKxC,aAAa,SAAmBvQ,KAAK8O,OAAOK,MACjD4D,EAAKxC,aAAa,OAAmB,QACrCwC,EAAKxC,aAAa,eAAmBvQ,KAAK8O,OAAOa,OACjDoD,EAAKxC,aAAa,iBAAmBvQ,KAAK8O,OAAOc,KACjDmD,EAAKxC,aAAa,kBAAmBvQ,KAAK8O,OAAOe,MAE1CkD,EACX,IAAK,OACD,IAAIG,EAAO,KAEc,aAArBlT,KAAK8O,OAAOK,OACZ+D,EAAOlT,KAAKmT,wBAAwBL,IAIxC,IAAMrQ,EAAIuQ,SAASC,gBAAgBzE,EAAWgC,MAAO,KAExC,OAAT0C,GACAzQ,EAAE2Q,YAAYF,GAGlB,IAAK,IAAI1V,EAAI,EAAG8I,EAAMsK,EAAKlR,OAAQlC,EAAI8I,EAAK9I,IACxC,GAAuB,OAAlB8T,YAA4BA,GAAkC9T,EAAI8T,GAAmB,EAAI,CAC1F,IAAM+B,EAAOL,SAASC,gBAAgBzE,EAAWgC,MAAO,QAElDsB,EAAIzI,KAAKC,MAAO9L,EAAI8I,EAAO5D,GAAK1C,KAAK8O,OAAOmB,KAC5C1N,EAAI8G,KAAKC,MAAMsH,EAAKpT,IAAM4T,EAAc,IAE9CiC,EAAK9C,aAAa,IAASuB,GAC3BuB,EAAK9C,aAAa,IAAS3S,GAC3ByV,EAAK9C,aAAa,QAASvQ,KAAK8O,OAAOa,OAEnCpN,EAAI,EACJ8Q,EAAK9C,aAAa,UAAWhO,IAE7B8Q,EAAK9C,aAAa,SAAahO,GAC/B8Q,EAAK9C,aAAa,YAAlB,eAA6CuB,EAAK9R,KAAK8O,OAAOa,MAAQ,GAAtE,IAA4E/R,EAA5E,MAGJyV,EAAK9C,aAAa,SAAU,QAC5B8C,EAAK9C,aAAa,OAAoB,OAAT2C,EAAiBlT,KAAK8O,OAAOK,KAA9B,QAA6C2D,EAA7C,KAE5BrQ,EAAE2Q,YAAYC,GAItB,OAAO5Q,EACX,QACI,OAAO,SAAA1D,IAAA,0BAAAN,MAAA,SASKqU,GACpB,IAAMI,EAAiBF,SAASC,gBAAgBzE,EAAWgC,MAAO,QAC5D8C,EAAiBN,SAASC,gBAAgBzE,EAAWgC,MAAO,kBAElE8C,EAAe/C,aAAa,KAAM7O,OAAOoR,IACzCQ,EAAe/C,aAAa,KAAM,MAClC+C,EAAe/C,aAAa,KAAM,MAClC+C,EAAe/C,aAAa,KAAM,MAClC+C,EAAe/C,aAAa,KAAM,QARI,IAAAgD,KAAAC,KAAAC,SAAA,IAUtC,QAAAC,EAAAC,EAAwB3T,KAAK8O,OAAOE,KAApCzQ,OAAAgO,cAAAgH,GAAAG,EAAAC,EAAAnH,QAAAC,MAAA8G,KAA0C,KAA/BZ,EAA+Be,EAAAjV,MAChCqC,EAAOkS,SAASC,gBAAgBzE,EAAWgC,MAAO,QAExD1P,EAAKyP,aAAa,SAAcoC,EAAU1D,QAC1CnO,EAAKyP,aAAa,aAAcoC,EAAUzD,OAE1CoE,EAAeF,YAAYtS,IAhBO,MAAA4L,GAAA8G,KAAAC,EAAA/G,EAAA,aAAA6G,GAAAI,EAAAhH,QAAAgH,EAAAhH,SAAA,WAAA6G,EAAA,MAAAC,GAqBtC,OAFAP,EAAKE,YAAYE,GAEVJ,6CAOQ,IAAAU,EACyB5T,KAAK8O,OAAOQ,KAEpD,OAHesE,EACPpE,KAER,IAHeoE,EACDnE,MAEd,IAHemE,EACMlE,OAErB,KAHekE,EACcrE,OAE7B,OAAAxQ,IAAA,eAAAN,MAAA,eAAAM,IAAA,YAAAN,MAAA,eAAAM,IAAA,WAAAN,MAAA,WAaA,MAAO,wCAAAC,EAnfM8P,KACV2B,OAAS,SADC3B,EAEV8B,IAAS,MAFC9B,EAIVgC,MAAQ,6BAJEhC,EAKViC,MAAQ,+BALEjC,EAOVqF,qCAAuC,oCAP7BrF,EAQVsF,4BAAuC,2BAR7BtF,EASVuF,2BAAuC,0BAAAtU,EAAAP,QAT7BsP,0kBCJrBpR,EAAA,IAAA8E,EAAAjE,EACAb,EAAA,cAAAa,EAAAS,GAAA,OAAAA,KAAAE,WAAAF,GAAAQ,QAAAR,GAAA,IAOqBsV,cAIjB,SAAAA,EAAYlU,iGAASE,KAAAgU,GAAA,IAAArN,oKAAA3G,MAAAgU,EAAApN,WAAA1I,OAAA2I,eAAAmN,IAAArW,KAAAqC,KACXF,IADW,OAIjB6G,EAAKV,OAAS,KAGdU,EAAKsN,aACDrK,SACAsK,UAGJvN,EAAKM,WACDkN,OAAW,aACX7M,MAAW,cAGfX,EAAKvG,UAELuG,EAAK1F,UAEL0F,EAAKyN,UAAY,IAAAC,EAAAnV,QArBAyH,iXAgCfsN,EAAaK,EAAgB3J,GAa/B,MAZoD,oBAAhDzM,OAAOmB,UAAUoH,SAAS9I,KAAKsW,KAC/BjU,KAAKiU,YAAcA,GAGgC,sBAAnD/V,OAAOmB,UAAUoH,SAAS9I,KAAK2W,KAC/BtU,KAAKiH,UAAUkN,OAASG,GAG0B,sBAAlDpW,OAAOmB,UAAUoH,SAAS9I,KAAKgN,KAC/B3K,KAAKiH,UAAUK,MAAQqD,GAGpB3K,mCAWLjB,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAElCrD,sFAAgB2D,EAAGxD,GAEzB,YAAIH,EACA,OAAOA,EAGX,OAAQ2D,GACJ,IAAK,SACD,YAAIxD,EACA,OAAOuB,KAAKI,OAGhBJ,KAAKI,OAASwB,QAAQnD,IAQlC,OAAOuB,qCAKP,OAAOA,mCAULkG,EAAUqC,GAAiB,IAAAJ,EAAAnI,KAC7B,IAAKiD,UAAUsR,eAAiBtR,UAAUsR,aAAaC,aACnD,MAAM,IAAIC,MAAM,sBAGpB,IAAM1U,EAAaC,KAAKU,UAAUX,WAE9ByK,KAEE5J,EAAQ,SAACuT,EAAQjO,EAAUqC,GAC7BJ,EAAKlC,OAASkC,EAAKrI,QAAQ4U,wBAAwBP,GAGnDhM,EAAKlC,OAAOpE,QAAQsG,EAAKzH,WACzByH,EAAKtG,QAAQsG,EAAKzH,UAAWwF,GAExBiC,EAAK/H,SACN+H,EAAK/E,aAAaiD,WAAW,GAG7B8B,EAAK/E,aAAavB,QAAQsG,EAAK5E,SAASrD,OAGxCiI,EAAK/E,aAAavB,QAAQsG,EAAK1E,SAAS/C,WACxCyH,EAAK1E,SAAS/C,UAAUmB,QAAQsG,EAAKrI,QAAQyG,aAG7C4B,EAAK/E,aAAavB,QAAQsG,EAAKxE,QAAQ6C,QACvC2B,EAAKxE,QAAQ6C,OAAO3E,QAAQsG,EAAKrI,QAAQyG,cAG7C4B,EAAKQ,GAAGR,EAAKrI,QAAQuB,aAEhBmJ,IACDrC,EAAK5E,SAAS3C,MAAM,QACpBuH,EAAK5E,SAAS3C,MAAM,OACpB4J,MAGoD,sBAApDtM,OAAOmB,UAAUoH,SAAS9I,KAAK4K,GAC/BJ,EAAKzH,UAAUkI,eAAiBL,EAEhCJ,EAAKzH,UAAUkI,eAAiB,SAAAC,GAM5B,IALA,IAAMC,EAAWD,EAAME,YAAYC,eAAe,GAC5CC,EAAWJ,EAAME,YAAYC,eAAe,GAC5CE,EAAWL,EAAMM,aAAaH,eAAe,GAC7CI,EAAWP,EAAMM,aAAaH,eAAe,GAE1CxL,EAAI,EAAGA,EAAIuC,EAAYvC,IAC5B0L,EAAS1L,GAAK2K,EAAKiM,UAAUxT,MAAMkI,EAAQtL,IAC3C4L,EAAS5L,GAAK2K,EAAKiM,UAAUxT,MAAMqI,EAAQzL,MAmB3D,OAbAwC,KAAKiB,UAELgC,UAAUsR,aAAaC,aAAaxU,KAAKiU,aAAaU,KAAK,SAAAR,GACnDhM,EAAKlH,SAITL,EAAMuT,EAAQjO,EAAUqC,GACxBJ,EAAKlB,UAAUkN,OAAOA,MACvBS,MAAM,SAAAtN,GACLa,EAAKlB,UAAUK,MAAMA,KAGlBtH,oCAsBP,OAbAA,KAAKiG,OAAS,KAEdjG,KAAK0J,IAAI1J,KAAKF,QAAQuB,gBAEtBrB,KAAKuD,SAASzC,KAAK,QACnBd,KAAKuD,SAASzC,KAAK,OAGnBd,KAAKU,UAAU2F,WAAW,GAC1BrG,KAAKU,UAAUkI,eAAiB,KAEhC5I,KAAKiB,UAEEjB,mCASP,OAAOA,KAAKiG,sCASTC,EAAUqC,GAOb,OANIvI,KAAK6U,cACL7U,KAAKc,OAELd,KAAKY,MAAMsF,EAAUqC,GAGlBvI,2CAQP,OAAQA,KAAKiB,wCAKb,IAAMe,wFASN,OAPAA,EAAOmS,QACH/T,OAAcJ,KAAKI,OACnBgU,WACIU,MAAU9U,KAAKoU,UAAUzM,MAAM,WAIhC3F,qCAKP,MAAO,qBAAAvC,EAvPMuU,GAuPNvU,EAAAP,QAvPM8U,wkBCRrB/V,GAAAT,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAUqBuX,cAOjB,SAAAA,EAAYjV,iGAASE,KAAA+U,GAAA,IAAApO,oKAAA3G,MAAA+U,EAAAnO,WAAA1I,OAAA2I,eAAAkO,IAAApX,KAAAqC,KACXF,IADW,OAGjB6G,EAAKV,OAAS,KACdU,EAAKqO,MAAS,KACdrO,EAAKsO,IAAS,GAEdtO,EAAKkB,aAAe,EACpBlB,EAAKuO,YACLvO,EAAKmB,QACLnB,EAAKwO,SACLxO,EAAKyO,YAILzO,EAAK0O,aAfY1O,iXA2BfqO,EAAOM,EAASD,EAAWD,GAAU,IAAAjN,EAAAnI,KAEvC,GAAqD,oBAAjD9B,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAA2B,CACpE,IAAMoD,EAAapD,UAAU,GAEzB,UAAWoD,IACXmK,EAAQnK,EAAWmK,OAGnB,YAAanK,IACbyK,EAAUzK,EAAWyK,SAGrB,cAAezK,IACfwK,EAAYxK,EAAWwK,WAGvB,aAAcxK,IACduK,EAAWvK,EAAWuK,UAI9B,IAAI5T,EAAO,GAEX,GAAIwT,aAAiBO,iBACjB/T,EAAOuT,EAAYS,UAChB,MAAIR,aAAiBS,kBAGxB,OAAOzV,KAFPwB,EAAOuT,EAAYW,MAKvB1V,KAAKgV,MAAQA,EAER7O,MAAMC,QAAQkP,KACfA,GAAWA,IAnCwB,IAAApJ,KAAAC,KAAAC,SAAA,IAsCvC,QAAAC,EAAAC,EAAqBgJ,EAArB/W,OAAAgO,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,KAA8B,KAAnByJ,EAAmBtJ,EAAA5N,MACpB2D,EAAOZ,EAAP,IAAeE,OAAOiU,GAAQhU,cAEpC,GAAI,sBAAsBwB,KAAKnD,KAAKgV,MAAMY,YAAYxT,IAAK,CACvDpC,KAAKiV,IAAMU,EACX,QA3C+B,MAAAjJ,GAAAP,KAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GA+CvC,GAAiB,KAAbpM,KAAKiV,IACL,MAAM,IAAIR,MAAM,mDAGpB,GAAkD,oBAA9CvW,OAAOmB,UAAUoH,SAAS9I,KAAK0X,GAC/B,IAAK,IAAMpT,KAAKoT,EACZrV,KAAKqV,UAAUpT,EAAEN,eAAmE,sBAAjDzD,OAAOmB,UAAUoH,SAAS9I,KAAK0X,EAAUpT,IAA+BoT,EAAUpT,GAAK,aAuClI,IAAK,IAAMA,KAnCXjC,KAAKoV,SAAWxT,QAAQwT,IAGpBpV,KAAKoV,UAAcpV,KAAKiG,kBAAkB4P,8BAC1C7V,KAAKiG,OAASjG,KAAKF,QAAQgW,yBAAyB9V,KAAKgV,QAG7DhV,KAAKgV,MAAMe,iBAAiB,YAAa,SAAAlN,GAE/BV,EAAKlC,kBAAkB4P,8BACzB1N,EAAKlC,OAASkC,EAAKrI,QAAQgW,yBAAyB3N,EAAK6M,QAGzD,cAAe7M,EAAKkN,WACpBlN,EAAKkN,UAAUW,UAAUnN,QAIjC7I,KAAKgV,MAAMe,iBAAiB,QAAS,SAAAlN,GACjCV,EAAK6M,MAAMiB,QAEX9N,EAAKuB,IAAIvB,EAAKrI,QAAQuB,aAEtB8G,EAAK5E,SAASzC,KAAK,QACnBqH,EAAK5E,SAASzC,KAAK,OAGnBqH,EAAKzH,UAAU2F,WAAW,GAC1B8B,EAAKzH,UAAUkI,eAAiB,KAE5B,UAAWT,EAAKkN,WAChBlN,EAAKkN,UAAUhO,MAAMwB,QAIb7I,KAAKqV,UACjBrV,KAAKgV,MAAMe,iBAAiB9T,EAAG,SAAA4G,GAC3BV,EAAKkN,UAAWxM,EAAMrH,KAAMG,eAAekH,QAInD,OAAO7I,mCAWLjB,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCrD,SAMJ,GAJU,iBAAN2D,IACA3D,sFAAgB2D,EAAGxD,aAGnBH,EACA,OAAOA,EAGX,IAAIgE,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OAAQ3F,GACJ,IAAK,eACD,YAAIxD,EACA,OAAQuB,KAAKgV,iBAAiBmB,iBAAoBnW,KAAKgV,MAAMnN,aAAe7H,KAAK6H,cAGrFvF,EAAMnB,WAAW1C,MACjByX,EAAM,MAGElW,KAAKgV,iBAAiBmB,mBACtBnW,KAAKgV,MAAMnN,aAAevF,GAG9BtC,KAAK6H,aAAevF,GAGxB,MACJ,IAAK,cACD,YAAI7D,EACA,OAAQuB,KAAKgV,iBAAiBmB,iBAAoBnW,KAAKgV,MAAM3T,YAAc,EAG3ErB,KAAKgV,iBAAiBmB,mBACtB7T,EAAMnB,WAAW1C,GACjByX,EAAM,EACNtO,EAAM5H,KAAKgV,MAAMhN,SAEZ1F,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKgV,MAAM3T,YAAciB,IAIjC,MACJ,IAAK,OACL,IAAK,QACL,IAAK,WACD,YAAI7D,EACA,OAAQuB,KAAKgV,iBAAiBmB,iBAAoBnW,KAAKgV,MAAM/S,GAAKjC,KAAKiC,GAGvEjC,KAAKgV,iBAAiBmB,mBACtBnW,KAAKgV,MAAM/S,GAAKL,QAAQnD,IAG5BuB,KAAKiC,GAAKL,QAAQnD,GAElB,MACJ,IAAK,QACL,IAAK,SACD,YAAIA,EACA,OAAQuB,KAAKgV,iBAAiBS,iBAAoBzV,KAAKgV,MAAM/S,GAAK,GAGtEK,EAAMY,SAASzE,EAAO,OACtByX,EAAM,IAGElW,KAAKgV,iBAAiBS,mBACtBzV,KAAKgV,MAAM/S,GAAKK,GAIxB,MACJ,IAAK,WACD,OAAOtC,KAAKgV,MAAMhN,SACtB,IAAK,WACD,OAAQhI,KAAKiG,kBAAkB4P,4BAA+B7V,KAAKiG,OAAOmQ,aAAe,GAMrG,OAAOpW,mCASLiG,GACF,IAAMoQ,EAAM3U,OAAOuE,GAEnB,KAEmC,IAA1BoQ,EAAIC,QAAQ,WAA+C,IAA1BD,EAAIC,QAAQ,SAC9CtW,KAAKgV,MAAMqB,IAAMA,EAEjBrW,KAAKgV,MAAMqB,IAASA,EAApB,IAA2BrW,KAAKiV,IAEtC,MAAO3N,GACL,MAAM,IAAImN,MAAM,6CAGpB,OAAOzU,mCAWLsI,EAAUpC,EAAUqC,GAAiB,IAAAC,EAAAxI,KAmDvC,OAlDKA,KAAKiG,kBAAkB4P,6BAAgC7V,KAAKgV,MAAMhO,SAEnEhH,KAAKiG,OAAOpE,QAAQ7B,KAAKU,WACzBV,KAAK6B,QAAQ7B,KAAKU,UAAWwF,GAEblG,KAAKgV,MAAMuB,OAEnB5B,KAAK,WACT,IAAMlM,EAAMtH,WAAWmH,GAEvBE,EAAKwM,MAAM3T,YAAiBoH,GAAO,GAAOA,GAAOD,EAAKwM,MAAMhN,SAAaS,EAAM,EAC/ED,EAAKwM,MAAMnN,aAAeW,EAAKX,aAC/BW,EAAKwM,MAAME,SAAe1M,EAAK0M,SAC/B1M,EAAKwM,MAAMlN,KAAeU,EAAKV,KAC/BU,EAAKwM,MAAMG,MAAe3M,EAAK2M,MAE/B3M,EAAKG,GAAGH,EAAK1I,QAAQuB,aAErBmH,EAAKjF,SAAS3C,MAAM,QACpB4H,EAAKjF,SAAS3C,MAAM,OAEpB,IAAMb,EAAayI,EAAK9H,UAAUX,WAEsB,sBAApD7B,OAAOmB,UAAUoH,SAAS9I,KAAK4K,GAC/BC,EAAK9H,UAAUkI,eAAiBL,EAEhCC,EAAK9H,UAAUkI,eAAiB,SAAAC,GAM5B,IALA,IAAMC,EAAWD,EAAME,YAAYC,eAAe,GAC5CC,EAAWJ,EAAME,YAAYC,eAAe,GAC5CE,EAAWL,EAAMM,aAAaH,eAAe,GAC7CI,EAAWP,EAAMM,aAAaH,eAAe,GAE1CxL,EAAI,EAAGA,EAAIuC,EAAYvC,IAC5B0L,EAAS1L,GAAKgL,EAAKjB,cAAc3G,MAAMkI,EAAQtL,GAAIyL,EAAQzL,IAC3D4L,EAAS5L,GAAKgL,EAAKjB,cAAc3G,MAAMqI,EAAQzL,GAAIsL,EAAQtL,OAIxEoX,MAAM,WACLpM,EAAK1H,OAED0H,EAAK4M,WACL5M,EAAKwM,MAAMG,MAAS3M,EAAK2M,SACzB3M,EAAKwM,MAAMhK,OAAS,GAGxBxC,EAAK5H,MAAM0H,EAAUpC,EAAUqC,MAIhCvI,oCAsBP,OAbKA,KAAKiG,kBAAkB4P,8BAAiC7V,KAAKgV,MAAMhO,SACpEhH,KAAKgV,MAAMiB,QAEXjW,KAAK0J,IAAI1J,KAAKF,QAAQuB,aAEtBrB,KAAKuD,SAASzC,KAAK,QACnBd,KAAKuD,SAASzC,KAAK,OAGnBd,KAAKU,UAAU2F,WAAW,GAC1BrG,KAAKU,UAAUkI,eAAiB,MAG7B5I,mCASP,OAAOA,KAAKiG,sCAWTqC,EAAUpC,EAAUqC,GAOvB,OANIvI,KAAKgV,MAAMhO,OACXhH,KAAKY,MAAM0H,EAAUpC,EAAUqC,GAE/BvI,KAAKc,OAGFd,uCAQP,OAAOA,KAAKgV,iBAAiBmB,oDAS7B,OAAOnW,KAAKiG,kBAAkB4P,+DAS9B,QAAQ7V,KAAKgV,iBAAiBmB,mBAAoBnW,KAAKgV,MAAMhO,wCAK7D,IAAMhF,wFAWN,OATAA,EAAOgT,OACHnL,aAAkB7J,KAAK6H,aACvBN,eACIhH,MAAUP,KAAKuH,cAAcI,MAAM,kBAIpC3F,EAAO4H,MAEP5H,qCAKP,MAAO,oBAAAvC,EApaMsV,KACVS,MAAQ,QADET,EAEVW,MAAQ,QAAAjW,EAAAP,QAFE6V,gCCFd,SAASyB,EAAKC,EAAMjV,EAAMkJ,EAAiBC,EAAeC,GAE7D,GAAqD,oBAAjD1M,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAA2B,CACpE,IAAMoD,EAAapD,UAAU,GAEzB,SAAUoD,IACV4L,EAAO5L,EAAW4L,MAGlB,SAAU5L,IACVrJ,EAAOqJ,EAAWrJ,MAGlB,YAAaqJ,IACbH,EAAkBG,EAAWC,SAG7B,UAAWD,IACXF,EAAgBE,EAAWvD,OAG3B,aAAcuD,IACdD,EAAmBC,EAAWE,UAItC,GAAM0L,aAAgBC,KAAtB,CAQA,IAAMC,EAAS,IAAIC,WAEnBD,EAAOjL,WAAa,SAAA7C,GACyC,sBAArD3K,OAAOmB,UAAUoH,SAAS9I,KAAKiN,IAC/BA,EAAiB/B,IAIzB8N,EAAO/K,QAAU,SAAA/C,GACb,GAAsD,sBAAlD3K,OAAOmB,UAAUoH,SAAS9I,KAAKgN,GAAwC,CACvE,IAAIrD,EAAQ,GAEZ,OAAQqP,EAAOrP,MAAMuP,MACjB,KAAKF,EAAOrP,MAAMwP,cACdxP,EAAQ,gBACR,MACJ,KAAKqP,EAAOrP,MAAMyP,aACdzP,EAAQ,eACR,MACJ,KAAKqP,EAAOrP,MAAM0P,UACd1P,EAAQ,YACR,MACJ,KAAKqP,EAAOrP,MAAM2P,iBACd3P,EAAQ,mBACR,MACJ,KAAKqP,EAAOrP,MAAM4P,aACd5P,EAAQ,eACR,MACJ,QACIA,EAAQ,MAIhBqD,EAAc9B,EAAOvB,KAI7BqP,EAAO7K,OAAS,SAAAjD,GACZ,GAAwD,sBAApD3K,OAAOmB,UAAUoH,SAAS9I,KAAK+M,GAA0C,CACzE,IAAIyM,EAASR,EAAOQ,OAGG,iBAAXA,IAAsD,IAA7BA,EAAOb,QAAQ,WAAkD,IAA7Ba,EAAOb,QAAQ,WACpFa,EAASA,EAAOpR,QAAQ,qBAAsB,eAGlD2E,EAAgB7B,EAAOsO,KAI3B,eAAehU,KAAK3B,GACpBmV,EAAOS,kBAAkBX,GAClB,WAAWtT,KAAK3B,GACvBmV,EAAOU,cAAcZ,GACd,QAAQtT,KAAK3B,IACpBmV,EAAOW,WAAWb,EAAM,aA9D8B,sBAAlDvY,OAAOmB,UAAUoH,SAAS9I,KAAKgN,IAC/BA,EAAc,KAAM,oBAAAzM,OAAAC,eAAAsB,EAAA,cAAAhB,OAAA,IAAAgB,EA5BhB+W,SAsGAC,KAAT,SAAc5N,EAAOrH,EAAMkJ,EAAiBC,EAAeC,GAE9D,GAAqD,oBAAjD1M,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAA2B,CACpE,IAAMoD,EAAapD,UAAU,GAEzB,UAAWoD,IACXhC,EAAQgC,EAAWhC,OAGnB,SAAUgC,IACVrJ,EAAOqJ,EAAWrJ,MAGlB,YAAaqJ,IACbH,EAAkBG,EAAWC,SAG7B,UAAWD,IACXF,EAAgBE,EAAWvD,OAG3B,aAAcuD,IACdD,EAAmBC,EAAWE,UAItC,GAAMlC,aAAiB0O,MAAvB,CAKA,IAAId,EAAO,KAEX,GAAmB,SAAf5N,EAAMrH,KAENqH,EAAM2O,kBACN3O,EAAM4O,iBAENhB,EAAwF5N,EAAM6O,aAAaC,MAAM,OAC9G,MAAoB,WAAf9O,EAAMrH,MAAuB,UAAWqH,EAAM+O,QAItD,OAFAnB,EAAO5N,EAAM+O,OAAOD,MAAM,GAK9B,GAAMlB,aAAgBoB,KAEf,IAAK,QAAQ1U,KAAK3B,KAA0C,IAA/BiV,EAAKjV,KAAK8U,QAAQ,QAClD,MAAM,IAAI7B,MAAM,4BACb,GAAK,uBAAuBtR,KAAK3B,KAAW,cAAc2B,KAAKsT,EAAKjV,MACvE,MAAM,IAAIiT,MAAM,sCAUhB,OARA+B,GACIC,KAAaA,EACbjV,KAAaA,EACbsJ,QAAaJ,EACbpD,MAAaqD,EACbI,SAAaH,IAGV6L,EAdP,MAAM,IAAIhC,MAAM,yBAAAhV,EA0BRqY,KAAT,SAAc1M,EAAKX,EAASC,EAAiBC,EAAeC,GAE/D,GAAqD,oBAAjD1M,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAA2B,CACpE,IAAMoD,EAAapD,UAAU,GAEzB,QAASoD,IACTO,EAAMP,EAAWO,KAGjB,YAAaP,IACbJ,EAAUI,EAAWJ,SAGrB,YAAaI,IACbH,EAAkBG,EAAWC,SAG7B,UAAWD,IACXF,EAAgBE,EAAWvD,OAG3B,aAAcuD,IACdD,EAAmBC,EAAWE,UAKtC,IAGMO,EAAM,IAAIC,eAEV7M,EAAIwE,SAASuH,EAAS,IAE5Ba,EAAIb,QAAW/L,EAAI,EAAKA,EAAI,IAE5B4M,EAAIE,UAAY,SAAA3C,GAC0C,sBAAlD3K,OAAOmB,UAAUoH,SAAS9I,KAAKgN,IAC/BA,EAAc9B,EAVK,YAc3ByC,EAAII,WAAa,SAAA7C,GAC4C,sBAArD3K,OAAOmB,UAAUoH,SAAS9I,KAAKiN,IAC/BA,EAAiB/B,IAIzByC,EAAIM,QAAU,SAAA/C,GAC4C,sBAAlD3K,OAAOmB,UAAUoH,SAAS9I,KAAKgN,IAC/BA,EAAc9B,EAvBK,UA2B3ByC,EAAIQ,OAAS,SAAAjD,GACT,GAAmB,MAAfyC,EAAIS,OAAgB,CACpB,IAAM7D,EAAcoD,EAAIU,SAEnB9D,aAAuBE,aAAqE,sBAApDlK,OAAOmB,UAAUoH,SAAS9I,KAAK+M,IACxEA,EAAgB7B,EAAOX,KAKnCoD,EAAIuB,KAAK,MAAOzB,MAChBE,EAAIwB,aAAe,cACnBxB,EAAIyB,KAAK,OAAAtN,EAYGyH,OAAT,SAAgBpH,EAASoI,EAAawC,EAAiBC,GAC1D,GAAM7K,aAAmBiY,cAInB7P,aAAuBE,YAY7B,MARwD,sBAApDlK,OAAOmB,UAAUoH,SAAS9I,KAAK+M,KAC/BA,EAAkB,cAGgC,sBAAlDxM,OAAOmB,UAAUoH,SAAS9I,KAAKgN,KAC/BA,EAAgB,cAGb7K,EAAQuI,gBAAgBH,EAAawC,EAAiBC,MASjDqN,cAAT,SAAuBC,GAO1B,IAAMC,EAAkB7O,KAAK8O,IAAI,EAAI,EAAI,IAGpChS,MAAMC,QAAQ6R,KACfA,GAAWA,IAKf,IAFA,IAAM9J,EAAc,IAAIhI,MAAM8R,EAAQvY,QAE7BlC,EAAI,EAAG8I,EAAM2R,EAAQvY,OAAQlC,EAAI8I,EAAK9I,IAAK,CAChD,IAAM6N,EAAQnI,SAAS+U,EAAQza,GAAI,IAEnC2Q,EAAY3Q,GAAM6N,GAAS,EAXP,KAWqBhC,KAAK8O,IAAID,EAAiB7M,GAAU,EAGjF,OAAO8C,KAQKiK,YAAT,SAAqB/J,GACxB,IAAM3P,EAAIyC,WAAWkN,GAErB,GAAI3P,GAAK,EAKL,OACI2Z,QALOhP,KAAKC,MAAM5K,EAAI,IAMtB4Z,QALOjP,KAAKC,MAAM5K,EAAI,IAMtB6Z,aALO7Z,EAAIwE,SAASxE,EAAG,MAKN8Z,EASbC,WAAT,SAAoB9K,GACvB,GAAMA,aAAmB+K,QAIzB,GAAI/K,EAAQgL,wBACRhL,EAAQgL,wBAAwBD,QAAQE,2BACrC,GAAIjL,EAAQkL,qBACflL,EAAQkL,4BACL,GAAIlL,EAAQmL,oBACfnL,EAAQmL,0BACL,KAAInL,EAAQoL,kBAGf,MAAM,IAAItE,MAAM,iCAFhB9G,EAAQoL,wBASAC,eAAT,WACH,GAAIhG,SAASiG,uBACTjG,SAASiG,8BACN,GAAIjG,SAASkG,oBAChBlG,SAASkG,2BACN,GAAIlG,SAASmG,iBAChBnG,SAASmG,wBACN,GAAInG,SAASoG,iBAChBpG,SAASoG,uBACN,KAAIpG,SAASgG,eAGhB,MAAM,IAAIvE,MAAM,iCAFhBzB,SAASgG,+VChXjB5b,EAAA,IAAAoC,EAAA0C,EACA9E,EAAA,aAAA8E,EAAAxD,GAAA,OAAAA,KAAAE,WAAAF,GAAAQ,QAAAR,GAAA,IAMqB2a,aAqGjB,SAAAA,EAAYvZ,iGAASE,KAAAqZ,GACjBrZ,KAAKF,QAAUA,EAGfE,KAAKiG,OAAS,KAEdjG,KAAKsZ,aACLtZ,KAAKuZ,YACLvZ,KAAKwZ,QAELxZ,KAAKiH,WACDrG,MAAU,aACVE,KAAU,aACVuG,MAAU,aACVC,MAAU,qBAAA9J,EAAAkB,IAAAK,IAAA,QAAAN,MAAA,SAWZM,EAAKN,GACP,GAAKgJ,UAAU/H,OAAS,GAAwD,oBAAjDxB,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEpE,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK0H,MAAMzF,EAAGwF,UAAU,GAAGxF,SAE5B,GAAIwF,UAAU/H,OAAS,EAAG,CAC7B,IAAMuC,EAAIP,OAAO3C,GAAK4C,cAElBM,KAAKjC,KAAKiH,WACoC,sBAA1C/I,OAAOmB,UAAUoH,SAAS9I,KAAKc,KAC/BuB,KAAKiH,UAAUhF,GAAKxD,GAKhC,OAAOuB,mCASLiG,EAAQwT,GAUV,GAToB,OAAhBzZ,KAAKiG,QACLjG,KAAKc,OAITd,KAAKsZ,UAAU5Z,OAAS,EACxBM,KAAKuZ,SAAS7Z,OAAU,EACxBM,KAAKwZ,KAAK9Z,OAAc,EAEpByG,MAAMC,QAAQH,GAAS,KAAAiG,KAAAC,KAAAC,SAAA,IACvB,QAAAC,EAAAC,EAAgBrG,EAAhB1H,OAAAgO,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,KACI,KADoBG,EAAA5N,iBACDib,gBACf,OAAO1Z,KAHQ,MAAA0M,GAAAP,KAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAOvBpM,KAAKiG,OAASA,OACX,GAAIA,aAAkByT,eACzB1Z,KAAKiG,QAAUA,OACZ,MAAKA,wBAAwCA,wBAGhD,OAAOjG,KAFPA,KAAKiG,OAASA,EASlB,IAJKE,MAAMC,QAAQqT,KACfA,GAAQA,IAGLA,EAAK/Z,OAAS,GAAG,CACpB,IAGM4Z,KAEAK,EALMjY,OAAO+X,EAAKG,SAKNC,MAAMR,EAAIS,YAE5B,GAAc,OAAVH,EAEA,YADA3Z,KAAKiH,UAAUK,MAAM+R,EAAIU,aAAc,IAe3C,IAXA,IAAI9B,KACA9J,KAEAvN,EAAW,EACXoH,EAAW,EACXlH,EAAW,EAEXO,EAAc,EACd2Y,EAAc,KACd1L,EAAc,KAEXqL,EAAMja,OAAS,GAAG,CACrB,IAAMua,EAAON,EAAMC,QAAQM,OAE3B,GAAIb,EAAIc,aAAahX,KAAK8W,GAAO,CAC7B,IAAMG,EAAMlX,SAAS+W,EAAKI,MAAM,GAAI,IAEpC,KAAID,EAAM,GAIN,YADApa,KAAKiH,UAAUK,MAAM+R,EAAIiB,YAAaL,GAFtCD,EAAcX,EAAIkB,YAAcH,OAKjC,GAAIf,EAAImB,cAAcrX,KAAK8W,IAG9B,IAFA3L,EAASpL,SAAS+W,EAAKI,MAAM,GAAI,KAEpB,EAET,YADAra,KAAKiH,UAAUK,MAAM+R,EAAIoB,aAAcR,QAGxC,GAAIZ,EAAIqB,YAAYvX,KAAK8W,GAAO,CACnC,GAAoB,OAAhBD,EAEA,YADAha,KAAKiH,UAAUK,MAAM+R,EAAIiB,YAAaL,GAI1C,GAAe,OAAX3L,EAEA,YADAtO,KAAKiH,UAAUK,MAAM+R,EAAIoB,aAAcR,GAI3C,IAAMU,EAAQV,EAAKJ,MAAMR,EAAIuB,cAAc,GAE3C3C,KAEA,IAAK,IAAIza,EAAI,EAAG8I,EAAMqU,EAAMjb,OAAQlC,EAAI8I,EAAK9I,IAAK,CAC9C,IAAMqd,EAAYF,EAAMG,OAAOtd,GAE3B6N,EAAQgO,EAAI0B,aAAazM,EAAQuM,EAAUG,eAG/C,OAAQL,EAAMG,OAAOtd,EAAI,IACrB,IAAK,IACL,IAAK,IAED6N,IACA7N,IACA,MACJ,IAAK,IAED6N,IACA7N,IAaR,GALI6N,GAAS4M,EAAQ,KACjB5M,GAASgO,EAAI4B,mBAIb5P,EAAQ,EAER,YADArL,KAAKiH,UAAUK,MAAM+R,EAAI6B,WAAYjB,GAIzChC,EAAQkD,KAAK9P,GAGjB8C,KApDmC,IAAAmE,KAAAC,KAAAC,SAAA,IAsDnC,QAAAC,EAAAC,EAAoBuF,EAApB1Z,OAAAgO,cAAA+F,GAAAG,EAAAC,EAAAlG,QAAAC,MAAA6F,KAA6B,KAAlBjH,EAAkBoH,EAAAhU,MACnBgC,EAAa4K,IAAUgO,EAAI+B,KAAQ/B,EAAIgC,iBAAiBhQ,GAAS,EAGvE,IAAmB,IAAf5K,EAEA,YADAT,KAAKiH,UAAUK,MAAM+R,EAAI6B,WAAYjB,GAIzC9L,EAAYgN,KAAK1a,IA/Dc,MAAAiM,GAAA6F,KAAAC,EAAA9F,EAAA,aAAA4F,GAAAI,EAAA/F,QAAA+F,EAAA/F,SAAA,WAAA4F,EAAA,MAAAC,GAoEnC,IAFA,IAAM8I,EAAYrB,EAAKsB,MAAM,KAEtBD,EAAU5b,OAAS,GAAG,CACzB,IAAM5B,EAAIwd,EAAU1B,QAAQC,MAAMR,EAAImC,iBAAiB,GAEvD,OAAQtY,SAASpF,EAAG,KAChB,KAAO,EACP,KAAO,EACP,KAAO,EACP,KAAO,EACP,KAAM,GACN,KAAM,GACN,KAAM,GACN,KAAK,IACL,KAAK,IACD,IAAM2d,EAAapC,EAAIqC,aAAexY,SAASpF,EAAG,IAGlDkK,IAAiC,IAApBlK,EAAEwY,QAAQ,KAAiB,IAAMmF,EAAczB,EAAgByB,EAAazB,EACzF,MACJ,KAAO,EAEHhS,GAAa,EAAIgS,EAAe,EAChC,MACJ,KAAM,GAEFhS,GAAYgS,EAAc,EAC1B,MACJ,KAAM,GAEFhS,GAAa,EAAIgS,EAAe,EAChC,MACJ,KAAM,GAEFhS,GAAa,GAAMgS,EAAe,EAClC,MACJ,KAAM,GAEFhS,GAAYgS,EAAc,EAC1B,MACJ,KAAM,GAEFhS,GAAa,IAAOgS,EAAe,EACnC,MACJ,KAAM,GAEFhS,GAAa,GAAMgS,EAAe,EAClC,MACJ,KAAM,GAEFhS,GAAa,KAAQgS,EAAe,EACpC,MACJ,KAAK,IAEDhS,GAAa,IAAOgS,EAAe,EACnC,MACJ,KAAK,IAEDhS,GAAa,MAASgS,EAAe,EACrC,MACJ,QACIha,KAAKiH,UAAUK,MAAM+R,EAAI6B,WAAYjB,IAMjDnZ,GADAF,EAAQS,GACQ2G,EAEhB3G,GAAe2G,EAEfsR,EAAU6B,MACNlD,QAAgBA,EAChB9J,YAAgBA,EAChBvN,MAAgBA,EAChBoH,SAAgBA,EAChBlH,KAAgBA,IAGpBkH,EAAW,GAIfsR,EAAU5Z,OAAS,IAEnB4Z,EAAUqC,UAEV3b,KAAKsZ,UAAU6B,KAAK7B,GACpBtZ,KAAKuZ,SAAS4B,KAAK,OAI3B,OAAOnb,mCAUL4b,EAAM1V,EAAUqC,GAAiB,IAAA5B,EAAA3G,KAC7BT,EAAI2D,SAAS0Y,EAAM,IAEzB,GAAKrc,GAAK,GAAOA,EAAIS,KAAKsZ,UAAU5Z,OAAS,CACzC,IAAKyG,MAAMC,QAAQpG,KAAKsZ,UAAU/Z,IAC9B,OAAOS,KAIX,GAAiC,IAA7BA,KAAKsZ,UAAU/Z,GAAGG,OAIlB,OAHAM,KAAKc,KAAKyH,GACVvI,KAAKiH,UAAUI,QAERrH,KAGX,IAAM6b,EAAW7b,KAAKsZ,UAAU/Z,GAAGuc,MAEnC,GAAI3V,MAAMC,QAAQpG,KAAKiG,QAAS,CAC5B,IAAK,IAAIzI,EAAI,EAAG8I,EAAMtG,KAAKiG,OAAOvG,OAAQlC,EAAI8I,EAAK9I,IAAK,CACpD,IAAIyI,EAASjG,KAAKiG,OAAOzI,GAEnBgE,EAASyE,EAAOzE,KAChBua,EAAS9V,EAAO8V,OAAOtd,MAY7B,IAVAwH,EAASjG,KAAKF,QAAQQ,oBAGfM,MAAQqF,EAAOrF,OAASqF,EAAOpF,OACtCoF,EAAOnF,KAAQmF,EAAOnF,MAASmF,EAAOlF,QAEtCkF,EAAOzE,KAAkBA,EACzByE,EAAOxF,UAAUhC,MAAQod,EAAS1N,YAAY3Q,GAC9CyI,EAAO8V,OAAOtd,MAAWsd,EAErB5V,MAAMC,QAAQF,GAAW,CAEzBD,EAAOpE,QAAQqE,EAAS,IAExB,IAAK,IAAI8V,EAAI,EAAGC,EAAM/V,EAASxG,OAAQsc,EAAIC,EAAKD,IAAK,CACjD,IAAME,EAAOhW,EAAS8V,GAEtB,GAAIA,EAAKC,EAAM,EAAI,CACf,IAAMzP,EAAOtG,EAAS8V,EAAI,GAE1B,KAAOE,aAAgBC,WAAe3P,aAAgB2P,WAClD,OAAOnc,KAGXkc,EAAKra,QAAQ2K,QAEb0P,EAAKra,QAAQ7B,KAAKF,QAAQyG,mBAKlCN,EAAOpE,QAAQ7B,KAAKF,QAAQyG,aAGhCN,EAAOrF,MAAMZ,KAAKF,QAAQuB,aAC1B4E,EAAOnF,KAAKd,KAAKF,QAAQuB,YAAcwa,EAAS7T,UAEhDhI,KAAKiG,OAAOzI,GAAKyI,EAGrB,IAAK,IAAIzI,EAAI,EAAG8I,EAAMuV,EAAS5D,QAAQvY,OAAQlC,EAAI8I,EAAK9I,IACpDwC,KAAKiH,UAAUrG,MAAMib,EAAUre,QAEhC,GAAIwC,KAAKiG,kBAALmW,EAAAld,QAAyC,CAChDc,KAAKiG,OAAOrF,MAAMib,EAAS1N,YAAajI,EAAUqC,GAElD,IAAK,IAAI/K,EAAI,EAAG8I,EAAMuV,EAAS5D,QAAQvY,OAAQlC,EAAI8I,EAAK9I,IACpDwC,KAAKiH,UAAUrG,MAAMib,EAAUre,QAEhC,GAAIwC,KAAKiG,kBAALoW,EAAAnd,QACP,IAAK,IAAI1B,EAAI,EAAG8I,EAAMuV,EAAS5D,QAAQvY,OAAQlC,EAAI8I,EAAK9I,IAChDqe,EAAS5D,QAAQza,KAAO6b,EAAI+B,MAC5Bpb,KAAKiG,OAAOrF,MAAMib,EAAS5D,QAAQza,GAAI0I,EAAUqC,GAGrDvI,KAAKiH,UAAUrG,MAAMib,EAAUre,GAIvCwC,KAAKuZ,SAASha,GAAKgO,OAAOC,WAAW,WACjC,GAAIrH,MAAMC,QAAQO,EAAKV,QACnB,IAAK,IAAIzI,EAAI,EAAG8I,EAAMuV,EAAS5D,QAAQvY,OAAQlC,EAAI8I,EAAK9I,IACpDmJ,EAAKM,UAAUrG,MAAMib,EAAUre,QAEhC,GAAImJ,EAAKV,kBAALmW,EAAAld,QAAyC,CAChDyH,EAAKV,OAAOnF,OAEZ,IAAK,IAAItD,EAAI,EAAG8I,EAAMuV,EAAS5D,QAAQvY,OAAQlC,EAAI8I,EAAK9I,IACpDmJ,EAAKM,UAAUnG,KAAK+a,EAAUre,QAE/B,GAAImJ,EAAKV,kBAALoW,EAAAnd,QACP,IAAK,IAAI1B,EAAI,EAAG8I,EAAMuV,EAAS5D,QAAQvY,OAAQlC,EAAI8I,EAAK9I,IAChDqe,EAAS5D,QAAQza,KAAO6b,EAAI+B,MAC5BzU,EAAKV,OAAOnF,KAAK+a,EAAS5D,QAAQza,GAAI+K,GAG1C5B,EAAKM,UAAUnG,KAAK+a,EAAUre,GAKtCmJ,EAAK6S,KAAOqC,EAGZlV,EAAK/F,MAAMrB,EAAG2G,EAAUqC,IACJ,IAApBsT,EAAS7T,UAGjB,OAAOhI,kCAQNuI,GACD,IAAMsT,EAAW7b,KAAKwZ,KAEtB,GAAwB,IAApBqC,EAASnc,OACT,OAAOM,KAGX,GAAImG,MAAMC,QAAQpG,KAAKiG,QAAS,KAAAsN,KAAAC,KAAAC,SAAA,IAC5B,QAAAC,EAAAC,EAAoBkI,EAAS5D,QAA7B1Z,OAAAgO,cAAAgH,GAAAG,EAAAC,EAAAnH,QAAAC,MAAA8G,KAAsC,KAA3BlI,EAA2BqI,EAAAjV,MAClCuB,KAAKiH,UAAUnG,KAAK+a,EAAUxQ,IAFN,MAAAqB,GAAA8G,KAAAC,EAAA/G,EAAA,aAAA6G,GAAAI,EAAAhH,QAAAgH,EAAAhH,SAAA,WAAA6G,EAAA,MAAAC,SAIzB,GAAIzT,KAAKiG,kBAALmW,EAAAld,QAAyC,CAChDc,KAAKiG,OAAOnF,OADoC,IAAAwb,KAAAC,KAAAC,SAAA,IAGhD,QAAAC,EAAAC,EAAoBb,EAAS5D,QAA7B1Z,OAAAgO,cAAA+P,GAAAG,EAAAC,EAAAlQ,QAAAC,MAAA6P,KAAsC,KAA3BjR,EAA2BoR,EAAAhe,MAClCuB,KAAKiH,UAAUnG,KAAK+a,EAAUxQ,IAJc,MAAAqB,GAAA6P,KAAAC,EAAA9P,EAAA,aAAA4P,GAAAI,EAAA/P,QAAA+P,EAAA/P,SAAA,WAAA4P,EAAA,MAAAC,SAM7C,GAAIxc,KAAKiG,kBAALoW,EAAAnd,QAAsC,KAAAyd,KAAAC,KAAAC,SAAA,IAC7C,QAAAC,EAAAC,EAAoBlB,EAAS5D,QAA7B1Z,OAAAgO,cAAAoQ,GAAAG,EAAAC,EAAAvQ,QAAAC,MAAAkQ,KAAsC,KAA3BtR,EAA2ByR,EAAAre,MAC9B4M,IAAUgO,EAAI+B,MACdpb,KAAKiG,OAAOnF,KAAKuK,EAAO9C,GAG5BvI,KAAKiH,UAAUnG,KAAK+a,EAAUxQ,IANW,MAAAqB,GAAAkQ,KAAAC,EAAAnQ,EAAA,aAAAiQ,GAAAI,EAAApQ,QAAAoQ,EAAApQ,SAAA,WAAAiQ,EAAA,MAAAC,IAUjD,IAAK,IAAIrf,EAAI,EAAG8I,EAAMtG,KAAKuZ,SAAS7Z,OAAQlC,EAAI8I,EAAK9I,IACjD+P,OAAOyP,aAAahd,KAAKuZ,SAAS/b,IAClCwC,KAAKuZ,SAAS/b,GAAK,KAGvB,OAAOwC,iCAQPqL,GACA,IAAM7N,EAAI0F,SAASmI,EAAO,IAE1B,OAAS7N,GAAK,GAAOA,EAAIwC,KAAKsZ,UAAU5Z,OAAWM,KAAKsZ,UAAU9b,GAAKwC,KAAKsZ,yCAUzEsC,EAAM1V,EAAUqC,GAOnB,OANIvI,KAAKid,WACLjd,KAAKY,MAAMgb,EAAM1V,EAAUqC,GAE3BvI,KAAKc,OAGFd,2CAQP,OAAOmG,MAAMC,QAAQpG,KAAKsZ,UAAU,OAAAva,IAAA,WAAAN,MAAA,WAO7B,IAAAye,KAAAC,KAAAC,SAAA,IACP,QAAAC,EAAAC,EAAsBtd,KAAKuZ,SAA3Bhb,OAAAgO,cAAA2Q,GAAAG,EAAAC,EAAA9Q,QAAAC,MAAAyQ,KAAqC,KAA1BrO,EAA0BwO,EAAA5e,MACjC,GAAiB,OAAZoQ,YAAsBA,EAIvB,UAND,MAAAnC,GAAAyQ,KAAAC,EAAA1Q,EAAA,aAAAwQ,GAAAI,EAAA3Q,QAAA2Q,EAAA3Q,SAAA,WAAAwQ,EAAA,MAAAC,GAUP,YAAOre,IAAA,SAAAN,MAAA,SAQJ8e,GAIH,MAFMC,0BADUjQ,OAAOkQ,KAAKpE,EAAIqE,QAAQhc,OAAO6b,wCAQ/C,MAAO,YAAA7e,EAvmBM2a,KACVkB,YAAoB,GADVlB,EAEV4B,kBAAoB,GAFV5B,EAGVqC,aAAoB,EAHVrC,EAIVS,WAAoB,yNAJVT,EAKVc,aAAoB,QALVd,EAMVmB,cAAoB,QANVnB,EAOVqB,YAAoB,iLAPVrB,EAQVuB,aAAoB,2FARVvB,EASVmC,gBAAoB,2FATVnC,EAUV+B,KAAoB,IAVV/B,EAWVU,aAAoB,MAXVV,EAYViB,YAAoB,QAZVjB,EAaVoB,aAAoB,SAbVpB,EAcV6B,WAAoB,OAdV7B,EAsBV0B,aAAe,SAACzM,EAAQuM,GAC3B,IAAIxP,EAAQ,EAEZ,OAAQwP,GACJ,IAAK,IACDxP,EAAQ,EACR,MACJ,IAAK,IACDA,EAAQ,EACR,MACJ,IAAK,IACDA,EAAQ,EACR,MACJ,IAAK,IACDA,EAAQ,EACR,MACJ,IAAK,IACDA,EAAQ,GACR,MACJ,IAAK,IACDA,EAAQ,GACR,MACJ,IAAK,IACDA,EAAQ,GACR,MACJ,KAAKgO,EAAI+B,KACL,OAAO/B,EAAI+B,KAKnB,IAAMuC,EAAiBtE,EAAI4B,mBAAqB3M,EAAS,GAAMjD,EAE/D,OAAQsS,GAAiB,EAAKA,GAAiB,GAvDlCtE,EAgEVgC,iBAAmB,SAAAhQ,GAOtB,IAAM6M,EAAkB7O,KAAK8O,IAAI,EAAI,EAAI,IAGzC,OAAQ9M,GAAS,EAFO,KAEOhC,KAAK8O,IAAID,EAAiB7M,IAAW,GA1EvDgO,EAkFVqE,QAAU,SAAAE,GAGb,IAFA,IAAIC,EAAY,GAEPrgB,EAAI,EAAG8I,EAAMsX,EAAOle,OAAQlC,EAAI8I,EAAK9I,IAAK,CAC/C,IAAMsgB,EAAWF,EAAOG,WAAWvgB,GAG/BqgB,GADAC,EAAW,IACXD,KAAkBC,EAAlB,IAEaF,EAAO9C,OAAOtd,GAInC,OAAOqgB,aA/FMxE,0UCHA2E,aAIjB,SAAAA,EAAYle,iGAASE,KAAAge,GACjBhe,KAAKF,QAAUA,EAEfE,KAAKie,WAAa,KAClBje,KAAKke,UACLle,KAAKme,mDAUHC,EAAO1T,EAAiBC,GAAe,IAAAhE,EAAA3G,KACzC,IAAKiD,UAAUob,kBACX,MAAM,IAAI5J,MAAM,4BAiCpB,OA9BAxR,UAAUob,mBAAoBD,MAAQxc,QAAQwc,KAAUzJ,KAAK,SAAAsJ,GAGzD,GAFAtX,EAAKsX,WAAaA,EAEiC,sBAA/C/f,OAAOmB,UAAUoH,SAAS9I,KAAKsgB,GAE/BtX,EAAKuX,OAAUD,EAAWC,SAC1BvX,EAAKwX,QAAUF,EAAWE,cACvB,CAKH,IAHA,IAAMG,EAAiBL,EAAWC,OAAOld,SACnCud,EAAiBN,EAAWE,QAAQnd,SAEjCxD,EAAI8gB,EAAc9R,QAAShP,EAAEiP,KAAMjP,EAAI8gB,EAAc9R,OAC1D7F,EAAKuX,OAAO/C,KAAK3d,EAAEiB,OAGvB,IAAK,IAAIR,EAAIsgB,EAAe/R,QAASvO,EAAEwO,KAAMxO,EAAIsgB,EAAe/R,OAC5D7F,EAAKwX,QAAQhD,KAAKld,EAAEQ,OAI4B,sBAApDP,OAAOmB,UAAUoH,SAAS9I,KAAK+M,IAC/BA,EAAgB/D,EAAKsX,WAAYtX,EAAKuX,OAAQvX,EAAKwX,WAExDvJ,MAAM,SAAAtN,GACiD,sBAAlDpJ,OAAOmB,UAAUoH,SAAS9I,KAAKgN,IAC/BA,EAAcrD,KAIftH,mCAQP,OAAOA,KAAKie,8CAKZ,MAAO,aAAAvf,EAnEMsf,GAmENve,EAAAP,QAnEM8e,8UCJrB5gB,EAAA,IAAAoC,EAAA3B,EACAT,EAAA,IAAA8E,EAAArE,EACAT,EAAA,IAAAa,EAAAJ,EACAT,EAAA,IAAA+E,EAAAtE,EACAT,EAAA,IAAAK,EAAAI,EACAT,EAAA,aAAAS,EAAAa,GAAA,OAAAA,KAAAE,WAAAF,GAAAQ,QAAAR,GAAA,IAOqB8f,cAIjB,SAAAA,EAAY1e,iGAASE,KAAAwe,GAAA,IAAA7X,oKAAA3G,MAAAwe,EAAA5X,WAAA1I,OAAA2I,eAAA2X,IAAA7gB,KAAAqC,KACXF,IADW,OAIjB6G,EAAKqD,WAELrD,EAAK6D,cANY7D,+WAcjBqD,GAAS,IAAA7B,EAAAnI,KACJmG,MAAMC,QAAQ4D,KACfA,GAAWA,IAGfhK,KAAKgK,QAAUA,EALN,IAAAkC,KAAAC,KAAAC,SAAA,IAOT,QAAAC,EAAAC,EAAqBtM,KAAKgK,QAA1BzL,OAAAgO,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,KAAmC,KAAxBjG,EAAwBoG,EAAA5N,MAC/B,KAAOwH,wBAAwCA,wBAAqCA,wBAAmCA,wBAAmCA,wBACtJ,OAAOjG,KAGX,IAAMsB,EAAWtB,KAAKF,QAAQuB,YAE9BrB,KAAK0J,IAAIpI,MAET2E,EAAO1C,SAASzC,KAAK,QACrBmF,EAAO1C,SAASzC,KAAK,OACrBmF,EAAOuE,cAEPvE,EAAOxC,SAAS3C,OAChBmF,EAAOtC,QAAQ8a,QAGfxY,EAAOvF,UAAU2F,WAAW,GAC5BJ,EAAOvF,UAAUmB,QAAQ7B,KAAKU,YAzBzB,MAAAgM,GAAAP,KAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GA6BTpM,KAAK6B,QAAQ7B,KAAKU,WAElB,IAAMQ,EAAYlB,KAAKF,QAAQuB,YAmD/B,OAjDArB,KAAK2I,GAAGzH,GAEHlB,KAAKwK,aACNxK,KAAKuD,SAAS3C,MAAM,QACpBZ,KAAKuD,SAAS3C,MAAM,OACpBZ,KAAKwK,eAGTxK,KAAKU,UAAUkI,eAAiB,SAAAC,GAC5B,IAAMC,EAAWD,EAAME,YAAYC,eAAe,GAC5CC,EAAWJ,EAAME,YAAYC,eAAe,GAC5CE,EAAWL,EAAMM,aAAaH,eAAe,GAC7CI,EAAWP,EAAMM,aAAaH,eAAe,GAG/C/H,KAPiCqR,KAAAC,KAAAC,SAAA,IASrC,QAAAC,EAAAC,EAAqB1I,EAArBzL,OAAAgO,cAAA+F,GAAAG,EAAAC,EAAAlG,QAAAC,MAAA6F,KAA8B,KAAnBrM,EAAmBwM,EAAAhU,MACrBwH,wBAAuCA,EAAOJ,kBAAkB5E,SACjEA,KACQgF,wBAAoCA,EAAOhF,OACnDA,KACQgF,wBAAkCA,EAAOe,OACjD/F,KACQgF,wBAAkCA,EAAO+O,MAAMhO,OACvD/F,KACQgF,wBAAmCA,EAAOhF,SAClDA,OAnB6B,MAAAyL,GAAA6F,KAAAC,EAAA9F,EAAA,aAAA4F,GAAAI,EAAA/F,QAAA+F,EAAA/F,SAAA,WAAA4F,EAAA,MAAAC,GAuBrC,GAAIvR,EAAQ,CACR,IAAMK,EAAW6G,EAAKrI,QAAQuB,YAE9B8G,EAAKQ,GAAGrH,MAER6G,EAAK5E,SAASzC,KAAK,QACnBqH,EAAK5E,SAASzC,KAAK,OACnBqH,EAAKqC,cAGLrC,EAAKzH,UAAU2F,WAAW,GAC1B8B,EAAKzH,UAAUkI,eAAiB,UAEhCM,EAAS0E,IAAI9E,GACbM,EAASwE,IAAI3E,IAIdjJ,iCASPqL,GACA,IAAM7N,EAAI0F,SAASmI,EAAO,IAE1B,OAAS7N,GAAK,GAAOA,EAAIwC,KAAKgK,QAAQtK,OAAWM,KAAKgK,QAAQxM,GAAKwC,KAAKgK,2CAKxE,MAAO,oBAAAvK,EArHM+e,GAqHN/e,EAAAP,QArHMsf,0UCRAE,aACjB,SAAAA,kGAAc1e,KAAA0e,GACV1e,KAAK8U,MAAQ,SAAAtX,EAAAkB,IAAAK,IAAA,QAAAN,MAAA,SAUXM,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAEIK,EAAM,KAIV,OANUZ,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,eAOpC,IAAK,QACD,YAAIlD,EACA,OAAOuB,KAAK8U,OAGhBxS,EAAMnB,WAAW1C,KACX,GAGa6D,GAFb,IAGFtC,KAAK8U,MAAQxS,IAS7B,OAAOtC,mCAQL4Q,GAKF,OAJUvH,KAAKsV,IAAIxd,WAAWyP,IAIlB5Q,KAAK8U,MAASlE,EAAO,KAAA7R,IAAA,WAAAN,MAAA,WAKjC,MAAO,+BAAAC,EA/DMggB,GA+DNjf,EAAAP,QA/DMwf,0UCAAE,aACjB,SAAAA,kGAAc5e,KAAA4e,GACV5e,KAAKO,MAAQ,SAAA/C,EAAAkB,IAAAK,IAAA,QAAAN,MAAA,SAUXM,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAEIK,EAAM,KAIV,OANUZ,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,eAOpC,IAAK,QACD,YAAIlD,EACA,OAAOuB,KAAKO,OAGhB+B,EAAMnB,WAAW1C,KACX,GAGa6D,GAFb,IAGFtC,KAAKO,MAAQ+B,IAS7B,OAAOtC,mCASL6e,EAAOC,GACT,OAAOD,EAAS7e,KAAKO,MAAQue,qCAK7B,MAAO,kCAAApgB,EA5DMkgB,GA4DNnf,EAAAP,QA5DM0f,0UCAAG,aAOjB,SAAAA,EAAYjf,iGAASE,KAAA+e,GACjB/e,KAAKF,QAAUA,EAEfE,KAAKmO,aACDvN,OAAW,EACX6I,IAAU,GAGdzJ,KAAKqO,KAAO,EACZrO,KAAKwB,KAAOud,EAAMC,+CAUhBjgB,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAEIK,EAAI,KAER,OAJUZ,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,eAKpC,IAAK,OACD,YAAIlD,EACA,OAAOuB,KAAKqO,MAGhB/L,EAAInB,WAAW1C,KAEN,IACLuB,KAAKqO,KAAO/L,GAGhB,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAKwB,MAGhBc,EAAIZ,OAAOjD,GAAOkD,iBAEPod,EAAMC,QAAY1c,IAAMyc,EAAME,cACrCjf,KAAKwB,KAAOc,IAS5B,OAAOtC,mCAQLS,GACFT,KAAKmO,YAAY1E,IAAMhJ,EAEvB,IAAMye,GAAoC,IAA5Blf,KAAKmO,YAAYvN,MAAgB,EAAKZ,KAAKmO,YAAY1E,IAAMzJ,KAAKmO,YAAYvN,MAO5F,OALiC,IAA5BZ,KAAKmO,YAAYvN,OAAgC,IAAdZ,KAAKqO,MAAyB,IAAT6Q,IAEzDlf,KAAKmO,YAAYvN,MAAQZ,KAAKmO,YAAY1E,KAGvCzJ,mCASLoO,EAAYlN,GACd,IAAI1B,EAAI2B,WAAWD,IAEfE,MAAM5B,IAAOA,EAAIQ,KAAKF,QAAQuB,eAC9B7B,EAAIQ,KAAKF,QAAQuB,aAGrB,IAAM8d,EAAK3f,EACL4f,EAAKD,EAAKnf,KAAKqO,KAOrB,OAJAD,EAAW3N,UAAU4e,sBAAsBF,GAC3C/Q,EAAW3N,UAAU6e,eAAetf,KAAKmO,YAAYvN,MAAOue,GAC5D/Q,EAAW3N,UAAaT,KAAKwB,KAA7B,qBAAsDxB,KAAKmO,YAAY1E,IAAK2V,GAErEpf,oCAWP,OAFAA,KAAKmO,YAAYvN,MAAQZ,KAAKmO,YAAY1E,IAEnCzJ,wCAKP,MAAO,+BAAAtB,EA7HMqgB,KACVC,OAAc,SADJD,EAEVE,YAAc,cAAAxf,EAAAP,QAFJ6f,0UCAAQ,aAgBjB,SAAAA,EAAYzf,EAAS2B,iGAAOzB,KAAAuf,GACxBvf,KAAKC,SAAWwB,EAEhBzB,KAAKF,QAAUA,EAEfE,KAAKiG,OAASnG,EAAQQ,mBAGtBN,KAAKiG,OAAOuZ,gBAAkBxf,KAAKiG,OAAOuZ,iBAAmBxf,KAAKiG,OAAOwZ,aACzEzf,KAAKiG,OAAOrF,MAAkBZ,KAAKiG,OAAOrF,OAAmBZ,KAAKiG,OAAOpF,OACzEb,KAAKiG,OAAOnF,KAAkBd,KAAKiG,OAAOnF,MAAmBd,KAAKiG,OAAOlF,QAEzEf,KAAKgL,OAASlL,EAAQK,aAGtBH,KAAKiB,UAELjB,KAAKsO,OAAU,EACftO,KAAKuO,KAAU,EACfvO,KAAK0f,SACDC,KAAS,IAAInO,cAAc,EAAG,IAC9BoO,KAAS,IAAIpO,cAAc,EAAG,YAAAhU,EAAAkB,IAAAK,IAAA,QAAAN,MAAA,SAWhCM,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAEIK,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OANUlG,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,eAOpC,IAAK,OACD,YAAIlD,EACA,OAAOuB,KAAKiG,OAAOzE,KAGvB,GAA8C,oBAA1CtD,OAAOmB,UAAUoH,SAAS9I,KAAKc,IAC/B6D,EAAIZ,OAAOjD,GAAOkD,iBAET4d,EAAWM,aAChB7f,KAAKiG,OAAOzE,KAAoC,iBAArBxB,KAAKiG,OAAOzE,KAAqBc,EAAIid,EAAWM,WAAWvd,SAI1F,GAAK,SAAU7D,GAAW,SAAUA,EAAQ,CACxC,IAAIqhB,EAAQ,KACRC,EAAQ,KAcZ,GAZIthB,EAAMkhB,gBAAgBnO,aACtBsO,EAAQrhB,EAAMkhB,KACPxZ,MAAMC,QAAQ3H,EAAMkhB,QAC3BG,EAAQ,IAAItO,aAAa/S,EAAMkhB,OAG/BlhB,EAAMmhB,gBAAgBpO,aACtBuO,EAAQthB,EAAMmhB,KACPzZ,MAAMC,QAAQ3H,EAAMmhB,QAC3BG,EAAQ,IAAIvO,aAAa/S,EAAMmhB,OAG9BE,aAAiBtO,cAAkBuO,aAAiBvO,aAAe,CAGhEsO,EAAMpgB,OAFO,OAEaogB,EAAQA,EAAME,SAAS,EAFpC,OAGbD,EAAMrgB,OAHO,OAGaqgB,EAAQA,EAAMC,SAAS,EAHpC,OAMA,IAAbF,EAAM,KAAWA,EAAM,GAAK,GACf,IAAbC,EAAM,KAAWA,EAAM,GAAK,GAEhC,IAAME,EAAejgB,KAAKF,QAAQogB,mBAAmBJ,EAAOC,GAE5D/f,KAAKiG,OAAOuZ,gBAAgBS,GAC5BjgB,KAAK0f,QAAQC,KAAOG,EACpB9f,KAAK0f,QAAQE,KAAOG,GAKhC,MACJ,IAAK,SACD,YAAIthB,EACA,OAAOuB,KAAKsO,OAGhBhM,EAAMnB,WAAW1C,GACjByX,GAAO,KAAOqJ,EAAWY,OACzBvY,EAAO,KAAO2X,EAAWY,OAEpB7d,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKsO,OAAShM,EACdtC,KAAKiG,OAAO8V,OAAOtd,MAAQuB,KAAKuO,KAAQjM,EAAIid,EAAWY,QAG3D,MACJ,IAAK,OACD,YAAI1hB,EACA,OAAOuB,KAAKuO,KAGhBjM,EAAMnB,WAAW1C,GACjByX,GAAOqJ,EAAWY,OAClBvY,EAAO2X,EAAWY,OAEb7d,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKuO,KAAOjM,EACZtC,KAAKiG,OAAO8V,OAAOtd,MAAQ6D,EAAKtC,KAAKsO,OAASiR,EAAWY,QAG7D,MACJ,IAAK,SACL,IAAK,OACD,YAAI1hB,EACA,OAAOuB,KAAKgL,OAAOhF,KAAKvH,MAK5BmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKgL,OAAOhF,KAAKvH,MAAQ6D,IASzC,OAAOtC,mCAQLI,GACF,GAAIJ,KAAKC,SAAU,CAEf,IAAM+B,GACFR,KAAcxB,KAAKiG,OAAOzE,KAC1Bf,UAAcT,KAAKiG,OAAOxF,UAAUhC,MACpCsd,OAAc/b,KAAKiG,OAAO8V,OAAOtd,OAerC,GAZKuB,KAAKiB,SACNjB,KAAKiG,OAAOnF,KAAKd,KAAKF,QAAQuB,aAC9BrB,KAAKiG,OAAOI,WAAW,IAG3BrG,KAAKiG,OAASjG,KAAKF,QAAQQ,mBAG3BN,KAAKiG,OAAOuZ,gBAAkBxf,KAAKiG,OAAOuZ,iBAAmBxf,KAAKiG,OAAOwZ,aACzEzf,KAAKiG,OAAOrF,MAAkBZ,KAAKiG,OAAOrF,OAAmBZ,KAAKiG,OAAOpF,OACzEb,KAAKiG,OAAOnF,KAAkBd,KAAKiG,OAAOnF,MAAmBd,KAAKiG,OAAOlF,QAErD,WAAhBiB,EAAOR,KAAmB,CAE1B,IAAMse,EAAe9f,KAAK0f,QAAQC,KAC5BI,EAAe/f,KAAK0f,QAAQE,KAC5BK,EAAejgB,KAAKF,QAAQogB,mBAAmBJ,EAAOC,GAE5D/f,KAAKiG,OAAOuZ,gBAAgBS,QAE5BjgB,KAAKiG,OAAOzE,KAAOQ,EAAOR,KAG9BxB,KAAKiG,OAAOxF,UAAUhC,MAAQuD,EAAOvB,UACrCT,KAAKiG,OAAO8V,OAAOtd,MAAWuD,EAAO+Z,OAErC/b,KAAKgL,OAAOnJ,QAAQzB,GAGxB,OAAOJ,mCAQLkB,GAaF,OAZIlB,KAAKC,UACLD,KAAKiG,OAAOrF,MAAMM,GAClBlB,KAAKiB,YAEAjB,KAAKiB,SACNjB,KAAKiG,OAAOnF,KAAKd,KAAKF,QAAQuB,aAC9BrB,KAAKiB,WAGTjB,KAAKiG,OAAOI,WAAW,IAGpBrG,kCAQNsB,GAQD,OAPKtB,KAAKiB,SACNjB,KAAKiG,OAAOnF,KAAKQ,GACjBtB,KAAKiG,OAAOI,WAAW,GAEvBrG,KAAKiB,WAGFjB,mCAULyB,GACF,gBAAIA,EACOzB,KAAKC,UAGoB,WAAhCyB,OAAOD,GAAOE,cACd3B,KAAKC,UAAYD,KAAKC,SAEtBD,KAAKC,SAAW2B,QAAQH,GAGrBzB,oCAQP,OAAOA,KAAKiG,0CAKZ,MAAO,oCAAAvH,EAtRM6gB,KAEVY,OAAS,KAFCZ,EAKVM,YACHO,KAAa,EACbC,OAAa,EACbC,SAAa,EACbC,SAAa,GAAA9gB,EAAAP,QATAqgB,0UCAAiB,aAMjB,SAAAA,EAAY1gB,iGAASE,KAAAwgB,GACjBxgB,KAAKF,QAAUA,EAGfE,KAAKygB,cAGLzgB,KAAK0gB,iBACL1gB,KAAK2gB,cAAgB,EAErB3gB,KAAK4gB,OAAU,IACf5gB,KAAK6gB,MAAU,GACf7gB,KAAK8gB,QAAU,GACf9gB,KAAK+gB,QAAU,SAAAvjB,EAAAkB,IAAAK,IAAA,QAAAN,MAAA,SAUbM,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAI,KAER,OAAQL,GACJ,IAAK,SACL,IAAK,UACD,YAAIxD,EACA,OAAOuB,KAAKiC,IAGhBK,EAAInB,WAAW1C,KAEN,IACLuB,KAAKiC,GAAKK,GAGd,MACJ,IAAK,QACL,IAAK,UACD,YAAI7D,EACA,OAAOuB,KAAKiC,IAGhBK,EAAInB,WAAW1C,IAEP,IACJuB,KAAKiC,GAAKK,IAS1B,OAAOtC,mCAULqL,EAAOnL,EAAOE,GAChB,IAAM5C,EAAK0F,SAASmI,EAAO,KAAO,EAAKnI,SAASmI,EAAO,IAAM,EAQ7D,OANAnL,EAAM2B,QAAQ7B,KAAKygB,WAAWjjB,IAC9BwC,KAAKygB,WAAWjjB,GAAGqE,QAAQzB,GAE3BJ,KAAK0gB,cAAcljB,GAAKA,EACxBwC,KAAK2gB,gBAEE3gB,mCAQLkB,GACF,IAAI1B,EAAI2B,WAAWD,IAEfE,MAAM5B,IAAOA,EAAIQ,KAAKF,QAAQuB,eAC9B7B,EAAIQ,KAAKF,QAAQuB,aAIrB,IAAM8d,EAAU3f,EACV4f,EAAUD,EAAKnf,KAAK4gB,OACpBI,EAAUhhB,KAAK6gB,MACfI,EAAUjhB,KAAK8gB,QAXR5U,KAAAC,KAAAC,SAAA,IAab,QAAAC,EAAAC,EAA0BtM,KAAK0gB,cAA/BniB,OAAAgO,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,KAA8C,KAAnCgV,EAAmC7U,EAAA5N,eACtCyiB,IAKJlhB,KAAKygB,WAAWS,GAAalb,KAAKqZ,sBAAsBF,GACxDnf,KAAKygB,WAAWS,GAAalb,KAAKsZ,eAAe,EAAGH,GAGpDnf,KAAKygB,WAAWS,GAAalb,KAAKmb,wBAAwB,EAAG/B,GAG7Dpf,KAAKygB,WAAWS,GAAalb,KAAKob,gBAAgBH,EAAS7B,EAAI4B,KA1BtD,MAAAtU,GAAAP,KAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GA6Bb,OAAOpM,kCAQNsB,GACD,IAAI9B,EAAI2B,WAAWG,GAAYtB,KAAK+gB,SAEhC3f,MAAM5B,IAAOA,EAAIQ,KAAKF,QAAQuB,eAC9B7B,EAAIQ,KAAKF,QAAQuB,aAIrB,IAAMggB,EAAK7hB,EACL8hB,EAAKthB,KAAK+gB,QATLzO,KAAAC,KAAAC,SAAA,IAWX,QAAAC,EAAAC,EAA0B1S,KAAK0gB,cAA/BniB,OAAAgO,cAAA+F,GAAAG,EAAAC,EAAAlG,QAAAC,MAAA6F,KAA8C,KAAnC4O,EAAmCzO,EAAAhU,eACtCyiB,IAKJlhB,KAAKygB,WAAWS,GAAalb,KAAKqZ,sBAAsBgC,GACxDrhB,KAAKygB,WAAWS,GAAalb,KAAKsZ,eAAetf,KAAKygB,WAAWS,GAAalb,KAAKvH,MAAO4iB,GAG1FrhB,KAAKygB,WAAWS,GAAalb,KAAKob,gBAAgB,EAAGC,EAAIC,KArBlD,MAAA5U,GAAA6F,KAAAC,EAAA9F,EAAA,aAAA4F,GAAAI,EAAA/F,QAAA+F,EAAA/F,SAAA,WAAA4F,EAAA,MAAAC,GAwBX,OAAOxS,0CAQEqL,GACT,IAAM7N,EAAK0F,SAASmI,EAAO,KAAO,EAAKnI,SAASmI,EAAO,IAAM,EAE7D,OAAOrL,KAAKygB,WAAWjjB,wCAQd6N,GACT,IAAM7N,EAAK0F,SAASmI,EAAO,KAAO,EAAKnI,SAASmI,EAAO,IAAM,EAO7D,OALArL,KAAKygB,WAAWjjB,GAAKwC,KAAKF,QAAQK,aAGlCH,KAAKygB,WAAWjjB,GAAGwI,KAAKob,gBAAkBphB,KAAKygB,WAAWjjB,GAAGwI,KAAKob,iBAAmBphB,KAAKygB,WAAWjjB,GAAGwI,KAAKub,qBAEtGvhB,sCAQP,IAAIwhB,EAAU,EADTjO,KAAAC,KAAAC,SAAA,IAGL,QAAAC,EAAAC,EAA0B3T,KAAK0gB,cAA/BniB,OAAAgO,cAAAgH,GAAAG,EAAAC,EAAAnH,QAAAC,MAAA8G,KAA8C,KAAnC2N,EAAmCxN,EAAAjV,MAC1C,YAAIyiB,EAAJ,CAIA,GAAIlhB,KAAKygB,WAAWS,GAAalb,KAAKvH,MAAQ+hB,EAAkBiB,SAC5D,SAMJ,KAHAD,IAGgBxhB,KAAK2gB,cACjB,WAhBH,MAAAjU,GAAA8G,KAAAC,EAAA/G,EAAA,aAAA6G,GAAAI,EAAAhH,QAAAgH,EAAAhH,SAAA,WAAA6G,EAAA,MAAAC,kCA0BHiO,GACF1hB,KAAK0gB,cAAchhB,OAAS,EAC5BM,KAAK2gB,cAAgB,EAFL,IAAArE,KAAAC,KAAAC,SAAA,IAIhB,QAAAC,EAAAC,EAAwB1c,KAAKygB,WAA7BliB,OAAAgO,cAAA+P,GAAAG,EAAAC,EAAAlQ,QAAAC,MAAA6P,KAAyC,KAA9BqF,EAA8BlF,EAAAhe,MACrCkjB,EAAU3b,KAAKqZ,sBAAsBrf,KAAKF,QAAQuB,aAClDsgB,EAAU3b,KAAKvH,MAAQ,EAEnBijB,GACAC,EAAUtb,WAAW,IATb,MAAAqG,GAAA6P,KAAAC,EAAA9P,EAAA,aAAA4P,GAAAI,EAAA/P,QAAA+P,EAAA/P,SAAA,WAAA4P,EAAA,MAAAC,GAahB,OAAOxc,sCAeP,OANI4gB,OAAY5gB,KAAK4gB,OACjBC,MAAY7gB,KAAK6gB,MACjBC,QAAY9gB,KAAK8gB,QACjBC,QAAY/gB,KAAK+gB,YAGd/e,8BAQP,OAAOF,KAAKC,UAAU/B,KAAKgC,6CAK3B,MAAO,sCAAAtD,EArQM8hB,KACViB,SAAW,KAAAhiB,EAAAP,QADDshB,0UCCAoB,aAIjB,SAAAA,EAAY9hB,iGAASE,KAAA4hB,GAEjB5hB,KAAK2F,SAAW7F,EAAQ6F,SAGxB3F,KAAK6hB,WAAc/P,EAAM,EAAGvP,EAAM,EAAGuf,EAAM,GAC3C9hB,KAAK+hB,QAAcjQ,EAAM,EAAGvP,EAAM,EAAGuf,GAAO,GAC5C9hB,KAAKgiB,KAAclQ,EAAM,EAAGvP,EAAM,EAAGuf,EAAM,GAE3C9hB,KAAK2F,SAASsc,YAAYjiB,KAAK6hB,UAAU/P,EAAG9R,KAAK6hB,UAAUtf,EAAGvC,KAAK6hB,UAAUC,GAC7E9hB,KAAK2F,SAASuc,eAAeliB,KAAK+hB,OAAOjQ,EAAG9R,KAAK+hB,OAAOxf,EAAGvC,KAAK+hB,OAAOD,EAAG9hB,KAAKgiB,IAAIlQ,EAAG9R,KAAKgiB,IAAIzf,EAAGvC,KAAKgiB,IAAIF,2CAUzG/iB,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAI,KAER,OAAQL,GACJ,IAAK,IACL,IAAK,IACL,IAAK,IACD,YAAIxD,EACA,OAAOuB,KAAK6hB,UAAU5f,GAG1BK,EAAInB,WAAW1C,GAEV2C,MAAMkB,KACPtC,KAAK6hB,UAAU5f,GAAKK,EACpBtC,KAAK2F,SAASsc,YAAYjiB,KAAK6hB,UAAU/P,EAAG9R,KAAK6hB,UAAUtf,EAAGvC,KAAK6hB,UAAUC,IAGjF,MACJ,IAAK,KACL,IAAK,KACL,IAAK,KACD,YAAIrjB,EACA,OAAOuB,KAAK+hB,OAAO9f,EAAE6Y,OAAO,IAGhCxY,EAAInB,WAAW1C,GAEV2C,MAAMkB,KACPtC,KAAK+hB,OAAO9f,EAAE6Y,OAAO,IAAMxY,EAC3BtC,KAAK2F,SAASuc,eAAeliB,KAAK+hB,OAAOjQ,EAAG9R,KAAK+hB,OAAOxf,EAAGvC,KAAK+hB,OAAOD,EAAG9hB,KAAKgiB,IAAIlQ,EAAG9R,KAAKgiB,IAAIzf,EAAGvC,KAAKgiB,IAAIF,IAG/G,MACJ,IAAK,KACL,IAAK,KACL,IAAK,KACD,YAAIrjB,EACA,OAAOuB,KAAKgiB,IAAI/f,EAAE6Y,OAAO,IAG7BxY,EAAInB,WAAW1C,GAEV2C,MAAMkB,KACPtC,KAAKgiB,IAAI/f,EAAE6Y,OAAO,IAAMxY,EACxBtC,KAAK2F,SAASuc,eAAeliB,KAAK+hB,OAAOjQ,EAAG9R,KAAK+hB,OAAOxf,EAAGvC,KAAK+hB,OAAOD,EAAG9hB,KAAKgiB,IAAIlQ,EAAG9R,KAAKgiB,IAAIzf,EAAGvC,KAAKgiB,IAAIF,KAS3H,OAAO9hB,sCAcP,OALI6hB,UAAc7hB,KAAK6hB,UACnBE,OAAc/hB,KAAK+hB,OACnBC,IAAchiB,KAAKgiB,QAGhBhgB,8BAQP,OAAOF,KAAKC,UAAU/B,KAAKgC,6CAK3B,MAAO,6BAAAtD,EAjHMkjB,GAiHNniB,EAAAP,QAjHM0iB,4UCLrB1f,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqB2kB,cAgBjB,SAAAA,EAAYriB,EAASC,iGAAYC,KAAAmiB,GAAA,IAAAxb,oKAAA3G,MAAAmiB,EAAAvb,WAAA1I,OAAA2I,eAAAsb,IAAAxkB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAKlB,OAAS3F,EAAQsiB,eAEtBzb,EAAKkb,WAAiB/P,EAAM,EAAGvP,EAAM,EAAGuf,EAAM,GAC9Cnb,EAAK0b,cAAiBvQ,EAAM,EAAGvP,EAAM,EAAGuf,EAAM,GAE9Cnb,EAAKlB,OAAO6c,YAAgB,EAC5B3b,EAAKlB,OAAO8c,YAAgB,IAC5B5b,EAAKlB,OAAO+c,cAAgB,EAE5B7b,EAAKlB,OAAOgd,eAAiB,IAC7B9b,EAAKlB,OAAOid,eAAiB,IAC7B/b,EAAKlB,OAAOkd,cAAiB,EAE7Bhc,EAAKlB,OAAOmd,aAAsD,iBAA9Bjc,EAAKlB,OAAOmd,aAA8B,OAAajc,EAAKlB,OAAOod,MAAQ,EAC/Glc,EAAKlB,OAAOqd,cAAsD,iBAA9Bnc,EAAKlB,OAAOqd,cAA8B,UAAanc,EAAKlB,OAAOsd,kBAAoB,EAE3Hpc,EAAKlB,OAAOwc,YAAYtb,EAAKkb,UAAU/P,EAAGnL,EAAKkb,UAAUtf,EAAGoE,EAAKkb,UAAUC,GAC3Enb,EAAKlB,OAAOyc,eAAevb,EAAK0b,aAAavQ,EAAGnL,EAAK0b,aAAa9f,EAAGoE,EAAK0b,aAAaP,GAGvFnb,EAAKlF,UAvBwBkF,iXA2B3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAI,KAER,OAAQL,GACJ,IAAK,IACL,IAAK,IACL,IAAK,IACD,YAAIxD,EACA,OAAOuB,KAAK6hB,UAAU5f,GAG1BK,EAAInB,WAAW1C,GAEV2C,MAAMkB,KACPtC,KAAK6hB,UAAU5f,GAAKK,EACpBtC,KAAKyF,OAAOwc,YAAYjiB,KAAK6hB,UAAU/P,EAAG9R,KAAK6hB,UAAUtf,EAAGvC,KAAK6hB,UAAUC,IAG/E,MACJ,IAAK,KACL,IAAK,KACL,IAAK,KACD,YAAIrjB,EACA,OAAOuB,KAAKqiB,aAAapgB,EAAE6Y,OAAO,IAGtCxY,EAAInB,WAAW1C,GAEV2C,MAAMkB,KACPtC,KAAKqiB,aAAapgB,EAAE6Y,OAAO,IAAMxY,EACjCtC,KAAKyF,OAAOyc,eAAeliB,KAAKqiB,aAAavQ,EAAG9R,KAAKqiB,aAAa9f,EAAGvC,KAAKqiB,aAAaP,IAG3F,MACJ,IAAK,cACD,YAAIrjB,EACA,OAAOuB,KAAKyF,OAAO6c,aAGvBhgB,EAAInB,WAAW1C,KAEN,IACLuB,KAAKyF,OAAO6c,YAAchgB,GAG9B,MACJ,IAAK,cACD,YAAI7D,EACA,OAAOuB,KAAKyF,OAAO8c,aAGvBjgB,EAAInB,WAAW1C,IAEP,IACJuB,KAAKyF,OAAO8c,YAAcjgB,GAG9B,MACJ,IAAK,gBACD,YAAI7D,EACA,OAAOuB,KAAKyF,OAAO+c,cAGvBlgB,EAAInB,WAAW1C,GAEV2C,MAAMkB,KACPtC,KAAKyF,OAAO+c,cAAgBlgB,GAGhC,MACJ,IAAK,iBACD,YAAI7D,EACA,OAAOuB,KAAKyF,OAAOgd,eAGvBngB,EAAInB,WAAW1C,GAEV2C,MAAMkB,KACPtC,KAAKyF,OAAOgd,eAAiBngB,GAGjC,MACJ,IAAK,iBACD,YAAI7D,EACA,OAAOuB,KAAKyF,OAAOid,eAGvBpgB,EAAInB,WAAW1C,GAEV2C,MAAMkB,KACPtC,KAAKyF,OAAOid,eAAiBpgB,GAGjC,MACJ,IAAK,gBACD,YAAI7D,EACA,OAAOuB,KAAKyF,OAAOkd,cAGvBrgB,EAAInB,WAAW1C,GAEV2C,MAAMkB,KACPtC,KAAKyF,OAAOkd,cAAgBrgB,GAGhC,MACJ,IAAK,eACD,YAAI7D,EACA,OAAOuB,KAAKyF,OAAOmd,cAGvBtgB,EAAI,QAAQa,KAAK1E,GAASiD,OAAOjD,GAAOuc,cAAgBtZ,OAAOjD,GAAOkD,iBAE7DwgB,EAAOa,iBACZhjB,KAAKyF,OAAOmd,aAAoD,iBAA7B5iB,KAAKyF,OAAOmd,aAA6BtgB,EAAI6f,EAAOa,eAAe1gB,IAG1G,MACJ,IAAK,gBACD,YAAI7D,EACA,OAAOuB,KAAKyF,OAAOqd,eAGvBxgB,EAAIZ,OAAOjD,GAAOsH,QAAQ,KAAM,IAAIpE,iBAE3BwgB,EAAOc,kBACZjjB,KAAKyF,OAAOqd,cAAsD,iBAA9B9iB,KAAKyF,OAAOqd,cAA8BxgB,EAAI6f,EAAOc,gBAAgB3gB,KASzH,OAAOtC,uCAsBP,OAhBAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKyF,OAAOY,WAAW,GAEnBrG,KAAKC,UAILD,KAAKE,MAAM2B,QAAQ7B,KAAKyF,QACxBzF,KAAKyF,OAAO5D,QAAQ7B,KAAKI,SAKzBJ,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGrBJ,sCAmBP,OAbIyB,MAAmBzB,KAAKC,SACxB4hB,UAAmB7hB,KAAK6hB,UACxBQ,aAAmBriB,KAAKqiB,aACxBC,YAAmBtiB,KAAKyF,OAAO6c,YAC/BC,YAAmBviB,KAAKyF,OAAO8c,YAC/BC,cAAmBxiB,KAAKyF,OAAO+c,cAC/BC,eAAmBziB,KAAKyF,OAAOgd,eAC/BC,eAAmB1iB,KAAKyF,OAAOid,eAC/BC,cAAmB3iB,KAAKyF,OAAOkd,cAC/BC,aAAmB5iB,KAAKyF,OAAOmd,aAC/BE,cAAmB9iB,KAAKyF,OAAOqd,kBAG5B9gB,gCAKP,MAAO,2BAAAvC,EAxOM0iB,KACVa,gBACHE,WAAe,EACfL,KAAe,GAHFV,EAMVc,iBACHE,OAAgB,EAChBC,QAAgB,EAChBC,YAAgB,GAAA5jB,EAAAP,QATHijB,4UCPrBjgB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqB8lB,cASjB,SAAAA,EAAYxjB,EAASC,iGAAYC,KAAAsjB,GAAA,IAAA3c,oKAAA3G,MAAAsjB,EAAA1c,WAAA1I,OAAA2I,eAAAyc,IAAA3lB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAK4c,QACL5c,EAAK6c,UAAY1jB,EAAQ2jB,kBACzB9c,EAAK+c,IAAY5jB,EAAQK,aACzBwG,EAAKgd,IAAY7jB,EAAQK,aACzBwG,EAAKid,KAAY9jB,EAAQ+jB,qBAGzBld,EAAK+c,IAAI1d,KAAKvH,MAAc,EAC5BkI,EAAKgd,IAAI3d,KAAKvH,MAAc,EAC5BkI,EAAKid,KAAKpiB,KAA6C,iBAAnBmF,EAAKid,KAAKpiB,KAAqB,UAAamF,EAAKid,KAAKE,SAAW,EACrGnd,EAAKid,KAAKnjB,UAAUhC,MAAQ,IAC5BkI,EAAKid,KAAKG,EAAEtlB,MAAgB4K,KAAK2a,QACjCrd,EAAKid,KAAK5d,KAAKvH,MAAa,EAG5BkI,EAAKlF,UAlBwBkF,iXAsB3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OAAQ3F,GACJ,IAAK,OACD,YAAIxD,EACA,OAAOuB,KAAKwjB,UAAUzc,OAG1BzE,EAAMY,SAASzE,EAAO,IACtByX,EAAM,EACNtO,EAAM5H,KAAKujB,KAAK7jB,OAAS,EAEX,OAAVjB,GACAuB,KAAKwjB,UAAUzc,OAAS,KAIxB/G,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKE,MAAM2B,QAAQ7B,KAAKI,SAChBkC,GAAK4T,GAAS5T,GAAKsF,IAC3B5H,KAAKwjB,UAAUzc,OAAS/G,KAAKujB,KAAKjhB,GAClCtC,KAAK6B,WAGT,MACJ,IAAK,MACL,IAAK,MACD,YAAIpD,EACA,OAAOuB,KAAKiC,GAAG+D,KAAKvH,MAKxBmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKiC,GAAG+D,KAAKvH,MAAQ6D,GAGzB,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAK4jB,KAAKnjB,UAAUhC,MAG/B6D,EAAMnB,WAAW1C,GACjByX,EAAM,GACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAK4jB,KAAKnjB,UAAUhC,MAAQ6D,GAGhC,MACJ,IAAK,OACD,OAAOtC,KAAKujB,MAMxB,OAAOvjB,uCA+BP,OAzBAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKwjB,UAAUnd,WAAW,GAC1BrG,KAAK0jB,IAAIrd,WAAW,GACpBrG,KAAK2jB,IAAItd,WAAW,GACpBrG,KAAK4jB,KAAKvd,WAAW,GAEjBrG,KAAKC,UAILD,KAAKE,MAAM2B,QAAQ7B,KAAK0jB,KACxB1jB,KAAK0jB,IAAI7hB,QAAQ7B,KAAKI,QAGtBJ,KAAKE,MAAM2B,QAAQ7B,KAAK4jB,MACxB5jB,KAAK4jB,KAAK/hB,QAAQ7B,KAAKwjB,WACvBxjB,KAAKwjB,UAAU3hB,QAAQ7B,KAAK2jB,KAC5B3jB,KAAK2jB,IAAI9hB,QAAQ7B,KAAKI,SAKtBJ,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGrBJ,mCAWLikB,EAAStZ,GAAe,IAAAxC,EAAAnI,KAiB1B,OAhBKikB,aAAmBlc,aAA6B,OAAZkc,GACrCjkB,KAAKwjB,UAAUzc,OAASkd,EACxBjkB,KAAKujB,KAAKpI,KAAK8I,IACRA,aAAmB7b,cAM4B,sBAAlDlK,OAAOmB,UAAUoH,SAAS9I,KAAKgN,KAC/BA,EAAgB,cAGpB3K,KAAKF,QAAQuI,gBAAgB4b,EATL,SAAAld,GACpBoB,EAAKqb,UAAUzc,OAASA,EACxBoB,EAAKob,KAAKpI,KAAKpU,IAOoC4D,IAGpD3K,oCAYJujB,EAAM9Y,EAASC,EAAiBC,EAAeC,GAAkB,IAAApC,EAAAxI,KAEpE,GAAqD,oBAAjD9B,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAA2B,CACpE,IAAMoD,EAAapD,UAAU,GAEzB,SAAUoD,IACV0Y,EAAO1Y,EAAW0Y,MAGlB,YAAa1Y,IACbJ,EAAUI,EAAWJ,SAGrB,YAAaI,IACbH,EAAkBG,EAAWC,SAG7B,UAAWD,IACXF,EAAgBE,EAAWvD,OAG3B,aAAcuD,IACdD,EAAmBC,EAAWE,UAIjC5E,MAAMC,QAAQmd,KACfA,GAAQA,IAGZvjB,KAAKujB,KAAO,IAAIpd,MAAMod,EAAK7jB,QA4E3B,IAxEA,IAAIwL,KAEExM,EAAIwE,SAASuH,EAAS,IAGtBU,EAAO,SAACC,EAAKC,GACf,IAAMC,EAAM,IAAIC,eAEhBD,EAAIb,QAAW/L,EAAI,EAAKA,EAAI,IAE5B4M,EAAIE,UAAY,SAAA3C,GACPqC,GAA8D,sBAAlDhN,OAAOmB,UAAUoH,SAAS9I,KAAKgN,IAC5CA,EAAc9B,EAAOya,EAAO7X,oBAGhCP,MAGJI,EAAI4Y,YAAc,SAAArb,GACVqC,EACAI,EAAIK,QACwD,sBAArDzN,OAAOmB,UAAUoH,SAAS9I,KAAKiN,IACtCA,EAAiB/B,IAIzByC,EAAIM,QAAU,SAAA/C,GACLqC,GAA8D,sBAAlDhN,OAAOmB,UAAUoH,SAAS9I,KAAKgN,IAC5CA,EAAc9B,EAAOya,EAAOzX,YAGhCX,MAGJI,EAAIQ,OAAS,SAAAjD,GACT,GAAmB,MAAfyC,EAAIS,OAAgB,CACpB,IAAM7D,EAAcoD,EAAIU,SAExB,KAAM9D,aAAuBE,aACzB,OAwBJI,EAAK1I,QAAQuI,gBAAgBH,EArBC,SAAA+D,GAC1BzD,EAAK+a,KAAKlY,GAASY,EAGnB,IAAK,IAAIzO,EAAI,EAAG8I,EAAMkC,EAAK+a,KAAK7jB,OAAQlC,EAAI8I,EAAK9I,IAC7C,YAAIgL,EAAK+a,KAAK/lB,GACV,OAIgD,sBAApDU,OAAOmB,UAAUoH,SAAS9I,KAAK+M,IAC/BA,EAAgB7B,IAII,SAAAvB,GAC8B,sBAAlDpJ,OAAOmB,UAAUoH,SAAS9I,KAAKgN,IAC/BA,EAAcrD,EAAOgc,EAAO1W,kBAQ5CtB,EAAIuB,KAAK,MAAOzB,MAChBE,EAAIwB,aAAe,cACnBxB,EAAIyB,KAAK,OAGJvP,EAAI,EAAG8I,EAAMid,EAAK7jB,OAAQlC,EAAI8I,EAAK9I,IACjB,iBAAZ+lB,EAAK/lB,GAEZ2N,EAAKoY,EAAK/lB,GAAIA,GACP+lB,EAAK/lB,aAAcuK,cAE1B/H,KAAKujB,KAAK/lB,GAAK+lB,EAAK/lB,IAI5B,OAAOwC,mCAILyB,GACF,gBAAIA,EACOzB,KAAKC,UAGoB,WAAhCyB,OAAOD,GAAOE,cACd3B,KAAKC,UAAYD,KAAKC,SAEtBD,KAAKC,SAAW2B,QAAQH,GAI5BzB,KAAK6B,UAEE7B,uCAYP,OANIyB,MAAUzB,KAAKC,SACfyjB,IAAU1jB,KAAK0jB,IAAI1d,KAAKvH,MACxBklB,IAAU3jB,KAAK2jB,IAAI3d,KAAKvH,MACxBmlB,KAAU5jB,KAAK4jB,KAAKnjB,UAAUhC,UAG3BuD,gCAKP,MAAO,2BAAAvC,EArUM6jB,KACVzX,WAAqB,QADXyX,EAEV7X,mBAAqB,UAFX6X,EAGV1W,aAAqB,SAAAnN,EAAAP,QAHXokB,4UCPrBphB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqB2mB,cAOjB,SAAAA,EAAYrkB,EAASC,iGAAYC,KAAAmkB,GAAA,IAAAxd,oKAAA3G,MAAAmkB,EAAAvd,WAAA1I,OAAA2I,eAAAsd,IAAAxmB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAKtB,MAAWvF,EAAQskB,YAAYD,EAAME,gBAC1C1d,EAAK+c,IAAW5jB,EAAQK,aACxBwG,EAAKgd,IAAW7jB,EAAQK,aACxBwG,EAAKid,KAAW9jB,EAAQ+jB,qBACxBld,EAAK2d,SAAWxkB,EAAQK,aAGxBwG,EAAKtB,MAAMkf,UAAU9lB,MAAQ,EAC7BkI,EAAK+c,IAAI1d,KAAKvH,MAAe,EAC7BkI,EAAKgd,IAAI3d,KAAKvH,MAAe,EAC7BkI,EAAKid,KAAKpiB,KAA8C,iBAAnBmF,EAAKid,KAAKpiB,KAAqB,UAAamF,EAAKid,KAAKE,SAAW,EACtGnd,EAAKid,KAAKnjB,UAAUhC,MAAS,IAC7BkI,EAAKid,KAAKG,EAAEtlB,MAAiB4K,KAAK2a,QAClCrd,EAAKid,KAAK5d,KAAKvH,MAAc,EAC7BkI,EAAK2d,SAASte,KAAKvH,MAAU,EAG7BkI,EAAKlF,UApBwBkF,iXAwB3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OAAQ3F,GACJ,IAAK,YACL,IAAK,OACD,YAAIxD,EACA,OAAOuB,KAAKqF,MAAMkf,UAAU9lB,MAGhC6D,EAAMnB,WAAW1C,GACjByX,EAAM,EACNtO,EAAMuc,EAAME,eAEP/hB,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKqF,MAAMkf,UAAU9lB,MAAQ6D,GAGjC,MACJ,IAAK,MACL,IAAK,MACL,IAAK,WACD,YAAI7D,EACA,OAAOuB,KAAKiC,GAAG+D,KAAKvH,MAKxBmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKiC,GAAG+D,KAAKvH,MAAQ6D,GAGzB,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAK4jB,KAAKnjB,UAAUhC,MAG/B6D,EAAMnB,WAAW1C,GACjByX,EAAM,GACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAK4jB,KAAKnjB,UAAUhC,MAAQ6D,IAS5C,OAAOtC,uCAqCP,OA/BAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKqF,MAAMgB,WAAW,GACtBrG,KAAK0jB,IAAIrd,WAAW,GACpBrG,KAAK2jB,IAAItd,WAAW,GACpBrG,KAAK4jB,KAAKvd,WAAW,GACrBrG,KAAKskB,SAASje,WAAW,GAErBrG,KAAKC,UAILD,KAAKE,MAAM2B,QAAQ7B,KAAK0jB,KACxB1jB,KAAK0jB,IAAI7hB,QAAQ7B,KAAKI,QAGtBJ,KAAKE,MAAM2B,QAAQ7B,KAAK4jB,MACxB5jB,KAAK4jB,KAAK/hB,QAAQ7B,KAAKqF,OACvBrF,KAAKqF,MAAMxD,QAAQ7B,KAAK2jB,KACxB3jB,KAAK2jB,IAAI9hB,QAAQ7B,KAAKI,QAItBJ,KAAKqF,MAAMxD,QAAQ7B,KAAKskB,UACxBtkB,KAAKskB,SAASziB,QAAQ7B,KAAKqF,QAK3BrF,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGrBJ,sCAcP,OARIyB,MAAazB,KAAKC,SAClBoO,KAAarO,KAAKqF,MAAMkf,UAAU9lB,MAClCilB,IAAa1jB,KAAK0jB,IAAI1d,KAAKvH,MAC3BklB,IAAa3jB,KAAK2jB,IAAI3d,KAAKvH,MAC3BmlB,KAAa5jB,KAAK4jB,KAAKnjB,UAAUhC,MACjC6lB,SAAatkB,KAAKskB,SAASte,KAAKvH,UAG7BuD,gCAKP,MAAO,0BAAAvC,EAvJM0kB,KACVE,eAAiB,EAAA5kB,EAAAP,QADPilB,4UCPrBjiB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqBgnB,cAKjB,SAAAA,EAAY1kB,EAASC,iGAAYC,KAAAwkB,GAAA,IAAA7d,oKAAA3G,MAAAwkB,EAAA5d,WAAA1I,OAAA2I,eAAA2d,IAAA7mB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAKtB,MAAWvF,EAAQskB,cACxBzd,EAAK8d,IAAW3kB,EAAQK,aACxBwG,EAAKid,KAAW9jB,EAAQ+jB,qBACxBld,EAAK2d,SAAWxkB,EAAQK,aAGxBwG,EAAKtB,MAAMkf,UAAU9lB,MAAQ,EAC7BkI,EAAKpG,MAAMyF,KAAKvH,MAAa,EAC7BkI,EAAKnG,KAAK/B,MAAmB,EAC7BkI,EAAK8d,IAAIze,KAAKvH,MAAe,EAC7BkI,EAAKid,KAAKpiB,KAA8C,iBAAnBmF,EAAKid,KAAKpiB,KAAqB,UAAamF,EAAKid,KAAKE,SAAW,EACtGnd,EAAKid,KAAKnjB,UAAUhC,MAAS,IAC7BkI,EAAKid,KAAKG,EAAEtlB,MAAiB4K,KAAK2a,QAClCrd,EAAKid,KAAK5d,KAAKvH,MAAc,EAC7BkI,EAAK2d,SAASte,KAAKvH,MAAU,EAC7BkI,EAAK+d,UAAwB,EAG7B/d,EAAKlF,UAILkF,EAAKtG,IAAIwB,QAAQ8E,EAAKpG,OACtBoG,EAAKpG,MAAMsB,QAAQ8E,EAAKtB,MAAMkf,WA1BD5d,iXA8B3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OAAQ3F,GACJ,IAAK,YACL,IAAK,OACD,YAAIxD,EACA,OAAOuB,KAAKqF,MAAMkf,UAAU9lB,MAKhCmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKqF,MAAMkf,UAAU9lB,MAAQ6D,EAC7BtC,KAAKO,MAAMyF,KAAKvH,MAAauB,KAAKqF,MAAMkf,UAAU9lB,MAAQuB,KAAK0kB,WAGnE,MACJ,IAAK,QACD,YAAIjmB,EACA,OAAOuB,KAAK0kB,UAKhB9c,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKO,MAAMyF,KAAKvH,MAAQuB,KAAKqF,MAAMkf,UAAU9lB,MAAQ6D,EACrDtC,KAAK0kB,UAAmBpiB,GAG5B,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAKQ,KAAK/B,MAGrB6D,EAAMnB,WAAW1C,GACjByX,EAAM,EACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKQ,KAAK/B,MAAQ6D,GAGtB,MACJ,IAAK,MACL,IAAK,WACD,YAAI7D,EACA,OAAOuB,KAAKiC,GAAG+D,KAAKvH,MAKxBmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKiC,GAAG+D,KAAKvH,MAAQ6D,GAGzB,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAK4jB,KAAKnjB,UAAUhC,MAG/B6D,EAAMnB,WAAW1C,GACjByX,EAAM,GACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAK4jB,KAAKnjB,UAAUhC,MAAQ6D,IAS5C,OAAOtC,uCA6BP,OAvBAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKqF,MAAMgB,WAAW,GACtBrG,KAAKykB,IAAIpe,WAAW,GACpBrG,KAAK4jB,KAAKvd,WAAW,GACrBrG,KAAKskB,SAASje,WAAW,GAGzBrG,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGpBJ,KAAKC,WAELD,KAAKE,MAAM2B,QAAQ7B,KAAK4jB,MACxB5jB,KAAK4jB,KAAK/hB,QAAQ7B,KAAKqF,OACvBrF,KAAKqF,MAAMxD,QAAQ7B,KAAKykB,KACxBzkB,KAAKykB,IAAI5iB,QAAQ7B,KAAKI,QAItBJ,KAAKqF,MAAMxD,QAAQ7B,KAAKskB,UACxBtkB,KAAKskB,SAASziB,QAAQ7B,KAAKqF,QAGxBrF,kCAINsB,EAAUC,GASX,gBAAA7C,EAAAe,EAAAnB,EAAAd,GAAA,OAAAiC,MAAAklB,SAAAtlB,WAAA,IAAAJ,EAAAf,OAAA0mB,yBAAAnlB,EAAAnB,GAAA,YAAAW,EAAA,KAAAO,EAAAtB,OAAA2I,eAAApH,GAAA,cAAAD,OAAA,EAAAd,EAAAc,EAAAlB,EAAAd,GAAA,aAAAyB,EAAA,OAAAA,EAAAR,MAAA,IAAAyD,EAAAjD,EAAAZ,IAAA,gBAAA6D,IAAAvE,KAAAH,QAAA,GARAgnB,EAAAnlB,UAAAuH,WAAA1I,OAAA2I,eAAA2d,EAAAnlB,WAAA,OAAAW,MAAArC,KAAAqC,KAAWsB,EAAUC,GAEjBvB,KAAKC,WAELD,KAAKK,IAAIwB,QAAQ7B,KAAKO,OACtBP,KAAKO,MAAMsB,QAAQ7B,KAAKqF,MAAMkf,YAG3BvkB,sCAeP,OATIyB,MAAazB,KAAKC,SAClBoO,KAAarO,KAAKqF,MAAMkf,UAAU9lB,MAClC8B,MAAaP,KAAK0kB,UAClBlkB,KAAaR,KAAKQ,KAAK/B,MACvBgmB,IAAazkB,KAAKykB,IAAIze,KAAKvH,MAC3BmlB,KAAa5jB,KAAK4jB,KAAKnjB,UAAUhC,MACjC6lB,SAAatkB,KAAKskB,SAASte,KAAKvH,UAG7BuD,gCAKP,MAAO,2BAAAvC,EA9LM+kB,GA8LN/kB,EAAAP,QA9LMslB,4UCPrBtiB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqBqnB,cAKjB,SAAAA,EAAY/kB,EAASC,iGAAYC,KAAA6kB,GAAA,IAAAle,oKAAA3G,MAAA6kB,EAAAje,WAAA1I,OAAA2I,eAAAge,IAAAlnB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAKtB,MAAWvF,EAAQskB,cACxBzd,EAAK8d,IAAW3kB,EAAQK,aACxBwG,EAAKid,KAAW9jB,EAAQ+jB,qBACxBld,EAAK2d,SAAWxkB,EAAQK,aAGxBwG,EAAKtB,MAAMkf,UAAU9lB,MAAQ,EAC7BkI,EAAKpG,MAAMyF,KAAKvH,MAAa,EAC7BkI,EAAKnG,KAAK/B,MAAmB,EAC7BkI,EAAK8d,IAAIze,KAAKvH,MAAe,EAC7BkI,EAAKid,KAAKpiB,KAA8C,iBAAnBmF,EAAKid,KAAKpiB,KAAqB,UAAamF,EAAKid,KAAKE,SAAW,EACtGnd,EAAKid,KAAKnjB,UAAUhC,MAAS,IAC7BkI,EAAKid,KAAKG,EAAEtlB,MAAiB4K,KAAK2a,QAClCrd,EAAKid,KAAK5d,KAAKvH,MAAc,EAC7BkI,EAAK2d,SAASte,KAAKvH,MAAU,EAC7BkI,EAAK+d,UAAwB,EAG7B/d,EAAKlF,UAILkF,EAAKtG,IAAIwB,QAAQ8E,EAAKpG,OACtBoG,EAAKpG,MAAMsB,QAAQ8E,EAAKtB,MAAMkf,WA1BD5d,iXA8B3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OAAQ3F,GACJ,IAAK,YACL,IAAK,OACD,YAAIxD,EACA,OAAOuB,KAAKqF,MAAMkf,UAAU9lB,MAKhCmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKqF,MAAMkf,UAAU9lB,MAAQ6D,EAC7BtC,KAAKO,MAAMyF,KAAKvH,MAAauB,KAAKqF,MAAMkf,UAAU9lB,MAAQuB,KAAK0kB,WAGnE,MACJ,IAAK,QACD,YAAIjmB,EACA,OAAOuB,KAAK0kB,UAKhB9c,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKO,MAAMyF,KAAKvH,MAAQuB,KAAKqF,MAAMkf,UAAU9lB,MAAQ6D,EACrDtC,KAAK0kB,UAAmBpiB,GAG5B,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAKQ,KAAK/B,MAGrB6D,EAAMnB,WAAW1C,GACjByX,EAAM,EACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKQ,KAAK/B,MAAQ6D,GAGtB,MACJ,IAAK,MACL,IAAK,WACD,YAAI7D,EACA,OAAOuB,KAAKiC,GAAG+D,KAAKvH,MAKxBmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKiC,GAAG+D,KAAKvH,MAAQ6D,GAGzB,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAK4jB,KAAKnjB,UAAUhC,MAG/B6D,EAAMnB,WAAW1C,GACjByX,EAAM,GACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAK4jB,KAAKnjB,UAAUhC,MAAQ6D,IAS5C,OAAOtC,uCA6BP,OAvBAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKqF,MAAMgB,WAAW,GACtBrG,KAAKykB,IAAIpe,WAAW,GACpBrG,KAAK4jB,KAAKvd,WAAW,GACrBrG,KAAKskB,SAASje,WAAW,GAGzBrG,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGpBJ,KAAKC,WAELD,KAAKE,MAAM2B,QAAQ7B,KAAK4jB,MACxB5jB,KAAK4jB,KAAK/hB,QAAQ7B,KAAKqF,OACvBrF,KAAKqF,MAAMxD,QAAQ7B,KAAKykB,KACxBzkB,KAAKykB,IAAI5iB,QAAQ7B,KAAKI,QAItBJ,KAAKqF,MAAMxD,QAAQ7B,KAAKskB,UACxBtkB,KAAKskB,SAASziB,QAAQ7B,KAAKqF,QAGxBrF,kCAINsB,EAAUC,GASX,gBAAA7C,EAAAe,EAAAnB,EAAAd,GAAA,OAAAiC,MAAAklB,SAAAtlB,WAAA,IAAAJ,EAAAf,OAAA0mB,yBAAAnlB,EAAAnB,GAAA,YAAAW,EAAA,KAAAO,EAAAtB,OAAA2I,eAAApH,GAAA,cAAAD,OAAA,EAAAd,EAAAc,EAAAlB,EAAAd,GAAA,aAAAyB,EAAA,OAAAA,EAAAR,MAAA,IAAAyD,EAAAjD,EAAAZ,IAAA,gBAAA6D,IAAAvE,KAAAH,QAAA,GARAqnB,EAAAxlB,UAAAuH,WAAA1I,OAAA2I,eAAAge,EAAAxlB,WAAA,OAAAW,MAAArC,KAAAqC,KAAWsB,EAAUC,GAEjBvB,KAAKC,WAELD,KAAKK,IAAIwB,QAAQ7B,KAAKO,OACtBP,KAAKO,MAAMsB,QAAQ7B,KAAKqF,MAAMkf,YAG3BvkB,sCAeP,OATIyB,MAAazB,KAAKC,SAClBoO,KAAarO,KAAKqF,MAAMkf,UAAU9lB,MAClC8B,MAAaP,KAAK0kB,UAClBlkB,KAAaR,KAAKQ,KAAK/B,MACvBgmB,IAAazkB,KAAKykB,IAAIze,KAAKvH,MAC3BmlB,KAAa5jB,KAAK4jB,KAAKnjB,UAAUhC,MACjC6lB,SAAatkB,KAAKskB,SAASte,KAAKvH,UAG7BuD,gCAKP,MAAO,4BAAAvC,EA9LMolB,GA8LNplB,EAAAP,QA9LM2lB,4UCPrB3iB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqBsnB,cAOjB,SAAAA,EAAYhlB,EAASC,iGAAYC,KAAA8kB,GAAA,IAAAne,oKAAA3G,MAAA8kB,EAAAle,WAAA1I,OAAA2I,eAAAie,IAAAnnB,KAAAqC,KACvBF,EAASC,IAEf4G,EAAKoe,eAAiB,GACtBpe,EAAKqe,QAAiB,IAAI7e,MAAM2e,EAAOG,gBAEvC,IAAK,IAAIznB,EAAI,EAAGA,EAAIsnB,EAAOG,eAAgBznB,IACvCmJ,EAAKqe,QAAQxnB,GAAqBsC,EAAQ+jB,qBAC1Cld,EAAKqe,QAAQxnB,GAAGgE,KAAmD,iBAAzBmF,EAAKqe,QAAQxnB,GAAGgE,KAAqB,UAAamF,EAAKqe,QAAQxnB,GAAG0nB,SAAW,EACvHve,EAAKqe,QAAQxnB,GAAGiD,UAAUhC,MAAQ,IAClCkI,EAAKqe,QAAQxnB,GAAGumB,EAAEtlB,MAAgB,EAClCkI,EAAKqe,QAAQxnB,GAAGwI,KAAKvH,MAAa,EAGtCkI,EAAK8d,IAAW3kB,EAAQK,aACxBwG,EAAK2d,SAAWxkB,EAAQK,aAGxBwG,EAAKpG,MAAMyF,KAAKvH,MAAW,EAC3BkI,EAAKnG,KAAK/B,MAAiB,EAC3BkI,EAAK8d,IAAIze,KAAKvH,MAAa,EAC3BkI,EAAK2d,SAASte,KAAKvH,MAAQ,EAC3BkI,EAAK+d,UAAsB,EAG3B/d,EAAKlF,UAILkF,EAAKtG,IAAIwB,QAAQ8E,EAAKpG,OAEtB,IAAK,IAAI/C,EAAI,EAAGA,EAAIsnB,EAAOG,eAAgBznB,IACvCmJ,EAAKpG,MAAMsB,QAAQ8E,EAAKqe,QAAQxnB,GAAGiD,WAhCV,OAAAkG,iXAqC3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OAAQ3F,GACJ,IAAK,QACD,YAAIxD,EACA,OAAOuB,KAAK+kB,eAKhB,OAFAziB,EAAIY,SAASzE,EAAO,KAGhB,KAAM,EACN,KAAM,EACN,KAAM,EACN,KAAM,EACN,KAAK,GACL,KAAK,GACDuB,KAAK+kB,eAAiBziB,EACtBtC,KAAK6B,UAMb,MACJ,IAAK,YACL,IAAK,SACD,YAAIpD,EACA,OAAOuB,KAAKglB,QAAQ,GAAGvkB,UAAUhC,MAOrC,GAJA6D,EAAMnB,WAAW1C,GACjByX,EAAM,GACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,EAAM,CAC1B,IAAK,IAAIpK,EAAI,EAAGA,EAAIsnB,EAAOG,eAAgBznB,IACvCwC,KAAKglB,QAAQxnB,GAAGiD,UAAUhC,MAAQ6D,EAGtCtC,KAAKO,MAAMyF,KAAKvH,MAAQuB,KAAKglB,QAAQ,GAAGvkB,UAAUhC,MAAQuB,KAAK0kB,UAGnE,MACJ,IAAK,YACD,YAAIjmB,EACA,OAAOuB,KAAKglB,QAAQ,GAAGjB,EAAEtlB,MAO7B,GAFAmJ,EAAM,KAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,OAGa5T,GAAKsF,EACpB,IAAK,IAAIpK,EAAI,EAAGA,EAAIsnB,EAAOG,eAAgBznB,IACvCwC,KAAKglB,QAAQ,GAAGjB,EAAEtlB,MAAQ6D,EAIlC,MACJ,IAAK,QACD,YAAI7D,EACA,OAAOuB,KAAK0kB,UAKhB9c,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKO,MAAMyF,KAAKvH,MAAQuB,KAAKglB,QAAQ,GAAGvkB,UAAUhC,MAAQ6D,EAC1DtC,KAAK0kB,UAAmBpiB,GAG5B,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAKQ,KAAK/B,MAGrB6D,EAAMnB,WAAW1C,GACjByX,EAAM,EACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKQ,KAAK/B,MAAQ6D,GAGtB,MACJ,IAAK,MACL,IAAK,WACD,YAAI7D,EACA,OAAOuB,KAAKiC,GAAG+D,KAAKvH,MAKxBmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKiC,GAAG+D,KAAKvH,MAAQ6D,IASrC,OAAOtC,uCAMPA,KAAKE,MAAMmG,WAAW,GAEtB,IAAK,IAAI7I,EAAI,EAAGA,EAAIsnB,EAAOG,eAAgBznB,IACvCwC,KAAKglB,QAAQxnB,GAAG6I,WAAW,GAU/B,GAPArG,KAAKykB,IAAIpe,WAAW,GACpBrG,KAAKskB,SAASje,WAAW,GAGzBrG,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGpBJ,KAAKC,UAAaD,KAAK+kB,eAAiB,EAAI,CAE5C/kB,KAAKE,MAAM2B,QAAQ7B,KAAKglB,QAAQ,IAEhC,IAAK,IAAIxnB,EAAI,EAAGA,EAAIwC,KAAK+kB,eAAgBvnB,IACjCA,EAAKwC,KAAK+kB,eAAiB,EAC3B/kB,KAAKglB,QAAQxnB,GAAGqE,QAAQ7B,KAAKglB,QAAQxnB,EAAI,KAEzCwC,KAAKglB,QAAQxnB,GAAGqE,QAAQ7B,KAAKykB,KAC7BzkB,KAAKykB,IAAI5iB,QAAQ7B,KAAKI,QAItBJ,KAAKglB,QAAQxnB,GAAGqE,QAAQ7B,KAAKskB,UAC7BtkB,KAAKskB,SAASziB,QAAQ7B,KAAKglB,QAAQ,KAK/C,OAAOhlB,kCAINsB,EAAUC,GAGX,YAAA7C,EAAAe,EAAAnB,EAAAd,GAAA,OAAAiC,MAAAklB,SAAAtlB,WAAA,IAAAJ,EAAAf,OAAA0mB,yBAAAnlB,EAAAnB,GAAA,YAAAW,EAAA,KAAAO,EAAAtB,OAAA2I,eAAApH,GAAA,cAAAD,OAAA,EAAAd,EAAAc,EAAAlB,EAAAd,GAAA,aAAAyB,EAAA,OAAAA,EAAAR,MAAA,IAAAyD,EAAAjD,EAAAZ,IAAA,gBAAA6D,IAAAvE,KAAAH,QAAA,GAFAsnB,EAAAzlB,UAAAuH,WAAA1I,OAAA2I,eAAAie,EAAAzlB,WAAA,OAAAW,MAAArC,KAAAqC,KAAWsB,EAAUC,GAEjBvB,KAAKC,SAAU,CAEhBD,KAAKK,IAAIwB,QAAQ7B,KAAKO,OAEtB,IAAK,IAAI/C,EAAI,EAAGA,EAAIsnB,EAAOG,eAAgBznB,IACvCwC,KAAKO,MAAMsB,QAAQ7B,KAAKglB,QAAQxnB,GAAGiD,WAI1C,OAAOT,sCAgBP,OAVIyB,MAAczB,KAAKC,SACnBklB,MAAcnlB,KAAK+kB,eACnBtkB,UAAcT,KAAKglB,QAAQ,GAAGvkB,UAAUhC,MACxC2mB,UAAcplB,KAAKglB,QAAQ,GAAGjB,EAAEtlB,MAChC8B,MAAcP,KAAK0kB,UACnBlkB,KAAcR,KAAKQ,KAAK/B,MACxBgmB,IAAczkB,KAAKykB,IAAIze,KAAKvH,MAC5B6lB,SAActkB,KAAKskB,SAASte,KAAKvH,UAG9BuD,gCAKP,MAAO,2BAAAvC,EA/OMqlB,KACVG,eAAiB,GAAAxlB,EAAAP,QADP4lB,4UCPrB5iB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqB6nB,cAKjB,SAAAA,EAAYvlB,EAASC,iGAAYC,KAAAqlB,GAAA,IAAA1e,oKAAA3G,MAAAqlB,EAAAze,WAAA1I,OAAA2I,eAAAwe,IAAA1nB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAK2e,UAAYxlB,EAAQK,aAEzBwG,EAAK2e,UAAUtf,KAAKvH,MAAQ,EAG5BkI,EAAKpG,MAAMyF,KAAKvH,MAAQ,EACxBkI,EAAKnG,KAAK/B,MAAc,EAGxBkI,EAAKlF,UAILkF,EAAKtG,IAAIwB,QAAQ8E,EAAKpG,OACtBoG,EAAKpG,MAAMsB,QAAQ8E,EAAK2e,UAAUtf,MAjBLW,iXAqB3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAEIK,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OANUlG,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,eAOpC,IAAK,QACD,YAAIlD,EACA,OAAOuB,KAAKO,MAAMyF,KAAKvH,MAK3BmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKO,MAAMyF,KAAKvH,MAAQ6D,GAG5B,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAKQ,KAAK/B,MAGrB6D,EAAMnB,WAAW1C,GACjByX,EAAM,EACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKQ,KAAK/B,MAAQ6D,IASlC,OAAOtC,uCAsBP,OAhBAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKslB,UAAUjf,WAAW,GAEtBrG,KAAKC,UAILD,KAAKE,MAAM2B,QAAQ7B,KAAKslB,WACxBtlB,KAAKslB,UAAUzjB,QAAQ7B,KAAKI,SAK5BJ,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGrBJ,kCAINsB,EAAUC,GASX,gBAAA7C,EAAAe,EAAAnB,EAAAd,GAAA,OAAAiC,MAAAklB,SAAAtlB,WAAA,IAAAJ,EAAAf,OAAA0mB,yBAAAnlB,EAAAnB,GAAA,YAAAW,EAAA,KAAAO,EAAAtB,OAAA2I,eAAApH,GAAA,cAAAD,OAAA,EAAAd,EAAAc,EAAAlB,EAAAd,GAAA,aAAAyB,EAAA,OAAAA,EAAAR,MAAA,IAAAyD,EAAAjD,EAAAZ,IAAA,gBAAA6D,IAAAvE,KAAAH,QAAA,GARA6nB,EAAAhmB,UAAAuH,WAAA1I,OAAA2I,eAAAwe,EAAAhmB,WAAA,OAAAW,MAAArC,KAAAqC,KAAWsB,EAAUC,GAEjBvB,KAAKC,WAELD,KAAKK,IAAIwB,QAAQ7B,KAAKO,OACtBP,KAAKO,MAAMsB,QAAQ7B,KAAKslB,UAAUtf,OAG/BhG,sCAWP,OALIyB,MAAUzB,KAAKC,SACfM,MAAUP,KAAKO,MAAMyF,KAAKvH,MAC1B+B,KAAUR,KAAKQ,KAAK/B,UAGjBuD,gCAKP,MAAO,kCAAAvC,EA5HM4lB,GA4HN5lB,EAAAP,QA5HMmmB,4UCPrBnjB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqB+nB,cAajB,SAAAA,EAAYzlB,EAASC,iGAAYC,KAAAulB,GAAA,IAAA5e,oKAAA3G,MAAAulB,EAAA3e,WAAA1I,OAAA2I,eAAA0e,IAAA5nB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAK2e,UAAYxlB,EAAQK,aAEzBwG,EAAK2e,UAAUtf,KAAKvH,MAAQ,EAG5BkI,EAAKpG,MAAMyF,KAAKvH,MAAQ,EACxBkI,EAAKnG,KAAK/B,MAAc,EAGxBkI,EAAKlF,UAILkF,EAAKtG,IAAIwB,QAAQ8E,EAAKpG,OACtBoG,EAAKpG,MAAMsB,QAAQ8E,EAAK2e,UAAUtf,MAjBLW,iXAqB3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAEIK,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OANUlG,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,eAOpC,IAAK,QACD,YAAIlD,EACA,OAAOuB,KAAKO,MAAMyF,KAAKvH,MAK3BmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKO,MAAMyF,KAAKvH,MAAQ6D,GAG5B,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAKQ,KAAK/B,MAGrB6D,EAAMnB,WAAW1C,GACjByX,EAAM,EACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKQ,KAAK/B,MAAQ6D,GAGtB,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAKK,IAAImB,MAGpBc,EAAIZ,OAAOjD,GAAOkD,iBAET4jB,EAAQ1F,aACb7f,KAAKK,IAAImB,KAAiC,iBAAlBxB,KAAKK,IAAImB,KAAqBc,EAAIijB,EAAQ1F,WAAWvd,KAS7F,OAAOtC,uCAsBP,OAhBAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKslB,UAAUjf,WAAW,GAEtBrG,KAAKC,UAILD,KAAKE,MAAM2B,QAAQ7B,KAAKslB,WACxBtlB,KAAKslB,UAAUzjB,QAAQ7B,KAAKI,SAK5BJ,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGrBJ,kCAINsB,EAAUC,GASX,gBAAA7C,EAAAe,EAAAnB,EAAAd,GAAA,OAAAiC,MAAAklB,SAAAtlB,WAAA,IAAAJ,EAAAf,OAAA0mB,yBAAAnlB,EAAAnB,GAAA,YAAAW,EAAA,KAAAO,EAAAtB,OAAA2I,eAAApH,GAAA,cAAAD,OAAA,EAAAd,EAAAc,EAAAlB,EAAAd,GAAA,aAAAyB,EAAA,OAAAA,EAAAR,MAAA,IAAAyD,EAAAjD,EAAAZ,IAAA,gBAAA6D,IAAAvE,KAAAH,QAAA,GARA+nB,EAAAlmB,UAAAuH,WAAA1I,OAAA2I,eAAA0e,EAAAlmB,WAAA,OAAAW,MAAArC,KAAAqC,KAAWsB,EAAUC,GAEjBvB,KAAKC,WAELD,KAAKK,IAAIwB,QAAQ7B,KAAKO,OACtBP,KAAKO,MAAMsB,QAAQ7B,KAAKslB,UAAUtf,OAG/BhG,sCAYP,OANIyB,MAAUzB,KAAKC,SACfM,MAAUP,KAAKO,MAAMyF,KAAKvH,MAC1B+B,KAAUR,KAAKQ,KAAK/B,MACpB0Q,KAAUnP,KAAKK,IAAImB,SAGhBQ,gCAKP,MAAO,4BAAAvC,EAjJM8lB,KAEV1F,YACHO,KAAa,EACbC,OAAa,EACbC,SAAa,EACbC,SAAa,GAAA9gB,EAAAP,QANAqmB,4UCPrBrjB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqBgoB,cAKjB,SAAAA,EAAY1lB,EAASC,iGAAYC,KAAAwlB,GAAA,IAAA7e,oKAAA3G,MAAAwlB,EAAA5e,WAAA1I,OAAA2I,eAAA2e,IAAA7nB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAK8e,WAAa3lB,EAAQK,aAC1BwG,EAAK+e,WAAa5lB,EAAQK,aAC1BwG,EAAKgf,SAAa7lB,EAAQ8lB,sBAAsB,GAChDjf,EAAKkf,OAAa/lB,EAAQgmB,oBAAoB,GAE9Cnf,EAAK8e,WAAWzf,KAAKvH,MAAQ,EAC7BkI,EAAK+e,WAAW1f,KAAKvH,MAAQ,EAG7BkI,EAAKpG,MAAMyF,KAAKvH,MAAQ,EACxBkI,EAAKnG,KAAK/B,MAAc,EAGxBkI,EAAKlF,UAGLkF,EAAKof,YAAcjmB,EAAQ8lB,sBAAsB,GAGjDjf,EAAKtG,IAAIwB,QAAQ8E,EAAKpG,OACtBoG,EAAKpG,MAAMsB,QAAQ8E,EAAKjG,WACxBiG,EAAKjG,UAAUmB,QAAQ8E,EAAKof,aAC5Bpf,EAAKof,YAAYlkB,QAAQ8E,EAAK8e,WAAWzf,KAAM,GAC/CW,EAAKof,YAAYlkB,QAAQ8E,EAAK+e,WAAW1f,KAAM,GA1BlBW,iXA8B3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAEIK,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OANUlG,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,eAOpC,IAAK,QACD,YAAIlD,EACA,OAAOuB,KAAKO,MAAMyF,KAAKvH,MAK3BmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKO,MAAMyF,KAAKvH,MAAQ6D,GAG5B,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAKQ,KAAK/B,MAGrB6D,EAAMnB,WAAW1C,GACjByX,EAAM,EACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKQ,KAAK/B,MAAQ6D,IASlC,OAAOtC,uCA0BP,OApBAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKylB,WAAWpf,WAAW,GAC3BrG,KAAK0lB,WAAWrf,WAAW,GAC3BrG,KAAK2lB,SAAStf,WAAW,GACzBrG,KAAK2lB,SAAStf,WAAW,GACzBrG,KAAK6lB,OAAOxf,WAAW,GAEnBrG,KAAKC,UAELD,KAAKE,MAAM2B,QAAQ7B,KAAK2lB,UACxB3lB,KAAK2lB,SAAS9jB,QAAQ7B,KAAKylB,WAAY,EAAG,GAC1CzlB,KAAK2lB,SAAS9jB,QAAQ7B,KAAK0lB,WAAY,EAAG,GAC1C1lB,KAAKylB,WAAW5jB,QAAQ7B,KAAK6lB,OAAQ,EAAG,GACxC7lB,KAAK0lB,WAAW7jB,QAAQ7B,KAAK6lB,OAAQ,EAAG,GACxC7lB,KAAK6lB,OAAOhkB,QAAQ7B,KAAKI,SAGzBJ,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGrBJ,mCAILkB,GAAW,IAAAiH,EAAAnI,KACb,GAAIA,KAAKC,UAAYD,KAAKiB,OAAQ,CAC9B,IAAIzB,EAAI2B,WAAWD,IAEfE,MAAM5B,IAAOA,EAAIQ,KAAKF,QAAQuB,eAC9B7B,EAAIQ,KAAKF,QAAQuB,aAGrBrB,KAAKK,IAAIO,MAAMpB,GACfQ,KAAKiB,UAEL,IAAMlB,EAAaC,KAAKU,UAAUX,WAElCC,KAAKU,UAAUkI,eAAiB,SAAAC,GAC5B,IAAMqV,EAAWrV,EAAME,YAAYC,eAAe,GAC5CE,EAAWL,EAAMM,aAAaH,eAAe,GAC7CI,EAAWP,EAAMM,aAAaH,eAAe,GAEnD,GAAIb,EAAKlI,UAAuC,IAA1BkI,EAAK5H,MAAMyF,KAAKvH,OAAqC,IAApB0J,EAAK3H,KAAK/B,MAC7D,IAAK,IAAIjB,EAAI,EAAGA,EAAIuC,EAAYvC,IAC5B0L,EAAS1L,GAAM0gB,EAAO1gB,GACtB4L,EAAS5L,IAAM0gB,EAAO1gB,QAG1B,IAAK,IAAIA,EAAI,EAAGA,EAAIuC,EAAYvC,IAC5B0L,EAAS1L,GAAK,EACd4L,EAAS5L,GAAK,GAM9B,OAAOwC,kCAINsB,EAAUC,GAiBX,gBAAA7C,EAAAe,EAAAnB,EAAAd,GAAA,OAAAiC,MAAAklB,SAAAtlB,WAAA,IAAAJ,EAAAf,OAAA0mB,yBAAAnlB,EAAAnB,GAAA,YAAAW,EAAA,KAAAO,EAAAtB,OAAA2I,eAAApH,GAAA,cAAAD,OAAA,EAAAd,EAAAc,EAAAlB,EAAAd,GAAA,aAAAyB,EAAA,OAAAA,EAAAR,MAAA,IAAAyD,EAAAjD,EAAAZ,IAAA,gBAAA6D,IAAAvE,KAAAH,QAAA,GAhBAgoB,EAAAnmB,UAAAuH,WAAA1I,OAAA2I,eAAA2e,EAAAnmB,WAAA,OAAAW,MAAArC,KAAAqC,KAAWsB,EAAUC,GAGjBvB,KAAKC,WAELD,KAAKU,UAAU2F,WAAW,GAC1BrG,KAAKU,UAAUkI,eAAiB,KAGhC5I,KAAKK,IAAIwB,QAAQ7B,KAAKO,OACtBP,KAAKO,MAAMsB,QAAQ7B,KAAKU,WACxBV,KAAKU,UAAUmB,QAAQ7B,KAAK+lB,aAC5B/lB,KAAK+lB,YAAYlkB,QAAQ7B,KAAKylB,WAAWzf,KAAM,GAC/ChG,KAAK+lB,YAAYlkB,QAAQ7B,KAAK0lB,WAAW1f,KAAM,IAG5ChG,sCAWP,OALIyB,MAAUzB,KAAKC,SACfM,MAAUP,KAAKO,MAAMyF,KAAKvH,MAC1B+B,KAAUR,KAAKQ,KAAK/B,UAGjBuD,gCAKP,MAAO,uCAAAvC,EArLM+lB,GAqLN/lB,EAAAP,QArLMsmB,4UCPrBtjB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqBwoB,cAKjB,SAAAA,EAAYlmB,EAASC,iGAAYC,KAAAgmB,GAAA,IAAArf,oKAAA3G,MAAAgmB,EAAApf,WAAA1I,OAAA2I,eAAAmf,IAAAroB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAKlB,OAAS3F,EAAQ0E,qBAGtBmC,EAAKlB,OAAOwgB,IAAIxnB,MAAQ,EACxBkI,EAAKpG,MAAMyF,KAAKvH,MAAQ,EACxBkI,EAAKnG,KAAK/B,MAAc,EAGxBkI,EAAKlF,UAILkF,EAAKtG,IAAIwB,QAAQ8E,EAAKpG,OACtBoG,EAAKpG,MAAMsB,QAAQ8E,EAAKlB,OAAOwgB,KAhBFtf,iXAoB3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAEIK,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OANUlG,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,eAOpC,IAAK,QACD,YAAIlD,EACD,OAAOuB,KAAKO,MAAMyF,KAAKvH,MAK1BmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKO,MAAMyF,KAAKvH,MAAQ6D,GAG5B,MACJ,IAAK,OACD,YAAI7D,EACD,OAAOuB,KAAKQ,KAAK/B,MAGpB6D,EAAMnB,WAAW1C,GACjByX,EAAM,EACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKQ,KAAK/B,MAAQ6D,IASlC,OAAOtC,uCAsBP,OAhBAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKyF,OAAOY,WAAW,GAEnBrG,KAAKC,UAILD,KAAKE,MAAM2B,QAAQ7B,KAAKyF,QACxBzF,KAAKyF,OAAO5D,QAAQ7B,KAAKI,SAKzBJ,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGrBJ,kCAINsB,EAAUC,GASX,gBAAA7C,EAAAe,EAAAnB,EAAAd,GAAA,OAAAiC,MAAAklB,SAAAtlB,WAAA,IAAAJ,EAAAf,OAAA0mB,yBAAAnlB,EAAAnB,GAAA,YAAAW,EAAA,KAAAO,EAAAtB,OAAA2I,eAAApH,GAAA,cAAAD,OAAA,EAAAd,EAAAc,EAAAlB,EAAAd,GAAA,aAAAyB,EAAA,OAAAA,EAAAR,MAAA,IAAAyD,EAAAjD,EAAAZ,IAAA,gBAAA6D,IAAAvE,KAAAH,QAAA,GARAwoB,EAAA3mB,UAAAuH,WAAA1I,OAAA2I,eAAAmf,EAAA3mB,WAAA,OAAAW,MAAArC,KAAAqC,KAAWsB,EAAUC,GAEjBvB,KAAKC,WAELD,KAAKK,IAAIwB,QAAQ7B,KAAKO,OACtBP,KAAKO,MAAMsB,QAAQ7B,KAAKyF,OAAOwgB,MAG5BjmB,sCAWP,OALIyB,MAAUzB,KAAKC,SACfM,MAAUP,KAAKO,MAAMyF,KAAKvH,MAC1B+B,KAAUR,KAAKQ,KAAK/B,UAGjBuD,gCAKP,MAAO,+BAAAvC,EA3HMumB,GA2HNvmB,EAAAP,QA3HM8mB,4UCPrB9jB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqB0oB,cAiBjB,SAAAA,EAAYpmB,EAASC,iGAAYC,KAAAkmB,GAAA,IAAAvf,oKAAA3G,MAAAkmB,EAAAtf,WAAA1I,OAAA2I,eAAAqf,IAAAvoB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAKtC,OAASvE,EAAQ+jB,qBAGtBld,EAAKtC,OAAO5D,UAAU2gB,gBAAkBza,EAAKtC,OAAO5D,UAAU2gB,iBAAmBza,EAAKtC,OAAO5D,UAAU8gB,qBAGvG5a,EAAKtC,OAAO7C,KAA+C,iBAArBmF,EAAKtC,OAAO7C,KAAqB,UAAamF,EAAKtC,OAAOyf,SAAW,EAC3Gnd,EAAKtC,OAAO5D,UAAUhC,MAAQ,IAC9BkI,EAAKtC,OAAO0f,EAAEtlB,MAAgB,EAC9BkI,EAAKtC,OAAO2B,KAAKvH,MAAa,EAE9BkI,EAAKwf,aAAexf,EAAKtC,OAAO5D,UAAUhC,MAC1CkI,EAAKyf,MAAe,GAEpBzf,EAAKia,OAAU,IACfja,EAAKka,MAAU,GACfla,EAAKma,QAAU,EACfna,EAAKoa,QAAU,EAGfpa,EAAKlF,UAvBwBkF,iXA2B3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OAAQ3F,GACJ,IAAK,OACD,YAAIxD,EACA,OAAOuB,KAAKqE,OAAO7C,MAGvBc,EAAIZ,OAAOjD,GAAOkD,iBAETukB,EAAOG,eACZrmB,KAAKqE,OAAO7C,KAAoC,iBAArBxB,KAAKqE,OAAO7C,KAAqBc,EAAI4jB,EAAOG,aAAa/jB,IAGxF,MACJ,IAAK,YACL,IAAK,SACD,YAAI7D,EACA,OAAOuB,KAAKqE,OAAO5D,UAAUhC,MAGjC6D,EAAMnB,WAAW1C,GACjByX,EAAM,GACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKmmB,aAAyB7jB,EAC9BtC,KAAKqE,OAAO5D,UAAUhC,MAAQ6D,GAGlC,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAKqE,OAAO2B,KAAKvH,MAK5BmJ,EAAO,IAFPtF,EAAMnB,WAAW1C,MACjByX,GAAO,KAGY5T,GAAKsF,IACpB5H,KAAKqE,OAAO2B,KAAKvH,MAAQ6D,GAG7B,MACJ,IAAK,IACD,YAAI7D,EACA,OAAOuB,KAAKqE,OAAO0f,EAAEtlB,MAKzBmJ,EAAM,KAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,OAGa5T,GAAKsF,IACpB5H,KAAKqE,OAAO0f,EAAEtlB,MAAQ6D,GAG1B,MACJ,IAAK,QACD,YAAI7D,EACA,OAAOuB,KAAKomB,MAKhBxe,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKomB,MAAO9jB,GAGhB,MACJ,IAAK,SACL,IAAK,UACD,YAAI7D,EACA,OAAOuB,KAAKiC,IAGhBK,EAAInB,WAAW1C,KAEN,IACLuB,KAAKiC,GAAKK,GAGd,MACJ,IAAK,QACL,IAAK,UACD,YAAI7D,EACA,OAAOuB,KAAKiC,IAGhBK,EAAInB,WAAW1C,IAEP,IACJuB,KAAKiC,GAAKK,IAS1B,OAAOtC,uCAsBP,OAhBAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKqE,OAAOgC,WAAW,GAEnBrG,KAAKC,UAILD,KAAKE,MAAM2B,QAAQ7B,KAAKqE,QACxBrE,KAAKqE,OAAOxC,QAAQ7B,KAAKI,SAKzBJ,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGrBJ,mCAILkB,GACF,GAAIlB,KAAKC,SAAU,CACf,IAAIT,EAAI2B,WAAWD,IAEfE,MAAM5B,IAAOA,EAAIQ,KAAKF,QAAQuB,eAC9B7B,EAAIQ,KAAKF,QAAQuB,aAGrB,IAAM8d,EAAU3f,EACV4f,EAAUD,EAAKnf,KAAK4gB,OACpBI,EAAUhhB,KAAK6gB,MACfI,EAAUjhB,KAAK8gB,QAAU9gB,KAAKmmB,aAE9BG,EAAetmB,KAAKmmB,aAAenmB,KAAKomB,MAG9CpmB,KAAKqE,OAAO5D,UAAU4e,sBAAsBF,GAC5Cnf,KAAKqE,OAAO5D,UAAU6e,eAAegH,EAAcnH,GACnDnf,KAAKqE,OAAO5D,UAAU0gB,wBAAwBnhB,KAAKmmB,aAAc/G,GACjEpf,KAAKqE,OAAO5D,UAAU2gB,gBAAgBH,EAAS7B,EAAI4B,GAGvD,OAAOhhB,kCAINsB,GACD,GAAItB,KAAKC,SAAU,CACf,IAAIT,EAAI2B,WAAWG,GAAYtB,KAAK+gB,SAEjC3f,MAAM5B,IAAOA,EAAIQ,KAAKF,QAAQuB,eAC9B7B,EAAIQ,KAAKF,QAAQuB,aAGpB,IAAMggB,EAAK7hB,EACL8hB,EAAKthB,KAAK+gB,QAEVuF,EAAetmB,KAAKmmB,aAAenmB,KAAKomB,MAG9CpmB,KAAKqE,OAAO5D,UAAU4e,sBAAsBgC,GAC5CrhB,KAAKqE,OAAO5D,UAAU6e,eAAetf,KAAKqE,OAAO5D,UAAUhC,MAAO4iB,GAClErhB,KAAKqE,OAAO5D,UAAU2gB,gBAAgBkF,EAAcjF,EAAIC,GAG5D,OAAOthB,mCAILyB,GACF,gBAAIA,EACOzB,KAAKC,UAGoB,WAAhCyB,OAAOD,GAAOE,cACd3B,KAAKC,UAAYD,KAAKC,SAEtBD,KAAKC,SAAW2B,QAAQH,GAI5BzB,KAAK6B,UAEE7B,uCAkBP,OAZIyB,MAAczB,KAAKC,SACnBuB,KAAcxB,KAAKqE,OAAO7C,KAC1Bf,UAAcT,KAAKqE,OAAO5D,UAAUhC,MACpCslB,EAAc/jB,KAAKqE,OAAO0f,EAAEtlB,MAC5BuH,KAAchG,KAAKqE,OAAO2B,KAAKvH,MAC/B2nB,MAAcpmB,KAAKomB,MACnBxF,OAAc5gB,KAAK4gB,OACnBC,MAAc7gB,KAAK6gB,MACnBC,QAAc9gB,KAAK8gB,QACnBC,QAAc/gB,KAAK+gB,YAGhB/e,gCAKP,MAAO,2BAAAvC,EA/QMymB,KAEVG,cACHE,QAAc,EACdC,SAAc,EACdC,SAAc,EACdC,SAAc,EACdC,UAAc,EACdC,QAAc,EACdC,MAAc,EACdC,QAAc,GAAArnB,EAAAP,QAVDgnB,4UCPrBhkB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqBupB,cAKjB,SAAAA,EAAYjnB,EAASC,iGAAYC,KAAA+mB,GAAA,IAAApgB,oKAAA3G,MAAA+mB,EAAAngB,WAAA1I,OAAA2I,eAAAkgB,IAAAppB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAKqgB,KAAWlnB,EAAQ+jB,qBACxBld,EAAK0K,OAAWvR,EAAQ+jB,qBACxBld,EAAKsgB,OAAWnnB,EAAQ+jB,qBACxBld,EAAKugB,SAAWpnB,EAAQ+jB,qBAGxBld,EAAKqgB,KAAKxlB,KAA0C,iBAAvBmF,EAAKqgB,KAAKxlB,KAAyB,WAAemF,EAAKqgB,KAAKG,UAAiB,EAC1GxgB,EAAK0K,OAAO7P,KAAwC,iBAAvBmF,EAAK0K,OAAO7P,KAAuB,UAAemF,EAAK0K,OAAO+V,SAAe,EAC1GzgB,EAAKsgB,OAAOzlB,KAAwC,iBAAvBmF,EAAKsgB,OAAOzlB,KAAuB,UAAemF,EAAKsgB,OAAOG,SAAe,EAC1GzgB,EAAKugB,SAAS1lB,KAAsC,iBAAvBmF,EAAKugB,SAAS1lB,KAAqB,YAAemF,EAAKugB,SAASG,WAAa,EAG1G1gB,EAAKqgB,KAAKvmB,UAAUhC,MAAa,IACjCkI,EAAK0K,OAAO5Q,UAAUhC,MAAU,IAChCkI,EAAKsgB,OAAOxmB,UAAUhC,MAAU,IAChCkI,EAAKugB,SAASzmB,UAAUhC,MAAQ,IAIhCkI,EAAK0K,OAAO0S,EAAEtlB,MAAU4K,KAAK2a,QAC7Brd,EAAKsgB,OAAOlD,EAAEtlB,MAAU4K,KAAK2a,QAI7Brd,EAAKqgB,KAAKhhB,KAAKvH,MAAY,EAC3BkI,EAAK0K,OAAOrL,KAAKvH,MAAU,EAC3BkI,EAAKsgB,OAAOjhB,KAAKvH,MAAU,EAC3BkI,EAAKugB,SAASlhB,KAAKvH,MAAQ,EAG3BkI,EAAKlF,UAjCwBkF,iXAqC3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAM,KAIV,OAAQL,GACJ,IAAK,OACL,IAAK,SACL,IAAK,SACL,IAAK,WACD,YAAIxD,EACA,OAAOuB,KAAKiC,GAAG+D,KAAKvH,OAGxB6D,EAAMnB,WAAW1C,MACV,IAGY6D,GAFZ,KAGHtC,KAAKiC,GAAG+D,KAAKvH,MAAQ6D,IASrC,OAAOtC,uCA4BP,OAtBAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKgnB,KAAK3gB,WAAW,GACrBrG,KAAKqR,OAAOhL,WAAW,GACvBrG,KAAKinB,OAAO5gB,WAAW,GACvBrG,KAAKknB,SAAS7gB,WAAW,GAErBrG,KAAKC,UAILD,KAAKE,MAAM2B,QAAQ7B,KAAKgnB,MACxBhnB,KAAKgnB,KAAKnlB,QAAQ7B,KAAKqR,QACvBrR,KAAKqR,OAAOxP,QAAQ7B,KAAKinB,QACzBjnB,KAAKinB,OAAOplB,QAAQ7B,KAAKknB,UACzBlnB,KAAKknB,SAASrlB,QAAQ7B,KAAKI,SAK3BJ,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGrBJ,sCAaP,OAPIyB,MAAazB,KAAKC,SAClB+mB,KAAahnB,KAAKgnB,KAAKhhB,KAAKvH,MAC5B4S,OAAarR,KAAKqR,OAAOrL,KAAKvH,MAC9BwoB,OAAajnB,KAAKinB,OAAOjhB,KAAKvH,MAC9ByoB,SAAalnB,KAAKknB,SAASlhB,KAAKvH,UAG7BuD,gCAKP,MAAO,8BAAAvC,EA5HMsnB,GA4HNtnB,EAAAP,QA5HM6nB,4UCPrB7kB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqB8pB,cAKjB,SAAAA,EAAYxnB,EAASC,iGAAYC,KAAAsnB,GAAA,IAAA3gB,oKAAA3G,MAAAsnB,EAAA1gB,WAAA1I,OAAA2I,eAAAygB,IAAA3pB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAK4f,QAAUzmB,EAAQ+jB,qBAGvBld,EAAK4f,QAAQ/kB,KAAgD,iBAAtBmF,EAAK4f,QAAQ/kB,KAAqB,UAAamF,EAAK4f,QAAQzC,SAAW,EAC9Gnd,EAAK4f,QAAQ9lB,UAAUhC,MAAQ,IAC/BkI,EAAK4f,QAAQxC,EAAEtlB,MAAgB,EAC/BkI,EAAK4f,QAAQvgB,KAAKvH,MAAa,EAE/BkI,EAAKpG,MAAMyF,KAAKvH,MAAS,EACzBkI,EAAKnG,KAAK/B,MAAe,EACzBkI,EAAK+d,UAAoB,EAGzB/d,EAAKlF,UAILkF,EAAKtG,IAAIwB,QAAQ8E,EAAKpG,OACtBoG,EAAKpG,MAAMsB,QAAQ8E,EAAK4f,QAAQ9lB,WArBHkG,iXAyB3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAEIK,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OANUlG,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,eAOpC,IAAK,YACL,IAAK,SACD,YAAIlD,EACA,OAAOuB,KAAKumB,QAAQ9lB,UAAUhC,MAGlC6D,EAAMnB,WAAW1C,GACjByX,EAAM,GACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKumB,QAAQ9lB,UAAUhC,MAAQ6D,EAC/BtC,KAAKO,MAAMyF,KAAKvH,MAAeuB,KAAKumB,QAAQ9lB,UAAUhC,MAAQuB,KAAK0kB,WAGvE,MACJ,IAAK,QACD,YAAIjmB,EACA,OAAOuB,KAAK0kB,UAKhB9c,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAKO,MAAMyF,KAAKvH,MAAQuB,KAAKumB,QAAQ9lB,UAAUhC,MAAQ6D,EACvDtC,KAAK0kB,UAAmBpiB,GAG5B,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAKQ,KAAK/B,MAGrB6D,EAAMnB,WAAW1C,GACjByX,EAAM,EACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKQ,KAAK/B,MAAQ6D,GAGtB,MACJ,IAAK,YACD,YAAI7D,EACA,OAAOuB,KAAKumB,QAAQxC,EAAEtlB,MAK1BmJ,EAAM,KAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,OAGa5T,GAAKsF,IACpB5H,KAAKumB,QAAQxC,EAAEtlB,MAAQ6D,IASvC,OAAOtC,kCAINsB,EAAUC,GASX,gBAAA7C,EAAAe,EAAAnB,EAAAd,GAAA,OAAAiC,MAAAklB,SAAAtlB,WAAA,IAAAJ,EAAAf,OAAA0mB,yBAAAnlB,EAAAnB,GAAA,YAAAW,EAAA,KAAAO,EAAAtB,OAAA2I,eAAApH,GAAA,cAAAD,OAAA,EAAAd,EAAAc,EAAAlB,EAAAd,GAAA,aAAAyB,EAAA,OAAAA,EAAAR,MAAA,IAAAyD,EAAAjD,EAAAZ,IAAA,gBAAA6D,IAAAvE,KAAAH,QAAA,GARA8pB,EAAAjoB,UAAAuH,WAAA1I,OAAA2I,eAAAygB,EAAAjoB,WAAA,OAAAW,MAAArC,KAAAqC,KAAWsB,EAAUC,GAEjBvB,KAAKC,WAELD,KAAKK,IAAIwB,QAAQ7B,KAAKO,OACtBP,KAAKO,MAAMsB,QAAQ7B,KAAKumB,QAAQ9lB,YAG7BT,uCAsBP,OAhBAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAKumB,QAAQlgB,WAAW,GAEpBrG,KAAKC,UAILD,KAAKE,MAAM2B,QAAQ7B,KAAKumB,SACxBvmB,KAAKumB,QAAQ1kB,QAAQ7B,KAAKI,SAK1BJ,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGrBJ,sCAaP,OAPIyB,MAAczB,KAAKC,SACnBsnB,OAAcvnB,KAAKumB,QAAQ9lB,UAAUhC,MACrC8B,MAAcP,KAAK0kB,UACnBlkB,KAAcR,KAAKQ,KAAK/B,MACxB2mB,UAAcplB,KAAKumB,QAAQxC,EAAEtlB,UAG1BuD,gCAKP,MAAO,wBAAAvC,EAjKM6nB,GAiKN7nB,EAAAP,QAjKMooB,4UCPrBplB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqBgqB,cA4CjB,SAAAA,EAAY1nB,EAASC,iGAAYC,KAAAwnB,GAAA,IAAA7gB,oKAAA3G,MAAAwnB,EAAA5gB,WAAA1I,OAAA2I,eAAA2gB,IAAA7pB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAK5C,WAAajE,EAAQ2nB,mBAC1B9gB,EAAK+gB,MAAa5nB,EAAQK,aAC1BwG,EAAKuI,MAAapP,EAAQ+jB,qBAC1Bld,EAAKid,KAAa9jB,EAAQ+jB,qBAG1Bld,EAAKnF,KAAOgmB,EAAWG,MAGvBhhB,EAAKihB,gBAAkB,KAGvBjhB,EAAK+gB,MAAM1hB,KAAKvH,MAAa,EAC7BkI,EAAKuI,MAAM1N,KAA8C,iBAApBmF,EAAKuI,MAAM1N,KAAqB,WAAcmF,EAAKuI,MAAM2Y,UAAY,EAC1GlhB,EAAKuI,MAAMzO,UAAUhC,MAAQ,IAC7BkI,EAAKuI,MAAM6U,EAAEtlB,MAAgB4K,KAAK2a,QAClCrd,EAAKuI,MAAMlJ,KAAKvH,MAAa,EAC7BkI,EAAKid,KAAKpiB,KAA8C,iBAAnBmF,EAAKid,KAAKpiB,KAAqB,UAAamF,EAAKid,KAAKE,SAAW,EACtGnd,EAAKid,KAAKnjB,UAAUhC,MAAS,IAC7BkI,EAAKid,KAAKG,EAAEtlB,MAAiB4K,KAAK2a,QAClCrd,EAAKid,KAAK5d,KAAKvH,MAAc,EAG7BkI,EAAKlF,UA1BwBkF,iXA8B3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE3B,CACJ,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAM,KACN4T,EAAM,KACNtO,EAAM,KAEV,OAAQ3F,GACJ,IAAK,QACD,YAAIxD,EACA,OAAOuB,KAAK+D,WAAW+jB,MAG3B,IAAIA,EAAQ,KAEZ,OAAQpmB,OAAOjD,GAAOkD,eAClB,KAAK6lB,EAAWG,MACZ3nB,KAAKwB,KAAOgmB,EAAWG,MACvBG,EAAQN,EAAWO,YAAYP,EAAWQ,QAAQL,MAAO3nB,KAAK4nB,iBAC9D,MACJ,KAAKJ,EAAWS,OACZjoB,KAAKwB,KAAOgmB,EAAWS,OACvBH,EAAQN,EAAWO,YAAYP,EAAWQ,QAAQC,OAAQjoB,KAAK4nB,iBAC/D,MACJ,KAAKJ,EAAWU,UACZloB,KAAKwB,KAAOgmB,EAAWU,UACvBJ,EAAQN,EAAWO,YAAYP,EAAWQ,QAAQE,UAAWloB,KAAK4nB,iBAClE,MACJ,KAAKJ,EAAWW,WACZnoB,KAAKwB,KAAOgmB,EAAWW,WACvBL,EAAQN,EAAWO,YAAYP,EAAWQ,QAAQG,WAAYnoB,KAAK4nB,iBACnE,MACJ,KAAKJ,EAAWY,KACZpoB,KAAKwB,KAAOgmB,EAAWY,KACvBN,EAAQN,EAAWO,YAAYP,EAAWQ,QAAQI,KAAMpoB,KAAK4nB,iBAC7D,MACJ,QACQnpB,aAAiB+S,eACjBsW,EAAQrpB,GAMpBuB,KAAK+D,WAAW+jB,MAAQA,EAExB,MACJ,IAAK,UACD,YAAIrpB,EACA,OAAOuB,KAAK4nB,iBAGhBtlB,EAAIY,SAASzE,EAAO,MAEX,IACLuB,KAAK4nB,gBAAkBtlB,EACvBtC,KAAK2H,MAAM,QAAS3H,KAAKwB,OAG7B,MACJ,IAAK,QACD,YAAI/C,EACA,OAAOuB,KAAK0nB,MAAM1hB,KAAKvH,MAK3BmJ,EAAM,GAFNtF,EAAMnB,WAAW1C,MACjByX,EAAM,IAGa5T,GAAKsF,IACpB5H,KAAK0nB,MAAM1hB,KAAKvH,MAAQ6D,GAG5B,MACJ,IAAK,QACL,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAKiC,GAAGxB,UAAUhC,MAG7B6D,EAAMnB,WAAW1C,GACjByX,EAAM,GACNtO,EAAM5H,KAAKF,QAAQiD,WAAa,EAE3BT,GAAK4T,GAAS5T,GAAKsF,IACpB5H,KAAKiC,GAAGxB,UAAUhC,MAAQ6D,IAS1C,OAAOtC,uCA4BP,OAtBAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAK+D,WAAWsC,WAAW,GAC3BrG,KAAK0nB,MAAMrhB,WAAW,GACtBrG,KAAKkP,MAAM7I,WAAW,GACtBrG,KAAK4jB,KAAKvd,WAAW,GAEjBrG,KAAKC,UAILD,KAAKE,MAAM2B,QAAQ7B,KAAKkP,OACxBlP,KAAKkP,MAAMrN,QAAQ7B,KAAK+D,YACxB/D,KAAK+D,WAAWlC,QAAQ7B,KAAK0nB,OAC7B1nB,KAAK0nB,MAAM7lB,QAAQ7B,KAAK4jB,MACxB5jB,KAAK4jB,KAAK/hB,QAAQ7B,KAAKI,SAKvBJ,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGrBJ,sCAcP,OARIyB,MAAYzB,KAAKC,SACjB6nB,MAAY9nB,KAAKwB,KACjB6mB,QAAYroB,KAAK4nB,gBACjBF,MAAY1nB,KAAK0nB,MAAM1hB,KAAKvH,MAC5ByQ,MAAYlP,KAAKkP,MAAMzO,UAAUhC,MACjCmlB,KAAY5jB,KAAK4jB,KAAKnjB,UAAUhC,UAG7BuD,gCAKP,MAAO,+BAAAvC,EA7NM+nB,KACVG,MAAa,QADHH,EAEVS,OAAa,SAFHT,EAGVU,UAAa,YAHHV,EAIVW,WAAa,aAJHX,EAKVY,KAAa,OALHZ,EAOVQ,SACHL,MAAe,EACfM,OAAe,GACfC,UAAe,GACfC,WAAe,GACfC,KAAe,IAZFZ,EAqBVO,YAAc,SAACO,EAAQV,GAC1B,GAAKU,EAAS,GAAOA,EAAS,EAAI,CAK9B,IAJA,IAAMC,EAAS,IAAI/W,aAAaoW,GAE1B3lB,EAAK,EAAIqmB,GAAW,EAAIA,GAErB9qB,EAAI,EAAGA,EAAIoqB,EAAiBpqB,IAAK,CAGtC,IAAMsU,EAAM,GAACtU,EAAI,IAAoBoqB,EAAkB,GAAQ,EAC/DW,EAAO/qB,IAAO,EAAIyE,GAAK6P,GAAM,EAAI7P,EAAIoH,KAAKsV,IAAI7M,IAGlD,OAAOyW,EAGX,OAAO,MAAA9oB,EAAAP,QArCMsoB,4UCPrBtlB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqBgrB,cAKjB,SAAAA,EAAY1oB,EAASC,iGAAYC,KAAAwoB,GAAA,IAAA7hB,oKAAA3G,MAAAwoB,EAAA5hB,WAAA1I,OAAA2I,eAAA2hB,IAAA7qB,KAAAqC,KACvBF,EAASC,IADc,OAG7B4G,EAAK9C,WAAa/D,EAAQ2oB,2BAG1B9hB,EAAK9C,WAAW6kB,UAAUjqB,OAAS,GACnCkI,EAAK9C,WAAW8kB,KAAKlqB,MAAa,GAClCkI,EAAK9C,WAAW+kB,MAAMnqB,MAAY,GAClCkI,EAAK9C,WAAW+c,OAAOniB,MAAW,KAClCkI,EAAK9C,WAAWkd,QAAQtiB,MAAU,IAGlCkI,EAAKlF,UAbwBkF,iXAiB3B5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAExC,GAAIM,KAAKjC,KAAK6D,WAAY,CACtB,YAAIpF,EACA,OAAOuB,KAAK6D,WAAW5B,GAAGxD,MAG9B,IAAM6D,EAAInB,WAAW1C,GAqBhB6D,IAlBDomB,WAAe,IACfC,KAAc,EACdC,MAAc,EACdhI,OAAc,EACdG,QAAc,GAWI9e,IAGHK,IAVfomB,UAAc,EACdC,KAAc,GACdC,MAAc,GACdhI,OAAc,EACdG,QAAc,GAII9e,KAGlBjC,KAAK6D,WAAW5B,GAAGxD,MAAQ6D,IAKvC,OAAOtC,uCAoBP,OAdAA,KAAKE,MAAMmG,WAAW,GACtBrG,KAAK6D,WAAWwC,WAAW,GAEvBrG,KAAKC,UAGLD,KAAKE,MAAM2B,QAAQ7B,KAAK6D,YACxB7D,KAAK6D,WAAWhC,QAAQ7B,KAAKI,SAI7BJ,KAAKE,MAAM2B,QAAQ7B,KAAKI,QAGrBJ,sCAcP,OARIyB,MAAczB,KAAKC,SACnByoB,UAAc1oB,KAAK6D,WAAW6kB,UAAUjqB,MACxCkqB,KAAc3oB,KAAK6D,WAAW8kB,KAAKlqB,MACnCmqB,MAAc5oB,KAAK6D,WAAW+kB,MAAMnqB,MACpCmiB,OAAc5gB,KAAK6D,WAAW+c,OAAOniB,MACrCsiB,QAAc/gB,KAAK6D,WAAWkd,QAAQtiB,UAGnCuD,gCAKP,MAAO,+BAAAvC,EAtGM+oB,GAsGN/oB,EAAAP,QAtGMspB,0UCHAK,aAQjB,SAAAA,EAAY/oB,EAASC,EAAY+oB,EAAgBC,EAAiBxlB,iGAAUvD,KAAA6oB,GACxE7oB,KAAKC,YAELD,KAAKF,QAAWA,EAChBE,KAAKuD,SAAWA,EAEhBvD,KAAKwG,OAAW1G,EAAQa,sBAAsBZ,EAAY+oB,EAAgBC,GAC1E/oB,KAAKgpB,SAAWlpB,EAAQa,sBAAsBZ,EAAY+oB,EAAgBC,GAE1E/oB,KAAKipB,UAAY,KACjBjpB,KAAKgH,UAAY,OAAAxJ,EAAAkB,IAAAK,IAAA,QAAAN,MAAA,SAcfyqB,EAAKC,EAAMC,EAAMrW,EAAMsW,EAAcC,EAAe3e,GAAe,IAAAhE,EAAA3G,KAcrE,GAAqD,oBAAjD9B,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAA2B,CACpE,IAAMoD,EAAapD,UAAU,GAEzB,QAASoD,IACTqe,EAAMre,EAAWqe,KAGjB,SAAUre,IACVse,EAAOte,EAAWse,MAGlB,SAAUte,IACVue,EAAOve,EAAWue,MAGlB,SAAUve,IACVkI,EAAOlI,EAAWkI,MAGlB,SAAUlI,IACVwe,EAAexe,EAAWgC,MAG1B,UAAWhC,IACXye,EAAgBze,EAAW4T,OAG3B,UAAW5T,IACXF,EAAgBE,EAAWvD,OAInC,IAAMiiB,EAASL,EAAM,SAAW,QAET,MAAnBnW,EAAK+H,OAAO,KACZ/H,MAAWA,GAGf,IAAMxT,EAAI2D,SAASkmB,EAAM,IAEzB,OAAIhoB,MAAM7B,IAAOA,EAAI,GAAOA,EAAI,MACrBS,MAGXA,KAAKipB,UAAY,IAAIO,UAAJ,GAAiBD,EAASJ,EAA1B,IAAkC5pB,EAAIwT,GACvD/S,KAAKipB,UAAUQ,WAAa,cAE5BzpB,KAAKipB,UAAUS,OAAS,SAAA7gB,GACiC,sBAAjD3K,OAAOmB,UAAUoH,SAAS9I,KAAK0rB,IAC/BA,EAAaxgB,IAIrB7I,KAAKipB,UAAUU,QAAU,SAAA9gB,GACrBlC,EAAK1G,YACL0G,EAAKK,UAELL,EAAK9E,UAEiD,sBAAlD3D,OAAOmB,UAAUoH,SAAS9I,KAAK2rB,IAC/BA,EAAczgB,IAItB7I,KAAKipB,UAAUrd,QAAU,SAAA/C,GACrBlC,EAAK1G,YACL0G,EAAKK,UAELL,EAAK9E,UAEiD,sBAAlD3D,OAAOmB,UAAUoH,SAAS9I,KAAKgN,IAC/BA,EAAc9B,IAItB7I,KAAKipB,UAAUW,UAAY,SAAA/gB,GACvB,IAAKlC,EAAK1G,SAIN,OAHA0G,EAAKpD,SAASzC,KAAK,aACnB6F,EAAKpD,SAASzC,KAAK,OAKvB,GAAI+H,EAAM+H,gBAAgBxI,YAAa,CACnC,IAAMyhB,EAAShhB,EAAM+H,KAAKkZ,WAAatY,aAAauY,kBAC9CrqB,EAAS2J,KAAKC,MAAMugB,EAAQ,GAC5B5a,EAASvP,EAAS8R,aAAauY,kBAE/BC,EAAW,IAAIxY,aAAa3I,EAAM+H,KAAW,EAAGlR,GAChDuqB,EAAW,IAAIzY,aAAa3I,EAAM+H,KAAM3B,EAAQvP,GAGtDiH,EAAKpD,SAAS3C,MAAM,QACpB+F,EAAKpD,SAAS3C,MAAM,OAEpB+F,EAAKqiB,SAASpgB,eAAiB,SAAAC,GAC3B,IAAMK,EAAWL,EAAMM,aAAaH,eAAe,GAC7CI,EAAWP,EAAMM,aAAaH,eAAe,GAE/CghB,aAAoBxY,cAAetI,EAAS0E,IAAIoc,GAChDC,aAAoBzY,cAAepI,EAASwE,IAAIqc,GAK/CtjB,EAAK1G,UAAgC,OAAnB0G,EAAKsiB,YACxBtiB,EAAKpD,SAASzC,KAAK,QACnB6F,EAAKpD,SAASzC,KAAK,WAM5Bd,wCAyBP,OAhBAA,KAAKgpB,SAAS3iB,WAAW,GACzBrG,KAAKwG,OAAOH,WAAW,GAEvBrG,KAAKgpB,SAASpgB,eAAiB,KAC/B5I,KAAKwG,OAAOoC,eAAmB,KAE3B5I,KAAKC,UAELD,KAAKgpB,SAASnnB,QAAQ7B,KAAKuD,SAASrD,OAGpCF,KAAKgpB,SAASnnB,QAAQ7B,KAAKF,QAAQyG,cAEnCvG,KAAKgH,UAGFhH,qCAOH,IAAAmI,EAAAnI,KACJ,GAAIA,KAAKC,UAAYD,KAAKkqB,eAAiBlqB,KAAKgH,OAAQ,CACpDhH,KAAKgH,UAEL,IAAMjH,EAAaC,KAAKwG,OAAOzG,WAE/BC,KAAKwG,OAAOoC,eAAiB,SAAAC,GACzB,GAAIV,EAAKlI,UAAYkI,EAAK+hB,cAAe,CAOrC,IANA,IAAMphB,EAAUD,EAAME,YAAYC,eAAe,GAC3CC,EAAUJ,EAAME,YAAYC,eAAe,GAE3CjC,EAAS,IAAIyK,aAAa,EAAIzR,GAC9BkP,EAAS/L,SAAU6D,EAAOrH,OAAS,EAAI,IAEpClC,EAAI,EAAGA,EAAIuC,EAAYvC,IAC5BuJ,EAAOvJ,GAAcsL,EAAQtL,GAC7BuJ,EAAOkI,EAASzR,GAAKyL,EAAQzL,GAGK,IAAlC2K,EAAK8gB,UAAUkB,gBACfhiB,EAAK8gB,UAAUlc,KAAKhG,KAMpC,OAAO/G,qCAkBP,OAVIA,KAAKipB,qBAAqBO,YAC1BxpB,KAAKC,YACLD,KAAKgH,UAELhH,KAAK6B,UACL7B,KAAKipB,UAAUxK,QAEfze,KAAKipB,UAAY,MAGdjpB,2CAQP,OAAQA,KAAKipB,qBAAqBO,WAAexpB,KAAKipB,UAAUmB,aAAeZ,UAAUa,mCAYvF5oB,EAAO6oB,EAAeC,GAAc,IAAA/hB,EAAAxI,KACtC,YAAIyB,EACA,OAAOzB,KAAKC,SAGqC,sBAAjD/B,OAAOmB,UAAUoH,SAAS9I,KAAK4sB,IAC/BA,IAGJ,IAAMC,EAAajd,OAAOkd,YAAY,WAC7BjiB,EAAKygB,qBAAqBO,WAAiD,IAAlChhB,EAAKygB,UAAUkB,iBAIzB,WAAhCzoB,OAAOD,GAAOE,cACd6G,EAAKvI,UAAYuI,EAAKvI,SAEtBuI,EAAKvI,SAAW2B,QAAQH,GAG5B+G,EAAK3G,UAEiD,sBAAlD3D,OAAOmB,UAAUoH,SAAS9I,KAAK2sB,IAC/BA,IAGJ/c,OAAOmd,cAAcF,KACtB,IAEH,OAAOxqB,mCAQP,OAAOA,KAAKipB,6CAKZ,MAAO,4BAAAvqB,EAzSMmqB,GAySNppB,EAAAP,QAzSM2pB,0UCAA8B,aAOjB,SAAAA,EAAY7qB,EAASC,EAAY+oB,EAAgBC,iGAAiB/oB,KAAA2qB,GAC9D3qB,KAAK+C,WAAajD,EAAQiD,WAE1B/C,KAAKF,QAAYA,EACjBE,KAAKU,UAAYZ,EAAQa,sBAAsBZ,EAAY+oB,EAAgBC,GAE3E/oB,KAAK4qB,QAAU,KACf5qB,KAAK6qB,QAAU,KAEf7qB,KAAK8qB,eAAiB,EACtB9qB,KAAK+qB,WACL/qB,KAAKgrB,WAELhrB,KAAKirB,aAAe,EACpBjrB,KAAKgH,UAELhH,KAAKkrB,MAAQ,EACblrB,KAAKmrB,MAAQ,SAAA3tB,EAAAkB,IAAAK,IAAA,QAAAN,MAAA,SAQXqsB,GACF,IAAM7rB,EAAIiE,SAAS4nB,EAAgB,IAEnC,GAAI7rB,EAAI,EAAG,CACPe,KAAK8qB,eAAiB7rB,EAEtBe,KAAK+qB,QAAU,IAAI5kB,MAAMnG,KAAK8qB,gBAC9B9qB,KAAKgrB,QAAU,IAAI7kB,MAAMnG,KAAK8qB,gBAE9B,IAAK,IAAIttB,EAAI,EAAGA,EAAIyB,EAAGzB,IAAMwC,KAAK+qB,QAAQvtB,MAC1C,IAAK,IAAIA,EAAI,EAAGA,EAAIyB,EAAGzB,IAAMwC,KAAKgrB,QAAQxtB,WAE1CwC,KAAK8qB,eAAiB,EAEtB9qB,KAAK+qB,QAAU,IAAI5kB,MAAMnG,KAAK8qB,gBAC9B9qB,KAAKgrB,QAAU,IAAI7kB,MAAMnG,KAAK8qB,gBAE9B9qB,KAAK+qB,QAAQ,MACb/qB,KAAKgrB,QAAQ,MAGjB,OAAOhrB,mCAULjB,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAEpCW,EAAM,KAIV,OAAQL,GACJ,IAAK,QACL,IAAK,QACD,YAAIxD,EACA,OAAOuB,KAAA,OAAYiC,EAAEoY,OAAO,GAAGW,gBAGnC1Y,EAAMnB,WAAW1C,KACX,GAGa6D,GAFb,IAGFtC,KAAA,OAAYiC,EAAEoY,OAAO,GAAGW,eAAmB1Y,IAS3D,OAAOtC,mCAQLorB,GAOF,OANIprB,KAAKqrB,QAAQD,GACbprB,KAAKirB,YAAcG,EAEnBprB,KAAKirB,aAAe,EAGjBjrB,qCAOH,IAAA2G,EAAA3G,KACJ,IAA2B,IAAtBA,KAAKirB,aAAuBjrB,KAAKgH,OAAQ,CAC1ChH,KAAKgH,UAEL,IAAMjH,EAAaC,KAAKU,UAAUX,WAElCC,KAAKU,UAAUkI,eAAiB,SAAAC,GAC5B,IAA0B,IAAtBlC,EAAKskB,YAAoB,CAOzB,IANA,IAAMniB,EAAUD,EAAME,YAAYC,eAAe,GAC3CC,EAAUJ,EAAME,YAAYC,eAAe,GAE3CsiB,EAAa,IAAI9Z,aAAazR,GAC9BwrB,EAAa,IAAI/Z,aAAazR,GAE3BvC,EAAI,EAAGA,EAAIuC,EAAYvC,IAC5B8tB,EAAW9tB,GAAKmJ,EAAKukB,MAAQpiB,EAAQtL,GACrC+tB,EAAW/tB,GAAKmJ,EAAKwkB,MAAQliB,EAAQzL,GAGzCmJ,EAAKokB,QAAQpkB,EAAKskB,aAAa9P,KAAKmQ,GACpC3kB,EAAKqkB,QAAQrkB,EAAKskB,aAAa9P,KAAKoQ,QAEpC5kB,EAAKjG,UAAU2F,WAAW,GAC1BM,EAAKjG,UAAUkI,eAAiB,MAK5C,OAAO5I,oCAeP,OAPAA,KAAKirB,aAAe,EACpBjrB,KAAKgH,UAGLhH,KAAKU,UAAU2F,WAAW,GAC1BrG,KAAKU,UAAUkI,eAAiB,KAEzB5I,qCAQHorB,GACJ,IAAM1sB,EAAIwE,SAASkoB,EAAO,IAE1B,OAAQ1sB,GAAK,GAAOA,EAAIsB,KAAK8qB,wDAQ7B,OAAO9qB,KAAKirB,6CAQPO,GACL,IAAMC,EAAczrB,KAAA,QAAawrB,EAAb,KACdE,GAAgB1qB,OAAW,KAAM2qB,IAAQ,EAAG1P,IAAQ,GACpDlc,EAAcC,KAAKU,UAAUX,WAC/B6rB,EAAgB,EAChBvgB,EAAgB,EAGhBwgB,EAAqB,EARX3f,KAAAC,KAAAC,SAAA,IAWd,QAAAC,EAAAC,EAAoBmf,EAApBltB,OAAAgO,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,KAA4B,KAAjBkf,EAAiB/e,EAAA5N,MACpBotB,EAAqBT,EAAM1rB,SAC3BmsB,EAAqBT,EAAM1rB,SAbrB,MAAAgN,GAAAP,KAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAmBd,IAFAsf,EAAM1qB,OAAS,IAAIwQ,aAAaqa,EAAqB9rB,KAExC,CACT,IAAK,IAAI+rB,EAAe,EAAGxlB,EAAMmlB,EAAO/rB,OAAQosB,EAAexlB,EAAKwlB,IAC5DL,EAAOK,GAAcF,aAA0Bpa,eAC/Cka,EAAMC,KAAOF,EAAOK,GAAcF,GAAevgB,GACjDqgB,EAAMzP,OAId,KAAIyP,EAAMzP,IAAM,GAoBZ,OAAOyP,EAAM1qB,OAnBb,IAAMiO,EAAS2c,EAAgB7rB,EAG/B2rB,EAAM1qB,OAAOiO,EAAS5D,GAASqgB,EAAMC,IAAMD,EAAMzP,IAGjDyP,EAAMC,IAAM,EACZD,EAAMzP,IAAM,EAGR5Q,EAAStL,EAAa,EAEtBsL,KAGAugB,IACAvgB,EAAQ,OAAAtM,IAAA,MAAAN,MAAA,WAqBpB,OAP0B,IAAtBuB,KAAKirB,aACLjrB,KAAKc,OAGTd,KAAK4qB,QAAU5qB,KAAK+rB,SAAS,KAC7B/rB,KAAK6qB,QAAU7qB,KAAK+rB,SAAS,KAEtB/rB,mCAQLorB,GAMF,IAJ0B,IAAtBprB,KAAKirB,aACLjrB,KAAKc,OAG2B,QAAhCY,OAAO0pB,GAAOzpB,cAAyB,KAAA2Q,KAAAC,KAAAC,SAAA,IACvC,QAAAC,EAAAC,EAAoB1S,KAAK+qB,QAAzBxsB,OAAAgO,cAAA+F,GAAAG,EAAAC,EAAAlG,QAAAC,MAAA6F,KAAkCG,EAAAhU,MAAOiB,OAAS,EADX,MAAAgN,GAAA6F,KAAAC,EAAA9F,EAAA,aAAA4F,GAAAI,EAAA/F,QAAA+F,EAAA/F,SAAA,WAAA4F,EAAA,MAAAC,GAAA,IAAAe,KAAAC,KAAAC,SAAA,IAEvC,QAAAC,EAAAC,EAAoB3T,KAAKgrB,QAAzBzsB,OAAAgO,cAAAgH,GAAAG,EAAAC,EAAAnH,QAAAC,MAAA8G,KAAkCG,EAAAjV,MAAOiB,OAAS,EAFX,MAAAgN,GAAA8G,KAAAC,EAAA/G,EAAA,aAAA6G,GAAAI,EAAAhH,QAAAgH,EAAAhH,SAAA,WAAA6G,EAAA,MAAAC,SAInCzT,KAAKqrB,QAAQD,KACbprB,KAAK+qB,QAAQK,GAAO1rB,OAAS,EAC7BM,KAAKgrB,QAAQI,GAAO1rB,OAAS,GAIrC,OAAOM,oCAUJorB,EAAOnjB,EAAkB+jB,IAEF,IAAtBhsB,KAAKirB,aACLjrB,KAAKc,OAIT,IAAImrB,EAAU,KAGVC,EAAU,KAed,GAboC,QAAhCxqB,OAAO0pB,GAAOzpB,eACd3B,KAAKykB,MAELwH,EAAUjsB,KAAK4qB,QACfsB,EAAUlsB,KAAK6qB,SAEX7qB,KAAKqrB,QAAQD,KACba,EAAUjsB,KAAK+qB,QAAQK,EAAQ,GAC/Bc,EAAUlsB,KAAKgrB,QAAQI,EAAQ,IAKf,IAAnBa,EAAQvsB,QAAqC,IAAnBwsB,EAAQxsB,OACnC,MAAO,GAIX,IAAMysB,EAAgC,IAArBlkB,EAA0B,EAAI,EACzCmkB,EAAoB,IAATJ,EAAc,EAAI,GAC7BK,EAAuB,IAAZF,EAAiB9iB,KAAK6M,IAAI+V,EAAQvsB,OAAQwsB,EAAQxsB,QAAW,EAAI2J,KAAK6M,IAAI+V,EAAQvsB,OAAQwsB,EAAQxsB,QAK7G4sB,EAAa,GAAMD,GAAQD,EAAO,GAClCG,EAFc,EAAKF,GAAQD,EAAO,GADrB,GAGC,EACdI,EAAaxsB,KAAK+C,WAClB0pB,EAAaD,EAAOL,GAAWC,EAAO,GACtCM,EAAaL,GAAQD,EAAO,GAG9BO,EAAS,KAEb,OAAQP,GACJ,KAAK,EACDO,EAAS,IAAIC,WAAWP,GAExB,IAAK,IAAI7uB,EAAI,EAAGA,EAAI6uB,EAAM7uB,IAAK,CAE3B,IAAIqvB,EAAS,GAGTA,EADCrvB,EAAI2uB,GAAa,GACPF,EAAQ5iB,KAAKC,MAAM9L,EAAI2uB,IAAY,GAAK,GAAM9iB,KAAK8O,IAAI,EAAG,GAAK,IAE/D+T,EAAQ7iB,KAAKC,MAAM9L,EAAI2uB,IAAY,GAAK,GAAM9iB,KAAK8O,IAAI,EAAG,GAAK,IAIhE9O,KAAK8O,IAAI,EAAG,GAAK,IAAK0U,EAAUxjB,KAAK8O,IAAI,EAAG,GAAK,GAC3D0U,EAAUxjB,KAAK8O,IAAI,EAAG,GAAK,IAAK0U,EAAUxjB,KAAK8O,IAAI,EAAG,GAAK,GAE/DwU,EAAOnvB,GAAKqvB,EAGhB,MACJ,KAAK,GACDF,EAAS,IAAIG,WAAWT,GAExB,IAAK,IAAI7uB,EAAI,EAAGA,EAAI6uB,EAAM7uB,IAAK,CAE3B,IAAIqvB,EAAS,GAGTA,EADCrvB,EAAI2uB,GAAa,EACTF,EAAQ5iB,KAAKC,MAAM9L,EAAI2uB,IAAY9iB,KAAK8O,IAAI,EAAG,IAE/C+T,EAAQ7iB,KAAKC,MAAM9L,EAAI2uB,IAAY9iB,KAAK8O,IAAI,EAAG,MAI7C9O,KAAK8O,IAAI,EAAG,IAAM,IAAK0U,EAAUxjB,KAAK8O,IAAI,EAAG,IAAM,GAC9D0U,GAAWxjB,KAAK8O,IAAI,EAAG,IAAM,IAAK0U,GAAUxjB,KAAK8O,IAAI,EAAG,IAAM,GAElEwU,EAAOnvB,GAAKqvB,GAWxB,GAFAtf,OAAOwf,IAAMxf,OAAOwf,KAAOxf,OAAOyf,WAAazf,OAAO0f,OAElD1f,OAAOwf,KAAOxf,OAAOwf,IAAIG,gBAAiB,CAG1C,IAAMC,KAENA,EAAM,GAAK,GACXA,EAAM,GAAK,GACXA,EAAM,GAAK,GACXA,EAAM,GAAK,GAEXA,EAAM,GAAMb,GAAe,EAAK,IAChCa,EAAM,GAAMb,GAAe,EAAK,IAChCa,EAAM,GAAMb,GAAc,GAAM,IAChCa,EAAM,GAAMb,GAAc,GAAM,IAEhCa,EAAM,GAAM,GACZA,EAAM,GAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAM,GAGZA,EAAM,IAAM,IACZA,EAAM,IAAM,IACZA,EAAM,IAAM,IACZA,EAAM,IAAM,GAEZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,IAAO,EACbA,EAAM,IAAO,EAEbA,EAAM,IAAM,EACZA,EAAM,IAAM,EAGZA,EAAM,IAAMhB,EACZgB,EAAM,IAAM,EAGZA,EAAM,IAAOX,GAAS,EAAK,IAC3BW,EAAM,IAAOX,GAAS,EAAK,IAC3BW,EAAM,IAAOX,GAAQ,GAAM,IAC3BW,EAAM,IAAOX,GAAQ,GAAM,IAG3BW,EAAM,IAAOV,GAAQ,EAAK,IAC1BU,EAAM,IAAOV,GAAQ,EAAK,IAC1BU,EAAM,IAAOV,GAAO,GAAM,IAC1BU,EAAM,IAAOV,GAAO,GAAM,IAG1BU,EAAM,IAAMhB,GAAWC,EAAO,GAC9Be,EAAM,IAAM,EAGZA,EAAM,IAAMf,EACZe,EAAM,IAAM,EAGZA,EAAM,IAAM,IACZA,EAAM,IAAM,GACZA,EAAM,IAAM,IACZA,EAAM,IAAM,GAEZA,EAAM,IAAOT,GAAc,EAAK,IAChCS,EAAM,IAAOT,GAAc,EAAK,IAChCS,EAAM,IAAOT,GAAa,GAAM,IAChCS,EAAM,IAAOT,GAAa,GAAM,IAEhC,IAAK,IAAIlvB,EAAI,EAAGA,EAAI6uB,EAAM7uB,IACtB,OAAQ4uB,GACJ,KAAM,EACFe,EAAOZ,EAAaG,EAAalvB,GAAKmvB,EAAOnvB,GAC7C,MACJ,KAAK,GAED2vB,EAAOZ,EAAaG,EAAc,EAAIlvB,EAAK,GAAOmvB,EAAOnvB,IAAM,EAAK,IACpE2vB,EAAOZ,EAAaG,EAAc,EAAIlvB,EAAK,GAAOmvB,EAAOnvB,IAAM,EAAK,IAOhF,IAAM4vB,EAAY,IAAI1W,MAAM,IAAIkW,WAAWO,KAAW3rB,KAAS,cAG/D,OAFkB+L,OAAOwf,IAAIG,gBAAgBE,GAOjD,IAAIje,EAAO,GAEXA,GAAQ,OACRA,GAAQzN,OAAO2rB,aAAef,GAAc,EAAK,IAASA,GAAc,EAAK,IAASA,GAAc,GAAM,IAASA,GAAc,GAAM,KACvInd,GAAQ,OAGRA,UAAezN,OAAO2rB,aAAa,GAAI,EAAG,EAAG,GAC7Cle,GAAQzN,OAAO2rB,aAAa,EAAG,GAG/Ble,GAAQzN,OAAO2rB,aAAalB,EAAS,GAGrChd,GAAQzN,OAAO2rB,aAAeb,GAAQ,EAAK,IAASA,GAAQ,EAAK,IAASA,GAAQ,GAAM,IAASA,GAAQ,GAAM,KAG/Grd,GAAQzN,OAAO2rB,aAAeZ,GAAO,EAAK,IAASA,GAAO,EAAK,IAASA,GAAO,GAAM,IAASA,GAAO,GAAM,KAG3Gtd,GAAQzN,OAAO2rB,aAAclB,GAAWC,EAAO,GAAK,GAGpDjd,GAAQzN,OAAO2rB,aAAajB,EAAM,GAGlCjd,GAAQ,OACRA,GAAQzN,OAAO2rB,aAAeX,GAAa,EAAK,IAASA,GAAa,EAAK,IAASA,GAAa,GAAM,IAASA,GAAa,GAAM,KAEnI,IAAK,IAAIlvB,EAAI,EAAGA,EAAI6uB,EAAM7uB,IACtB,OAAQ4uB,GACJ,KAAM,EACFjd,GAAQzN,OAAO2rB,aAAaV,EAAOnvB,IACnC,MACJ,KAAK,GAED2R,GAAQzN,OAAO2rB,aAAeV,EAAOnvB,IAAM,EAAK,IAASmvB,EAAOnvB,IAAM,EAAK,KAUvF,MAFMggB,yBADUjQ,OAAOkQ,KAAKtO,sCAQ5B,MAAO,6BAAAzQ,EA/gBMisB,GA+gBNlrB,EAAAP,QA/gBMyrB,4UCJrBzoB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqB8vB,cAOjB,SAAAA,EAAYvqB,iGAAY/C,KAAAstB,GAAA,IAAA3mB,oKAAA3G,MAAAstB,EAAA1mB,WAAA1I,OAAA2I,eAAAymB,IAAA3vB,KAAAqC,KACd+C,IADc,OAGpB4D,EAAKnF,KAAe8rB,EAAIC,KACxB5mB,EAAK6I,KAAe,IACpB7I,EAAK6mB,aAAe,IALA7mB,iXASlB5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAElCrD,8UAAgB2D,EAAGxD,GAEzB,YAAIH,EACA,OAAOA,EAGX,IAAIgE,EAAM,KAIV,OAAQL,GACJ,IAAK,OACD,YAAIxD,EACA,OAAOuB,KAAKwB,MAGhBc,EAAIZ,OAAOjD,GAAOkD,iBAEP2rB,EAAIC,MAAUjrB,IAAMgrB,EAAIG,QAC/BztB,KAAKwB,KAAOc,GAGhB,MACJ,IAAK,OACD,YAAI7D,EACA,OAAOuB,KAAKwP,MAGhBlN,EAAMY,SAASzE,EAAO,KAChB,GAGY6D,GAFZ,OAGFtC,KAAKwP,KAAOlN,GAGhB,MACJ,IAAK,eACD,YAAI7D,EACA,OAAOuB,KAAKwtB,cAGhBlrB,EAAInB,WAAW1C,IAEP,IACJuB,KAAKwtB,aAAelrB,IASpC,OAAOtC,0CAWE4Q,EAAMC,EAAaC,GAC5B,KAAO9Q,KAAK0O,kBAAkBwB,mBAAsBlQ,KAAKC,UACrD,OAAOD,KAGX,IAAM0tB,EAAQvsB,WAAW0P,GACnB8c,EAAQxsB,WAAW2P,GAEnBsV,EAAQuH,EAAQD,EAEhB5tB,EAAUE,KAAKF,QAVoB8tB,EAYf5tB,KAAK0O,OAAvBiB,EAZiCie,EAYjCje,MAAOke,EAZ0BD,EAY1BC,OAET1c,EAAcxB,GAAU3P,KAAK8O,OAAOmB,KAAOjQ,KAAK8O,OAAOiB,OACvDqB,EAAcyc,GAAU7tB,KAAK8O,OAAOgB,IAAO9P,KAAK8O,OAAOkB,QAEvD8d,EAAa9tB,KAAKwP,KAAOoB,EAAKlR,OAAUkR,EAAKlR,OAASM,KAAKwP,KAG3Due,EAAS/tB,KAAK+C,YAAc,EAAI6N,EAAKlR,QAGrCsuB,EAAgB3kB,KAAKC,MAAMtJ,KAAKwtB,aAAeO,GAMrD,OAHAjuB,EAAQmuB,UAAU,EAAG,EAAGte,EAAOke,GAGvB7tB,KAAKwB,MACT,KAAK8rB,EAAIG,MAEL3tB,EAAQ2R,YAAoC,aAArBzR,KAAK8O,OAAOK,KAAuBnP,KAAK8O,OAAOK,KAAO,uBAC7ErP,EAAQ4R,UAAc1R,KAAK8O,OAAOa,MAClC7P,EAAQ6R,QAAc3R,KAAK8O,OAAOc,IAClC9P,EAAQ8R,SAAc5R,KAAK8O,OAAOe,KAGlC/P,EAAQ+R,YAER,IAAK,IAAIrU,EAAI,EAAGA,EAAIswB,EAAWtwB,IAAK,CAChC,IAAMsU,EAAIzI,KAAKC,MAAO9L,EAAIswB,EAAa3c,GAAcnR,KAAK8O,OAAOmB,KAC3D1N,EAAK8G,KAAKsV,IAAI/N,EAAKpT,GAAKmwB,IAAUvc,EAAcgV,GAAUpmB,KAAK8O,OAAOgB,IAElE,IAANtS,EACAsC,EAAQiS,OAAQD,EAAK9R,KAAK8O,OAAOa,MAAQ,EAAKpN,GAE9CzC,EAAQkS,OAAOF,EAAGvP,GAI1BzC,EAAQmS,SAER,MACJ,KAAKqb,EAAIC,KACT,QACI,OAAQvtB,KAAK8O,OAAOC,OAChB,IAAK,OAEDjP,EAAQ2R,YAAczR,KAAK8O,OAAOK,KAClCrP,EAAQ4R,UAAc1R,KAAK8O,OAAOa,MAClC7P,EAAQ6R,QAAc3R,KAAK8O,OAAOc,IAClC9P,EAAQ8R,SAAc5R,KAAK8O,OAAOe,KAElC/P,EAAQ+R,YAGR,IAAK,IAAIrU,EAAI,EAAGA,EAAIswB,EAAWtwB,IAAK,CAChC,IAAMsU,EAAIzI,KAAKC,MAAO9L,EAAIswB,EAAa3c,GAAcnR,KAAK8O,OAAOmB,KAC3D1N,EAAI8G,KAAKC,OAAO,EAAKsH,EAAKpT,GAAK,KAAQ4T,GAAepR,KAAK8O,OAAOgB,IAE9D,IAANtS,EACAsC,EAAQiS,OAAQD,EAAK9R,KAAK8O,OAAOa,MAAQ,EAAKpN,GAE9CzC,EAAQkS,OAAOF,EAAGvP,GAI1BzC,EAAQmS,SAER,MACJ,IAAK,OAEuB,aAArBjS,KAAK8O,OAAOK,OACZrP,EAAQoS,UAAYlS,KAAK8O,OAAOK,MAInC,IAAK,IAAI3R,EAAI,EAAGA,EAAIswB,EAAWtwB,IAAK,CAChC,IAAMsU,EAAIzI,KAAKC,MAAO9L,EAAIswB,EAAa3c,GAAcnR,KAAK8O,OAAOmB,KAC3D1N,GAAK,EAAI8G,KAAKC,MAAOsH,EAAKpT,GAAK,IAAO4T,GAG7C,GAAyB,aAArBpR,KAAK8O,OAAOK,KAAqB,CAChC,IAAMgD,EAAWf,EAAcpR,KAAK8O,OAAOgB,IACrCsC,EAAWtS,EAAQuS,qBAAqB,EAAIF,EAAQ,EAAIA,EAAS5P,GAFvC2J,KAAAC,KAAAC,SAAA,IAIhC,QAAAC,EAAAC,EAAwBtM,KAAK8O,OAAOE,KAApCzQ,OAAAgO,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,KAA0C,KAA/ByG,EAA+BtG,EAAA5N,MACtC2T,EAASQ,aAAaD,EAAU1D,OAAQ0D,EAAUzD,QALtB,MAAAxC,GAAAP,KAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAQhCtM,EAAQoS,UAAYE,EAGxBtS,EAAQ+S,SAASf,EAAIV,EAAcpR,KAAK8O,OAAOgB,IAAM9P,KAAK8O,OAAOa,MAAOpN,KAW5F,GAA0B,SAArBvC,KAAK8O,OAAOM,MAA0C,SAArBpP,KAAK8O,OAAOO,KAAkB,CAEhE,IAAK,IAAI7R,EAAI,EAAGA,EAAIswB,EAAWtwB,IAC3B,GAAKA,EAAIwwB,GAAmB,EAAG,CAC3B,IAAMlc,EAAIzI,KAAKC,MAAO9L,EAAIswB,EAAa3c,GAAcnR,KAAK8O,OAAOmB,KAE3D7N,EAAIiH,KAAKC,MAAMtJ,KAAKwtB,cAAgBhwB,EAAIwwB,IACxCtvB,EAAK0D,EAAI,IAAWA,EAAhB,MAA4BV,OAAOU,EAAI,KAAMiY,MAAM,EAAG,GAAtD,OAGe,SAArBra,KAAK8O,OAAOM,OACZtP,EAAQoS,UAAYlS,KAAK8O,OAAOM,KAChCtP,EAAQ+S,SAASf,EAAG9R,KAAK8O,OAAOgB,IAAK,EAAGsB,IAInB,SAArBpR,KAAK8O,OAAOO,OACZvP,EAAQoS,UAAYlS,KAAK8O,OAAOO,KAChCvP,EAAQwP,KAAYtP,KAAKkuB,mBACzBpuB,EAAQquB,SAASzvB,EAAIoT,EAAKhS,EAAQsuB,YAAY1vB,GAAGiR,MAAQ,EAAM3P,KAAK8O,OAAOgB,IAAMsB,EAAclO,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,MAM3I,OAAQxP,KAAKwB,MACT,KAAK8rB,EAAIG,MACL,IAAK,IAAIjwB,EAAIkwB,EAAOlwB,GAAKmwB,EAAOnwB,GAAK,GAAI,CACrC,IAAMkB,EAAOlB,EAAP,MACAsU,EAAIzI,KAAKC,MAAMtJ,KAAK8O,OAAOmB,KAAOnQ,EAAQsuB,YAAY1vB,GAAGiR,OACzDpN,EAAI8G,KAAKC,OAAS,GAAK9L,EAAImwB,GAAUvH,EAAShV,GAAepR,KAAK8O,OAAOgB,IAGtD,SAArB9P,KAAK8O,OAAOM,OACZtP,EAAQoS,UAAYlS,KAAK8O,OAAOM,KAChCtP,EAAQ+S,SAAS7S,KAAK8O,OAAOmB,KAAM1N,EAAG4O,EAAY,IAI7B,SAArBnR,KAAK8O,OAAOO,OACZvP,EAAQoS,UAAYlS,KAAK8O,OAAOO,KAChCvP,EAAQwP,KAAYtP,KAAKkuB,mBACzBpuB,EAAQquB,SAASzvB,EAAGoT,EAAIvP,EAAI8G,KAAKC,MAAMpG,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,IAAM,KAIrF,MACJ,KAAK8d,EAAIC,KACT,QACI,IADJjb,KAAAC,KAAAC,SAAA,IAGI,QAAAC,EAAAC,GAFe,OAAQ,OAAQ,OAAQ,OAAQ,QAE/CnU,OAAAgO,cAAA+F,GAAAG,EAAAC,EAAAlG,QAAAC,MAAA6F,KAAuB,KAAZ5T,EAAY+T,EAAAhU,MACbqT,EAAIzI,KAAKC,MAAMtJ,KAAK8O,OAAOmB,KAAOnQ,EAAQsuB,YAAY1vB,GAAGiR,OACzDpN,GAAM,EAAIpB,WAAWzC,IAAM0S,EAAepR,KAAK8O,OAAOgB,IAGnC,SAArB9P,KAAK8O,OAAOM,OACZtP,EAAQoS,UAAYlS,KAAK8O,OAAOM,KAChCtP,EAAQ+S,SAAS7S,KAAK8O,OAAOmB,KAAM1N,EAAG4O,EAAY,IAI7B,SAArBnR,KAAK8O,OAAOO,OACZvP,EAAQoS,UAAYlS,KAAK8O,OAAOO,KAChCvP,EAAQwP,KAAYtP,KAAKkuB,mBACzBpuB,EAAQquB,SAASzvB,EAAGoT,EAAIvP,EAAI8G,KAAKC,MAAMpG,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,IAAM,MAjBzF,MAAA9C,GAAA6F,KAAAC,EAAA9F,EAAA,aAAA4F,GAAAI,EAAA/F,QAAA+F,EAAA/F,SAAA,WAAA4F,EAAA,MAAAC,KAyBR,OAAOxS,uCAWD4Q,EAAMC,EAAaC,GACzB,KAAO9Q,KAAK2O,eAAe0B,YAAerQ,KAAKC,UAC3C,OAAOD,KAGX,IAAM0tB,EAAQvsB,WAAW0P,GACnB8c,EAAQxsB,WAAW2P,GAEnBsV,EAAQuH,EAAQD,EAEhB/e,EAAM3O,KAAK2O,IAEXgB,EAAczM,SAASyL,EAAI0f,aAAa,SAAU,IAClDR,EAAc3qB,SAASyL,EAAI0f,aAAa,UAAW,IACnDld,EAAcxB,GAAU3P,KAAK8O,OAAOmB,KAAOjQ,KAAK8O,OAAOiB,OACvDqB,EAAcyc,GAAU7tB,KAAK8O,OAAOgB,IAAO9P,KAAK8O,OAAOkB,QAEvD8d,EAAa9tB,KAAKwP,KAAOoB,EAAKlR,OAAUkR,EAAKlR,OAASM,KAAKwP,KAG3Due,EAAS/tB,KAAK+C,YAAc,EAAI6N,EAAKlR,QAGrCsuB,EAAgB3kB,KAAKC,MAAMtJ,KAAKwtB,aAAeO,GAMrD,OAHApf,EAAI2f,UAAY,GAGRtuB,KAAKwB,MACT,KAAK8rB,EAAIG,MAML,IAJA,IAAM1a,EAAOC,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAEpD1S,EAAI,GAECN,EAAI,EAAGA,EAAIswB,EAAWtwB,IAAK,CAChC,IAAMsU,EAAIzI,KAAKC,MAAO9L,EAAIswB,EAAa3c,GAAcnR,KAAK8O,OAAOmB,KAC3D1N,EAAI8G,KAAKC,OAAO,GAAKsH,EAAKpT,GAAKmwB,IAAUvc,EAAcgV,IAAUpmB,KAAK8O,OAAOgB,IAG/EhS,GADM,IAANN,EACAM,KAASgU,EAAK9R,KAAK8O,OAAOa,MAAQ,GAAlC,IAAwCpN,EAExCzE,KAAUgU,EAAV,IAAevP,EAIvBwQ,EAAKxC,aAAa,IAAKzS,GAEvBiV,EAAKxC,aAAa,SAA0C,aAArBvQ,KAAK8O,OAAOK,KAAuBnP,KAAK8O,OAAOK,KAAO,wBAC7F4D,EAAKxC,aAAa,OAAmB,QACrCwC,EAAKxC,aAAa,eAAmBvQ,KAAK8O,OAAOa,OACjDoD,EAAKxC,aAAa,iBAAmBvQ,KAAK8O,OAAOc,KACjDmD,EAAKxC,aAAa,kBAAmBvQ,KAAK8O,OAAOe,MAEjDlB,EAAIyE,YAAYL,GAEhB,MACJ,KAAKua,EAAIC,KACT,QACI,OAAQvtB,KAAK8O,OAAOC,OAChB,IAAK,OAMD,IAJA,IAAMgE,EAAOC,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAEpD1S,EAAI,GAECN,EAAI,EAAGA,EAAIswB,EAAWtwB,IAAK,CAChC,IAAMsU,EAAIzI,KAAKC,MAAO9L,EAAIswB,EAAa3c,GAAcnR,KAAK8O,OAAOmB,KAC3D1N,EAAI8G,KAAKC,OAAO,EAAKsH,EAAKpT,GAAK,KAAQ4T,GAAepR,KAAK8O,OAAOgB,IAGpEhS,GADM,IAANN,EACAM,KAASgU,EAAK9R,KAAK8O,OAAOa,MAAQ,GAAlC,IAAwCpN,EAExCzE,KAAUgU,EAAV,IAAevP,EAIvBwQ,EAAKxC,aAAa,IAAKzS,GAEvBiV,EAAKxC,aAAa,SAAmBvQ,KAAK8O,OAAOK,MACjD4D,EAAKxC,aAAa,OAAmB,QACrCwC,EAAKxC,aAAa,eAAmBvQ,KAAK8O,OAAOa,OACjDoD,EAAKxC,aAAa,iBAAmBvQ,KAAK8O,OAAOc,KACjDmD,EAAKxC,aAAa,kBAAmBvQ,KAAK8O,OAAOe,MAEjDlB,EAAIyE,YAAYL,GAEhB,MACJ,IAAK,OAED,IAAIG,EAAO,KAEc,aAArBlT,KAAK8O,OAAOK,OACZ+D,EAAOlT,KAAKmT,wBAAwBob,EAAArvB,QAAW6U,6BAInD,IAAMtR,EAAIuQ,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,KAExC,OAAT0C,GACAzQ,EAAE2Q,YAAYF,GAGlB,IAAK,IAAI1V,EAAI,EAAGA,EAAIswB,EAAWtwB,IAAK,CAChC,IAAI6V,EAAOL,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAEhDsB,EAAIzI,KAAKC,MAAO9L,EAAIswB,EAAa3c,GAAcnR,KAAK8O,OAAOmB,KAC3D1N,EAAI8G,KAAKC,MAAOsH,EAAKpT,GAAK,IAAO4T,GAEvCiC,EAAK9C,aAAa,IAASuB,GAC3BuB,EAAK9C,aAAa,IAAUvQ,KAAK8O,OAAOgB,IAAMsB,GAC9CiC,EAAK9C,aAAa,QAASvQ,KAAK8O,OAAOa,OAEnCpN,EAAI,EACJ8Q,EAAK9C,aAAa,UAAWhO,IAE7B8Q,EAAK9C,aAAa,SAAahO,GAC/B8Q,EAAK9C,aAAa,YAAlB,eAA6CuB,EAAK9R,KAAK8O,OAAOa,MAAQ,GAAtE,KAA4E3P,KAAK8O,OAAOgB,IAAMsB,GAA9F,MAGJiC,EAAK9C,aAAa,SAAU,QAC5B8C,EAAK9C,aAAa,OAAoB,OAAT2C,EAAiBlT,KAAK8O,OAAOK,KAA9B,QAA6Cof,EAAArvB,QAAW6U,2BAAxD,KAE5BtR,EAAE2Q,YAAYC,GAGlB1E,EAAIyE,YAAY3Q,IAUhC,GAA0B,SAArBzC,KAAK8O,OAAOM,MAA0C,SAArBpP,KAAK8O,OAAOO,KAAkB,CAEhE,IAAK,IAAI7R,EAAI,EAAGA,EAAIswB,EAAWtwB,IAC3B,GAAKA,EAAIwwB,GAAmB,EAAG,CAC3B,IAAMlc,EAAIzI,KAAKC,MAAO9L,EAAIswB,EAAa3c,GAAcnR,KAAK8O,OAAOmB,KAE3D7N,EAAIiH,KAAKC,MAAMtJ,KAAKwtB,cAAgBhwB,EAAIwwB,IACxCtvB,EAAK0D,EAAI,IAAWA,EAAhB,MAA4BV,OAAOU,EAAI,KAAMiY,MAAM,EAAG,GAAtD,OAGV,GAAyB,SAArBra,KAAK8O,OAAOM,KAAiB,CAC7B,IAAMiE,EAAOL,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExD6C,EAAK9C,aAAa,IAAUuB,GAC5BuB,EAAK9C,aAAa,IAAUvQ,KAAK8O,OAAOgB,KACxCuD,EAAK9C,aAAa,QAAU,GAC5B8C,EAAK9C,aAAa,SAAUa,GAE5BiC,EAAK9C,aAAa,SAAU,QAC5B8C,EAAK9C,aAAa,OAAUvQ,KAAK8O,OAAOM,MAExCT,EAAIyE,YAAYC,GAIpB,GAAyB,SAArBrT,KAAK8O,OAAOO,KAAiB,CAC7B,IAAMA,EAAO2D,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExDnB,EAAKmf,YAAc9vB,EAEnB2Q,EAAKkB,aAAa,IAAKuB,GACvBzC,EAAKkB,aAAa,IAAMvQ,KAAK8O,OAAOgB,IAAMsB,EAAclO,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,KAExFH,EAAKkB,aAAa,cAAe,UACjClB,EAAKkB,aAAa,SAAe,QACjClB,EAAKkB,aAAa,OAAevQ,KAAK8O,OAAOO,MAC7CA,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKC,QAClDF,EAAKkB,aAAa,YAAevQ,KAAK8O,OAAOQ,KAAKE,MAClDH,EAAKkB,aAAa,aAAevQ,KAAK8O,OAAOQ,KAAKG,OAClDJ,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKI,QAElDf,EAAIyE,YAAY/D,IAM5B,OAAQrP,KAAKwB,MACT,KAAK8rB,EAAIG,MACL,IAAK,IAAIjwB,EAAIkwB,EAAOlwB,GAAKmwB,EAAOnwB,GAAK,GAAI,CACrC,IAAMkB,EAAOlB,EAAP,KACAsU,EAAI9R,KAAK8O,OAAOmB,KAChB1N,EAAI8G,KAAKC,OAAS,GAAK9L,EAAImwB,GAAUvH,EAAShV,GAAepR,KAAK8O,OAAOgB,IAG/E,GAAyB,SAArB9P,KAAK8O,OAAOM,KAAiB,CAC7B,IAAMiE,EAAOL,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExD6C,EAAK9C,aAAa,IAAUuB,GAC5BuB,EAAK9C,aAAa,IAAUhO,GAC5B8Q,EAAK9C,aAAa,QAAUY,GAC5BkC,EAAK9C,aAAa,SAAU,GAE5B8C,EAAK9C,aAAa,SAAU,QAC5B8C,EAAK9C,aAAa,OAAUvQ,KAAK8O,OAAOM,MAExCT,EAAIyE,YAAYC,GAIpB,GAAyB,SAArBrT,KAAK8O,OAAOO,KAAiB,CAC7B,IAAMA,EAAO2D,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExDnB,EAAKmf,YAAc9vB,EAEnB2Q,EAAKkB,aAAa,IAAKuB,GACvBzC,EAAKkB,aAAa,IAAMhO,EAAI8G,KAAKC,MAAMpG,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,IAAM,IAE7EH,EAAKkB,aAAa,cAAe,OACjClB,EAAKkB,aAAa,SAAe,QACjClB,EAAKkB,aAAa,OAAevQ,KAAK8O,OAAOO,MAC7CA,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKC,QAClDF,EAAKkB,aAAa,YAAevQ,KAAK8O,OAAOQ,KAAKE,MAClDH,EAAKkB,aAAa,aAAevQ,KAAK8O,OAAOQ,KAAKG,OAClDJ,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKI,QAElDf,EAAIyE,YAAY/D,IAIxB,MACJ,KAAKie,EAAIC,KACT,QACI,IADJha,KAAAC,KAAAC,SAAA,IAGI,QAAAC,EAAAC,GAFe,OAAQ,OAAQ,OAAQ,OAAQ,QAE/CpV,OAAAgO,cAAAgH,GAAAG,EAAAC,EAAAnH,QAAAC,MAAA8G,KAAuB,KAAZ7U,EAAYgV,EAAAjV,MACbqT,EAAI9R,KAAK8O,OAAOmB,KAChB1N,GAAM,EAAIpB,WAAWzC,IAAM0S,EAAepR,KAAK8O,OAAOgB,IAG5D,GAAyB,SAArB9P,KAAK8O,OAAOM,KAAiB,CAC7B,IAAMiE,EAAOL,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExD6C,EAAK9C,aAAa,IAAUuB,GAC5BuB,EAAK9C,aAAa,IAAUhO,GAC5B8Q,EAAK9C,aAAa,QAAUY,GAC5BkC,EAAK9C,aAAa,SAAU,GAE5B8C,EAAK9C,aAAa,SAAU,QAC5B8C,EAAK9C,aAAa,OAAUvQ,KAAK8O,OAAOM,MAExCT,EAAIyE,YAAYC,GAIpB,GAAyB,SAArBrT,KAAK8O,OAAOO,KAAiB,CAC7B,IAAMA,EAAO2D,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExDnB,EAAKmf,YAAc9vB,EAEnB2Q,EAAKkB,aAAa,IAAKuB,GACvBzC,EAAKkB,aAAa,IAAMhO,EAAI8G,KAAKC,MAAMpG,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,IAAM,IAE7EH,EAAKkB,aAAa,cAAe,OACjClB,EAAKkB,aAAa,SAAe,QACjClB,EAAKkB,aAAa,OAAevQ,KAAK8O,OAAOO,MAC7CA,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKC,QAClDF,EAAKkB,aAAa,YAAevQ,KAAK8O,OAAOQ,KAAKE,MAClDH,EAAKkB,aAAa,aAAevQ,KAAK8O,OAAOQ,KAAKG,OAClDJ,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKI,QAElDf,EAAIyE,YAAY/D,KAvC5B,MAAA3C,GAAA8G,KAAAC,EAAA/G,EAAA,aAAA6G,GAAAI,EAAAhH,QAAAgH,EAAAhH,SAAA,WAAA6G,EAAA,MAAAC,KA+CR,OAAOzT,wCAKP,MAAO,iCAAAP,EA1jBM6tB,KACVC,KAAQ,OADED,EAEVG,MAAQ,QAAAhuB,EAAAP,QAFEouB,4UCPrBprB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqBixB,cAOjB,SAAAA,EAAY1rB,iGAAY/C,KAAAyuB,GAAA,IAAA9nB,oKAAA3G,MAAAyuB,EAAA7nB,WAAA1I,OAAA2I,eAAA4nB,IAAA9wB,KAAAqC,KACd+C,IADc,OAGpB4D,EAAKnF,KAAeitB,EAAKlB,KACzB5mB,EAAK6mB,aAAe,KAJA7mB,iXAQlB5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAElCrD,8UAAgB2D,EAAGxD,GAEzB,YAAIH,EACA,OAAOA,EAGX,IAAIgE,EAAI,KAER,OAAQL,GACJ,IAAK,OACD,YAAIxD,EACA,OAAOuB,KAAKwB,MAGhBc,EAAIZ,OAAOjD,GAAOkD,iBAEP8sB,EAAKlB,MAAUjrB,IAAMmsB,EAAKhB,QACjCztB,KAAKwB,KAAOc,GAGhB,MACJ,IAAK,eACD,YAAI7D,EACA,OAAOuB,KAAKwtB,cAGhBlrB,EAAInB,WAAW1C,IAEP,IACJuB,KAAKwtB,aAAelrB,IASpC,OAAOtC,0CASE4Q,GACT,KAAO5Q,KAAK0O,kBAAkBwB,mBAAsBlQ,KAAKC,UACrD,OAAOD,KAGX,IAAMF,EAAUE,KAAKF,QALN8tB,EAOW5tB,KAAK0O,OAAvBiB,EAPOie,EAOPje,MAAOke,EAPAD,EAOAC,OAET1c,EAAcxB,GAAU3P,KAAK8O,OAAOmB,KAAOjQ,KAAK8O,OAAOiB,OACvDqB,EAAcyc,GAAU7tB,KAAK8O,OAAOgB,IAAO9P,KAAK8O,OAAOkB,QACvDqB,EAAchI,KAAKC,MAAM8H,EAAc,GAAKpR,KAAK8O,OAAOgB,IAGxDke,EAAgB3kB,KAAKC,MAAMtJ,KAAKwtB,aAAextB,KAAK+C,YAM1D,OAHAjD,EAAQmuB,UAAU,EAAG,EAAGte,EAAOke,GAGvB7tB,KAAKwB,MACT,KAAKitB,EAAKhB,MACNztB,KAAK0uB,mCAAmC5uB,EAAS8Q,EAAMO,EAAYC,EAAaC,GAChF,MACJ,KAAKod,EAAKlB,KACV,QACI,OAAQvtB,KAAK8O,OAAOC,OAChB,IAAK,OAEDjP,EAAQ2R,YAAczR,KAAK8O,OAAOK,KAClCrP,EAAQ4R,UAAc1R,KAAK8O,OAAOa,MAClC7P,EAAQ6R,QAAc3R,KAAK8O,OAAOc,IAClC9P,EAAQ8R,SAAc5R,KAAK8O,OAAOe,KAGlC/P,EAAQ+R,YAER,IAAK,IAAIrU,EAAI,EAAG8I,EAAMsK,EAAKlR,OAAQlC,EAAI8I,EAAK9I,IAAK,CAC7C,IAAMsU,EAAIzI,KAAKC,MAAO9L,EAAI8I,EAAO6K,GAAcnR,KAAK8O,OAAOmB,KACrD1N,EAAI8G,KAAKC,OAAO,EAAKsH,EAAKpT,GAAK,KAAQ4T,GAAepR,KAAK8O,OAAOgB,IAE9D,IAANtS,EACAsC,EAAQiS,OAAQD,EAAK9R,KAAK8O,OAAOa,MAAQ,EAAKpN,GAE9CzC,EAAQkS,OAAOF,EAAGvP,GAI1BzC,EAAQmS,SAER,MACJ,IAAK,OAEuB,aAArBjS,KAAK8O,OAAOK,OACZrP,EAAQoS,UAAYlS,KAAK8O,OAAOK,MAInC,IAAK,IAAI3R,EAAI,EAAG8I,EAAMsK,EAAKlR,OAAQlC,EAAI8I,EAAK9I,IAAK,CAC7C,IAAMsU,EAAIzI,KAAKC,MAAO9L,EAAI8I,EAAO6K,GAAcnR,KAAK8O,OAAOmB,KACrD1N,EAAI8G,KAAKC,OAAO,GAAOsH,EAAKpT,GAAK,KAAQ4T,GAGhD,GAAyB,aAArBpR,KAAK8O,OAAOK,KAAqB,CAChC,IAAMgD,EAAYf,EAAc,EAAKpR,KAAK8O,OAAOgB,IAC3CsC,EAAWtS,EAAQuS,qBAAqB,EAAIF,EAAQ,EAAIA,EAAS5P,GAFvC2J,KAAAC,KAAAC,SAAA,IAIhC,QAAAC,EAAAC,EAAwBtM,KAAK8O,OAAOE,KAApCzQ,OAAAgO,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,KAA0C,KAA/ByG,EAA+BtG,EAAA5N,MACtC2T,EAASQ,aAAaD,EAAU1D,OAAQ0D,EAAUzD,QALtB,MAAAxC,GAAAP,KAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAQhCtM,EAAQoS,UAAYE,EAGxBtS,EAAQ+S,SAASf,EAAGT,EAAQrR,KAAK8O,OAAOa,MAAOpN,KAWnE,GAA0B,SAArBvC,KAAK8O,OAAOM,MAA0C,SAArBpP,KAAK8O,OAAOO,KAAkB,CAEhE,IAAK,IAAI7R,EAAI,EAAG8I,EAAMsK,EAAKlR,OAAQlC,EAAI8I,EAAK9I,IACxC,GAAKA,EAAIwwB,GAAmB,EAAG,CAC3B,IAAMlc,EAAIzI,KAAKC,MAAO9L,EAAI8I,EAAO6K,GAAcnR,KAAK8O,OAAOmB,KACrDvR,EAAO2K,KAAKC,MAAO9L,EAAIwC,KAAK+C,WAAc,KAA1C,MAGmB,SAArB/C,KAAK8O,OAAOM,OACZtP,EAAQoS,UAAYlS,KAAK8O,OAAOM,KAChCtP,EAAQ+S,SAASf,EAAG9R,KAAK8O,OAAOgB,IAAK,EAAGsB,IAInB,SAArBpR,KAAK8O,OAAOO,OACZvP,EAAQoS,UAAYlS,KAAK8O,OAAOO,KAChCvP,EAAQwP,KAAYtP,KAAKkuB,mBACzBpuB,EAAQquB,SAASzvB,EAAIoT,EAAKhS,EAAQsuB,YAAY1vB,GAAGiR,MAAQ,EAAM3P,KAAK8O,OAAOgB,IAAMsB,EAAclO,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,MAM3I,IAvBgE8C,KAAAC,KAAAC,SAAA,IAyBhE,QAAAC,EAAAC,GAFe,QAAS,QAAS,QAAS,QAAS,SAEnDnU,OAAAgO,cAAA+F,GAAAG,EAAAC,EAAAlG,QAAAC,MAAA6F,KAAuB,KAAZ5T,EAAY+T,EAAAhU,MACbqT,EAAIzI,KAAKC,MAAMtJ,KAAK8O,OAAOmB,KAAOnQ,EAAQsuB,YAAY1vB,GAAGiR,OACzDpN,EAAI8G,KAAKC,OAAO,EAAInI,WAAWzC,EAAEwb,UAAY9I,EAAc,IAAMpR,KAAK8O,OAAOgB,IAG1D,SAArB9P,KAAK8O,OAAOM,OACZtP,EAAQoS,UAAYlS,KAAK8O,OAAOM,KAChCtP,EAAQ+S,SAAS7S,KAAK8O,OAAOmB,KAAM1N,EAAG4O,EAAY,IAI7B,SAArBnR,KAAK8O,OAAOO,OACZvP,EAAQoS,UAAYlS,KAAK8O,OAAOO,KAChCvP,EAAQwP,KAAYtP,KAAKkuB,mBACzBpuB,EAAQquB,SAASzvB,EAAGoT,EAAIvP,EAAI8G,KAAKC,MAAMpG,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,IAAM,MAvCrB,MAAA9C,GAAA6F,KAAAC,EAAA9F,EAAA,aAAA4F,GAAAI,EAAA/F,QAAA+F,EAAA/F,SAAA,WAAA4F,EAAA,MAAAC,IA4CpE,OAAOxS,uCASD4Q,GACN,KAAO5Q,KAAK2O,eAAe0B,YAAerQ,KAAKC,UAC3C,OAAOD,KAGX,IAAM2O,EAAM3O,KAAK2O,IAEXgB,EAAczM,SAASyL,EAAI0f,aAAa,SAAU,IAClDR,EAAc3qB,SAASyL,EAAI0f,aAAa,UAAW,IACnDld,EAAcxB,GAAU3P,KAAK8O,OAAOmB,KAAOjQ,KAAK8O,OAAOiB,OACvDqB,EAAcyc,GAAU7tB,KAAK8O,OAAOgB,IAAO9P,KAAK8O,OAAOkB,QACvDqB,EAAchI,KAAKC,MAAM8H,EAAc,GAAKpR,KAAK8O,OAAOgB,IAGxDke,EAAgB3kB,KAAKC,MAAMtJ,KAAKwtB,aAAextB,KAAK+C,YAM1D,OAHA4L,EAAI2f,UAAY,GAGRtuB,KAAKwB,MACT,KAAKitB,EAAKhB,MACN9e,EAAIyE,YAAYpT,KAAK2uB,gCAAgC/d,EAAMO,EAAYC,EAAaC,EAAQ,KAAMkd,EAAArvB,QAAW4U,8BAC7G,MACJ,KAAK2a,EAAKlB,KACV,QACI,OAAQvtB,KAAK8O,OAAOC,OAChB,IAAK,OAMD,IAJA,IAAMgE,EAAOC,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAEpD1S,EAAI,GAECN,EAAI,EAAG8I,EAAMsK,EAAKlR,OAAQlC,EAAI8I,EAAK9I,IAAK,CAC7C,IAAMsU,EAAIzI,KAAKC,MAAO9L,EAAI8I,EAAO6K,GAAcnR,KAAK8O,OAAOmB,KACrD1N,EAAI8G,KAAKC,OAAO,EAAKsH,EAAKpT,GAAK,KAAQ4T,GAAepR,KAAK8O,OAAOgB,IAGpEhS,GADM,IAANN,EACAM,KAASgU,EAAK9R,KAAK8O,OAAOa,MAAQ,GAAlC,IAAwCpN,EAExCzE,KAAUgU,EAAV,IAAevP,EAIvBwQ,EAAKxC,aAAa,IAAKzS,GAEvBiV,EAAKxC,aAAa,SAAmBvQ,KAAK8O,OAAOK,MACjD4D,EAAKxC,aAAa,OAAmB,QACrCwC,EAAKxC,aAAa,eAAmBvQ,KAAK8O,OAAOa,OACjDoD,EAAKxC,aAAa,iBAAmBvQ,KAAK8O,OAAOc,KACjDmD,EAAKxC,aAAa,kBAAmBvQ,KAAK8O,OAAOe,MAEjDlB,EAAIyE,YAAYL,GAEhB,MACJ,IAAK,OACD,IAAIG,EAAO,KAEc,aAArBlT,KAAK8O,OAAOK,OACZ+D,EAAOlT,KAAKmT,wBAAwBob,EAAArvB,QAAW4U,8BAInD,IAAMrR,EAAIuQ,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,KAExC,OAAT0C,GACAzQ,EAAE2Q,YAAYF,GAGlB,IAAK,IAAI1V,EAAI,EAAG8I,EAAMsK,EAAKlR,OAAQlC,EAAI8I,EAAK9I,IAAK,CAC7C,IAAM6V,EAAOL,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAElDsB,EAAIzI,KAAKC,MAAO9L,EAAI8I,EAAO6K,GAAcnR,KAAK8O,OAAOmB,KACrD1N,EAAI8G,KAAKC,OAAQsH,EAAKpT,GAAK,IAAO,IAAO4T,GAE/CiC,EAAK9C,aAAa,IAASuB,GAC3BuB,EAAK9C,aAAa,IAASc,GAC3BgC,EAAK9C,aAAa,QAASvQ,KAAK8O,OAAOa,OAEnCpN,EAAI,EACJ8Q,EAAK9C,aAAa,UAAWhO,IAE7B8Q,EAAK9C,aAAa,SAAahO,GAC/B8Q,EAAK9C,aAAa,YAAlB,eAA6CuB,EAAK9R,KAAK8O,OAAOa,MAAQ,GAAtE,IAA4E0B,EAA5E,MAGJgC,EAAK9C,aAAa,SAAU,QAC5B8C,EAAK9C,aAAa,OAAoB,OAAT2C,EAAiBlT,KAAK8O,OAAOK,KAA9B,QAA6Cof,EAAArvB,QAAW4U,4BAAxD,KAE5BrR,EAAE2Q,YAAYC,GAGlB1E,EAAIyE,YAAY3Q,IAUhC,GAA0B,SAArBzC,KAAK8O,OAAOM,MAA0C,SAArBpP,KAAK8O,OAAOO,KAAkB,CAEhE,IAAK,IAAI7R,EAAI,EAAG8I,EAAMsK,EAAKlR,OAAQlC,EAAI8I,EAAK9I,IACxC,GAAKA,EAAIwwB,GAAmB,EAAG,CAC3B,IAAMlc,EAAIzI,KAAKC,MAAO9L,EAAI8I,EAAO6K,GAAcnR,KAAK8O,OAAOmB,KACrDvR,EAAO2K,KAAKC,MAAO9L,EAAIwC,KAAK+C,WAAc,KAA1C,MAGN,GAAyB,SAArB/C,KAAK8O,OAAOM,KAAiB,CAC7B,IAAMiE,EAAOL,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExD6C,EAAK9C,aAAa,IAAUuB,GAC5BuB,EAAK9C,aAAa,IAAUvQ,KAAK8O,OAAOgB,KACxCuD,EAAK9C,aAAa,QAAU,GAC5B8C,EAAK9C,aAAa,SAAUa,GAE5BiC,EAAK9C,aAAa,SAAU,QAC5B8C,EAAK9C,aAAa,OAAUvQ,KAAK8O,OAAOM,MAExCT,EAAIyE,YAAYC,GAIpB,GAAyB,SAArBrT,KAAK8O,OAAOO,KAAiB,CAC7B,IAAMA,EAAO2D,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExDnB,EAAKmf,YAAc9vB,EAEnB2Q,EAAKkB,aAAa,IAAKuB,GACvBzC,EAAKkB,aAAa,IAAMvQ,KAAK8O,OAAOgB,IAAMsB,EAAclO,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,KAExFH,EAAKkB,aAAa,cAAe,UACjClB,EAAKkB,aAAa,SAAe,QACjClB,EAAKkB,aAAa,OAAevQ,KAAK8O,OAAOO,MAC7CA,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKC,QAClDF,EAAKkB,aAAa,YAAevQ,KAAK8O,OAAOQ,KAAKE,MAClDH,EAAKkB,aAAa,aAAevQ,KAAK8O,OAAOQ,KAAKG,OAClDJ,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKI,QAElDf,EAAIyE,YAAY/D,IAM5B,IA7CgEkE,KAAAC,KAAAC,SAAA,IA+ChE,QAAAC,EAAAC,GAFe,QAAS,QAAS,QAAS,QAAS,SAEnDpV,OAAAgO,cAAAgH,GAAAG,EAAAC,EAAAnH,QAAAC,MAAA8G,KAAuB,KAAZ7U,EAAYgV,EAAAjV,MACbqT,EAAI9R,KAAK8O,OAAOmB,KAChB1N,EAAI8G,KAAKC,OAAO,EAAInI,WAAWzC,EAAEwb,UAAY9I,EAAc,IAAMpR,KAAK8O,OAAOgB,IAGnF,GAAyB,SAArB9P,KAAK8O,OAAOM,KAAiB,CAC7B,IAAMiE,EAAOL,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExD6C,EAAK9C,aAAa,IAAUuB,GAC5BuB,EAAK9C,aAAa,IAAUhO,GAC5B8Q,EAAK9C,aAAa,QAAUY,GAC5BkC,EAAK9C,aAAa,SAAU,GAE5B8C,EAAK9C,aAAa,SAAU,QAC5B8C,EAAK9C,aAAa,OAAUvQ,KAAK8O,OAAOM,MAExCT,EAAIyE,YAAYC,GAIpB,GAAyB,SAArBrT,KAAK8O,OAAOO,KAAiB,CAC7B,IAAMA,EAAO2D,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExDnB,EAAKmf,YAAc9vB,EAEnB2Q,EAAKkB,aAAa,IAAKuB,GACvBzC,EAAKkB,aAAa,IAAMhO,EAAI8G,KAAKC,MAAMpG,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,IAAM,IAE7EH,EAAKkB,aAAa,cAAe,OACjClB,EAAKkB,aAAa,SAAe,QACjClB,EAAKkB,aAAa,OAAevQ,KAAK8O,OAAOO,MAC7CA,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKC,QAClDF,EAAKkB,aAAa,YAAevQ,KAAK8O,OAAOQ,KAAKE,MAClDH,EAAKkB,aAAa,aAAevQ,KAAK8O,OAAOQ,KAAKG,OAClDJ,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKI,QAElDf,EAAIyE,YAAY/D,KAnFwC,MAAA3C,GAAA8G,KAAAC,EAAA/G,EAAA,aAAA6G,GAAAI,EAAAhH,QAAAgH,EAAAhH,SAAA,WAAA6G,EAAA,MAAAC,IAwFpE,OAAOzT,wCAKP,MAAO,kCAAAP,EApZMgvB,KACVlB,KAAQ,OADEkB,EAEVhB,MAAQ,QAAAhuB,EAAAP,QAFEuvB,4UCPrBvsB,GAAA1E,EAAAJ,EAAA,KAAAI,EAAAoB,WAAApB,GAAA0B,QAAA1B,GAOqBoxB,cAIjB,SAAAA,EAAY7rB,iGAAY/C,KAAA4uB,GAAA,IAAAjoB,oKAAA3G,MAAA4uB,EAAAhoB,WAAA1I,OAAA2I,eAAA+nB,IAAAjxB,KAAAqC,KACd+C,IADc,OAIpB4D,EAAKkoB,WAAa,KAClBloB,EAAKjH,OAAa,EAElBiH,EAAKtF,YAAe,2BACpBsF,EAAKmoB,aAAe,MACpBnoB,EAAK6mB,aAAe,GATA7mB,iXAalB5H,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAAMA,EAAIP,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,cAElCrD,8UAAgB2D,EAAGxD,GAEzB,YAAIH,EACA,OAAOA,EAGX,IAAIgE,EAAI,KAER,OAAQL,GACJ,IAAK,cACD,YAAIxD,EACA,OAAOuB,KAAKqB,YAGhBrB,KAAKqB,YAAcK,OAAOjD,GAAOkD,cAEjC,MACJ,IAAK,eACL,IAAK,eACD,YAAIlD,EACA,OAAOuB,KAAKiC,EAAE8D,QAAQ,WAAY,cAGtCzD,EAAInB,WAAW1C,IAEP,IACJuB,KAAKiC,EAAE8D,QAAQ,WAAY,aAAezD,IAS1D,OAAOtC,0CASE4Q,GACT,KAAO5Q,KAAK0O,kBAAkBwB,mBAAsBlQ,KAAKC,UACrD,OAAOD,KAGX,IAAMF,EAAUE,KAAKF,QALN8tB,EAOW5tB,KAAK0O,OAAvBiB,EAPOie,EAOPje,MAAOke,EAPAD,EAOAC,OAET1c,EAAcxB,GAAU3P,KAAK8O,OAAOmB,KAAOjQ,KAAK8O,OAAOiB,OACvDqB,EAAcyc,GAAU7tB,KAAK8O,OAAOgB,IAAO9P,KAAK8O,OAAOkB,QACvDqB,EAAchI,KAAKC,MAAM8H,EAAc,GAAKpR,KAAK8O,OAAOgB,IAGxDwB,EAAgBjI,KAAKC,MAAMtJ,KAAK8uB,aAAe9uB,KAAK+C,YAGpDirB,EAAgB3kB,KAAKC,MAAMtJ,KAAKwtB,aAAextB,KAAK+C,YAQ1D,GALAjD,EAAQmuB,UAAU,EAAG,EAAGte,EAAOke,GAG/B7tB,KAAK0uB,mCAAmC5uB,EAAS8Q,EAAMO,EAAYC,EAAaC,EAAQC,GAE9D,SAArBtR,KAAK8O,OAAOM,MAA0C,SAArBpP,KAAK8O,OAAOO,KAAkB,CAEhE,IAAK,IAAI7R,EAAI,EAAG8I,EAAMsK,EAAKlR,OAAQlC,EAAI8I,EAAK9I,IACxC,GAAKA,EAAIwwB,GAAmB,EAAG,CAC3B,IAAMlc,EAAIzI,KAAKC,MAAO9L,EAAI8I,EAAO6K,GAAcnR,KAAK8O,OAAOmB,KACrDvR,EAAO2K,KAAKC,MAAO9L,EAAIwC,KAAK+C,WAAc,IAA1C,OAGmB,SAArB/C,KAAK8O,OAAOM,OACZtP,EAAQoS,UAAYlS,KAAK8O,OAAOM,KAChCtP,EAAQ+S,SAASf,EAAG9R,KAAK8O,OAAOgB,IAAK,EAAGsB,IAInB,SAArBpR,KAAK8O,OAAOO,OACZvP,EAAQoS,UAAYlS,KAAK8O,OAAOO,KAChCvP,EAAQwP,KAAYtP,KAAKkuB,mBACzBpuB,EAAQquB,SAASzvB,EAAIoT,EAAKhS,EAAQsuB,YAAY1vB,GAAGiR,MAAQ,EAAM3P,KAAK8O,OAAOgB,IAAMsB,EAAclO,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,MAM3I,IAvBgEtD,KAAAC,KAAAC,SAAA,IAyBhE,QAAAC,EAAAC,GAFe,QAAS,QAAS,QAAS,QAAS,SAEnD/N,OAAAgO,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,KAAuB,KAAZxN,EAAY2N,EAAA5N,MACbqT,EAAIzI,KAAKC,MAAMtJ,KAAK8O,OAAOmB,KAAOnQ,EAAQsuB,YAAY1vB,GAAGiR,OACzDpN,EAAI8G,KAAKC,OAAO,EAAInI,WAAWzC,EAAEwb,UAAY9I,EAAc,IAAMpR,KAAK8O,OAAOgB,IAG1D,SAArB9P,KAAK8O,OAAOM,OACZtP,EAAQoS,UAAYlS,KAAK8O,OAAOM,KAChCtP,EAAQ+S,SAAS7S,KAAK8O,OAAOmB,KAAM1N,EAAG4O,EAAY,IAI7B,SAArBnR,KAAK8O,OAAOO,OACZvP,EAAQoS,UAAYlS,KAAK8O,OAAOO,KAChCvP,EAAQwP,KAAYtP,KAAKkuB,mBACzBpuB,EAAQquB,SAASzvB,EAAGoT,EAAIvP,EAAI8G,KAAKC,MAAMpG,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,IAAM,MAvCrB,MAAA9C,GAAAP,KAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,IAoDpE,OAPApM,KAAK6uB,WAAa/uB,EAAQivB,aAAa,EAAG,EAAGpf,EAAOke,GACpD7tB,KAAKN,OAAakR,EAAKlR,OAGvBI,EAAQoS,UAAYlS,KAAKqB,YACzBvB,EAAQ+S,SAAS7S,KAAK8O,OAAOmB,KAAMjQ,KAAK8O,OAAOgB,IAAK,EAAGsB,GAEhDpR,uCASD4Q,GACN,KAAO5Q,KAAK2O,eAAe0B,YAAerQ,KAAKC,UAC3C,OAAOD,KAGX,IAAM2O,EAAM3O,KAAK2O,IAEXgB,EAAczM,SAASyL,EAAI0f,aAAa,SAAU,IAClDR,EAAc3qB,SAASyL,EAAI0f,aAAa,UAAW,IACnDld,EAAcxB,GAAU3P,KAAK8O,OAAOmB,KAAOjQ,KAAK8O,OAAOiB,OACvDqB,EAAcyc,GAAU7tB,KAAK8O,OAAOgB,IAAO9P,KAAK8O,OAAOkB,QACvDqB,EAAchI,KAAKC,MAAM8H,EAAc,GAAKpR,KAAK8O,OAAOgB,IAGxDwB,EAAgBjI,KAAKC,MAAMtJ,KAAK8uB,aAAe9uB,KAAK+C,YAGpDirB,EAAgB3kB,KAAKC,MAAMtJ,KAAKwtB,aAAextB,KAAK+C,YAQ1D,GALA4L,EAAI2f,UAAY,GAGhB3f,EAAIyE,YAAYpT,KAAK2uB,gCAAgC/d,EAAMO,EAAYC,EAAaC,EAAQC,EAAeid,EAAArvB,QAAW2U,uCAE5F,SAArB7T,KAAK8O,OAAOM,MAA0C,SAArBpP,KAAK8O,OAAOO,KAAkB,CAEhE,IAAK,IAAI7R,EAAI,EAAG8I,EAAMsK,EAAKlR,OAAQlC,EAAI8I,EAAK9I,IACxC,GAAKA,EAAIwwB,GAAmB,EAAG,CAC3B,IAAMlc,EAAIzI,KAAKC,MAAO9L,EAAI8I,EAAO6K,GAAcnR,KAAK8O,OAAOmB,KACrDvR,EAAI2K,KAAKC,MAAO9L,EAAIwC,KAAK+C,WAAc,IAAM,OAGnD,GAAyB,SAArB/C,KAAK8O,OAAOM,KAAiB,CAC7B,IAAMiE,EAAOL,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExD6C,EAAK9C,aAAa,IAAUuB,GAC5BuB,EAAK9C,aAAa,IAAUvQ,KAAK8O,OAAOgB,KACxCuD,EAAK9C,aAAa,QAAU,GAC5B8C,EAAK9C,aAAa,SAAUa,GAE5BiC,EAAK9C,aAAa,SAAU,QAC5B8C,EAAK9C,aAAa,OAAUvQ,KAAK8O,OAAOM,MAExCT,EAAIyE,YAAYC,GAIpB,GAAyB,SAArBrT,KAAK8O,OAAOO,KAAiB,CAC7B,IAAMA,EAAO2D,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExDnB,EAAKmf,YAAc9vB,EAEnB2Q,EAAKkB,aAAa,IAAKuB,GACvBzC,EAAKkB,aAAa,IAAMvQ,KAAK8O,OAAOgB,IAAMsB,EAAclO,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,KAExFH,EAAKkB,aAAa,cAAe,UACjClB,EAAKkB,aAAa,SAAe,QACjClB,EAAKkB,aAAa,OAAevQ,KAAK8O,OAAOO,MAC7CA,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKC,QAClDF,EAAKkB,aAAa,YAAevQ,KAAK8O,OAAOQ,KAAKE,MAClDH,EAAKkB,aAAa,aAAevQ,KAAK8O,OAAOQ,KAAKG,OAClDJ,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKI,QAElDf,EAAIyE,YAAY/D,IAM5B,IA7CgEiD,KAAAC,KAAAC,SAAA,IA+ChE,QAAAC,EAAAC,GAFe,QAAS,QAAS,QAAS,QAAS,SAEnDnU,OAAAgO,cAAA+F,GAAAG,EAAAC,EAAAlG,QAAAC,MAAA6F,KAAuB,KAAZ5T,EAAY+T,EAAAhU,MACbqT,EAAI9R,KAAK8O,OAAOmB,KAChB1N,EAAI8G,KAAKC,OAAO,EAAInI,WAAWzC,EAAEwb,UAAY9I,EAAc,IAAMpR,KAAK8O,OAAOgB,IAGnF,GAAyB,SAArB9P,KAAK8O,OAAOM,KAAiB,CAC7B,IAAMiE,EAAOL,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExD6C,EAAK9C,aAAa,IAAUuB,GAC5BuB,EAAK9C,aAAa,IAAUhO,GAC5B8Q,EAAK9C,aAAa,QAAUY,GAC5BkC,EAAK9C,aAAa,SAAU,GAE5B8C,EAAK9C,aAAa,SAAU,QAC5B8C,EAAK9C,aAAa,OAAUvQ,KAAK8O,OAAOM,MAExCT,EAAIyE,YAAYC,GAIpB,GAAyB,SAArBrT,KAAK8O,OAAOO,KAAiB,CAC7B,IAAMA,EAAO2D,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAExDnB,EAAKmf,YAAc9vB,EAEnB2Q,EAAKkB,aAAa,IAAKuB,GACvBzC,EAAKkB,aAAa,IAAMhO,EAAI8G,KAAKC,MAAMpG,SAASlD,KAAK8O,OAAOQ,KAAKE,KAAM,IAAM,IAE7EH,EAAKkB,aAAa,cAAe,OACjClB,EAAKkB,aAAa,SAAe,QACjClB,EAAKkB,aAAa,OAAevQ,KAAK8O,OAAOO,MAC7CA,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKC,QAClDF,EAAKkB,aAAa,YAAevQ,KAAK8O,OAAOQ,KAAKE,MAClDH,EAAKkB,aAAa,aAAevQ,KAAK8O,OAAOQ,KAAKG,OAClDJ,EAAKkB,aAAa,cAAevQ,KAAK8O,OAAOQ,KAAKI,QAElDf,EAAIyE,YAAY/D,KAnFwC,MAAA3C,GAAA6F,KAAAC,EAAA9F,EAAA,aAAA4F,GAAAI,EAAA/F,QAAA+F,EAAA/F,SAAA,WAAA4F,EAAA,MAAAC,IAyFpE,IAAMa,EAAOL,SAASC,gBAAgBsb,EAAArvB,QAAWsR,MAAO,QAkBxD,OAhBA6C,EAAK2b,UAAUC,IAAI,oBAEnB5b,EAAK9C,aAAa,IAAUvQ,KAAK8O,OAAOmB,MACxCoD,EAAK9C,aAAa,IAAUvQ,KAAK8O,OAAOgB,KACxCuD,EAAK9C,aAAa,QAAU,GAC5B8C,EAAK9C,aAAa,SAAUa,GAE5BiC,EAAK9C,aAAa,SAAU,QAC5B8C,EAAK9C,aAAa,OAAUvQ,KAAKqB,aAEjCsN,EAAIyE,YAAYC,GAGhBrT,KAAK6uB,WAAalgB,EAClB3O,KAAKN,OAAakR,EAAKlR,OAEhBM,oCAQJqO,GACH,IAAM3P,EAAIyC,WAAWkN,GAErB,GAAIjN,MAAM1C,IAAOA,EAAI,EACjB,OAAOsB,KAGX,OAAQA,KAAKyO,UACT,KAAK8f,EAAArvB,QAAWiR,OACZ,GAAInQ,KAAK6uB,sBAAsBK,UAAW,CACtC,IAAMpvB,EAAUE,KAAKF,QADiBqvB,EAGZnvB,KAAK0O,OAAvBiB,EAH8Bwf,EAG9Bxf,MAAOke,EAHuBsB,EAGvBtB,OAET1c,EAAcxB,GAAU3P,KAAK8O,OAAOmB,KAAOjQ,KAAK8O,OAAOiB,OACvDqB,EAAcyc,GAAU7tB,KAAK8O,OAAOgB,IAAO9P,KAAK8O,OAAOkB,QACvD8B,EAAczI,KAAKC,MAAQ5K,EAAIsB,KAAK+C,WAAc/C,KAAKN,OAAUyR,GAAcnR,KAAK8O,OAAOmB,KAEjGnQ,EAAQmuB,UAAU,EAAG,EAAGte,EAAOke,GAC/B/tB,EAAQsvB,aAAapvB,KAAK6uB,WAAY,EAAG,GAEzC/uB,EAAQoS,UAAYlS,KAAKqB,YACzBvB,EAAQ+S,SAASf,EAAG9R,KAAK8O,OAAOgB,IAAK,EAAGsB,GAG5C,MACJ,KAAKmd,EAAArvB,QAAWoR,IACZ,IAAM3B,EAAM3O,KAAK2O,IAAI0gB,cAAc,qBAEnC,GAAI1gB,aAAe0B,WAAY,CAC3B,IACMc,EADajO,SAASlD,KAAK2O,IAAI0f,aAAa,SAAU,KAC/BruB,KAAK8O,OAAOmB,KAAOjQ,KAAK8O,OAAOiB,OACtD+B,EAAazI,KAAKC,MAAQ5K,EAAIsB,KAAK+C,WAAc/C,KAAKN,OAAUyR,GAEtExC,EAAI4B,aAAa,YAAjB,aAA2CuB,EAA3C,QAQZ,OAAO9R,kCAQNsvB,GAAU,IAAAnnB,EAAAnI,KACPuvB,EAAW,KAEX3uB,EAAQ,GACR4uB,EAAQ,GACR/lB,EAAQ,GAaZ,OAVI,2BAA2BtG,KAAKF,UAAUD,YAC1CpC,EAAQ,aACR4uB,EAAQ,YACR/lB,EAAQ,aAER7I,EAAQ,YACR4uB,EAAQ,YACR/lB,EAAQ,WAGJzJ,KAAKyO,UACT,KAAK8f,EAAArvB,QAAWiR,OACZof,EAAWvvB,KAAK0O,OAChB,MACJ,KAAK6f,EAAArvB,QAAWoR,IACZif,EAAWvvB,KAAK2O,IAChB,MACJ,QACI,OAAO3O,KAGf,IAAIyvB,KAoBJ,OAlBAF,EAASxZ,iBAAiBnV,EAAO,SAAAiI,GAC7BV,EAAKunB,KAAKvnB,EAAKwnB,WAAW9mB,GAAQymB,GAClCG,OAAS,GAGbF,EAASxZ,iBAAiByZ,EAAM,SAAA3mB,GACxB4mB,IACA5mB,EAAM4O,iBACNtP,EAAKunB,KAAKvnB,EAAKwnB,WAAW9mB,GAAQymB,SAI1C/hB,OAAOwI,iBAAiBtM,EAAK,WACrBgmB,IACAA,QAAS,GAIVzvB,kCASN4vB,EAASN,GACV,IAAIO,EAAa,EACblgB,EAAa,EAEjB,OAAQ3P,KAAKyO,UACT,KAAK8f,EAAArvB,QAAWiR,OACZ0f,EAAa7vB,KAAK0O,OAAOmhB,WACzBlgB,EAAa3P,KAAK0O,OAAOiB,MACzB,MACJ,KAAK4e,EAAArvB,QAAWoR,IACZuf,EAAa7vB,KAAK2O,IAAImhB,WAAWD,WACjClgB,EAAazM,SAASlD,KAAK2O,IAAI0f,aAAa,SAAU,IAM9D,IAAIvc,EAAI8d,GAAWC,EAAa7vB,KAAK8O,OAAOmB,MAE5CN,GAAU3P,KAAK8O,OAAOmB,KAAOjQ,KAAK8O,OAAOiB,MAGrC+B,EAAI,IAAQA,EAAI,GAChBA,EAAInC,IAAQmC,EAAInC,GAEpB,IACMtB,EADQyD,EAAInC,EAAS3P,KAAKN,OACZM,KAAK+C,WAQzB,OANA/C,KAAKoH,OAAOiH,GAEqC,sBAA7CnQ,OAAOmB,UAAUoH,SAAS9I,KAAK2xB,IAC/BA,EAASjhB,GAGNrO,wCAQA6I,GACP,OAAIA,EAAMknB,MACClnB,EAAMknB,MAGblnB,EAAMmnB,QAAQ,GACPnnB,EAAMmnB,QAAQ,GAAGD,MAGrB/vB,wCAKP,MAAO,0CAAAP,EA5cMmvB,GA4cNnvB,EAAAP,QA5cM0vB,8UCPrBxxB,EAAA,KAAAoC,EAAAvB,EACAb,EAAA,KAAA8E,EAAAjE,EACAb,EAAA,cAAAa,EAAAS,GAAA,OAAAA,KAAAE,WAAAF,GAAAQ,QAAAR,GAAA,IAMqBuxB,aAIjB,SAAAA,EAAYnwB,iGAASE,KAAAiwB,GACjB1iB,OAAO2iB,sBAAwB3iB,OAAO2iB,uBACP3iB,OAAO4iB,6BACP5iB,OAAO6iB,0BACN,SAAAd,GAAA,OAAY/hB,OAAOC,WAAW8hB,EAAW,IAAO,KAEhF/hB,OAAO8iB,qBAAuB9iB,OAAO8iB,sBACP9iB,OAAO+iB,4BACP/iB,OAAOgjB,yBACPhjB,OAAOyP,aAErChd,KAAKuD,SAAWzD,EAAQ0wB,iBACxBxwB,KAAKE,MAAWJ,EAAQK,aAGxBH,KAAKE,MAAM2B,QAAQ7B,KAAKuD,UAExBvD,KAAKuJ,cAAgB,IAAAknB,EAAAvxB,QAAiBY,EAAQiD,YAC9C/C,KAAKwJ,cAAgB,IAAAinB,EAAAvxB,QAAiBY,EAAQiD,YAC9C/C,KAAKqO,KAAgB,IAAAqiB,EAAAxxB,QAASY,EAAQiD,YACtC/C,KAAK2wB,IAAgB,IAAAC,EAAA1xB,QAAQY,EAAQiD,YAGrC/C,KAAKuD,SAASstB,QAAwB,KACtC7wB,KAAKuD,SAASsN,aAAyB,IACvC7Q,KAAKuD,SAASuN,aAAyB,GACvC9Q,KAAKuD,SAASutB,sBAAwB,UAAAtzB,EAAAkB,IAAAK,IAAA,QAAAN,MAAA,SAUpCM,EAAKN,GACP,GAAqD,oBAAjDP,OAAOmB,UAAUoH,SAAS9I,KAAK8J,UAAU,IAEzC,IAAK,IAAMxF,KAAKwF,UAAU,GACtBzH,KAAK2H,MAAM1F,EAAGwF,UAAU,GAAGxF,QAE5B,CACH,IAEIK,EAAM,KAENsF,EAAM,KAEV,OANUlG,OAAO3C,GAAKgH,QAAQ,KAAM,IAAIpE,eAOpC,IAAK,UACD,YAAIlD,EACA,OAAOuB,KAAKuD,SAASstB,QAKzB,OAFAvuB,EAAIY,SAASzE,EAAO,KAGhB,KAAO,GACP,KAAO,GACP,KAAM,IACN,KAAM,IACN,KAAM,IACN,KAAK,KACL,KAAK,KACDuB,KAAKuD,SAASstB,QAAUvuB,EAMhC,MACJ,IAAK,oBACD,OAAOtC,KAAKuD,SAASwtB,kBACzB,IAAK,cACD,YAAItyB,EACA,OAAOuB,KAAKuD,SAASsN,aAGzBvO,EAAMnB,WAAW1C,KACjBmJ,GAAO,MAGH5H,KAAKuD,SAASsN,YAAcvO,GAGhC,MACJ,IAAK,cACD,YAAI7D,EACA,OAAOuB,KAAKuD,SAASuN,aAGzBxO,EAAMnB,WAAW1C,KACV,MAGHuB,KAAKuD,SAASuN,YAAcxO,GAGhC,MACJ,IAAK,wBACD,YAAI7D,EACA,OAAOuB,KAAKuD,SAASutB,sBAKzBlpB,EAAM,GAFNtF,EAAMnB,WAAW1C,KACX,GAGa6D,GAAKsF,IACpB5H,KAAKuD,SAASutB,sBAAwBxuB,IAStD,OAAOtC,mCASLgxB,EAAQjqB,GAAQ,IAAAJ,EAAA3G,KAGd4Q,EAAO,KAEX,OAJUlP,OAAOsvB,GAAQjrB,QAAQ,KAAM,IAAIpE,eAKvC,IAAK,gBACGoF,aAAkBgB,aACdhB,EAAOkB,iBAAmB,KAC1B2I,EAAO,IAAIY,aAAazK,EAAOrH,SAC1BkO,IAAI7G,EAAOiC,eAAe,IAC/BhJ,KAAKuJ,cAAc3I,MAAMgQ,IAIjC,MACJ,IAAK,gBACG7J,aAAkBgB,aACdhB,EAAOkB,iBAAmB,KAC1B2I,EAAO,IAAIY,aAAazK,EAAOrH,SAC1BkO,IAAI7G,EAAOiC,eAAe,IAC/BhJ,KAAKwJ,cAAc5I,MAAMgQ,IAIjC,MACJ,IAAK,OAC+B,SAA5B5Q,KAAKqO,KAAK1G,MAAM,SAChBiJ,EAAO,IAAIgc,WAAW5sB,KAAKuD,SAASstB,SACpC7wB,KAAKuD,SAAS0tB,sBAAsBrgB,GACpC5Q,KAAKqO,KAAKzN,MAAMgQ,KAEhBA,EAAO,IAAIY,aAAaxR,KAAKuD,SAASstB,SACtC7wB,KAAKuD,SAAS2tB,uBAAuBtgB,GACrC5Q,KAAKqO,KAAKzN,MAAMgQ,IAGgB,SAAhC5Q,KAAKqO,KAAK1G,MAAM,YAChB3H,KAAKqO,KAAKQ,QAAUtB,OAAO2iB,sBAAsB,WAC7CvpB,EAAK/F,MAAMowB,KAGfhxB,KAAKqO,KAAKQ,QAAUtB,OAAOC,WAAW,WAClC7G,EAAK/F,MAAMowB,IACZhxB,KAAKqO,KAAK1G,MAAM,aAGvB,MACJ,IAAK,MAC8B,SAA3B3H,KAAK2wB,IAAIhpB,MAAM,SACfiJ,EAAO,IAAIgc,WAAW5sB,KAAKuD,SAASwtB,mBACpC/wB,KAAKuD,SAAS4tB,qBAAqBvgB,GACnC5Q,KAAK2wB,IAAI/vB,MAAMgQ,KAEfA,EAAO,IAAIY,aAAaxR,KAAKuD,SAASwtB,mBACtC/wB,KAAKuD,SAAS6tB,sBAAsBxgB,GACpC5Q,KAAK2wB,IAAI/vB,MAAMgQ,EAAM5Q,KAAKuD,SAASsN,YAAa7Q,KAAKuD,SAASuN,cAG/B,SAA/B9Q,KAAK2wB,IAAIhpB,MAAM,YACf3H,KAAK2wB,IAAI9hB,QAAUtB,OAAO2iB,sBAAsB,WAC5CvpB,EAAK/F,MAAMowB,KAGfhxB,KAAK2wB,IAAI9hB,QAAUtB,OAAOC,WAAW,WACjC7G,EAAK/F,MAAMowB,IACZhxB,KAAK2wB,IAAIhpB,MAAM,aAQ9B,OAAO3H,kCAQNgxB,GAGD,OAFUtvB,OAAOsvB,GAAQjrB,QAAQ,KAAM,IAAIpE,eAGvC,IAAK,gBACL,IAAK,gBACD,MACJ,IAAK,OACmC,SAAhC3B,KAAKqO,KAAK1G,MAAM,YAChB4F,OAAO8iB,qBAAqBrwB,KAAKqO,KAAKQ,SAEtCtB,OAAOyP,aAAahd,KAAKqO,KAAKQ,SAGlC7O,KAAKqO,KAAKQ,QAAU,KAEpB,MACJ,IAAK,MACkC,SAA/B7O,KAAK2wB,IAAIhpB,MAAM,YACf4F,OAAO8iB,qBAAqBrwB,KAAK2wB,IAAI9hB,SAErCtB,OAAOyP,aAAahd,KAAK2wB,IAAI9hB,SAGjC7O,KAAK2wB,IAAI9hB,QAAU,KAO3B,OAAO7O,oCAQJgxB,GACH,IAAMlzB,EAAI4D,OAAOsvB,GAAQjrB,QAAQ,KAAM,IAAIpE,cAE3C,OAAQ7D,GACJ,IAAK,gBACL,IAAK,gBACD,OAAOkC,KAAA,eAAoBlC,EAAEuc,OAAO,GAAGW,eAC3C,IAAK,OACL,IAAK,MACD,OAAOhb,KAAKlC,GAChB,QACI,OAAOkC,oCASf,OAAOA,KAAKuD,4CAKZ,MAAO,6BAAA7E,EAtRMuxB,GAsRNxwB,EAAAP,QAtRM+wB,gCCRrB,IAAAzyB,EAAA+B,EAAAnC,EAAA,IAAA6B,EAAAM,EACAnC,EAAA,IAAAoC,EAAAD,EACAnC,EAAA,IAAA8E,EAAA3C,EACAnC,EAAA,IAAAa,EAAAsB,EACAnC,EAAA,IAAA+E,EAAA5C,EACAnC,EAAA,IAAAK,EAAA8B,EACAnC,EAAA,KAAAS,EAAA0B,EACAnC,EAAA,KAAAgF,EAAA7C,EACAnC,EAAA,IACAi0B,EAAAj0B,EAAA,YAAAmC,EAAAb,GAAA,OAAAA,KAAAE,WAAAF,GAAAQ,QAAAR,GAEA6O,OAAOwK,aAAexK,OAAOwK,cAAgBxK,OAAO+jB,mBAEpD,IAAMC,EAAY3vB,QAAQ2L,OAAOwK,cAEjC,GAAIwZ,EAAW,CACX,IAAMC,EAAe,IAAIzZ,aAGzByZ,EAAa7wB,sBAAwB6wB,EAAa7wB,uBAAyB6wB,EAAaC,qBACxFD,EAAarxB,WAAwBqxB,EAAarxB,YAAyBqxB,EAAaE,eACxFF,EAAapN,YAAwBoN,EAAapN,aAAyBoN,EAAaG,gBACxFH,EAAatR,mBAAwBsR,EAAatR,oBAAyBsR,EAAaI,gBAExF,IAAM5nB,GACFoE,WAAe,IAAAgO,EAAAld,QAAqBsyB,GACpC3jB,QAAe,IAAAwO,EAAAnd,QAAkBsyB,GACjC5nB,MAAe,IAAAioB,EAAA3yB,QAAgBsyB,GAC/Bxc,MAAe,IAAA8c,EAAA5yB,QAAgBsyB,GAC/Brd,OAAe,IAAA4d,EAAA7yB,QAAiBsyB,GAChCQ,MAAe,IAAAC,EAAA/yB,QAAgBsyB,GAC/BU,KAAe,IAAAC,EAAAjzB,QAASsyB,GACxBjU,IAAe,IAAA6U,EAAAlzB,QAAQsyB,IASrBa,EAAS,SAACpsB,EAAQoF,GACpB,IAAM7L,EAAIkC,OAAOuE,GAAQF,QAAQ,KAAM,IAAIpE,cAE3C,OAAQnC,GACJ,IAAK,aACD,YAAI6L,EACA,OAAOrB,EAAQoE,WAGnB,IAAM5Q,EAAI0F,SAASmI,EAAO,IAE1B,OAAK7N,GAAK,GAAOA,EAAIwM,EAAQoE,WAAW1O,SAC7BsK,EAAQoE,WAAW/P,IAAIb,GAG3B,KACX,IAAK,UACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,QACL,IAAK,OACL,IAAK,MACD,OAAOwM,EAAQxK,GACnB,QACI,OAAO,OAOnB6yB,EAAOd,UAAoBA,EAC3Bc,EAAOC,YAAoBd,EAAazuB,WACxCsvB,EAAOhvB,iBAAoBkvB,EAAArzB,QAAYmE,iBACvCgvB,EAAO/uB,kBAAoBivB,EAAArzB,QAAYoE,kBACvC+uB,EAAO7b,KAAP6a,EAAA7a,KACA6b,EAAO5b,KAAP4a,EAAA5a,KACA4b,EAAOva,KAAPuZ,EAAAvZ,KACAua,EAAOnrB,OAAPmqB,EAAAnqB,OACAmrB,EAAOra,cAAPqZ,EAAArZ,cACAqa,EAAOja,YAAPiZ,EAAAjZ,YACAia,EAAO5Z,WAAP4Y,EAAA5Y,WACA4Z,EAAOrZ,eAAPqY,EAAArY,eAQAqZ,EAAO3qB,MAAQ,WACX,MAA2B,YAAvB8pB,EAAa/vB,MACN+vB,EAAagB,SAGjBC,QAAQC,UAOnBL,EAAOM,MAAQ,WACX,IAAMC,GACFxkB,WAAe,IAAAgO,EAAAld,QAAqBsyB,GACpC3jB,QAAe,IAAAwO,EAAAnd,QAAkBsyB,GACjC5nB,MAAe,IAAAioB,EAAA3yB,QAAgBsyB,GAC/Bxc,MAAe,IAAA8c,EAAA5yB,QAAgBsyB,GAC/Brd,OAAe,IAAA4d,EAAA7yB,QAAiBsyB,GAChCQ,MAAe,IAAAC,EAAA/yB,QAAgBsyB,GAC/BU,KAAe,IAAAC,EAAAjzB,QAASsyB,GACxBjU,IAAe,IAAA6U,EAAAlzB,QAAQsyB,IAGrBqB,EAAI,SAAC5sB,EAAQoF,GACf,IAAM7L,EAAIkC,OAAOuE,GAAQF,QAAQ,KAAM,IAAIpE,cAE3C,OAAQnC,GACJ,IAAK,aACD,YAAI6L,EACA,OAAOunB,EAAOxkB,WAGlB,IAAM5Q,EAAI0F,SAASmI,EAAO,IAE1B,OAAK7N,GAAK,GAAOA,EAAIo1B,EAAOxkB,WAAW1O,SAC5BkzB,EAAOxkB,WAAW/P,IAAIb,GAG1B,KACX,IAAK,UACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,QACL,IAAK,OACL,IAAK,MACD,OAAOo1B,EAAOpzB,GAClB,QACI,OAAO,OAwBnB,OApBAqzB,EAAEC,KAAQ,SAAAC,GACD5sB,MAAMC,QAAQ2sB,KACfA,GAAcA,IAFE,IAAA7mB,KAAAC,KAAAC,SAAA,IAKpB,QAAAC,EAAAC,EAAqBymB,EAArBx0B,OAAAgO,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,KAAiC,KAAtBjG,EAAsBoG,EAAA5N,MAE7B,GAAe,OAAXwH,EAIJ,IAAK,IAAMlH,KAAO6zB,EACV3sB,IAAW2sB,EAAO7zB,KAClB6zB,EAAO7zB,GAAO,OAbN,MAAA2N,GAAAP,KAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,KAoBjBymB,GAOXR,EAAOS,KAAO,SAAAC,GACL5sB,MAAMC,QAAQ2sB,KACfA,GAAcA,IAFM,IAAAzgB,KAAAC,KAAAC,SAAA,IAKxB,QAAAC,EAAAC,EAAqBqgB,EAArBx0B,OAAAgO,cAAA+F,GAAAG,EAAAC,EAAAlG,QAAAC,MAAA6F,KAAiC,KAAtBrM,EAAsBwM,EAAAhU,MAE7B,GAAe,OAAXwH,EAIJ,IAAK,IAAMlH,KAAOiL,EACV/D,IAAW+D,EAAQjL,KACnBiL,EAAQjL,GAAO,OAbH,MAAA2N,GAAA6F,KAAAC,EAAA9F,EAAA,aAAA4F,GAAAI,EAAA/F,QAAA+F,EAAA/F,SAAA,WAAA4F,EAAA,MAAAC,KAyB5B6f,EAAOW,WAAa,SAAAC,GAUhB,OATI1lB,OAAO2lB,IAAMb,IACb9kB,OAAO2lB,UAIPD,GAAS1lB,OAAO8kB,SAAWA,IAC3B9kB,OAAO8kB,eAGJA,GAOXA,EAAOh0B,IAAM,WACT,OAAOmzB,GAOXa,EAAOc,eAAiB,WACpB,OAAO3B,EAAanwB,aAIxBgxB,EAAO5rB,SAAW,WACd,MAAO,YAIX,IAAMzD,EAAYC,UAAUD,UAAUrB,cAEtC,IAAsC,IAAjCqB,EAAUsT,QAAQ,YAAqD,IAA/BtT,EAAUsT,QAAQ,QAAiB,CAC5E,IAAM5O,EAAQ,SAARA,IACF2qB,EAAO3qB,QAAQiN,KAAK,cAAUC,MAAM,cAEpC5B,SAASogB,oBAAoB,QAAc1rB,MAC3CsL,SAASogB,oBAAoB,YAAc1rB,MAC3CsL,SAASogB,oBAAoB,UAAc1rB,MAC3CsL,SAASogB,oBAAoB,aAAc1rB,MAC3CsL,SAASogB,oBAAoB,WAAc1rB,OAG/CsL,SAAS+C,iBAAiB,QAAcrO,MACxCsL,SAAS+C,iBAAiB,YAAcrO,MACxCsL,SAAS+C,iBAAiB,UAAcrO,MACxCsL,SAAS+C,iBAAiB,aAAcrO,MACxCsL,SAAS+C,iBAAiB,WAAcrO,MAI5C6F,OAAO8kB,OAASA,EAChB9kB,OAAO2lB,EAASb,MACb,CACH,IAAMA,EAAS,kBAAM,MAErBA,EAAOd,UAAYA,EAGnBhkB,OAAO8kB,OAASA,EAChB9kB,OAAO2lB,EAASb","file":"xsound.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","'use strict';\n\n/**\n * This private class defines common properties for effector classes.\n * @constructor\n */\nexport default class Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.isActive = true;\n\n        this.context = context;\n\n        // for connecting external node\n        this.input  = context.createGain();\n        this.output = context.createGain();\n\n        // for LFO (Low Frequency Oscillator)\n        // LFO changes parameter cyclically\n        this.lfo       = context.createOscillator();\n        this.depth     = context.createGain();\n        this.rate      = this.lfo.frequency;\n        this.processor = context.createScriptProcessor(bufferSize, 1, 2);\n\n        // for legacy browsers\n        this.lfo.start = this.lfo.start || this.lfo.noteOn;\n        this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n        this.values = {};\n\n        this.isStop = true;\n    }\n\n    /**\n     * This abstract method gets or sets parameter.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Effector} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @abstract\n     */\n    param() {\n    }\n\n    /**\n     * This abstract method connects nodes according to state.\n     * @abstract\n     */\n    connect() {\n    }\n\n    /**\n     * This method starts LFO. Namely, this method starts effector.\n     * @param {number} startTime This argument is in order to schedule parameter.\n     * @return {Effector} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops LFO, and creates the instance of `OscillatorNode` again.\n     * @param {number} stopTime This argument is in order to schedule parameter.\n     * @param {number} releaseTime This argument is in order to schedule parameter when it is necessary to consider release time.\n     * @return {Effector} This is returned for method chain.\n     */\n    stop(stopTime, releaseTime) {\n        if (this.isActive && !this.isStop) {\n            let s = parseFloat(stopTime);\n            let r = parseFloat(releaseTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            if (isNaN(r) || (r < 0)) {\n                r = 0;\n            }\n\n            // for saving value\n            const type = this.lfo.type;\n            const rate = this.lfo.frequency.value;\n\n            // Destroy the instance of `OscillatorNode`\n            this.lfo.stop(s + r);\n\n            // Create the instance of `OscillatorNode` again\n            this.lfo = this.context.createOscillator();\n\n           // for legacy browsers\n            this.lfo.start = this.lfo.start || this.lfo.noteOn;\n            this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n            // Set the saved value\n            this.lfo.type            = type;\n            this.lfo.frequency.value = rate;\n\n            this.rate = this.lfo.frequency;\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Effector} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        // Start LFO\n        this.start(this.context.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     * @abstract\n     */\n    params() {\n        return {};\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     * @abstract\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Effector]';\n    }\n}\n","'use strict';\n\nimport Analyser from './Analyser';\nimport Recorder from './Recorder';\nimport Session from './Session';\nimport Compressor from './Compressor';\nimport Distortion from './Distortion';\nimport Wah from './Wah';\nimport Equalizer from './Equalizer';\nimport Filter from './Filter';\nimport Autopanner from './Autopanner';\nimport AutopannerFallback from './AutopannerFallback';\nimport Tremolo from './Tremolo';\nimport Ringmodulator from './Ringmodulator';\nimport Phaser from './Phaser';\nimport Flanger from './Flanger';\nimport Chorus from './Chorus';\nimport Delay from './Delay';\nimport Reverb from './Reverb';\nimport Panner from './Panner';\nimport Listener from './Listener';\nimport EnvelopeGenerator from './EnvelopeGenerator';\n\n/**\n * This class is superclass that is the top in this library.\n * This library's users do not create the instance of `SoundModule`.\n * This class is used for inherit in subclass (`OscillatorModule`, `OneshotModule`, `AudioModule`, `MediaModule`, `StreamModule`, `MixerModule`).\n * Therefore, this class defines the common properties for each sound sources.\n * @constructor\n */\nexport default class SoundModule {\n    static NUMBER_OF_INPUTS  = 2;\n    static NUMBER_OF_OUTPUTS = 2;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 256, 512, 1024, 2048, 4096, 8192, 16384.\n     *     However, the opportunity for designating buffer size is not so much.\n     *     The reason why is that the constructor of `SoundModule` selects buffer size automaticly.\n     *     This buffer size can be changed explicitly by calling `resize` method.\n     */\n    constructor(context, bufferSize) {\n        this.context    = context;\n        this.sampleRate = context.sampleRate;\n\n        const userAgent = navigator.userAgent;\n\n        if (bufferSize !== undefined) {\n            switch (parseInt(bufferSize, 10)) {\n                case   256:\n                case   512:\n                case  1024:\n                case  2048:\n                case  4096:\n                case  8192:\n                case 16384:\n                    this.bufferSize = parseInt(bufferSize, 10);\n                    break;\n                default:\n                    return;\n            }\n        } else if (/(Win(dows )?NT 6\\.2)/.test(userAgent)) {\n            this.bufferSize = 1024;  // Windows 8\n        } else if (/(Win(dows )?NT 6\\.1)/.test(userAgent)) {\n            this.bufferSize = 1024;  // Windows 7\n        } else if (/(Win(dows )?NT 6\\.0)/.test(userAgent)) {\n            this.bufferSize = 2048;  // Windows Vista\n        } else if (/Win(dows )?(NT 5\\.1|XP)/.test(userAgent)) {\n            this.bufferSize = 4096;  // Windows XP\n        } else if (/Mac|PPC/.test(userAgent)) {\n            this.bufferSize = 1024;  // Mac OS X\n        } else if (/Linux/.test(userAgent)) {\n            this.bufferSize = 8192;  // Linux\n        } else if (/iPhone|iPad|iPod/.test(userAgent)) {\n            this.bufferSize = 2048;  // iOS\n        } else {\n            this.bufferSize = 16384;  // Otherwise\n        }\n\n        this.mastervolume = context.createGain();\n        this.processor    = context.createScriptProcessor(this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n\n        this.analyser          = new Analyser(context);\n        this.recorder          = new Recorder(context, this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        this.session           = new Session(context, this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS, this.analyser);\n        this.compressor        = new Compressor(context, this.bufferSize);\n        this.distortion        = new Distortion(context, this.bufferSize);\n        this.wah               = new Wah(context, this.bufferSize);\n        this.equalizer         = new Equalizer(context, this.bufferSize);\n        this.filter            = new Filter(context, this.bufferSize);\n        this.autopanner        = context.createStereoPanner ? new Autopanner(context, this.bufferSize) : new AutopannerFallback(context, this.bufferSize);\n        this.tremolo           = new Tremolo(context, this.bufferSize);\n        this.ringmodulator     = new Ringmodulator(context, this.bufferSize);\n        this.phaser            = new Phaser(context, this.bufferSize);\n        this.flanger           = new Flanger(context, this.bufferSize);\n        this.chorus            = new Chorus(context, this.bufferSize);\n        this.delay             = new Delay(context, this.bufferSize);\n        this.reverb            = new Reverb(context, this.bufferSize);\n        this.panner            = new Panner(context, this.bufferSize);\n        this.listener          = new Listener(context);\n        this.envelopegenerator = new EnvelopeGenerator(context);  // for `OscillatorModule`, `OneshotModule`\n\n        // The default order for connection\n        this.modules = [\n            this.compressor,\n            this.distortion,\n            this.wah,\n            this.equalizer,\n            this.filter,\n            this.autopanner,\n            this.tremolo,\n            this.ringmodulator,\n            this.phaser,\n            this.flanger,\n            this.chorus,\n            this.delay,\n            this.reverb,\n            this.panner\n        ];\n    }\n\n    /** @abstract */\n    setup() {\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string} key This argument is property name.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v   = null;\n        let min = null;\n        let max = null;\n\n        switch (k) {\n            case 'mastervolume':\n                if (value === undefined) {\n                    return this.mastervolume.gain.value;\n                }\n\n                v   = parseFloat(value);\n                min = 0;\n                max = 1;\n\n                if ((v >= min) && (v <= max)) {\n                    this.mastervolume.gain.value = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @abstract */\n    ready() {\n    }\n\n    /** @abstract */\n    start() {\n    }\n\n    /** @abstract */\n    stop() {\n    }\n\n    /** @abstract */\n    get() {\n    }\n\n    /**\n     * This method changes buffer size for `ScriptProcessorNode`.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 256, 512, 1024, 2048, 4096, 8192, 16384.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    resize(bufferSize) {\n        this.processor = this.context.createScriptProcessor(bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        return this;\n    }\n\n    /**\n     * This method gets buffer size for `ScriptProcessorNode`.\n     * @return {number} This is returned as buffer size for `ScriptProcessorNode`.\n     */\n    getBufferSize() {\n        return this.processor.bufferSize;\n    }\n\n    /**\n     * This method connects nodes that are defined by this library and Web Audio API.\n     * @param {AudioNode} source This argument is `AudioNode` for input of sound.\n     * @param {Array.<Effector>} connects This argument is array for changing the default connection.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    connect(source, connects) {\n        // Customize connection ?\n        if (Array.isArray(connects)) {\n            this.modules = connects;\n        }\n\n        // Start connection\n        // AudioSourceNode (Input)-> node -> ... -> node -> GainNode (Master Volume) -> AnalyserNode  -> AudioDestinationNode (Output)\n        source.disconnect(0);  // Clear connection\n\n        if (this.modules.length > 0) {\n            source.connect(this.modules[0].input);\n        } else {\n            source.connect(this.mastervolume);\n        }\n\n        for (let i = 0, len = this.modules.length; i < len; i++) {\n            // Clear connection\n            this.modules[i].output.disconnect(0);\n\n            if (i < (this.modules.length - 1)) {\n                // Connect to next node\n                this.modules[i].output.connect(this.modules[i + 1].input);\n            } else {\n                this.modules[i].output.connect(this.mastervolume);\n            }\n        }\n\n        this.mastervolume.connect(this.context.destination);\n\n        // for analyser\n        this.mastervolume.connect(this.analyser.input);\n\n        // for recording\n        this.mastervolume.connect(this.recorder.processor);\n        this.recorder.processor.connect(this.context.destination);\n\n        // for session\n        this.mastervolume.connect(this.session.sender);\n        this.session.sender.connect(this.context.destination);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of module that is defined by this library. This method enables to access the instance of module by unified call.\n     * @param {string} module This argument is module's name.\n     * @return {Analyser|Recorder|Session|Effector|Listener|EnvelopeGenerator|Glide|VocalCanceler|NoiseGate} This value is the instance of module.\n     */\n    module(module) {\n        const m = String(module).replace(/-/g, '').toLowerCase();\n\n        switch (m) {\n            case 'analyser'     :\n            case 'recorder'     :\n            case 'session'      :\n            case 'compressor'   :\n            case 'distortion'   :\n            case 'wah'          :\n            case 'equalizer'    :\n            case 'filter'       :\n            case 'autopanner'   :\n            case 'tremolo'      :\n            case 'ringmodulator':\n            case 'phaser'       :\n            case 'flanger'      :\n            case 'chorus'       :\n            case 'delay'        :\n            case 'reverb'       :\n            case 'panner'       :\n            case 'listener'     :\n                return this[m];\n            case 'envelopegenerator':\n            case 'eg'               :\n                // OscillatorModule, OneshotModule\n                return this.envelopegenerator;\n            case 'glide':\n                if (m in this) {\n                    return this[m];  // OscillatorModule\n                }\n\n                // fall through\n            case 'vocalcanceler':\n                if (m in this) {\n                    return this[m];  // AudioModule, MediaModule\n                }\n\n                // fall through\n            case 'noisegate':\n                if (m in this) {\n                    return this[m];  // StreamModule\n                }\n\n                // fall through\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method starts effectors.\n     * @param {number} startTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    on(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.start(s);\n        this.flanger.start(s);\n        this.phaser.start(s);\n        this.autopanner.start(s);\n        this.tremolo.start(s);\n        this.ringmodulator.start(s);\n        this.wah.start(s);\n        this.filter.start(s);\n\n        return this;\n    }\n\n    /**\n     * This method stops effectors.\n     * @param {number} stopTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    off(stopTime) {\n        let s = parseFloat(stopTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.stop(s);\n        this.flanger.stop(s);\n        this.phaser.stop(s);\n        this.autopanner.stop(s);\n        this.tremolo.stop(s);\n        this.ringmodulator.stop(s);\n        this.wah.stop(s);\n        // this.filter.stop(s);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {};\n\n        for (const module in this) {\n            if (Object.prototype.toString.call(this[module]) === '[object Function]') {\n                continue;\n            }\n\n            const m = module.toLowerCase();\n\n            if (m === 'mastervolume') {\n                params[m] = this[module].gain.value;  // AudioParam\n            } else if ((Object.prototype.toString.call(this[module]) === '[object Object]') && ('params' in this[module])) {\n                params[m] = this[module].params();\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport VocalCanceler from './VocalCanceler';\n\n/**\n * This subclass defines properties for playing the single audio.\n * This class creates audio player that has higher features than `HTMLAudioElment`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class AudioModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.source = context.createBufferSource();  // for the instance of `AudioBufferSourceNode`\n        this.buffer = null;                          // for the instance of `AudioBuffer`\n\n        this.currentTime = 0;\n\n        this.paused = true;\n\n        this.callbacks = {\n            'decode' : () => {},\n            'ready'  : () => {},\n            'start'  : () => {},\n            'stop'   : () => {},\n            'update' : () => {},\n            'ended'  : () => {},\n            'error'  : () => {}\n        };\n\n        this.vocalcanceler = new VocalCanceler();\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    setup(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = 0;\n            let min = 0;\n            let max = 0;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return this.source.playbackRate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1024;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.source.playbackRate.value = v;\n                    }\n\n                    break;\n                case 'loop'   :\n                case 'looping':\n                    if (value === undefined) {\n                        return this.source.loop;\n                    }\n\n                    this.source.loop = Boolean(value);\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    if (this.buffer instanceof AudioBuffer) {\n                        v   = parseFloat(value);\n                        max = this.buffer.duration;\n                        min = 0;\n\n                        if ((v >= min) && (v <= max)) {\n                            if (this.paused) {\n                                this.currentTime = v;\n                            } else {\n                                this.stop();\n                                this.start(v);\n                            }\n                        }\n                    } else {\n                        this.currentTime = 0;\n                    }\n\n                    break;\n                case 'duration':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.duration : 0;  // Getter only\n                case 'samplerate':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.sampleRate : this.sampleRate;  // Getter only\n                case 'channels':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.numberOfChannels : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n     * @param {ArrayBuffer} arrayBuffer This argument is the instance of `ArrayBuffer`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    ready(arrayBuffer) {\n        if (arrayBuffer instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.buffer = buffer;\n\n                this.analyser.start('timeOverviewL', buffer);\n                this.analyser.start('timeOverviewR', buffer);\n\n                this.callbacks.ready(buffer);\n            };\n\n            this.context.decodeAudioData(arrayBuffer, successCallback, this.callbacks.error);\n\n            this.callbacks.decode(arrayBuffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts audio from the designated time.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.buffer instanceof AudioBuffer) && this.paused) {\n            const startTime = this.context.currentTime;\n\n            const pos = parseFloat(position);\n\n            this.currentTime = ((pos >= 0) && (pos <= this.buffer.duration)) ? pos : 0;\n\n            const playbackRate = this.source.playbackRate.value;\n            const loop         = this.source.loop;\n\n            this.source = this.context.createBufferSource();\n\n            // for legacy browsers\n            this.source.start = this.source.start || this.source.noteGrainOn;\n            this.source.stop  = this.source.stop  || this.source.noteOff;\n\n            this.source.buffer             = this.buffer;\n            this.source.playbackRate.value = playbackRate;\n            this.source.loop               = loop;\n\n            // AudioBufferSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            this.source.start(startTime, pos, (this.buffer.duration - pos));\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            this.paused = false;\n\n            this.on(startTime);\n\n            this.callbacks.start(this.source, this.currentTime);\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (this.currentTime < Math.floor(this.source.buffer.duration)) {\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n\n                            this.currentTime += ((1 * this.source.playbackRate.value) / this.source.buffer.sampleRate);\n\n                            const index = Math.floor(this.currentTime * this.source.buffer.sampleRate);\n                            const n100msec = 0.100 * this.source.buffer.sampleRate;\n\n                            // Invoke callback every 100 msec\n                            if ((index % n100msec) === 0) {\n                                this.callbacks.update(this.source, this.currentTime);\n                            }\n                        }\n\n                        this.analyser.timeOverviewL.update(this.currentTime);\n                        this.analyser.timeOverviewR.update(this.currentTime);\n                    } else {\n                        if (this.source.loop) {\n                            this.currentTime = 0;\n                        } else {\n                            this.end();\n                        }\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops audio.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.buffer instanceof AudioBuffer) && !this.paused) {\n            const stopTime = this.context.currentTime;\n\n            this.source.stop(stopTime);\n\n            this.off(stopTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Clear\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            this.paused = true;\n            this.callbacks.stop(this.source, this.currentTime);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBufferSourceNode`.\n     * @return {AudioBufferSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops audio according to audio state.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    toggle(position, connects, processCallback) {\n        if (this.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method rewinds audio.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    end() {\n        this.stop();\n        this.currentTime = 0;\n        this.callbacks.ended(this.source, this.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBuffer` exists.\n     * @return {boolean} If the instance of `AudioBuffer` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isBuffer() {\n        return this.buffer instanceof AudioBuffer;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBufferSourceNode` exists.\n     * @return {boolean} If the instance of `AudioBufferSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSource() {\n        return (this.source instanceof AudioBufferSourceNode) && (this.source.buffer instanceof AudioBuffer);\n    }\n\n    /**\n     * This method determines whether the audio is paused.\n     * @return {boolean} If the audio is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        return this.paused;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.audio = {\n            'playbackrate'  : this.isSource() ? this.source.playbackRate.value : 1,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\n\n/**\n * This subclass defines properties for playing the one-shot audio.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class OneshotModule extends SoundModule {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.sources   = [];  /** @type {Array.<AudioBufferSourceNode>} */\n        this.resources = [];  /** @type {Array.<string>} */\n        this.buffers   = [];  /** @type {Array.<AudioBuffer>} */\n        this.volumes   = [];  /** @type {Array.<GainNode>} */\n        this.isStops   = [];  /** @type {Array.<boolean>} in order to not call in duplicate `start` or `stop` method in the instance of `AudioBufferSourceNode` */\n\n        // for audio sources\n        this.settings = [];  /** @type {Array.<object>} */\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        this.transpose = 1.0;\n\n        this.isStop = true;\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax.\n     * @param {Array.<string>|Array.<AudioBuffer>} resources This argument is either URLs or the instances of `AudioBuffer` for audio resources.\n     * @param {Array.<object>} settings This argument is the properties of each audio sources.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    setup(resources, settings, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('resources' in properties) {\n                resources = properties.resources;\n            }\n\n            if ('settings' in properties) {\n                settings = properties.settings;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(resources)) {\n            resources = [resources];\n        }\n\n        this.resources = resources;\n\n        if (!Array.isArray(settings)) {\n            settings = [settings];\n        }\n\n        this.buffers.length = resources.length;\n\n        for (let i = 0, len = settings.length; i < len; i++) {\n            if ('buffer' in settings[i]) {\n               const buffer = parseInt(settings[i].buffer, 10);\n\n                if ((buffer >= 0) && (buffer < this.buffers.length)) {\n                    settings[i].buffer = buffer;\n                } else {\n                    return this;\n                }\n            } else {\n                return this;\n            }\n\n            settings[i].rate   = (('rate' in settings[i]) && (settings[i].rate >= 0)) ? parseFloat(settings[i].rate) : 1;\n            settings[i].loop   = ('loop' in settings[i]) ? Boolean(settings[i].loop) : false;\n            settings[i].start  = (('start' in settings[i]) && (settings[i].start >= 0)) ? parseFloat(settings[i].start) : 0;\n            settings[i].end    = (('end' in settings[i]) && (settings[i].end >= 0)) ? parseFloat(settings[i].end) : 0;\n            settings[i].volume = (('volume' in settings[i]) && (settings[i].volume >=0) && (settings[i].volume <= 1)) ? parseFloat(settings[i].volume) : 1;\n\n            this.isStops[i] = true;\n            this.volumes[i] = this.context.createGain();\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        this.settings = settings;\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = error => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(error, OneshotModule.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogress = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, OneshotModule.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            // Success\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.buffers[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (const buffer of this.buffers) {\n                            if (buffer === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event, this.buffers);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, OneshotModule.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = this.resources.length; i < len; i++) {\n            if (typeof this.resources[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(this.resources[i], i);\n            } else if (this.resources[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.buffers[i] = this.resources[i];\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OneshotModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'transpose':\n                    if (value === undefined) {\n                        return this.transpose;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.transpose = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(false);\n\n        return this;\n    }\n\n    /**\n     * This method starts one-shot audio with the designated playback rate and volume.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    start(index, connects, processCallback) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex  = this.settings[selectedIndex].buffer;\n        const playbackRate = this.settings[selectedIndex].rate;\n        const loop         = this.settings[selectedIndex].loop;\n        const loopStart    = this.settings[selectedIndex].start;\n        const loopEnd      = this.settings[selectedIndex].end;\n        const volume       = this.settings[selectedIndex].volume;\n\n        if (!(this.buffers[bufferIndex] instanceof AudioBuffer)) {\n            // `setup` method has not been invoked\n            return this;\n        }\n\n        // the instance of `AudioBufferSourceNode` already exists ?\n        if (this.sources[selectedIndex] instanceof AudioBufferSourceNode) {\n            this.sources[selectedIndex].stop(this.context.currentTime);\n            this.sources[selectedIndex].disconnect(0);\n            this.sources[selectedIndex] = null;\n        }\n\n        const source = this.context.createBufferSource();\n\n        // for legacy browsers\n        source.start = source.start || source.noteGrainOn;\n        source.stop  = source.stop  || source.noteOff;\n\n        source.buffer = this.buffers[bufferIndex];\n\n        // Set properties\n        source.playbackRate.value = playbackRate * this.transpose;\n        source.loop               = loop;\n        source.loopStart          = loopStart;\n        source.loopEnd            = loopEnd;\n\n        this.volumes[selectedIndex].gain.value = volume;\n\n        this.envelopegenerator.clear(false);\n\n        // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n        this.envelopegenerator.ready(selectedIndex, source, this.volumes[selectedIndex]);\n        this.volumes[selectedIndex].connect(this.processor);\n        this.connect(this.processor, connects);\n\n        const startTime = this.context.currentTime + this.times.start;\n\n        source.start(startTime);\n\n        this.sources[selectedIndex] = source;\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.isStops[selectedIndex] = false;\n\n        // in the case of scheduling stop time\n        if (this.times.stop > 0) {\n            window.setTimeout(() => {\n                this.stop(selectedIndex);\n            }, (this.times.stop * 1000));\n        }\n\n        // Call on stopping audio\n        source.onended = () => {\n            this.isStops[selectedIndex] = true;\n        };\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                this.isStop = this.isStops.every(element => element);\n\n                if (this.isStop) {\n                    // Stop\n\n                    this.off(this.context.currentTime);\n\n                    this.envelopegenerator.clear(false);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the designated one-shot audio.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    stop(index) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex= this.settings[selectedIndex].buffer;\n\n        if (!((this.buffers[bufferIndex] instanceof AudioBuffer) && (this.sources[selectedIndex] instanceof AudioBufferSourceNode))) {\n            return this;\n        }\n\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBuffer` that is used in `OneshotModule`.\n     * @param {number} index This argument is required in the case of designating `AudioBuffer`.\n     * @return {Array.<AudioBuffer>|AudioBuffer}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.buffers.length)) ? this.buffers[i] : this.buffers;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oneshot = {\n            'transpose' : this.transpose\n        };\n\n        return params;\n    }\n\n    /**\n     * This method resets settings.\n     * @param {number} index This argument is in order to select target setting.\n     * @param {string} key This argument is in order to select parameter.\n     * @param {number|boolean} value This argument is new value.\n     * @return {OneshotModule} This is returned for method chain.\n     */\n    reset(index, key, value) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (String(key).toLowerCase() in this.settings[selectedIndex]) {\n            this.settings[selectedIndex][key.toLowerCase()] = value;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OneshotModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport Oscillator from './Oscillator';\nimport Glide from './Glide';\n\n/**\n * This subclass defines properties for creating sound.\n * Actually, properties for creating sound is defined in private class (`Oscillator`).\n * Therefore, this class manages these private classes for creating sound.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class OscillatorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        /** @type {Array.<Oscillator>} */\n        this.sources = [];\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n\n        this.glide = new Glide(context);\n    }\n\n    /**\n     * This method creates the instances of `Oscillator`.\n     * @param {Array.<boolean>|boolean} states This argument is initial state in the instance of `Oscillator`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    setup(states) {\n        // Clear\n        this.sources.length = 0;\n\n        if (!Array.isArray(states)) {\n            states = [states];\n        }\n\n        for (let i = 0, len = states.length ; i < len; i++) {\n            this.sources[i] = new Oscillator(this.context, Boolean(states[i]));\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OscillatorModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            return (r === undefined) ? this : r;\n        }\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(true);\n\n        return this;\n    }\n\n    /**\n     * This method starts some sounds that are active at the same time.\n     * @param {Array.<number>}|number} frequencies This argument each oscillator frequency. The default value is 0 Hz.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    start(frequencies, connects, processCallback) {\n        const startTime = this.context.currentTime + this.times.start;\n\n        // Validate the 1st argument\n        if (!Array.isArray(frequencies)) {\n            frequencies = [frequencies];\n        }\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            const f = parseFloat(frequencies[i]);\n            frequencies[i] = (f >= 0) ? f : 0;\n        }\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // ScriptProcessorNode (Mix oscillators) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor, connects);\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            if (i >= this.sources.length) {\n                break;\n            }\n\n            const oscillator = this.sources[i];\n            const frequency  = frequencies[i];\n\n            // GainNode (Volume) -> ScriptProcessorNode (Mix oscillators)\n            oscillator.ready(this.processor);\n\n            // OscillatorNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume)\n            this.envelopegenerator.ready(i, oscillator.source, oscillator.volume);\n\n            this.glide.ready(frequency).start(oscillator.source, startTime);\n\n            oscillator.start(startTime);\n        }\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                const inputLs  = event.inputBuffer.getChannelData(0);\n                const inputRs  = event.inputBuffer.getChannelData(1);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                // Stop ?\n                if (this.envelopegenerator.isStop()) {\n                    // Stop\n                    const stopTime = this.context.currentTime;\n\n                    for (const source of this.sources) {\n                        source.stop(stopTime);\n                    }\n\n                    this.off(stopTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops active sounds.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.glide.stop();\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `Oscillator` that is used in `OscillatorModule`.\n     * @param {number} index This argument is required in the case of designating `Oscillator`.\n     * @return {Array.<Oscillator>|Oscillator}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /**\n     * This method returns the number of oscillators.\n     * @return {number} This is returned as the number of oscillators.\n     */\n    length() {\n        return this.sources.length;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oscillator = {\n            'glide' : {\n                'type' : this.glide.param('type'),\n                'time' : this.glide.param('time')\n            }\n        };\n\n        for (let i = 0, len = this.sources.length; i < len; i++) {\n            const source = this.sources[i];\n\n            params.oscillator[`oscillator${i}`] = {\n                'state'  : source.state(),\n                'gain'   : source.param('gain'),\n                'type'   : source.param('type'),\n                'octave' : source.param('octave'),\n                'fine'   : source.param('fine')\n            };\n        }\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines the properties that subclasses (`TimeOverview`, `Time`, `FFT`) require.\n * @constructor\n */\nexport default class Visualizer {\n    static CANVAS = 'canvas';\n    static SVG    = 'svg';\n\n    static XMLNS = 'http://www.w3.org/2000/svg';\n    static XLINK = 'http://www.w3.org/1999/xlink';\n\n    static SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW = 'svg-linear-gradient-time-overview';\n    static SVG_LINEAR_GRADIENT_ID_TIME          = 'svg-linear-gradient-time';\n    static SVG_LINEAR_GRADIENT_ID_FFT           = 'svg-linear-gradient-fft';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        this.sampleRate = sampleRate;\n\n        this.isActive = false;\n\n        // either 'canvas' or 'svg'\n        this.graphics = '';\n\n        // in the case of using Canvas\n        this.canvas  = null;\n        this.context = null;\n\n        // in the case of using SVG\n        this.svg = null;\n\n        // for timer\n        this.interval = 1000;\n        this.timerid  = null;\n\n        this.styles = {\n            'shape'  : 'line',\n            'grad'   : [\n                {\n                    'offset' : 0,\n                    'color'  : 'rgba(0, 128, 255, 1.0)'\n                },\n                {\n                    'offset' : 1,\n                    'color'  : 'rgba(0, 0, 255, 1.0)'\n                }\n            ],\n            'wave'   : 'rgba(0, 0, 255, 1.0)',\n            'grid'   : 'rgba(255, 0, 0, 1.0)',\n            'text'   : 'rgba(255, 255, 255, 1.0)',\n            'font'   : {\n                'family' : 'Arial',\n                'size'   : '13px',\n                'style'  : 'normal',\n                'weight' : 'normal'\n            },\n            'width'  : 1.5,\n            'cap'    : 'round',\n            'join'   : 'miter',\n            'top'    : 15,\n            'right'  : 30,\n            'bottom' : 15,\n            'left'   : 30\n        };\n    }\n\n    /**\n     * This method sets up for using Canvas or SVG.\n     * @param {HTMLCanvasElement|SVGElement} element This argument is either `HTMLCanvasElement` or `SVGElement`.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    setup(element) {\n        if (element instanceof HTMLCanvasElement) {\n            this.graphics = Visualizer.CANVAS;\n            this.canvas   = element;\n            this.context  = this.canvas.getContext('2d');\n        } else if (element instanceof SVGElement) {\n            this.graphics = Visualizer.SVG;\n            this.svg      = element;\n\n            this.svg.setAttribute('xmlns',       Visualizer.XMLNS);\n            this.svg.setAttribute('xmlns:xlink', Visualizer.XLINK);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {string|number|Array.<object>} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {string|number|Array.<object>} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v = null;\n\n        switch (k) {\n            case 'interval':\n                if (value === undefined) {\n                    return this.interval;\n                }\n\n                if (String(value).toLowerCase() === 'auto') {\n                    this.interval = 'auto';\n                } else {\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.interval = v;\n                    }\n                }\n\n                break;\n            case 'shape':\n                if (value === undefined) {\n                    return this.styles.shape;\n                }\n\n                v = String(value).toLowerCase();\n\n                if ((v === 'line') || (v === 'rect')) {\n                    this.styles.shape = (this.styles.wave !== 'gradient') ? v : 'rect';\n                }\n\n                break;\n            case 'grad':\n                if (value === undefined) {\n                    return this.styles.grad;\n                }\n\n                if (!Array.isArray(value)) {\n                    value = [value];\n                }\n\n                let isError = false;\n\n                for (const grads of value) {\n                    if (('offset' in grads) && ('color' in grads)) {\n                        const offset = parseFloat(grads.offset);\n\n                        if (isNaN(offset) || (offset < 0) || (offset > 1)) {\n                            isError = true;\n                            break;\n                        }\n                    } else {\n                        isError = true;\n                        break;\n                    }\n                }\n\n                if (!isError) {\n                    this.styles.grad = value;\n                }\n\n                break;\n            case 'font':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (Object.prototype.toString.call(value) === '[object Object]') {\n                    for (const prop in value) {\n                        if (/family|size|style|weight/i.test(prop)) {\n                            this.styles.font[prop] = String(value[prop]);\n                        }\n                    }\n                }\n\n                break;\n            case 'wave':\n            case 'grid':\n            case 'text':\n            case 'cap' :\n            case 'join':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (typeof value === 'string') {\n                    if ((k === 'wave') && (value === 'gradient')) {\n                        this.styles.shape = 'rect';\n                    }\n\n                    this.styles[k] = value.toLowerCase();\n                }\n\n                break;\n            case 'width' :\n            case 'top'   :\n            case 'right' :\n            case 'bottom':\n            case 'left'  :\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                v = (k === 'width') ? parseFloat(value) : parseInt(value, 10);\n\n                if (v >= 0) {\n                    this.styles[k] = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method draws sound wave to Canvas or SVG. This method conceals difference of API for drawing.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is parameter for spectrum. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is parameter for spectrum. The default value is -30 dB.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    start(data, minDecibels, maxDecibels) {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                this.drawOnCanvas(data, minDecibels, maxDecibels);\n                break;\n            case Visualizer.SVG:\n                this.drawBySVG(data, minDecibels, maxDecibels);\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates string for `Data URL` or `HTML` for the drawn figure.\n     * @return {string|Visualizer} This is returned as `Data URL` or `HTML` string. If `setup` method has not been invoked, this is returned for method chain.\n     */\n    create() {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                return this.canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            case Visualizer.SVG:\n                return this.svg.outerHTML;\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Visualizer} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to Canvas.\n     * @param {CanvasRenderingContext2D} context This argument is the instance of `CanvasRenderingContext2D`.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     */\n    drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval) {\n        if (!(context instanceof CanvasRenderingContext2D)) {\n            return this;\n        }\n\n        if (!(data instanceof Float32Array)) {\n            return this;\n        }\n\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        // Begin drawing\n        switch (this.styles.shape) {\n            case 'line':\n                // Set style\n                context.strokeStyle = this.styles.wave;\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            context.moveTo((x + (this.styles.width / 2)),  y);\n                        } else {\n                            context.lineTo(x, y);\n                        }\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case 'rect':\n                // Set style\n                if (this.styles.wave !== 'gradient') {\n                    context.fillStyle = this.styles.wave;\n                }\n\n                // Draw wave\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = -1 * Math.floor(data[i] * (h / 2));\n\n                        // Set style\n                        if (this.styles.wave === 'gradient') {\n                            const upside   = (innerHeight / 2) + this.styles.top;\n                            const gradient = context.createLinearGradient(0, upside, 0, (upside + y));\n\n                            for (const gradients of this.styles.grad) {\n                                gradient.addColorStop(gradients.offset, gradients.color);\n                            }\n\n                            context.fillStyle = gradient;\n                        }\n\n                        context.fillRect(x, m, this.styles.width, y);\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to SVG.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGPathElement|SVGGElement} This is returned as `SVGElement`.\n     */\n    drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, linearGradientId) {\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        switch (this.styles.shape) {\n            case 'line':\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            d += `M${x + (this.styles.width / 2)} ${y}`;\n                        } else {\n                            d += ` L${x} ${y}`;\n                        }\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          this.styles.wave);\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                return path;\n            case 'rect':\n                let defs = null;\n\n                if (this.styles.wave === 'gradient') {\n                    defs = this.createSVGLinearGradient(linearGradientId);\n                }\n\n                // Draw wave\n                const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                if (defs !== null) {\n                    g.appendChild(defs);\n                }\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor(data[i] * (innerHeight / 2));\n\n                        rect.setAttribute('x',     x);\n                        rect.setAttribute('y',     m);\n                        rect.setAttribute('width', this.styles.width);\n\n                        if (y < 0) {\n                            rect.setAttribute('height', -y);\n                        } else {\n                            rect.setAttribute('height',    y);\n                            rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${m})`);\n                        }\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${linearGradientId})`);\n\n                        g.appendChild(rect);\n                    }\n                }\n\n                return g;\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * This method creates elements for SVG linear gradient.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGDefsElement} This is returned as the instance of `SVGDefsElement`.\n     */\n    createSVGLinearGradient(linearGradientId) {\n        const defs           = document.createElementNS(Visualizer.XMLNS, 'defs');\n        const linearGradient = document.createElementNS(Visualizer.XMLNS, 'linearGradient');\n\n        linearGradient.setAttribute('id', String(linearGradientId));\n        linearGradient.setAttribute('x1', '0%');\n        linearGradient.setAttribute('y1', '0%');\n        linearGradient.setAttribute('x2', '0%');\n        linearGradient.setAttribute('y2', '100%');\n\n        for (const gradients of this.styles.grad) {\n            const stop = document.createElementNS(Visualizer.XMLNS, 'stop');\n\n            stop.setAttribute('offset',     gradients.offset);\n            stop.setAttribute('stop-color', gradients.color);\n\n            linearGradient.appendChild(stop);\n        }\n\n        defs.appendChild(linearGradient);\n\n        return defs;\n    }\n\n    /**\n     * This method creates string for font.\n     * @return {string} This is returned as string for font.\n     */\n    createFontString() {\n        const { size, style, weight, family } = this.styles.font;\n\n        return `${size} ${style} ${weight} \"${family}\"`;\n    }\n\n    /** @abstract */\n    drawOnCanvas() {\n    }\n\n    /** @abstract */\n    drawBySVG() {\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Visualizer]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport NoiseGate from './NoiseGate';\n\n/**\n * This class defines properties that processes sound data from WebRTC in Web Audio API.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class StreamModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        // for the instance of `MediaStreamAudioSourceNode`\n        this.source = null;\n\n        // for `navigator.mediaDevices.getUserMedia`\n        this.constraints = {\n            'audio' : true,\n            'video' : false\n        };\n\n        this.callbacks = {\n            'stream' : () => {},\n            'error'  : () => {}\n        };\n\n        this.output = true;\n\n        this.isStop = true;\n\n        this.noisegate = new NoiseGate();\n    }\n\n    /**\n     * This method sets up for using WebRTC.\n     * @param {object} constraints This argument is the 1st argument for `getUserMedia`.\n     * @param {function} streamCallback This argument is invoked on streaming.\n     * @param {function} errorCallback This argument is invoked when error occurs on streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    setup(constraints, streamCallback, errorCallback) {\n        if (Object.prototype.toString.call(constraints) === '[object Object]') {\n            this.constraints = constraints;\n        }\n\n        if (Object.prototype.toString.call(streamCallback) === '[object Function]') {\n            this.callbacks.stream = streamCallback;\n        }\n\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            this.callbacks.error = errorCallback;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|StreamModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            switch (k) {\n                case 'output':\n                    if (value === undefined) {\n                        return this.output;\n                    }\n\n                    this.output = Boolean(value);\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    ready() {\n        return this;\n    }\n\n    /**\n     * This method starts streaming.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    start(connects, processCallback) {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new Error('Cannot use WebRTC.');\n        }\n\n        const bufferSize = this.processor.bufferSize;\n\n        let isAnalyser = false;\n\n        const start = (stream, connects, processCallback) => {\n            this.source = this.context.createMediaStreamSource(stream);\n\n            // MediaStreamAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            if (!this.output) {\n                this.mastervolume.disconnect(0);\n\n                // for analyser\n                this.mastervolume.connect(this.analyser.input);\n\n                // for recording\n                this.mastervolume.connect(this.recorder.processor);\n                this.recorder.processor.connect(this.context.destination);\n\n                // for session\n                this.mastervolume.connect(this.session.sender);\n                this.session.sender.connect(this.context.destination);\n            }\n\n            this.on(this.context.currentTime);\n\n            if (!isAnalyser) {\n                this.analyser.start('time');\n                this.analyser.start('fft');\n                isAnalyser = true;\n            }\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.noisegate.start(inputLs[i]);\n                        outputRs[i] = this.noisegate.start(inputRs[i]);\n                    }\n                };\n            }\n        };\n\n        this.isStop = false;\n\n        navigator.mediaDevices.getUserMedia(this.constraints).then(stream => {\n            if (this.isStop) {\n                return;\n            }\n\n            start(stream, connects, processCallback);\n            this.callbacks.stream(stream);\n        }).catch(error => {\n            this.callbacks.error(error);\n        });\n\n        return this;\n    }\n\n    /**\n     * This method stops streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        this.source = null;\n\n        this.off(this.context.currentTime, true);\n\n        this.analyser.stop('time');\n        this.analyser.stop('fft');\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        this.isStop = true;\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaStreamAudioSourceNode`.\n     * @return {MediaStreamAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops streaming according to current state.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     */\n    toggle(connects, processCallback) {\n        if (this.isStreaming()) {\n            this.stop();\n        } else {\n            this.start(connects, processCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether streaming is active.\n     * @return {boolean} If streaming is active, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStreaming() {\n        return !this.isStop;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.stream = {\n            'output'    : this.output,\n            'noisegate' : {\n                'level' : this.noisegate.param('level')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule]';\n    }\n}\n","'use strict';\n\nimport AudioModule from '../AudioModule';\n\n/**\n * This class defines properties for processing sound data from `HTMLMediaElement`.\n * Namely, this class creates audio player that has higher features from `HTMLMediaElement`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {AudioModule}\n */\nexport default class MediaModule extends AudioModule {\n    static AUDIO = 'audio';\n    static VIDEO = 'video';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.source = null;  // for the instance of `MediaElementAudioSourceNode`\n        this.media  = null;  // for the instance of `HTMLMediaElement`\n        this.ext    = '';    // 'wav', 'ogg', 'mp3, 'webm', 'ogv', 'mp4' ...etc\n\n        this.playbackRate = 1;\n        this.controls     = false;\n        this.loop         = false;\n        this.muted        = false;\n        this.autoplay     = false;\n\n        // The keys are the event interfaces that are defined by `HTMLMediaElement`.\n        // For example, `loadstart`, `loadedmetadata`, `loadeddata`, `canplay`, `canplaythrough`, `timeupdate`, `ended` ...etc\n        this.listeners = {};\n    }\n\n    /**\n     * This method gets `HTMLMediaElement` and selects media format. In addition, this method adds event listeners that are defined by `HTMLMediaElement`.\n     * @param {HTMLAudioElement|HTMLVideoElement} media This argument is either `HTMLAudioElement` or `HTMLVideoElement`.\n     * @param {Array.<string>|string} formats This argument is usable media format. For example, 'wav', 'ogg', 'webm', 'mp4' ...etc.\n     * @param {object} listeners This argument is event handlers that are defined by `HTMLMediaElement`.\n     * @param {boolean} autoplay This argument is in order to determine autoplay. The default value is `false`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    setup(media, formats, listeners, autoplay) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('media' in properties) {\n                media = properties.media;\n            }\n\n            if ('formats' in properties) {\n                formats = properties.formats;\n            }\n\n            if ('listeners' in properties) {\n                listeners = properties.listeners;\n            }\n\n            if ('autoplay' in properties) {\n                autoplay = properties.autoplay;\n            }\n        }\n\n        let type = '';\n\n        if (media instanceof HTMLAudioElement) {\n            type = MediaModule.AUDIO;\n        } else if (media instanceof HTMLVideoElement) {\n            type = MediaModule.VIDEO;\n        } else {\n            return this;\n        }\n\n        this.media = media;\n\n        if (!Array.isArray(formats)) {\n            formats = [formats];\n        }\n\n        for (const format of formats) {\n            const f = `${type}/${String(format).toLowerCase()}`;\n\n            if (/^(?:maybe|probably)/.test(this.media.canPlayType(f))) {\n                this.ext = format;\n                break;\n            }\n        }\n\n        if (this.ext === '') {\n            throw new Error('Media format that can be played does not exist.');\n        }\n\n        if (Object.prototype.toString.call(listeners) === '[object Object]') {\n            for (const k in listeners) {\n                this.listeners[k.toLowerCase()] = (Object.prototype.toString.call(listeners[k]) === '[object Function]') ? listeners[k] : () => {};\n            }\n        }\n\n        this.autoplay = Boolean(autoplay);\n\n        // in the case of autoplay, `loadstart` event not fire\n        if (this.autoplay && !(this.source instanceof MediaElementAudioSourceNode)) {\n            this.source = this.context.createMediaElementSource(this.media);\n        }\n\n        this.media.addEventListener('loadstart', event => {\n            // To create the instance of `MediaElementAudioSourceNode` again causes error to occur\n            if (!(this.source instanceof MediaElementAudioSourceNode)) {\n                this.source = this.context.createMediaElementSource(this.media);\n            }\n\n            if ('loadstart' in this.listeners) {\n                this.listeners.loadstart(event);\n            }\n        }, false);\n\n        this.media.addEventListener('ended', event => {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            if ('ended' in this.listeners) {\n                this.listeners.ended(event);\n            }\n        }, false);\n\n        for (const k in this.listeners) {\n            this.media.addEventListener(k, event => {\n                this.listeners[(event.type).toLowerCase()](event);\n            }, false);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|MediaModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let r;\n\n            if (k === 'mastervolume') {\n                r = super.param(k, value);\n            }\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.playbackRate : this.playbackRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.5;  // for Chrome\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLMediaElement) {\n                            this.media.playbackRate = v;\n                        }\n\n                        this.playbackRate = v;\n                    }\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.currentTime : 0;\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        v   = parseFloat(value);\n                        min = 0;\n                        max = this.media.duration;\n\n                        if ((v >= min) && (v <= max)) {\n                            this.media.currentTime = v;\n                        }\n                    }\n\n                    break;\n                case 'loop'    :\n                case 'muted'   :\n                case 'controls':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media[k] : this[k];\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        this.media[k] = Boolean(value);\n                    }\n\n                    this[k] = Boolean(value);\n\n                    break;\n                case 'width' :\n                case 'height':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLVideoElement) ? this.media[k] : 0;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLVideoElement) {\n                            this.media[k] = v;\n                        }\n                    }\n\n                    break;\n                case 'duration':\n                    return this.media.duration;  // Getter only\n                case 'channels':\n                    return (this.source instanceof MediaElementAudioSourceNode) ? this.source.channelCount : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method prepares for playing the media anytime after loading the media resource.\n     * @param {string} source This argument is path name or `Data URL` or `Object URL` for the media resource.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    ready(source) {\n        const src = String(source);\n\n        try {\n            // `Data URL` or `Object URL` ?\n            if ((src.indexOf('data:') !== -1) || (src.indexOf('blob:') !== -1)) {\n                this.media.src = src;  // `Data URL` or `Object URL`\n            } else {\n                this.media.src = `${src}.${this.ext}`;  // Path\n            }\n        } catch (error) {\n            throw new Error('The designated resource cannot be loaded.');\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts media from the designated time.\n     * @param {number} position This argument is the time that media is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.source instanceof MediaElementAudioSourceNode) && this.media.paused) {\n            // MediaElementAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            const promise = this.media.play();\n\n            promise.then(() => {\n                const pos = parseFloat(position);\n\n                this.media.currentTime  = ((pos >= 0) && (pos <= this.media.duration)) ? pos : 0;\n                this.media.playbackRate = this.playbackRate;\n                this.media.controls     = this.controls;\n                this.media.loop         = this.loop;\n                this.media.muted        = this.muted;\n\n                this.on(this.context.currentTime);\n\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                const bufferSize = this.processor.bufferSize;\n\n                if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                    this.processor.onaudioprocess = processCallback;\n                } else {\n                    this.processor.onaudioprocess = event => {\n                        const inputLs  = event.inputBuffer.getChannelData(0);\n                        const inputRs  = event.inputBuffer.getChannelData(1);\n                        const outputLs = event.outputBuffer.getChannelData(0);\n                        const outputRs = event.outputBuffer.getChannelData(1);\n\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n                        }\n                    };\n                }\n            }).catch(() => {\n                this.stop();\n\n                if (this.autoplay) {\n                    this.media.muted  = this.muted = true;\n                    this.media.volume = 0;\n                }\n\n                this.start(position, connects, processCallback);\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops media.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.source instanceof MediaElementAudioSourceNode) && !this.media.paused) {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaElementAudioSourceNode`.\n     * @return {MediaElementAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops media according to media state.\n     * @param {number} position This argument is time that media is started at.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    toggle(position, connects, processCallback) {\n        if (this.media.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `HTMLMediaElement` exists.\n     * @return {boolean} If the instance of `HTMLMediaElement` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isMedia() {\n        return this.media instanceof HTMLMediaElement;\n    }\n\n    /**\n     * This method determines whether the instance of `MediaElementAudioSourceNode` exists.\n     * @return {boolean} If the instance of `MediaElementAudioSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isSource() {\n        return this.source instanceof MediaElementAudioSourceNode;\n    }\n\n    /**\n     * This method determines whether the media is paused.\n     * @return {boolean} If the media is paused or does not exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isPaused() {\n        return (this.media instanceof HTMLMediaElement) ? this.media.paused : true;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.media = {\n            'playbackrate'  : this.playbackRate,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        delete params.audio;\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[MediaModule]';\n    }\n}\n","'use strict';\n\n/**\n * This class (static) method reads file of audio or text.\n * @param {Blob} file This argument is the instance of `Blob`. This is entity of file.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n */\nexport function read(file, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('file' in properties) {\n            file = properties.file;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(file instanceof Blob)) {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(null, 'FILE_IS_NOT_BLOB');\n        }\n\n        return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    reader.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            let error = '';\n\n            switch (reader.error.code) {\n                case reader.error.NOT_FOUND_ERR:\n                    error = 'NOT_FOUND_ERR';\n                    break;\n                case reader.error.SECURITY_ERR:\n                    error = 'SECURITY_ERR';\n                    break;\n                case reader.error.ABORT_ERR:\n                    error = 'ABORT_ERR';\n                    break;\n                case reader.error.NOT_READABLE_ERR:\n                    error = 'NOT_READABLE_ERR';\n                    break;\n                case reader.error.ENCODING_ERR:\n                    error = 'ENCODING_ERR';\n                    break;\n                default:\n                    error = 'ERR';\n                    break;\n            }\n\n            errorCallback(event, error);\n        }\n    };\n\n    reader.onload = event => {\n        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n            let result = reader.result;\n\n            // Escape `<script>` in the case of text\n            if ((typeof result === 'string') && (result.indexOf('data:') === -1) && (result.indexOf('blob:') === -1)) {\n                result = result.replace(/<(\\/?script.*?)>/gi, '&lt;$1&gt;');\n            }\n\n            successCallback(event, result);\n        }\n    };\n\n    if (/arraybuffer/i.test(type)) {\n        reader.readAsArrayBuffer(file);\n    } else if (/dataurl/i.test(type)) {\n        reader.readAsDataURL(file);\n    } else if (/text/i.test(type)) {\n        reader.readAsText(file, 'UTF-8');\n    }\n}\n\n/**\n * This class (static) method gets the instance of `File` (extends `Blob`).\n * @param {Event} event This argument is the instance of Event by Drag & Drop or `<input type=\"file\">`.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n * @return {File} This is returned as the instance of `File` (extends `Blob`).\n */\nexport function file(event, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('event' in properties) {\n            event = properties.event;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(event instanceof Event)) {\n        return;\n    }\n\n    // for the instance of `File` (extends `Blob`)\n    let file = null;\n\n    if (event.type === 'drop') {\n        // Drag & Drop\n        event.stopPropagation();\n        event.preventDefault();\n\n        file = /* ('items' in event.dataTransfer) ? event.dataTransfer.items[0].getAsFile() : */event.dataTransfer.files[0];\n    } else if ((event.type === 'change') && ('files' in event.target)) {\n        // `<input type=\"file\">`\n        file = event.target.files[0];\n    } else {\n        return;\n    }\n\n    if (!(file instanceof File)) {\n        throw new Error('Please upload file.');\n    } else if ((/text/i.test(type)) && (file.type.indexOf('text') === -1)) {\n        throw new Error('Please upload text file.');\n    } else if ((/arraybuffer|dataurl/i.test(type)) && !/audio|video/.test(file.type)) {\n        throw new Error('Please upload audio or video file.');\n    } else {\n        read({\n            'file'     : file,\n            'type'     : type,\n            'success'  : successCallback,\n            'error'    : errorCallback,\n            'progress' : progressCallback\n        });\n\n        return file;\n    }\n}\n\n/**\n * This class (static) method gets audio data as `ArrayBuffer` by Ajax.\n * @param {string} url This argument is URL for audio resource.\n * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when error occurred.\n * @param {function} progressCallback This argument is invoked during receiving audio data.\n */\nexport function ajax(url, timeout, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('url' in properties) {\n            url = properties.url;\n        }\n\n        if ('timeout' in properties) {\n            timeout = properties.timeout;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    // for errorCallback\n    const ERROR_AJAX         = 'error';\n    const ERROR_AJAX_TIMEOUT = 'timeout';\n\n    const xhr = new XMLHttpRequest();\n\n    const t = parseInt(timeout, 10);\n\n    xhr.timeout = (t > 0) ? t : 60000;\n\n    xhr.ontimeout = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX_TIMEOUT);\n        }\n    };\n\n    xhr.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    xhr.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX);\n        }\n    };\n\n    xhr.onload = event => {\n        if (xhr.status === 200) {\n            const arrayBuffer = xhr.response;\n\n            if ((arrayBuffer instanceof ArrayBuffer) && (Object.prototype.toString.call(successCallback) === '[object Function]')) {\n                successCallback(event, arrayBuffer);\n            }\n        }\n    };\n\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n    xhr.send(null);\n}\n\n/**\n * This class (static) method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n * @param {AudioContext} context This argument is the instance of `AudioContext` for `decodeAudioData` method.\n * @param {ArrayBuffer} arrayBuffer This argument is converted to the instance of `AudioBuffer`.\n * @param {function} successCallback This argument is invoked when `decodeAudioData` method is successful.\n       The 1st argument in this callback function is the instance of `AudioBuffer`.\n * @param {function} errorCallback This argument is invoked when `decodeAudioData` method failed.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function decode(context, arrayBuffer, successCallback, errorCallback) {\n    if (!(context instanceof AudioContext)) {\n        return;\n    }\n\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n        return;\n    }\n\n    if (Object.prototype.toString.call(successCallback) !== '[object Function]') {\n        successCallback = () => {};\n    }\n\n    if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n        errorCallback = () => {};\n    }\n\n    return context.decodeAudioData(arrayBuffer, successCallback, errorCallback);\n}\n\n/**\n * This class (static) method calculates frequency from the index that corresponds to the 12 equal temperament.\n * @param {Array.<number>} indexes This argument is array of index that corresponds to the 12 equal temperament.\n *     For example, This value is between 0 and 88 in the case of piano.\n * @return {Array.<number>} This is returned as array that contains frequencies.\n */\nexport function toFrequencies(indexes) {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n\n    const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n    const MIN_A           = 27.5;\n\n    if (!Array.isArray(indexes)) {\n        indexes = [indexes];\n    }\n\n    const frequencies = new Array(indexes.length);\n\n    for (let i = 0, len = indexes.length; i < len; i++) {\n        const index = parseInt(indexes[i], 10);\n\n        frequencies[i] = (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : 0;\n    }\n\n    return frequencies;\n}\n\n/**\n * This class (static) method calculates minutes and seconds from the designated time in seconds.\n * @param {number} time This argument is the time in seconds.\n * @return {object} This is returned as associative array that contains `minutes`, `seconds` and `milliseconds` keys.\n */\nexport function convertTime(time) {\n    const t = parseFloat(time);\n\n    if (t >= 0) {\n        const m  = Math.floor(t / 60);\n        const s  = Math.floor(t % 60);\n        const ms = t - parseInt(t, 10);\n\n        return {\n            'minutes'      : m,\n            'seconds'      : s,\n            'milliseconds' : ms\n        };\n    }\n}\n\n/**\n * This class (static) method shows the designated `Element` in full screen.\n * @param {Element} element This argument is the instance of `Element` that is the target of full screen.\n */\nexport function fullscreen(element) {\n    if (!(element instanceof Element)) {\n        return;\n    }\n\n    if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n    } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n    } else if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else {\n        throw new Error('Cannot change to full screen.');\n    }\n}\n\n/**\n * This class (static) method shows `Element` in original size from full screen.\n */\nexport function exitFullscreen() {\n    if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen();\n    } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n    } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n    } else if (document.cancelFullScreen) {\n        document.cancelFullScreen();\n    } else if (document.exitFullscreen) {\n        document.exitFullscreen();\n    } else {\n        throw new Error('Cannot exit from full screen.');\n    }\n}\n","'use strict';\n\nimport OscillatorModule from '../OscillatorModule';\nimport OneshotModule from '../OneshotModule';\n\n/**\n * This class defines properties for playing the MML (Music Macro Language).\n * @constructor\n */\nexport default class MML {\n    static ONE_MINUTES       = 60;  // sec\n    static EQUAL_TEMPERAMENT = 12;\n    static QUARTER_NOTE      = 4;\n    static REGEXP_MML        = /\\s*(?:T\\d+)\\s*|\\s*(?:O\\d+)\\s*|\\s*(?:(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*\\s*/gi;\n    static REGEXP_TEMPO      = /T\\d+/i;\n    static REGEXP_OCTAVE     = /O\\d+/i;\n    static REGEXP_NOTE       = /(?:(?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*/i;\n    static REGEXP_CHORD      = /((?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*/i;\n    static REGEXP_DURATION   = /(?:[CDEFGABR][#+-]?)+((?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*)/i;\n    static REST              = 'R';\n    static ERROR_STRING      = 'MML';\n    static ERROR_TEMPO       = 'TEMPO';\n    static ERROR_OCTAVE      = 'OCTAVE';\n    static ERROR_NOTE        = 'NOTE';\n\n    /**\n     * This class (static) method computes index by octave and pitch name.\n     * @param {number} octave This argument is octave.\n     * @param {string} pitchname This argument is pitch name.\n     * @return {number|string} This is returned as index that is computed by octave and pitch name.\n     */\n    static computeIndex = (octave, pitchname) => {\n        let index = 0;\n\n        switch (pitchname) {\n            case 'C':\n                index = 3;\n                break;\n            case 'D':\n                index = 5;\n                break;\n            case 'E':\n                index = 7;\n                break;\n            case 'F':\n                index = 8;\n                break;\n            case 'G':\n                index = 10;\n                break;\n            case 'A':\n                index = 12;\n                break;\n            case 'B':\n                index = 14;\n                break;\n            case MML.REST:\n                return MML.REST;\n            default :\n                break;\n        }\n\n        const computedIndex = (MML.EQUAL_TEMPERAMENT * (octave - 1)) + index;\n\n        return (computedIndex >= 0) ? computedIndex : -1;\n    };\n\n    /**\n     * This class (static) method computes frequency from the index that corresponds to the 12 equal temperament.\n     * @param {number} index This argument is the index that corresponds to the 12 equal temperament.\n     *     For example, This value is between 0 and 88 in the case of piano.\n     * @return {number} This is returned as frequency.\n     */\n    static computeFrequency = index => {\n        // The 12 equal temperament\n        //\n        // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n        //\n        // A * 1.059463 -> A# (half up)\n\n        const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n        const MIN_A           = 27.5;\n\n        return (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : -1;\n    };\n\n    /**\n     * This class (static) method converts string to ASCII string.\n     * @param {string} string This argument is string.\n     * @return {string} This is returned as string that is converted to ASCII string.\n     */\n    static toAscii = string => {\n        let converted = '';\n\n        for (let i = 0, len = string.length; i < len; i++) {\n            const charCode = string.charCodeAt(i);\n\n            if (charCode > 0xFF) {\n                converted += `&#${charCode};`;\n            } else {\n                converted += string.charAt(i);\n            }\n        }\n\n        return converted;\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        // for the array of `OscillatorNode` or `OscillatorModule` or `OneshotModule`\n        this.source = null;\n\n        this.sequences = [];  /** @type {Array.<Array.<object>>} */\n        this.timerids  = [];  /** @type {Array.<number>} */\n        this.prev      = [];  /** @type {Array.<object>} */\n\n        this.callbacks = {\n            'start' : () => {},\n            'stop'  : () => {},\n            'ended' : () => {},\n            'error' : () => {}\n        };\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {MML} This is returned for method chain.\n     */\n    setup(key, value) {\n        if ((arguments.length > 0) && (Object.prototype.toString.call(arguments[0]) === '[object Object]')) {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else if (arguments.length > 1) {\n            const k = String(key).toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method parses MML string.\n     * @param {Array.<OscillatorNode>|OscillatorModule|OneshotModule} source This argument is in order to select sound source.\n     * @param {Array.<string>} mmls This argument is MML strings.\n     * @return {Array.<Array.<object>>} This is returned as array that contains object for playing the MML.\n     */\n    ready(source, mmls) {\n        if (this.source !== null) {\n            this.stop();  // Stop the previous MML\n        }\n\n        // Clear\n        this.sequences.length = 0;\n        this.timerids.length  = 0;\n        this.prev.length      = 0;\n\n        if (Array.isArray(source)) {\n            for (const s of source) {\n                if (!(s instanceof OscillatorNode)) {\n                    return this;\n                }\n            }\n\n            this.source = source;\n        } else if (source instanceof OscillatorNode) {\n            this.source = [source];\n        } else if ((source instanceof OscillatorModule) || (source instanceof OneshotModule)) {\n            this.source = source;\n        } else {\n            return this;\n        }\n\n        if (!Array.isArray(mmls)) {\n            mmls = [mmls];\n        }\n\n        while (mmls.length > 0) {\n            const mml = String(mmls.shift());\n\n            /** @type {Array.<object>}*/\n            const sequences = [];\n\n            const notes = mml.match(MML.REGEXP_MML);\n\n            if (notes === null) {\n                this.callbacks.error(MML.ERROR_STRING, '');\n                return;\n            }\n\n            let indexes     = [];\n            let frequencies = [];\n\n            let start    = 0;\n            let duration = 0;\n            let stop     = 0;\n\n            let currentTime = 0;\n            let timeOf4note = null;\n            let octave      = null;\n\n            while (notes.length > 0) {\n                const note = notes.shift().trim();\n\n                if (MML.REGEXP_TEMPO.test(note)) {\n                    const bpm = parseInt(note.slice(1), 10);\n\n                    if (bpm > 0) {\n                        timeOf4note = MML.ONE_MINUTES / bpm;\n                    } else {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_OCTAVE.test(note)) {\n                    octave = parseInt(note.slice(1), 10);\n\n                    if (octave < 0) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_NOTE.test(note)) {\n                    if (timeOf4note === null) {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n\n                    if (octave === null) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n\n                    const chord = note.match(MML.REGEXP_CHORD)[1];\n\n                    indexes = [];\n\n                    for (let i = 0, len = chord.length; i < len; i++) {\n                        const pitchname = chord.charAt(i);\n\n                        let index = MML.computeIndex(octave, pitchname.toUpperCase());\n\n                        // Half up or Half down (Sharp or Flat) ?\n                        switch (chord.charAt(i + 1)) {\n                            case '#':\n                            case '+':\n                                // Half up (Sharp)\n                                index++;\n                                i++;\n                                break;\n                            case '-':\n                                // Half down (Flat)\n                                index--;\n                                i++;\n                                break;\n                            default:\n                                // Normal (Natural)\n                                break;\n                        }\n\n                        // in the case of chord\n                        if (index >= indexes[0]) {\n                            index -= MML.EQUAL_TEMPERAMENT;\n                        }\n\n                        // Validation\n                        if (index < 0) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        indexes.push(index);\n                    }\n\n                    frequencies = [];\n\n                    for (const index of indexes) {\n                        const frequency = (index !== MML.REST) ? MML.computeFrequency(index) : 0;\n\n                        // Validation\n                        if (frequency === -1) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        frequencies.push(frequency);\n                    }\n\n                    const durations = note.split('&');  // Tie\n\n                    while (durations.length > 0) {\n                        const d = durations.shift().match(MML.REGEXP_DURATION)[1];\n\n                        switch (parseInt(d, 10)) {\n                            case   1:\n                            case   2:\n                            case   4:\n                            case   8:\n                            case  16:\n                            case  32:\n                            case  64:\n                            case 128:\n                            case 256:\n                                const numOf4note = MML.QUARTER_NOTE / parseInt(d, 10);\n\n                                // a dotted note ?\n                                duration += (d.indexOf('.') !== -1) ? ((1.5 * numOf4note) * timeOf4note) : (numOf4note * timeOf4note);\n                                break;\n                            case   6:\n                                // Triplet of half note\n                                duration += (2 * timeOf4note) / 3;\n                                break;\n                            case  12:\n                                // Triplet of quarter note\n                                duration += timeOf4note / 3;\n                                break;\n                            case  18:\n                                // Nonuplet of half note\n                                duration += (2 * timeOf4note) / 9;\n                                break;\n                            case  24:\n                                // Triplet of 8th note\n                                duration += (0.5 * timeOf4note) / 3;\n                                break;\n                            case  36:\n                                // Nonuplet of quarter note\n                                duration += timeOf4note / 9;\n                                break;\n                            case  48:\n                                // Triplet of 16th note\n                                duration += (0.25 * timeOf4note) / 3;\n                                break;\n                            case  72:\n                                // Nonuplet of 8th note\n                                duration += (0.5 * timeOf4note) / 9;\n                                break;\n                            case  96:\n                                // Triplet of 32th note\n                                duration += (0.125 * timeOf4note) / 3;\n                                break;\n                            case 144:\n                                // Nonuplet of 16th note\n                                duration += (0.25 * timeOf4note) / 9;\n                                break;\n                            case 192:\n                                // Triplet of 64th note\n                                duration += (0.0625 * timeOf4note) / 3;\n                                break;\n                            default:\n                                this.callbacks.error(MML.ERROR_NOTE, note);\n                                break;\n                        }\n                    }\n\n                    start = currentTime;\n                    stop  = start + duration;\n\n                    currentTime += duration;\n\n                    sequences.push({\n                        'indexes'     : indexes,\n                        'frequencies' : frequencies,\n                        'start'       : start,\n                        'duration'    : duration,\n                        'stop'        : stop\n                    });\n\n                    duration = 0;\n                }\n            }\n\n            if (sequences.length > 0) {\n                // `start` method gets element by `pop` for performance\n                sequences.reverse();\n\n                this.sequences.push(sequences);\n                this.timerids.push(null);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts the designated MML part. Moreover, this method schedules next sound.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>|Array.<AudioNode>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    start(part, connects, processCallback) {\n        const p = parseInt(part, 10);\n\n        if ((p >= 0) && (p < this.sequences.length)) {\n            if (!Array.isArray(this.sequences[p])) {\n                return this;\n            }\n\n            // End ?\n            if (this.sequences[p].length === 0) {\n                this.stop(processCallback);\n                this.callbacks.ended();\n\n                return this;\n            }\n\n            const sequence = this.sequences[p].pop();\n\n            if (Array.isArray(this.source)) {\n                for (let i = 0, len = this.source.length; i < len; i++) {\n                    let source = this.source[i];\n\n                    const type   = source.type;\n                    const detune = source.detune.value;\n\n                    source = this.context.createOscillator();\n\n                    // for legacy browsers\n                    source.start = source.start || source.noteOn;\n                    source.stop  = source.stop  || source.noteOff;\n\n                    source.type            = type;\n                    source.frequency.value = sequence.frequencies[i];\n                    source.detune.value    = detune;\n\n                    if (Array.isArray(connects)) {\n                        // OscillatorNode (Input) -> AudioNode -> ... -> AudioNode -> AudioDestinationNode (Output)\n                        source.connect(connects[0]);\n\n                        for (let j = 0, num = connects.length; j < num; j++) {\n                            const node = connects[j];\n\n                            if (j < (num - 1)) {\n                                const next = connects[j + 1];\n\n                                if (!((node instanceof AudioNode) && (next instanceof AudioNode))) {\n                                    return this;\n                                }\n\n                                node.connect(next);\n                            } else {\n                                node.connect(this.context.destination);\n                            }\n                        }\n                    } else {\n                        // OscillatorNode (Input) -> AudioDestinationNode (Output)\n                        source.connect(this.context.destination);\n                    }\n\n                    source.start(this.context.currentTime);\n                    source.stop(this.context.currentTime + sequence.duration);\n\n                    this.source[i] = source;\n                }\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OscillatorModule) {\n                this.source.start(sequence.frequencies, connects, processCallback);\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OneshotModule) {\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    if (sequence.indexes[i] !== MML.REST) {\n                        this.source.start(sequence.indexes[i], connects, processCallback);\n                    }\n\n                    this.callbacks.start(sequence, i);\n                }\n            }\n\n            this.timerids[p] = window.setTimeout(() => {\n                if (Array.isArray(this.source)) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.start(sequence, i);\n                    }\n                } else if (this.source instanceof OscillatorModule) {\n                    this.source.stop();\n\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.stop(sequence, i);\n                    }\n                } else if (this.source instanceof OneshotModule) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        if (sequence.indexes[i] !== MML.REST) {\n                            this.source.stop(sequence.indexes[i], processCallback);\n                        }\n\n                        this.callbacks.stop(sequence, i);\n                    }\n                }\n\n                // for `MML#stop`\n                this.prev = sequence;\n\n                // Start next sound by recursive call\n                this.start(p, connects, processCallback);\n            }, (sequence.duration * 1000));\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the all of MML parts.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const sequence = this.prev;\n\n        if (sequence.length === 0) {\n            return this;\n        }\n\n        if (Array.isArray(this.source)) {\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OscillatorModule) {\n            this.source.stop();\n\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OneshotModule) {\n            for (const index of sequence.indexes) {\n                if (index !== MML.REST) {\n                    this.source.stop(index, processCallback);\n                }\n\n                this.callbacks.stop(sequence, index);\n            }\n        }\n\n        for (let i = 0, len = this.timerids.length; i < len; i++) {\n            window.clearTimeout(this.timerids[i]);\n            this.timerids[i] = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the array that contains object for playing the MML.\n     * @param {number} index This argument is required in the case of designating sequence.\n     * @return {Array.<Array.<object>>|Array.<object>}\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sequences.length)) ? this.sequences[i] : this.sequences;\n    }\n\n    /**\n     * This method starts or stops MML according to state.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    toggle(part, connects, processCallback) {\n        if (this.isPaused()) {\n            this.start(part, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the array that is used to play the MML exists.\n     * @return {boolean} If the array exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSequences() {\n        return Array.isArray(this.sequences[0]);\n    }\n\n    /**\n     * This method determines whether the MML is paused.\n     * @return {boolean} If the MML is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        for (const timerid of this.timerids) {\n            if ((timerid === null) || (timerid === undefined)) {\n                // Next timer\n            } else {\n                // Playing the MML\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * This method creates text file for MML.\n     * @param {string} mml This argument is MML string.\n     * @return {string} This is returned as text file that MML is written.\n     */\n    create(mml) {\n        const base64  = window.btoa(MML.toAscii(String(mml)));\n        const dataURL = `data:text/plain;base64,${base64}`;\n\n        return dataURL;\n    }\n\n    /** @override */\n    toString() {\n        return '[MML]';\n    }\n}\n","'use strict';\n\n/**\n * This class defines properties for using Web MIDI API.\n * @constructor\n */\nexport default class MIDI {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.midiAccess = null;  // for the instance of `MIDIAccess`\n        this.inputs     = [];    // for the instances of `MIDIInput`\n        this.outputs    = [];    // for the instances of `MIDIOutput`\n    }\n\n    /**\n     * This method invokes `requestMIDIAccess` and gets objects for using Web MIDI API.\n     * @param {boolean} sysex This argument is in order to select whether using system exclusive message.\n     * @param {function} successCallback This argument is invoked when `requestMIDIAccess` succeeds.\n     * @param {function} errorCallback This argument is invoked when `requestMIDIAccess` fails.\n     * @return {MIDI} This is returned for method chain.\n     */\n    setup(sysex, successCallback, errorCallback) {\n        if (!navigator.requestMIDIAccess) {\n            throw new Error('Cannot use Web MIDI API.');\n        }\n\n        navigator.requestMIDIAccess({ sysex : Boolean(sysex) }).then(midiAccess => {\n            this.midiAccess = midiAccess;\n\n            if (Object.prototype.toString.call(midiAccess) === '[object Function]') {\n                // Legacy Chrome\n                this.inputs  = midiAccess.inputs();\n                this.outputs = midiAccess.outputs();\n            } else {\n                // Chrome 39 and later\n                const inputIterator  = midiAccess.inputs.values();\n                const outputIterator = midiAccess.outputs.values();\n\n                for (let i = inputIterator.next(); !i.done; i = inputIterator.next()) {\n                    this.inputs.push(i.value);\n                }\n\n                for (let o = outputIterator.next(); !o.done; o = outputIterator.next()) {\n                    this.outputs.push(o.value);\n                }\n            }\n\n            if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                successCallback(this.midiAccess, this.inputs, this.outputs);\n            }\n        }).catch(error => {\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(error);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MIDIAccess`.\n     * @return {MIDIAccess}\n     */\n    get() {\n        return this.midiAccess;\n    }\n\n    /** @override */\n    toString() {\n        return '[MIDI]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport OscillatorModule from '../OscillatorModule';\nimport OneshotModule from '../OneshotModule';\nimport AudioModule from '../AudioModule';\nimport MediaModule from '../MediaModule';\nimport StreamModule from '../StreamModule';\n\n/**\n * This class defines properties for mixing sound sources that is defined in this library.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class MixerModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        /** @type {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} */\n        this.sources = [];\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method mixes sound source.\n     * @param {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} sources This argument is the array of sound source that is defined by this library.\n     * @return {MixerModule} This is returned for method chain.\n     */\n    mix(sources) {\n        if (!Array.isArray(sources)) {\n            sources = [sources];\n        }\n\n        this.sources = sources;\n\n        for (const source of this.sources) {\n            if (!((source instanceof OscillatorModule) || (source instanceof OneshotModule) || (source instanceof AudioModule) || (source instanceof MediaModule) || (source instanceof StreamModule))) {\n                return this;\n            }\n\n            const stopTime = this.context.currentTime;\n\n            this.off(stopTime, false);\n\n            source.analyser.stop('time');\n            source.analyser.stop('fft');\n            source.isAnalyser = false;\n\n            source.recorder.stop();\n            source.session.close();\n\n            // ScriptProcessorNode (each sound source) -> ScriptProcessorNode (Mix sound sources)\n            source.processor.disconnect(0);\n            source.processor.connect(this.processor);\n        }\n\n        // (... ->) ScriptProcessorNode (Mix sound sources) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor);\n\n        const startTime = this.context.currentTime;\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.processor.onaudioprocess = event => {\n            const inputLs  = event.inputBuffer.getChannelData(0);\n            const inputRs  = event.inputBuffer.getChannelData(1);\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            // Stop ?\n            let isStop = false;\n\n            for (const source of sources) {\n                if ((source instanceof OscillatorModule) && source.envelopegenerator.isStop()) {\n                    isStop = true;\n                } else if ((source instanceof OneshotModule) && source.isStop) {\n                    isStop = true;\n                } else if ((source instanceof AudioModule) && source.paused) {\n                    isStop = true;\n                } else if ((source instanceof MediaModule) && source.media.paused) {\n                    isStop = true;\n                } else if ((source instanceof StreamModule) && source.isStop) {\n                    isStop = true;\n                }\n            }\n\n            if (isStop) {\n                const stopTime = this.context.currentTime;\n\n                this.on(stopTime, true);\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n\n                // Stop `onaudioprocess` event\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n            } else {\n                outputLs.set(inputLs);\n                outputRs.set(inputRs);\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of sound source that is mixed in this class.\n     * @param {number} index This argument is required in the case of designating sound source.\n     * @return {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>|OscillatorModule|OneshotModule|AudioModule|MediaModule|StreamModule}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /** @override */\n    toString() {\n        return '[MixerModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Noise Gate.\n * @constructor\n */\nexport default class NoiseGate {\n    constructor() {\n        this.level = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|NoiseGate} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'level':\n                    if (value === undefined) {\n                        return this.level;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.level = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method detects background noise and removes this.\n     * @param {number} data This argument is amplitude (between -1 and 1).\n     * @return {number} This is returned as 0 or the raw data.\n     */\n    start(data) {\n        const d = Math.abs(parseFloat(data));\n\n        // data : The amplitude is equal to argument.\n        // 0    : Because signal is detected as background noise, the amplitude is 0.\n        return (d > this.level) ? data : 0;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule NoiseGate]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Vocal Canceler.\n * @constructor\n */\nexport default class VocalCanceler {\n    constructor() {\n        this.depth = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|VocalCanceler} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method removes vocal part in the played audio.\n     * @param {number} dataL This argument is gain level for Left channel.\n     * @param {number} dataR This argument is gain level for Right channel.\n     * @return {number} This is returned as audio data except vocal part.\n     */\n    start(dataL, dataR) {\n        return dataL - (this.depth * dataR);\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule VocalCanceler]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Glide.\n * @constructor\n */\nexport default class Glide {\n    static LINEAR      = 'linear';\n    static EXPONENTIAL = 'exponential';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.frequencies = {\n            'start' : -1,  // Abnormal value for the 1st sound\n            'end'   : 0\n        };\n\n        this.time = 0;             // Glide time\n        this.type = Glide.LINEAR;  // either 'linear' or 'exponential'\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Glide} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'time':\n                    if (value === undefined) {\n                        return this.time;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.time = v;\n                    }\n\n                    break;\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Glide.LINEAR) || (v === Glide.EXPONENTIAL)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets frequencies for Glide.\n     * @param {number} frequency This argument is the frequency at which glide ends.\n     * @return {Glide} This is returned for method chain.\n     */\n    ready(frequency) {\n        this.frequencies.end = frequency;\n\n        const diff = (this.frequencies.start === -1) ? 0 : (this.frequencies.end - this.frequencies.start);\n\n        if ((this.frequencies.start === -1) || (this.time === 0) || (diff === 0)) {\n            // The 1st sound or Glide OFF or The same sound\n            this.frequencies.start = this.frequencies.end;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts Glide.\n     * @param {OscillatorNode} oscillator This argument is the instance of `OscillatorNode`.\n     * @param {number} startTime This argument is the start time of Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    start(oscillator, startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        const t0 = s;\n        const t1 = t0 + this.time;\n\n        // Start Glide\n        oscillator.frequency.cancelScheduledValues(t0);\n        oscillator.frequency.setValueAtTime(this.frequencies.start, t0);\n        oscillator.frequency[`${this.type}RampToValueAtTime`](this.frequencies.end, t1);\n\n        return this;\n    }\n\n    /**\n     * This method stops Glide. Moreover, This method prepares for next Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    stop() {\n        // Stop Glide or on the way of Glide\n        this.frequencies.start = this.frequencies.end;\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Glide]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for the instance of `OscillatorNode`.\n * @constructor\n */\nexport default class Oscillator {\n    // 1 Octave = 1200 cent\n    static OCTAVE = 1200;\n\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {boolean} state This argument is initial state.\n     */\n    constructor(context, state) {\n        this.isActive = state;\n\n        this.context = context;\n\n        this.source = context.createOscillator();\n\n        // for legacy browsers\n        this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n        this.source.start           = this.source.start           || this.source.noteOn;\n        this.source.stop            = this.source.stop            || this.source.noteOff;\n\n        this.volume = context.createGain();\n\n        // in order to not call in duplicate `start` or `stop`  method in the instance of `OscillatorNode`\n        this.isStop = true;\n\n        this.octave  = 0;\n        this.fine    = 0;\n        this.customs = {\n            'real' : new Float32Array([0, 1]),\n            'imag' : new Float32Array([0, 1])\n        };\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|Oscillator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.source.type;\n                    }\n\n                    if (Object.prototype.toString.call(value) !== '[object Object]') {\n                        v = String(value).toLowerCase();\n\n                        if (v in Oscillator.WAVE_TYPES) {\n                            this.source.type = (typeof this.source.type === 'string') ? v : Oscillator.WAVE_TYPES[v];\n                        }\n                    } else {\n                        // Custom wave\n                        if (('real' in value) && ('imag' in value)) {\n                            let reals = null;\n                            let imags = null;\n\n                            if (value.real instanceof Float32Array) {\n                                reals = value.real;\n                            } else if (Array.isArray(value.real)) {\n                                reals = new Float32Array(value.real);\n                            }\n\n                            if (value.imag instanceof Float32Array) {\n                                imags = value.imag;\n                            } else if (Array.isArray(value.imag)) {\n                                imags = new Float32Array(value.imag);\n                            }\n\n                            if ((reals instanceof Float32Array) && (imags instanceof Float32Array)) {\n                                const MAX_SIZE = 4096;  // This size is defined by specification\n\n                                if (reals.length > MAX_SIZE) {reals = reals.subarray(0, MAX_SIZE);}\n                                if (imags.length > MAX_SIZE) {imags = imags.subarray(0, MAX_SIZE);}\n\n                                // The 1st value is fixed by 0 (This is is defined by specification)\n                                if (reals[0] !== 0) {reals[0] = 0;}\n                                if (imags[0] !== 0) {imags[0] = 0;}\n\n                                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                                this.source.setPeriodicWave(periodicWave);\n                                this.customs.real = reals;\n                                this.customs.imag = imags;\n                            }\n                        }\n                    }\n\n                    break;\n                case 'octave':\n                    if (value === undefined) {\n                        return this.octave;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -4800 / Oscillator.OCTAVE;\n                    max =  4800 / Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.octave = v;\n                        this.source.detune.value = this.fine + (v * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'fine':\n                    if (value === undefined) {\n                        return this.fine;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -Oscillator.OCTAVE;\n                    max =  Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.fine = v;\n                        this.source.detune.value = v + (this.octave * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'volume':\n                case 'gain'  :\n                    if (value === undefined) {\n                        return this.volume.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.volume.gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    ready(output) {\n        if (this.isActive) {\n            // for saving value\n            const params = {\n                'type'      : this.source.type,\n                'frequency' : this.source.frequency.value,\n                'detune'    : this.source.detune.value\n            };\n\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.source.disconnect(0);\n            }\n\n            this.source = this.context.createOscillator();\n\n            // for legacy browsers\n            this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n            this.source.start           = this.source.start           || this.source.noteOn;\n            this.source.stop            = this.source.stop            || this.source.noteOff;\n\n            if (params.type === 'custom') {\n                // Custom wave\n                const reals        = this.customs.real;\n                const imags        = this.customs.imag;\n                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                this.source.setPeriodicWave(periodicWave);\n            } else {\n                this.source.type = params.type;\n            }\n\n            this.source.frequency.value = params.frequency;\n            this.source.detune.value    = params.detune;\n\n            this.volume.connect(output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts sound.\n     * @param {number} startTime This argument is the start time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive) {\n            this.source.start(startTime);\n            this.isStop = false;\n        } else {\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.isStop = true;\n            }\n\n            this.source.disconnect(0);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops sound.\n     * @param {number} stopTime This argument is the stop time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        if (!this.isStop) {\n            this.source.stop(stopTime);\n            this.source.disconnect(0);\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Oscillator} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `OscillatorNode`.\n     * @return {OscillatorNode}\n     */\n    get() {\n        return this.source;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Oscillator]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Envelope Generator.\n * @constructor\n */\nexport default class EnvelopeGenerator {\n    static MIN_GAIN = 1e-3;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        /** @type {Array.<GainNode>} */\n        this.generators = [];\n\n        // for `GainNode`\n        this.activeIndexes = [];\n        this.activeCounter = 0;\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 0.5;\n        this.release = 1.0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|EnvelopeGenerator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects the instance of `AudioNode`.\n     * @param {number} index This argument is in order to select the instance of `GainNode` that is Envelope Generator.\n     * @param {AudioNode} input This argument is the instance of `AudioNode` as input.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    ready(index, input, output) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        input.connect(this.generators[i]);\n        this.generators[i].connect(output);\n\n        this.activeIndexes[i] = i;\n        this.activeCounter++;\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack -> Decay -> Sustain).\n     * @param {number} startTime This argument is the start time of Attack.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    start(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Attack -> Decay -> Sustain\n        const t0      = s;\n        const t1      = t0 + this.attack;\n        const t2      = this.decay;\n        const t2Value = this.sustain;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // Start from `gain.value = 0`\n            this.generators[activeIndex].gain.cancelScheduledValues(t0);\n            this.generators[activeIndex].gain.setValueAtTime(0, t0);\n\n            // Attack : `gain.value` increases linearly until assigned time (t1)\n            this.generators[activeIndex].gain.linearRampToValueAtTime(1, t1);\n\n            // Decay -> Sustain : `gain.value` gradually decreases to value of Sustain during of Decay time (t2) from assigned time (t1)\n            this.generators[activeIndex].gain.setTargetAtTime(t2Value, t1, t2);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack or Decay or Sustain -> Release).\n     * @param {number} stopTime This argument is the start time of Release.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        let s = parseFloat(stopTime) - this.release;\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Sustain -> Release\n        const t3 = s;\n        const t4 = this.release;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // in the case of mouseup on the way of Decay\n            this.generators[activeIndex].gain.cancelScheduledValues(t3);\n            this.generators[activeIndex].gain.setValueAtTime(this.generators[activeIndex].gain.value, t3);\n\n            // Release : `gain.value` gradually decreases to 0 during of Release time (t4) from assigned time (t3)\n            this.generators[activeIndex].gain.setTargetAtTime(0, t3, t4);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {GainNode} This is returned as the instance of `GainNode` for Envelope Generator.\n     */\n    getGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        return this.generators[i];\n    }\n\n    /**\n     * This method sets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    setGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        this.generators[i] = this.context.createGain();\n\n        // for legacy browsers\n        this.generators[i].gain.setTargetAtTime = this.generators[i].gain.setTargetAtTime || this.generators[i].gain.setTargetValueAtTime;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the all of gain schedulings have ended.\n     * @return {boolean} If the all of gain schedulings have ended, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStop() {\n        let counter = 0;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            if (this.generators[activeIndex].gain.value > EnvelopeGenerator.MIN_GAIN) {\n                return false;\n            }\n\n            counter++;\n\n            // the all of schedulings are stopped ?\n            if (counter === this.activeCounter) {\n                return true;\n            }\n        }\n    }\n\n    /**\n     * This method clears variables for managing the instance of `GainNode`.\n     * @param {boolean} isDisconnect This argument is in order to determine whether disconnect `AudioNode`.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    clear(isDisconnect) {\n        this.activeIndexes.length = 0;\n        this.activeCounter = 0;\n\n        for (const generator of this.generators) {\n            generator.gain.cancelScheduledValues(this.context.currentTime);\n            generator.gain.value = 1;\n\n            if (isDisconnect) {\n                generator.disconnect(0);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'attack'  : this.attack,\n            'decay'   : this.decay,\n            'sustain' : this.sustain,\n            'release' : this.release\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule EnvelopeGenerator]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines property for audio listener.\n * These properties relate to properties of `PannerNode`.\n * @constructor\n */\nexport default class Listener {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        // the instance of `AudioListener`\n        this.listener = context.listener;\n\n        // Set default value\n        this.positions = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.fronts    = { 'x' : 0, 'y' : 0, 'z' : -1 };\n        this.ups       = { 'x' : 0, 'y' : 1, 'z' : 0 };\n\n        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Listener} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'fx':\n                case 'fy':\n                case 'fz':\n                    if (value === undefined) {\n                        return this.fronts[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.fronts[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                case 'ux':\n                case 'uy':\n                case 'uz':\n                    if (value === undefined) {\n                        return this.ups[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.ups[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'positions' : this.positions,\n            'fronts'    : this.fronts,\n            'ups'       : this.ups\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Listener]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Panner extends Effector {\n    static PANNING_MODELS = {\n        'equalpower' : 0,\n        'HRTF'       : 1\n    };\n\n    static DISTANCE_MODELS = {\n        'linear'      : 0,\n        'inverse'     : 1,\n        'exponential' : 2\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createPanner();\n\n        this.positions    = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.orientations = { 'x' : 1, 'y' : 0, 'z' : 0 };\n\n        this.panner.refDistance   = 1;\n        this.panner.maxDistance   = 10000;\n        this.panner.rolloffFactor = 1;\n\n        this.panner.coneInnerAngle = 360;\n        this.panner.coneOuterAngle = 360;\n        this.panner.coneOuterGain  = 0;\n\n        this.panner.panningModel  = (typeof this.panner.panningModel  === 'string') ? 'HRTF'    : (this.panner.HRTF || 1);\n        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? 'inverse' : (this.panner.INVERSE_DISTANCE || 1);\n\n        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n\n        // `Panner` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'ox':\n                case 'oy':\n                case 'oz':\n                    if (value === undefined) {\n                        return this.orientations[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.orientations[k.charAt(1)] = v;\n                        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n                    }\n\n                    break;\n                case 'refdistance':\n                    if (value === undefined) {\n                        return this.panner.refDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.panner.refDistance = v;\n                    }\n\n                    break;\n                case 'maxdistance':\n                    if (value === undefined) {\n                        return this.panner.maxDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.panner.maxDistance = v;\n                    }\n\n                    break;\n                case 'rollofffactor':\n                    if (value === undefined) {\n                        return this.panner.rolloffFactor;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.rolloffFactor = v;\n                    }\n\n                    break;\n                case 'coneinnerangle':\n                    if (value === undefined) {\n                        return this.panner.coneInnerAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneInnerAngle = v;\n                    }\n\n                    break;\n                case 'coneouterangle':\n                    if (value === undefined) {\n                        return this.panner.coneOuterAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterAngle = v;\n                    }\n\n                    break;\n                case 'coneoutergain':\n                    if (value === undefined) {\n                        return this.panner.coneOuterGain;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterGain = v;\n                    }\n\n                    break;\n                case 'panningmodel':\n                    if (value === undefined) {\n                        return this.panner.panningModel;\n                    }\n\n                    v = /HRTF/i.test(value) ? String(value).toUpperCase() : String(value).toLowerCase();\n\n                    if (v in Panner.PANNING_MODELS) {\n                        this.panner.panningModel = (typeof this.panner.panningModel === 'string') ? v : Panner.PANNING_MODELS[v];\n                    }\n\n                    break;\n                case 'distancemodel':\n                    if (value === undefined) {\n                        return this.panner.distanceModel;\n                    }\n\n                    v = String(value).replace(/-/g, '').toLowerCase();\n\n                    if (v in Panner.DISTANCE_MODELS) {\n                        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? v : Panner.DISTANCE_MODELS[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> PannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'          : this.isActive,\n            'positions'      : this.positions,\n            'orientations'   : this.orientations,\n            'refDistance'    : this.panner.refDistance,\n            'maxDistance'    : this.panner.maxDistance,\n            'rolloffFactor'  : this.panner.rolloffFactor,\n            'coneInnerAngle' : this.panner.coneInnerAngle,\n            'coneOuterAngle' : this.panner.coneOuterAngle,\n            'coneOuterGain'  : this.panner.coneOuterGain,\n            'panningModel'   : this.panner.panningModel,\n            'distanceModel'  : this.panner.distanceModel\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Panner]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Reverb extends Effector {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.rirs      = [];\n        this.convolver = context.createConvolver();\n        this.dry       = context.createGain();\n        this.wet       = context.createGain();\n        this.tone      = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.dry.gain.value       = 1;\n        this.wet.gain.value       = 0;\n        this.tone.type            = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value = 350;\n        this.tone.Q.value         = Math.SQRT1_2;\n        this.tone.gain.value      = 0;  // Not used\n\n        // `Reverb` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.convolver.buffer;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = this.rirs.length - 1;\n\n                    if (value === null) {\n                        this.convolver.buffer = null;\n\n                        // If `buffer` in `ConvolverNode` is `null` after setting the instance of `AudioBuffer`, `Reverb` is not OFF.\n                        // Therefore, `Reverb` is OFF by disconnecting nodes.\n                        this.input.disconnect(0);\n                        this.input.connect(this.output);\n                    } else if ((v >= min) && (v <= max)) {\n                        this.convolver.buffer = this.rirs[v];\n                        this.connect();\n                    }\n\n                    break;\n                case 'dry':\n                case 'wet':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                case 'rirs':\n                    return this.rirs;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.convolver.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> ConvolverNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.convolver);\n            this.convolver.connect(this.wet);\n            this.wet.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets instance of `AudioBuffer` to `ConvolverNode`.\n     * @param {AudioBuffer|ArrayBuffer} impulse This argument is in order to convolve impulse response.\n     *     This argument is the instance of `AudioBuffer` or `ArrayBuffer` for impulse response.\n     * @param {function} errorCallback This argument is in order to be invoked when error occurs.\n     * @return {Reverb} This is returned for method chain.\n     * @override\n     */\n    start(impulse, errorCallback) {\n        if ((impulse instanceof AudioBuffer) || (impulse === null)) {\n            this.convolver.buffer = impulse;\n            this.rirs.push(impulse);  // Add to preset\n        } else if (impulse instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.convolver.buffer = buffer;\n                this.rirs.push(buffer);  // Add to preset\n            };\n\n            if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n                errorCallback = () => {};\n            }\n\n            this.context.decodeAudioData(impulse, successCallback, errorCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax for Revreb presets.\n     * @param {Array.<string>|Array.<AudioBuffer>} rirs This argument is either URLs or the instances of `AudioBuffer` for impulse response.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked when the creating the instances of `AudioBuffer` was completed.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {Reverb} This is returned for method chain.\n     */\n    preset(rirs, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('rirs' in properties) {\n                rirs = properties.rirs;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(rirs)) {\n            rirs = [rirs];\n        }\n\n        this.rirs = new Array(rirs.length);\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogresss = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.rirs[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (let i = 0, len = this.rirs.length; i < len; i++) {\n                            if (this.rirs[i] === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, Reverb.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = rirs.length; i < len; i++) {\n            if (typeof rirs[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(rirs[i], i);\n            } else if (rirs[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.rirs[i] = rirs[i];\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'dry'   : this.dry.gain.value,\n            'wet'   : this.wet.gain.value,\n            'tone'  : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Reverb]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Delay extends Effector {\n    static MAX_DELAY_TIME = 5;  // Max delay time is 5000 [ms]\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay(Delay.MAX_DELAY_TIME);\n        this.dry      = context.createGain();\n        this.wet      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.dry.gain.value        = 1;\n        this.wet.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n\n        // `Delay` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = Delay.MAX_DELAY_TIME;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                    }\n\n                    break;\n                case 'dry'     :\n                case 'wet'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Wet) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.wet);\n            this.wet.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'dry'      : this.dry.gain.value,\n            'wet'      : this.wet.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Delay]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Chorus extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Chorus` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (elayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Chorus]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Flanger extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Flanger` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (delayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Flanger]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Phaser extends Effector {\n    static MAXIMUM_STAGES = 24;  // The maximum number of All-Pass Filters\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.numberOfStages = 12;  // The default number of All-Pass Filters\n        this.filters        = new Array(Phaser.MAXIMUM_STAGES);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i]                 = context.createBiquadFilter();\n            this.filters[i].type            = (typeof this.filters[i].type === 'string') ? 'allpass' : (this.filters[i].ALLPASS || 7);\n            this.filters[i].frequency.value = 350;\n            this.filters[i].Q.value         = 1;\n            this.filters[i].gain.value      = 0;  // Not used\n        }\n\n        this.mix      = context.createGain();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.depth.gain.value    = 0;\n        this.rate.value          = 0;\n        this.mix.gain.value      = 0;\n        this.feedback.gain.value = 0;\n        this.depthRate           = 0;\n\n        // `Phaser` is not connected by default\n        this.state(false);\n\n        // LFO\n        // GainNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.depth.connect(this.filters[i].frequency);\n        }\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'stage':\n                    if (value === undefined) {\n                        return this.numberOfStages;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case  0:\n                        case  2:\n                        case  4:\n                        case  8:\n                        case 12:\n                        case 24:\n                            this.numberOfStages = v;\n                            this.connect();\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filters[0].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[i].frequency.value = v;\n                        }\n\n                        this.depth.gain.value = this.filters[0].frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.filters[0].Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[0].Q.value = v;\n                        }\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.filters[0].frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i].disconnect(0);\n        }\n\n        this.mix.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive && (this.numberOfStages > 0)) {\n            // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.filters[0]);\n\n            for (let i = 0; i < this.numberOfStages; i++) {\n                if (i < (this.numberOfStages - 1)) {\n                    this.filters[i].connect(this.filters[i + 1]);\n                } else {\n                    this.filters[i].connect(this.mix);\n                    this.mix.connect(this.output);\n\n                    // Feedback\n                    // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Feedback) -> BiquadFilterNode (All-Pass Filter x N) ...\n                    this.filters[i].connect(this.feedback);\n                    this.feedback.connect(this.filters[0]);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n           // Connect nodes again\n           this.lfo.connect(this.depth);\n\n           for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n               this.depth.connect(this.filters[i].frequency);\n           }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'stage'     : this.numberOfStages,\n            'frequency' : this.filters[0].frequency.value,\n            'resonance' : this.filters[0].Q.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'mix'       : this.mix.gain.value,\n            'feedback'  : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Phaser]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Ringmodulator extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 0;  // 0 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 1;\n        this.rate.value       = 0;\n\n        // `Ringmodulator` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Ringmodulator]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Tremolo extends Effector {\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Tremolo` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'wave':\n                    if (value === undefined) {\n                        return this.lfo.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Tremolo.WAVE_TYPES) {\n                        this.lfo.type = (typeof this.lfo.type === 'string') ? v : Tremolo.WAVE_TYPES[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value,\n            'wave'  : this.lfo.type\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Tremolo]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class AutopannerFallback extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitudeL = context.createGain();\n        this.amplitudeR = context.createGain();\n        this.splitter   = context.createChannelSplitter(2);\n        this.merger     = context.createChannelMerger(2);\n\n        this.amplitudeL.gain.value = 1;  // 1 +- depth\n        this.amplitudeR.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameters\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `AutopannerFallback` is not connected by default\n        this.state(false);\n\n        // LFO\n        this.lfoSplitter = context.createChannelSplitter(2);\n\n        // OscillatorNode (LFO) -> GainNode (Depth) -> ScriptProcessorNode -> ChannelSplitterNode -> AudioParam (gain) (L) / (R)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.processor);\n        this.processor.connect(this.lfoSplitter);\n        this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n        this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitudeL.disconnect(0);\n        this.amplitudeR.disconnect(0);\n        this.splitter.disconnect(0);\n        this.splitter.disconnect(1);\n        this.merger.disconnect(0);\n\n        if (this.isActive) {\n            // GainNode (Input) -> ChannelSplitterNode -> GainNode (L) / (R) -> ChannelMergerNode -> GainNode (Output)\n            this.input.connect(this.splitter);\n            this.splitter.connect(this.amplitudeL, 0, 0);\n            this.splitter.connect(this.amplitudeR, 1, 0);\n            this.amplitudeL.connect(this.merger, 0, 0);\n            this.amplitudeR.connect(this.merger, 0, 1);\n            this.merger.connect(this.output);\n        } else {\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                const inputs   = event.inputBuffer.getChannelData(0);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                if (this.isActive && (this.depth.gain.value !== 0) && (this.rate.value !== 0)) {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] =  inputs[i];\n                        outputRs[i] = -inputs[i];\n                    }\n                } else {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = 0;\n                        outputRs[i] = 0;\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.processor);\n            this.processor.connect(this.lfoSplitter);\n            this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n            this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule AutopannerFallback]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Autopanner extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createStereoPanner();\n\n        // Initialize parameters\n        this.panner.pan.value = 0;\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Autopanner` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (pan)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.panner.pan);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                       return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                       return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> StereoPannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.panner.pan);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Autopanner]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Filter extends Effector {\n    // for legacy browsers\n    static FILTER_TYPES = {\n        'lowpass'   : 0,\n        'highpass'  : 1,\n        'bandpass'  : 2,\n        'lowshelf'  : 3,\n        'highshelf' : 4,\n        'peaking'   : 5,\n        'notch'     : 6,\n        'allpass'   : 7\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.filter = context.createBiquadFilter();\n\n        // for legacy browsers\n        this.filter.frequency.setTargetAtTime = this.filter.frequency.setTargetAtTime || this.filter.frequency.setTargetValueAtTime;\n\n        // Initialize parameters\n        this.filter.type            = (typeof this.filter.type === 'string') ? 'lowpass' : (this.filter.LOWPASS || 0);\n        this.filter.frequency.value = 350;\n        this.filter.Q.value         = 1;\n        this.filter.gain.value      = 0;\n\n        this.maxFrequency = this.filter.frequency.value;\n        this.range        = 0.1;  // 10% -> between `this.maxFrequency * 0.1` and `this.maxFrequency`\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 1.0;\n        this.release = 1.0;\n\n        // `Filter` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.filter.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Filter.FILTER_TYPES) {\n                        this.filter.type = (typeof this.filter.type === 'string') ? v : Filter.FILTER_TYPES[v];\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filter.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.maxFrequency           = v;\n                        this.filter.frequency.value = v;\n                    }\n\n                    break;\n                case 'gain':\n                    if (value === undefined) {\n                        return this.filter.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.gain.value = v;\n                    }\n\n                    break;\n                case 'q':\n                    if (value === undefined) {\n                        return this.filter.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.Q.value = v;\n                    }\n\n                    break;\n                case 'range':\n                    if (value === undefined) {\n                        return this.range;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.range= v;\n                    }\n\n                    break;\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.filter.disconnect(0);\n\n        if (this.isActive) {\n            // Effector ON\n\n            // GainNode (Input) -> BiquadFilterNode -> GainNode (Output)\n            this.input.connect(this.filter);\n            this.filter.connect(this.output);\n        } else {\n            // Effector OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            const t0      = s;\n            const t1      = t0 + this.attack;\n            const t2      = this.decay;\n            const t2Value = this.sustain * this.maxFrequency;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t0);\n            this.filter.frequency.setValueAtTime(minFrequnecy, t0);\n            this.filter.frequency.linearRampToValueAtTime(this.maxFrequency, t1);  // Attack\n            this.filter.frequency.setTargetAtTime(t2Value, t1, t2);  // Decay -> Sustain\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime) {\n        if (this.isActive) {\n            let s = parseFloat(stopTime) - this.release;\n\n           if (isNaN(s) || (s < this.context.currentTime)) {\n               s = this.context.currentTime;\n           }\n\n            const t3 = s;\n            const t4 = this.release;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t3);\n            this.filter.frequency.setValueAtTime(this.filter.frequency.value, t3);\n            this.filter.frequency.setTargetAtTime(minFrequnecy, t3, t4);  // Sustain -> Release\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'type'      : this.filter.type,\n            'frequency' : this.filter.frequency.value,\n            'Q'         : this.filter.Q.value,\n            'gain'      : this.filter.gain.value,\n            'range'     : this.range,\n            'attack'    : this.attack,\n            'decay'     : this.decay,\n            'sustain'   : this.sustain,\n            'release'   : this.release\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Filter]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Equalizer extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     **/\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.bass     = context.createBiquadFilter();\n        this.middle   = context.createBiquadFilter();\n        this.treble   = context.createBiquadFilter();\n        this.presence = context.createBiquadFilter();\n\n        // Set filter type\n        this.bass.type     = (typeof this.bass.type     === 'string') ? 'lowshelf'  : (this.bass.LOWSHELF      || 3);\n        this.middle.type   = (typeof this.middle.type   === 'string') ? 'peaking'   : (this.middle.PEAKING     || 5);\n        this.treble.type   = (typeof this.treble.type   === 'string') ? 'peaking'   : (this.treble.PEAKING     || 5);\n        this.presence.type = (typeof this.presence.type === 'string') ? 'highshelf' : (this.presence.HIGHSHELF || 4);\n\n        // Set cutoff frequency\n        this.bass.frequency.value     =  500;  // 500 Hz\n        this.middle.frequency.value   = 1000;  // 1 kHz\n        this.treble.frequency.value   = 2000;  // 2 kHz\n        this.presence.frequency.value = 4000;  // 4 kHz\n\n        // Set Q\n        // this.bass.Q.value     = Math.SQRT1_2;  // Not used\n        this.middle.Q.value   = Math.SQRT1_2;\n        this.treble.Q.value   = Math.SQRT1_2;\n        // this.presence.Q.value = Math.SQRT1_2;  // Not used\n\n        // Set Gain\n        this.bass.gain.value     = 0;\n        this.middle.gain.value   = 0;\n        this.treble.gain.value   = 0;\n        this.presence.gain.value = 0;\n\n        // `Equalizer` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'bass'    :\n                case 'middle'  :\n                case 'treble'  :\n                case 'presence':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.bass.disconnect(0);\n        this.middle.disconnect(0);\n        this.treble.disconnect(0);\n        this.presence.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Bass) -> BiquadFilterNode (Middle) -> BiquadFilterNode (Treble) -> BiquadFilterNode (Presence) -> GainNode (Output)\n            this.input.connect(this.bass);\n            this.bass.connect(this.middle);\n            this.middle.connect(this.treble);\n            this.treble.connect(this.presence);\n            this.presence.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'bass'     : this.bass.gain.value,\n            'middle'   : this.middle.gain.value,\n            'treble'   : this.treble.gain.value,\n            'presence' : this.presence.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Equalizer]';\n    }\n}\n\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Wah extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.lowpass = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.lowpass.type            = (typeof this.lowpass.type === 'string') ? 'lowpass' : (this.lowpass.LOWPASS || 0);\n        this.lowpass.frequency.value = 350;\n        this.lowpass.Q.value         = 1;\n        this.lowpass.gain.value      = 0;  // Not used\n\n        this.depth.gain.value  = 0;\n        this.rate.value        = 0;\n        this.depthRate         = 0;\n\n        // `Wah` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.lowpass.frequency);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.lowpass.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.frequency.value = v;\n                        this.depth.gain.value        = this.lowpass.frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.lowpass.frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.lowpass.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.Q.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.lowpass.frequency);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.lowpass.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Low-Pass Filter) -> GainNode (Output)\n            this.input.connect(this.lowpass);\n            this.lowpass.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'cutoff'    : this.lowpass.frequency.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'resonance' : this.lowpass.Q.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Wah]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Distortion extends Effector {\n    static CLEAN      = 'clean';\n    static CRUNCH     = 'crunch';\n    static OVERDRIVE  = 'overdrive';\n    static DISTORTION = 'distortion';\n    static FUZZ       = 'fuzz';\n\n    static AMOUNTS = {\n        'CLEAN'      : 0.0,\n        'CRUNCH'     : 0.5,\n        'OVERDRIVE'  : 0.7,\n        'DISTORTION' : 0.8,\n        'FUZZ'       : 0.9\n    };\n\n    /**\n     * This class (static) method creates the instance of `Float32Array` for distortion.\n     * @param {number} amount This argument is the depth of distortion.\n     * @param {number} numberOfSamples This argument is the size of `Float32Array`.\n     * @return {Float32Array|null} This is `curve` property in `WaveShaperNode`.\n     */\n    static createCurve = (amount, numberOfSamples) => {\n        if ((amount > 0) && (amount < 1)) {\n            const curves = new Float32Array(numberOfSamples);\n\n            const k = (2 * amount) / (1 - amount);\n\n            for (let i = 0; i < numberOfSamples; i++) {\n                // LINEAR INTERPOLATION: x := (c - a) * (z - y) / (b - a) + y\n                // a = 0, b = 2048, z = 1, y = -1, c = i\n                const x = (((i - 0) * (1 - (-1))) / (numberOfSamples - 0)) + (-1);\n                curves[i] = ((1 + k) * x) / (1 + k * Math.abs(x));\n            }\n\n            return curves;\n        }\n\n        return null;  // Clean sound (default value)\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.distortion = context.createWaveShaper();\n        this.drive      = context.createGain();\n        this.color      = context.createBiquadFilter();\n        this.tone       = context.createBiquadFilter();\n\n        // Distortion type\n        this.type = Distortion.CLEAN;\n\n        // for creating curve\n        this.numberOfSamples = 4096;\n\n        // Initialize parameters\n        this.drive.gain.value      = 1;\n        this.color.type            = (typeof this.color.type === 'string') ? 'bandpass' : (this.color.BANDPASS || 2);\n        this.color.frequency.value = 350;\n        this.color.Q.value         = Math.SQRT1_2;\n        this.color.gain.value      = 0;  // Not used\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n\n        // `Distortion` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else  {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'curve':\n                    if (value === undefined) {\n                        return this.distortion.curve;\n                    }\n\n                    let curve = null;\n\n                    switch (String(value).toLowerCase()) {\n                        case Distortion.CLEAN:\n                            this.type = Distortion.CLEAN;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CLEAN, this.numberOfSamples);\n                            break;\n                        case Distortion.CRUNCH:\n                            this.type = Distortion.CRUNCH;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CRUNCH, this.numberOfSamples);\n                            break;\n                        case Distortion.OVERDRIVE:\n                            this.type = Distortion.OVERDRIVE;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.OVERDRIVE, this.numberOfSamples);\n                            break;\n                        case Distortion.DISTORTION:\n                            this.type = Distortion.DISTORTION;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.DISTORTION, this.numberOfSamples);\n                            break;\n                        case Distortion.FUZZ:\n                            this.type = Distortion.FUZZ;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.FUZZ, this.numberOfSamples);\n                            break;\n                        default:\n                            if (value instanceof Float32Array) {\n                                curve = value;\n                            }\n\n                            break;\n                    }\n\n                    this.distortion.curve = curve;\n\n                    break;\n                case 'samples':\n                    if (value === undefined) {\n                        return this.numberOfSamples;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    if (v >= 0) {\n                        this.numberOfSamples = v;\n                        this.param('curve', this.type);\n                    }\n\n                    break;\n                case 'drive':\n                    if (value === undefined) {\n                        return this.drive.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.drive.gain.value = v;\n                    }\n\n                    break;\n                case 'color':\n                case 'tone' :\n                    if (value === undefined) {\n                        return this[k].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.distortion.disconnect(0);\n        this.drive.disconnect(0);\n        this.color.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Color) -> WaveShaperNode (Distortion) -> GainNode (Drive) -> BiquadFilterNode (Tone) -> GainNode (Output)\n            this.input.connect(this.color);\n            this.color.connect(this.distortion);\n            this.distortion.connect(this.drive);\n            this.drive.connect(this.tone);\n            this.tone.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'   : this.isActive,\n            'curve'   : this.type,\n            'samples' : this.numberOfSamples,\n            'drive'   : this.drive.gain.value,\n            'color'   : this.color.frequency.value,\n            'tone'    : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Distortion]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Compressor extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.compressor = context.createDynamicsCompressor();\n\n        // Set default value\n        this.compressor.threshold.value = -24;\n        this.compressor.knee.value      = 30;\n        this.compressor.ratio.value     = 12;\n        this.compressor.attack.value    = 0.003;\n        this.compressor.release.value   = 0.25;\n\n        // `Compressor` is connected by default\n        this.state(true);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.compressor) {\n                if (value === undefined) {\n                    return this.compressor[k].value;\n                }\n\n                const v = parseFloat(value);\n\n                const minValues = {\n                    'threshold' : -100,\n                    'knee'      : 0,\n                    'ratio'     : 1,\n                    'attack'    : 0,\n                    'release'   : 0\n                };\n\n                const maxValues = {\n                    'threshold' : 0,\n                    'knee'      : 40,\n                    'ratio'     : 20,\n                    'attack'    : 1,\n                    'release'   : 1\n                };\n\n                const min = minValues[k];\n                const max = maxValues[k];\n\n                if ((v >= min) && (v <= max)) {\n                    this.compressor[k].value = v;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.compressor.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n            // GainNode (Input) -> DynamicsCompressorNode -> GainNode (Output)\n            this.input.connect(this.compressor);\n            this.compressor.connect(this.output);\n        } else {\n            // Effect OFF\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'threshold' : this.compressor.threshold.value,\n            'knee'      : this.compressor.knee.value,\n            'ratio'     : this.compressor.ratio.value,\n            'attack'    : this.compressor.attack.value,\n            'release'   : this.compressor.release.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Compressor]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for sound session on network.\n * @constructor\n */\nexport default class Session {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     * @param {Analyser} analyser This argument is the instance of `Analyser`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs, analyser) {\n        this.isActive = false;\n\n        this.context  = context;\n        this.analyser = analyser;  // the instance of `Analyser`\n\n        this.sender   = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n        this.receiver = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.websocket = null;  // for the instance of `WebSocket`\n        this.paused    = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n    }\n\n    /**\n     * This method creates the instance of `WebSocket` and registers event handlers.\n     * @param {boolean} tls This argument is in order to select protocol (either `wss` or `ws`).\n     * @param {string} host This argument is server's hostname.\n     * @param {number} port This argument is port number for connection.\n     * @param {string} path This argument is file that is executed in server side.\n     * @param {function} openCallback This argument is invoked as `onopen` event handler in the instance of `WebSocket`.\n     * @param {function} closeCallback This argument is invoked as `onclose` event handler in the instance of `WebSocket`.\n     * @param {function} errorCallback This argument is invoked as `onerror` event handler in the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    setup(tls, host, port, path, openCallback, closeCallback, errorCallback) {\n        /*\n        if (!navigator.onLine) {\n            // Clear\n            this.isActive = false;\n            this.paused   = true;\n            this.connect();\n            this.websocket = null;\n\n            throw new Error('Now Offline.');\n        }\n        */\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('tls' in properties) {\n                tls = properties.tls;\n            }\n\n            if ('host' in properties) {\n                host = properties.host;\n            }\n\n            if ('port' in properties) {\n                port = properties.port;\n            }\n\n            if ('path' in properties) {\n                path = properties.path;\n            }\n\n            if ('open' in properties) {\n                openCallback = properties.open;\n            }\n\n            if ('close' in properties) {\n                closeCallback = properties.close;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n        }\n\n        const scheme = tls ? 'wss://' : 'ws://';\n\n        if (path.charAt(0) !== '/') {\n            path = `/${path}`;\n        }\n\n        const p = parseInt(port, 10);\n\n        if (isNaN(p) || (p < 0) || (p > 65535)) {\n            return this;\n        }\n\n        this.websocket = new WebSocket(`${scheme}${host}:${p}${path}`);\n        this.websocket.binaryType = 'arraybuffer';\n\n        this.websocket.onopen = event => {\n            if (Object.prototype.toString.call(openCallback) === '[object Function]') {\n                openCallback(event);\n            }\n        };\n\n        this.websocket.onclose = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(closeCallback) === '[object Function]') {\n                closeCallback(event);\n            }\n        };\n\n        this.websocket.onerror = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(event);\n            }\n        };\n\n        this.websocket.onmessage = event => {\n            if (!this.isActive) {\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n\n                return;\n            }\n\n            if (event.data instanceof ArrayBuffer) {\n                const total  = event.data.byteLength / Float32Array.BYTES_PER_ELEMENT;\n                const length = Math.floor(total / 2);\n                const offset = length * Float32Array.BYTES_PER_ELEMENT;\n\n                const bufferLs = new Float32Array(event.data,      0, length);  // Get Left  channel data\n                const bufferRs = new Float32Array(event.data, offset, length);  // Get Right channel data\n\n                // Start drawing sound wave\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                this.receiver.onaudioprocess = event => {\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (bufferLs instanceof Float32Array) {outputLs.set(bufferLs);}\n                    if (bufferRs instanceof Float32Array) {outputRs.set(bufferRs);}\n\n                    // bufferLs = null;\n                    // bufferRs = null;\n\n                    if (!this.isActive || (this.websocket === null)) {\n                        this.analyser.stop('time');\n                        this.analyser.stop('fft');\n                    }\n                };\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes according to state.\n     * @return {Session} This is returned for method chain.\n     */\n    connect() {\n        // Clear connection\n        this.receiver.disconnect(0);\n        this.sender.disconnect(0);\n\n        this.receiver.onaudioprocess = null;\n        this.sender.onaudioprocess   = null;\n\n        if (this.isActive) {\n            // ScriptProcessorNode (Input) -> Analyser\n            this.receiver.connect(this.analyser.input);\n\n            // ScriptProcessorNode (Input) -> AudioDestinationNode (Output)\n            this.receiver.connect(this.context.destination);\n        } else {\n            this.paused = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sends sound data to server.\n     * @return {Session} This is returned for method chain.\n     */\n    start() {\n        if (this.isActive && this.isConnected() && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.sender.bufferSize;\n\n            this.sender.onaudioprocess = event => {\n                if (this.isActive && this.isConnected()) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const buffer = new Float32Array(2 * bufferSize);\n                    const offset = parseInt((buffer.length / 2), 10);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        buffer[i]          = inputLs[i];\n                        buffer[offset + i] = inputRs[i];\n                    }\n\n                    if (this.websocket.bufferedAmount === 0) {\n                        this.websocket.send(buffer);\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method closes connection to server and destroys the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    close() {\n        if (this.websocket instanceof WebSocket) {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n            this.websocket.close();\n\n            this.websocket = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether there is the connection to server.\n     * @return {boolean} If the connection to server exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isConnected() {\n        return (this.websocket instanceof WebSocket) && (this.websocket.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @param {function} stateCallback This argument is invoked when `bufferedAmount` equals to 0.\n     * @param {function} waitCallback This argument is invoked until `bufferedAmount` equals to 0.\n     * @return {Session} This is returned for method chain.\n     */\n    state(state, stateCallback, waitCallback) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (Object.prototype.toString.call(waitCallback) === '[object Function]') {\n            waitCallback();\n        }\n\n        const intervalid = window.setInterval(() => {\n            if ((this.websocket instanceof WebSocket) && (this.websocket.bufferedAmount !== 0)) {\n                return;\n            }\n\n            if (String(state).toLowerCase() === 'toggle') {\n                this.isActive = !this.isActive;\n            } else {\n                this.isActive = Boolean(state);\n            }\n\n            this.connect();\n\n            if (Object.prototype.toString.call(stateCallback) === '[object Function]') {\n                stateCallback();\n            }\n\n            window.clearInterval(intervalid);\n        }, 10);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `WebSocket`.\n     * @return {WebSocket}\n     */\n    get() {\n        return this.websocket;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Session]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for multi track recording.\n * @constructor\n */\nexport default class Recorder {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs) {\n        this.sampleRate = context.sampleRate;\n\n        this.context   = context;\n        this.processor = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.mixedLs = null;  /** @type {Float32Array} */\n        this.mixedRs = null;  /** @type {Float32Array} */\n\n        this.numberOfTracks = 0;\n        this.trackLs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n        this.trackRs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n\n        this.activeTrack = -1;    // There is not any active track in the case of -1\n        this.paused      = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n\n        this.gainL = 1;  // Gain of Left  channel\n        this.gainR = 1;  // Gain of Right channel\n    }\n\n    /**\n     * This method sets the max number of tracks.\n     * @param {number} numberOfTracks This argument is the max number of tracks. The default value is 1.\n     * @return {Recorder} This is returned for method chain.\n     */\n    setup(numberOfTracks) {\n        const n = parseInt(numberOfTracks, 10);\n\n        if (n > 0) {\n            this.numberOfTracks = n;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            for (let i = 0; i < n; i++) {this.trackLs[i] = [];}  // n x array\n            for (let i = 0; i < n; i++) {this.trackRs[i] = [];}  // n x array\n        } else {\n            this.numberOfTracks = 1;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            this.trackLs[0] = [];  // 1 * array\n            this.trackRs[0] = [];  // 1 * array\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Recorder} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'gainl':\n                case 'gainr':\n                    if (value === undefined) {\n                        return this[`gain${k.slice(-1).toUpperCase()}`];\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[`gain${k.slice(-1).toUpperCase()}`] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects active track.\n     * @param {number} track This argument is in order to select active track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    ready(track) {\n        if (this.isTrack(track)) {\n            this.activeTrack = track;\n        } else {\n            this.activeTrack = -1;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts recording. If there is not any active track, this method stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    start() {\n        if ((this.activeTrack !== -1) && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                if (this.activeTrack !== -1) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const recordedLs = new Float32Array(bufferSize);\n                    const recordedRs = new Float32Array(bufferSize);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        recordedLs[i] = this.gainL * inputLs[i];\n                        recordedRs[i] = this.gainR * inputRs[i];\n                    }\n\n                    this.trackLs[this.activeTrack].push(recordedLs);\n                    this.trackRs[this.activeTrack].push(recordedRs);\n                } else {\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method turns off the all of tracks, and stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    stop() {\n        this.activeTrack = -1;  // Flag becomes inactive\n        this.paused      = true;\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the designated track number is valid.\n     * @param {number} track This argument is track number for validation.\n     * @return {boolean} If the designated track is valid range, this value is `true`. Otherwise, this value is `false`.\n     */\n    isTrack(track) {\n        const t = parseInt(track, 10);\n\n        return (t >= 0) && (t < this.numberOfTracks);\n    }\n\n    /**\n     * This method determines whether active track exists.\n     * @return {number} This is returned as active track.\n     */\n    getActiveTrack() {\n        return this.activeTrack;\n    }\n\n    /**\n     * This method synthesizes recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @return {Float32Array} This is returned as array for synthesized sound.\n     */\n    mixTrack(channel) {\n        const tracks      = this[`track${channel}s`];\n        const mixes       = { 'values' : null, 'sum' : 0, 'num' : 0 };\n        const bufferSize  = this.processor.bufferSize;\n        let currentBuffer = 0;\n        let index         = 0;\n\n        // Calculate sound data size\n        let numberOfMaxBuffers = 0;\n\n        // Search the max number of Float32Arrays each track\n        for (const track of tracks) {\n            if (numberOfMaxBuffers < track.length) {\n                numberOfMaxBuffers = track.length;\n            }\n        }\n\n        mixes.values = new Float32Array(numberOfMaxBuffers * bufferSize);\n\n        while (true) {\n            for (let currentTrack = 0, len = tracks.length; currentTrack < len; currentTrack++) {\n                if (tracks[currentTrack][currentBuffer] instanceof Float32Array) {\n                    mixes.sum += tracks[currentTrack][currentBuffer][index];\n                    mixes.num++;\n                }\n            }\n\n            if (mixes.num > 0) {\n                const offset = currentBuffer * bufferSize;\n\n                // Average\n                mixes.values[offset + index] = mixes.sum / mixes.num;\n\n                // Clear\n                mixes.sum = 0;\n                mixes.num = 0;\n\n                // Next data\n                if (index < (bufferSize - 1)) {\n                    // Next element in Float32Array\n                    index++;\n                } else {\n                    // Next Float32Array\n                    currentBuffer++;\n                    index = 0;\n                }\n            } else {\n                return mixes.values;\n            }\n        }\n    }\n\n    /**\n     * This method synthesizes the all of recorded sounds in track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    mix() {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        this.mixedLs = this.mixTrack('L');\n        this.mixedRs = this.mixTrack('R');\n\n        return this;\n    }\n\n    /**\n     * This method clears recorded sound of the designated track.\n     * @param {number|string} track This argument is track for clearing.\n     * @return {Recorder} This is returned for method chain.\n     */\n    clear(track) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        if (String(track).toLowerCase() === 'all') {\n            for (const track of this.trackLs) {track.length = 0;}\n            for (const track of this.trackRs) {track.length = 0;}\n        } else {\n            if (this.isTrack(track)) {\n                this.trackLs[track].length = 0;\n                this.trackRs[track].length = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates WAVE file as Object URL or Data URL.\n     * @param {string|number} track This argument is the target track.\n     * @param {number} numberOfChannels This argument is in order to select stereo or monaural of WAVE file. The default value is 2.\n     * @param {number} qbit This argument is quantization bit of PCM. The default value is 16 (bit).\n     * @return {string} This is returned as Object URL or Data URL for WAVE file.\n     */\n    create(track, numberOfChannels, qbit) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        /** @type {Float32Array} */\n        let soundLs = null;\n\n        /** @type {Float32Array} */\n        let soundRs = null;\n\n        if (String(track).toLowerCase() === 'all') {\n            this.mix();\n\n            soundLs = this.mixedLs;\n            soundRs = this.mixedRs;\n        } else {\n            if (this.isTrack(track)) {\n                soundLs = this.trackLs[track - 1];\n                soundRs = this.trackRs[track - 1];\n            }\n        }\n\n        // Sound data exists ?\n        if ((soundLs.length === 0) && (soundRs.length === 0)) {\n            return '';\n        }\n\n        // PCM parameters\n        const CHANNEL = (numberOfChannels === 1) ? 1 : 2;\n        const QBIT    = (qbit === 8) ? 8 : 16;\n        const SIZE    = (CHANNEL === 1) ? Math.min(soundLs.length, soundRs.length) : (2 * Math.min(soundLs.length, soundRs.length));\n\n        // Parameters for WAVE file\n        const FMT_CHUNK  = 28;\n        const DATA_CHUNK =  8 + (SIZE * (QBIT / 8));\n        const CHUNK_SIZE = 36 + (SIZE * (QBIT / 8));\n        const RIFF_CHUNK =  8 + (FMT_CHUNK + DATA_CHUNK);\n        const RATE       = this.sampleRate;\n        const BPS        = RATE * CHANNEL * (QBIT / 8);\n        const DATA_SIZE  = SIZE * (QBIT / 8);\n\n        /** @type {Uint8Array|Int16Array} */\n        let sounds = null;\n\n        switch (QBIT) {\n            case 8:\n                sounds = new Uint8Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 8 bit unsigned integer (-1 -> 0, 0 -> 128, 1 -> 255)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = ((soundLs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Left channel\n                    } else {\n                        binary = ((soundRs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (Math.pow(2, 8) - 1)) {binary = (Math.pow(2, 8) - 1);}\n                    if (binary < (Math.pow(2, 0) - 1)) {binary = (Math.pow(2, 0) - 1);}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            case 16:\n                sounds = new Int16Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 16 bit integer (-1 -> -32768, 0 -> 0, 1 -> 32767)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = soundLs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Left channel\n                    } else {\n                        binary = soundRs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (+Math.pow(2, 15) - 1)) {binary =  Math.pow(2, 15) - 1;}\n                    if (binary < (-Math.pow(2, 15) - 1)) {binary = -Math.pow(2, 15) - 1;}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        // Create WAVE file (Object URL or Data URL)\n        window.URL = window.URL || window.webkitURL || window.mozURL;\n\n        if (window.URL && window.URL.createObjectURL) {\n            // Object URL\n\n            const waves = [];\n\n            waves[0] = 0x52;  // 'R'\n            waves[1] = 0x49;  // 'I'\n            waves[2] = 0x46;  // 'F'\n            waves[3] = 0x46;  // 'F'\n\n            waves[4] = (CHUNK_SIZE >>  0) & 0xFF;\n            waves[5] = (CHUNK_SIZE >>  8) & 0xFF;\n            waves[6] = (CHUNK_SIZE >> 16) & 0xFF;\n            waves[7] = (CHUNK_SIZE >> 24) & 0xFF;\n\n            waves[8]  = 0x57;  // 'W'\n            waves[9]  = 0x41;  // 'A'\n            waves[10] = 0x56;  // 'V'\n            waves[11] = 0x45;  // 'E'\n\n            // fmt chunk\n            waves[12] = 0x66;  // 'f'\n            waves[13] = 0x6D;  // 'm'\n            waves[14] = 0x74;  // 't'\n            waves[15] = 0x20;  // ' '\n\n            waves[16] = 16;\n            waves[17] =  0;\n            waves[18] =  0;\n            waves[19] =  0;\n\n            waves[20] = 1;\n            waves[21] = 0;\n\n            // fmt chunk -> Channels (Monaural or Stereo)\n            waves[22] = CHANNEL;\n            waves[23] = 0;\n\n            // fmt chunk -> Sample rate\n            waves[24] = (RATE >>  0) & 0xFF;\n            waves[25] = (RATE >>  8) & 0xFF;\n            waves[26] = (RATE >> 16) & 0xFF;\n            waves[27] = (RATE >> 24) & 0xFF;\n\n            // fmt chunk -> Byte per second\n            waves[28] = (BPS >>  0) & 0xFF;\n            waves[29] = (BPS >>  8) & 0xFF;\n            waves[30] = (BPS >> 16) & 0xFF;\n            waves[31] = (BPS >> 24) & 0xFF;\n\n            // fmt chunk -> Block size\n            waves[32] = CHANNEL * (QBIT / 8);\n            waves[33] = 0;\n\n            // fmt chunk -> Byte per Sample\n            waves[34] = QBIT;\n            waves[35] = 0;\n\n            // data chunk\n            waves[36] = 0x64;  // 'd'\n            waves[37] = 0x61;  // 'a'\n            waves[38] = 0x74;  // 't\n            waves[39] = 0x61;  // 'a'\n\n            waves[40] = (DATA_SIZE >>  0) & 0xFF;\n            waves[41] = (DATA_SIZE >>  8) & 0xFF;\n            waves[42] = (DATA_SIZE >> 16) & 0xFF;\n            waves[43] = (DATA_SIZE >> 24) & 0xFF;\n\n            for (let i = 0; i < SIZE; i++) {\n                switch (QBIT) {\n                    case  8:\n                        waves[(RIFF_CHUNK - DATA_SIZE) + i] = sounds[i];\n                        break;\n                    case 16:\n                        // The byte order in WAVE file is little endian\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 0] = ((sounds[i] >> 0) & 0xFF);\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 1] = ((sounds[i] >> 8) & 0xFF);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            const blob      = new Blob([new Uint8Array(waves)], { 'type' : 'audio/wav' });\n            const objectURL = window.URL.createObjectURL(blob);\n\n            return objectURL;\n        }\n\n        // Data URL\n\n        let wave = '';\n\n        wave += 'RIFF';\n        wave += String.fromCharCode(((CHUNK_SIZE >> 0) & 0xFF), ((CHUNK_SIZE >> 8) & 0xFF), ((CHUNK_SIZE >> 16) & 0xFF), ((CHUNK_SIZE >> 24) & 0xFF));\n        wave += 'WAVE';\n\n        // fmt chunk\n        wave += `fmt ${String.fromCharCode(16, 0, 0, 0)}`;\n        wave += String.fromCharCode(1, 0);\n\n        // fmt chunk -> Channels (Monaural or Stereo)\n        wave += String.fromCharCode(CHANNEL, 0);\n\n        // fmt chunk -> Sample rate\n        wave += String.fromCharCode(((RATE >> 0) & 0xFF), ((RATE >> 8) & 0xFF), ((RATE >> 16) & 0xFF), ((RATE >> 24) & 0xFF));\n\n        // fmt chunk -> Byte per second\n        wave += String.fromCharCode(((BPS >> 0) & 0xFF), ((BPS >> 8) & 0xFF), ((BPS >> 16) & 0xFF), ((BPS >> 24) & 0xFF));\n\n        // fmt chunk -> Block size\n        wave += String.fromCharCode((CHANNEL * (QBIT / 8)), 0);\n\n        // fmt chunk -> Byte per Sample\n        wave += String.fromCharCode(QBIT, 0);\n\n        // data chunk\n        wave += 'data';\n        wave += String.fromCharCode(((DATA_SIZE >> 0) & 0xFF), ((DATA_SIZE >> 8) & 0xFF), ((DATA_SIZE >> 16) & 0xFF), ((DATA_SIZE >> 24) & 0xFF));\n\n        for (let i = 0; i < SIZE; i++) {\n            switch (QBIT) {\n                case  8:\n                    wave += String.fromCharCode(sounds[i]);\n                    break;\n                case 16:\n                    // The byte order in WAVE file is little endian\n                    wave += String.fromCharCode(((sounds[i] >> 0) & 0xFF), ((sounds[i] >> 8) & 0xFF));\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        const base64  = window.btoa(wave);\n        const dataURL = `data:audio/wav;base64,${base64}`;\n\n        return dataURL;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Recorder]';\n    }\n}\n","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in frequency domain (spectrum).\n * @constructor\n * @extends {Visualizer}\n */\nexport default class FFT extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = FFT.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.size         = 256;       // Range for drawing\n        this.textInterval = 1000;      // Draw text at intervals of this value [Hz]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === FFT.UINT) || (v === FFT.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'size':\n                    if (value === undefined) {\n                        return this.size;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = 1024;  // `AnalyserNode#fftSize` max 2048 -> half 1024\n\n                    if ((v > min) && (v <= max)) {\n                        this.size = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data, minDecibels, maxDecibels) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (Sampling rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Set style\n                context.strokeStyle = (this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)';  // line only\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = (Math.abs(data[i] - maxdB) * (innerHeight / range)) + this.styles.top;  // [dB] * [px / dB] = [px]\n\n                    if (i === 0) {\n                        context.moveTo((x + (this.styles.width / 2)), y);\n                    } else {\n                        context.lineTo(x, y);\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        context.beginPath();\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = -1 * Math.floor((data[i] / 255) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = innerHeight + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, (innerHeight + this.styles.top), this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i} dB`;\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data, minDecibels, maxDecibels) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (sample rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = Math.floor(-1 * (data[i] - maxdB) * (innerHeight / range)) + this.styles.top;\n\n                    if (i === 0) {\n                        d += `M${x + (this.styles.width / 2)} ${y}`;\n                    } else {\n                        d += ` L${x} ${y}`;\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          ((this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)'));  // line only\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                svg.appendChild(path);\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        // Draw wave\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_FFT);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            let rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((data[i] / 255) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     (this.styles.top + innerHeight));\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${this.styles.top + innerHeight})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_FFT})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i}dB`;\n                        const x = this.styles.left;\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = this.styles.left;\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser FFT]';\n    }\n}\n","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport default class Time extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = Time.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.textInterval = 0.005;      // Draw text at intervals this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Time.UINT) || (v === Time.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle);\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        // Draw wave\n                        context.beginPath();\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((0.5 - (data[i] / 255)) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = (innerHeight / 2) + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, middle, this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Begin drawing\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, null, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME));\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_TIME);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor(((data[i] / 255) - 0.5) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     middle);\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${middle})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_TIME})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Time]';\n    }\n}\n","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing audio wave in overview of time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport default class TimeOverview extends Visualizer {\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = null;\n        this.length     = 0;\n\n        this.currentTime  = 'rgba(255, 255, 255, 1.0)';  // This style is used for the rectangle that displays current time of audio\n        this.plotInterval = 0.0625;                      // Draw wave at intervals of this value [sec]\n        this.textInterval = 60;                          // Draw text at intervals of this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    this.currentTime = String(value).toLowerCase();\n\n                    break;\n                case 'plotinterval':\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this[k.replace('interval', 'Interval')];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k.replace('interval', 'Interval')] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to Canvas.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval);\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) / 60)} min`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = context.getImageData(0, 0, width, height);\n        this.length     = data.length;\n\n        // This rectangle displays current time of audio\n        context.fillStyle = this.currentTime;\n        context.fillRect(this.styles.left, this.styles.top, 1, innerHeight);\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to SVG.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW));\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = Math.floor((i / this.sampleRate) / 60) + ' min';\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        // This rectangle displays current time of audio\n        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n        rect.classList.add('svg-current-time');\n\n        rect.setAttribute('x',      this.styles.left);\n        rect.setAttribute('y',      this.styles.top);\n        rect.setAttribute('width',  1);\n        rect.setAttribute('height', innerHeight);\n\n        rect.setAttribute('stroke', 'none');\n        rect.setAttribute('fill',   this.currentTime);\n\n        svg.appendChild(rect);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = svg;\n        this.length     = data.length;\n\n        return this;\n    }\n\n    /**\n     * This method draws current time of audio on Canvas or SVG.\n     * @param {number} time This argument is current time of audio.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    update(time) {\n        const t = parseFloat(time);\n\n        if (isNaN(t) || (t < 0)) {\n            return this;\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                if (this.savedImage instanceof ImageData) {\n                    const context = this.context;\n\n                    const { width, height } = this.canvas;\n\n                    const innerWidth  = width  - (this.styles.left + this.styles.right);\n                    const innerHeight = height - (this.styles.top  + this.styles.bottom);\n                    const x           = Math.floor(((t * this.sampleRate) / this.length) * innerWidth) + this.styles.left;\n\n                    context.clearRect(0, 0, width, height);\n                    context.putImageData(this.savedImage, 0, 0);\n\n                    context.fillStyle = this.currentTime;\n                    context.fillRect(x, this.styles.top, 1, innerHeight);\n                }\n\n                break;\n            case Visualizer.SVG:\n                const svg = this.svg.querySelector('.svg-current-time');\n\n                if (svg instanceof SVGElement) {\n                    const width      = parseInt(this.svg.getAttribute('width'), 10);\n                    const innerWidth = width  - (this.styles.left + this.styles.right);\n                    const x          = Math.floor(((t * this.sampleRate) / this.length) * innerWidth);\n\n                    svg.setAttribute('transform', `translate(${x} 0)`);\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method registers event listener for setting current time by drag.\n     * @param {function} callback This argument is invoked when current time is changed.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    drag(callback) {\n        let drawNode = null;\n\n        let start = '';\n        let move  = '';\n        let end   = '';\n\n        // Touch Panel ?\n        if (/iPhone|iPad|iPod|Android/.test(navigator.userAgent)) {\n            start = 'touchstart';\n            move  = 'touchmove';\n            end   = 'touchend';\n        } else {\n            start = 'mousedown';\n            move  = 'mousemove';\n            end   = 'mouseup';\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                drawNode = this.canvas;\n                break;\n            case Visualizer.SVG:\n                drawNode = this.svg;\n                break;\n            default:\n                return this;\n        }\n\n        let isDown = false;\n\n        drawNode.addEventListener(start, event => {\n            this.draw(this.getOffsetX(event), callback);\n            isDown = true;\n        }, true);\n\n        drawNode.addEventListener(move, event => {\n            if (isDown) {\n                event.preventDefault();  // for Touch Panel\n                this.draw(this.getOffsetX(event), callback);\n            }\n        }, true);\n\n        window.addEventListener(end, () => {\n            if (isDown) {\n                isDown = false;\n            }\n        }, true);\n\n        return this;\n    }\n\n    /**\n     * This method draws the rectangle for current time of audio.\n     * @param {number} offsetX This argument is X coordinate on Canvas or SVG.\n     * @param {function} callback This argument is invoked when the rectangle is drawn.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    draw(offsetX, callback) {\n        let offsetLeft = 0;\n        let width      = 0;\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                offsetLeft = this.canvas.offsetLeft;\n                width      = this.canvas.width;\n                break;\n            case Visualizer.SVG:\n                offsetLeft = this.svg.parentNode.offsetLeft;\n                width      = parseInt(this.svg.getAttribute('width'), 10);\n                break;\n            default:\n                break;\n        }\n\n        let x = offsetX - (offsetLeft + this.styles.left);\n\n        width -= (this.styles.left + this.styles.right);\n\n        // Exceed ?\n        if (x < 0)     {x = 0;}\n        if (x > width) {x = width;}\n\n        const plot = (x / width) * this.length;\n        const time = plot / this.sampleRate;\n\n        this.update(time);\n\n        if (Object.prototype.toString.call(callback) === '[object Function]') {\n            callback(time);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method returns X coordinate from `Event` object.\n     * @param {Event} event This argument is the instance of `Event`.\n     * @return {number} This is returned as X coordinate.\n     */\n    getOffsetX(event) {\n        if (event.pageX) {\n            return event.pageX;\n        }\n\n        if (event.touches[0]) {\n            return event.touches[0].pageX;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser TimeOverview]';\n    }\n}\n","'use strict';\n\nimport TimeOverview from './TimeOverview';\nimport Time from './Time';\nimport FFT from './FFT';\n\n/**\n * This private class manages 3 private classes (`TimeOverview`, `Time`, `FFT`) for drawing sound wave.\n * @constructor\n */\nexport default class Analyser {\n    /**\n     * @param {AudioContext} context This argument is This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        window.requestAnimationFrame = window.requestAnimationFrame       ||\n                                       window.webkitRequestAnimationFrame ||\n                                       window.mozRequestAnimationFrame    ||\n                                       (callback => window.setTimeout(callback, (1000 / 60)));\n\n        window.cancelAnimationFrame = window.cancelAnimationFrame       ||\n                                      window.webkitCancelAnimationFrame ||\n                                      window.mozCancelAnimationFrame    ||\n                                      window.clearTimeout;\n\n        this.analyser = context.createAnalyser();\n        this.input    = context.createGain();\n\n        // GainNode (Input) -> AnalyserNode\n        this.input.connect(this.analyser);\n\n        this.timeOverviewL = new TimeOverview(context.sampleRate);\n        this.timeOverviewR = new TimeOverview(context.sampleRate);\n        this.time          = new Time(context.sampleRate);\n        this.fft           = new FFT(context.sampleRate);\n\n        // Set default value\n        this.analyser.fftSize               = 2048;\n        this.analyser.minDecibels           = -100;\n        this.analyser.maxDecibels           = -30;\n        this.analyser.smoothingTimeConstant = 0.8;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Analyser} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'fftsize':\n                    if (value === undefined) {\n                        return this.analyser.fftSize;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case   32:\n                        case   64:\n                        case  128:\n                        case  256:\n                        case  512:\n                        case 1024:\n                        case 2048:\n                            this.analyser.fftSize = v;\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequencybincount':\n                    return this.analyser.frequencyBinCount;  // Getter only\n                case 'mindecibels':\n                    if (value === undefined) {\n                        return this.analyser.minDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    max = -30;\n\n                    if (v < max) {\n                        this.analyser.minDecibels = v;\n                    }\n\n                    break;\n                case 'maxdecibels':\n                    if (value === undefined) {\n                        return this.analyser.maxDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -100;\n\n                    if (v > min) {\n                        this.analyser.maxDecibels = v;\n                    }\n\n                    break;\n                case 'smoothingtimeconstant':\n                    if (value === undefined) {\n                        return this.analyser.smoothingTimeConstant;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.analyser.smoothingTimeConstant = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates data for drawing and executes drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @param {AudioBuffer} buffer This argument is the instance of `AudioBuffer`. The data for drawing audio wave in overview of time domain is gotten from this argument.\n     * @return {Analyser} This is returned for method chain.\n     */\n    start(domain, buffer) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        let data = null;\n\n        switch (d) {\n            case 'timeoverviewl':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 0) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(0));\n                        this.timeOverviewL.start(data);\n                    }\n                }\n\n                break;\n            case 'timeoverviewr':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 1) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(1));\n                        this.timeOverviewR.start(data);\n                    }\n                }\n\n                break;\n            case 'time':\n                if (this.time.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.fftSize);\n                    this.analyser.getByteTimeDomainData(data);\n                    this.time.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.fftSize);\n                    this.analyser.getFloatTimeDomainData(data);\n                    this.time.start(data);\n                }\n\n                if (this.time.param('interval') === 'auto') {\n                    this.time.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.time.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.time.param('interval'));\n                }\n\n                break;\n            case 'fft':\n                if (this.fft.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.frequencyBinCount);\n                    this.analyser.getByteFrequencyData(data);\n                    this.fft.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.frequencyBinCount);\n                    this.analyser.getFloatFrequencyData(data);\n                    this.fft.start(data, this.analyser.minDecibels, this.analyser.maxDecibels);\n                }\n\n                if (this.fft.param('interval') === 'auto') {\n                    this.fft.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.fft.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.fft.param('interval'));\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {Analyser} This is returned for method chain.\n     */\n    stop(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                break;\n            case 'time':\n                if (this.time.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.time.timerid);\n                } else {\n                    window.clearTimeout(this.time.timerid);\n                }\n\n                this.time.timerid = null;\n\n                break;\n            case 'fft':\n                if (this.fft.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.fft.timerid);\n                } else {\n                    window.clearTimeout(this.fft.timerid);\n                }\n\n                this.fft.timerid = null;\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects domain for drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {TimeOverview|Time|FFT|Analyser} This value is the instance of selected class.\n     */\n    domain(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                return this[`timeOverview${d.slice(-1).toUpperCase()}`];\n            case 'time':\n            case 'fft' :\n                return this[d];\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method gets the instance of `AnalyserNode`.\n     * @return {AnalyserNode}\n     */\n    get() {\n        return this.analyser;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser]';\n    }\n}\n","'use strict';\n\nimport SoundModule from './SoundModule';\nimport OscillatorModule from './OscillatorModule';\nimport OneshotModule from './OneshotModule';\nimport AudioModule from './AudioModule';\nimport MediaModule from './MediaModule';\nimport StreamModule from './StreamModule';\nimport MixerModule from './MixerModule';\nimport MIDI from './MIDI';\nimport MML from './MML';\nimport { read, file, ajax, decode, toFrequencies, convertTime, fullscreen, exitFullscreen } from './XSound';\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nconst IS_XSOUND = Boolean(window.AudioContext);\n\nif (IS_XSOUND) {\n    const audiocontext = new AudioContext();\n\n    // for legacy browsers\n    audiocontext.createScriptProcessor = audiocontext.createScriptProcessor || audiocontext.createJavaScriptNode;\n    audiocontext.createGain            = audiocontext.createGain            || audiocontext.createGainNode;\n    audiocontext.createDelay           = audiocontext.createDelay           || audiocontext.createDelayNode;\n    audiocontext.createPeriodicWave    = audiocontext.createPeriodicWave    || audiocontext.createWaveTable;\n\n    const sources = {\n        'oscillator' : new OscillatorModule(audiocontext),\n        'oneshot'    : new OneshotModule(audiocontext),\n        'audio'      : new AudioModule(audiocontext),\n        'media'      : new MediaModule(audiocontext),\n        'stream'     : new StreamModule(audiocontext),\n        'mixer'      : new MixerModule(audiocontext),\n        'midi'       : new MIDI(audiocontext),\n        'mml'        : new MML(audiocontext)\n    };\n\n    /**\n     * This function is global object for getting the instance of `OscillatorModule` or `OneshotModule` or `AudioModule` or `MediaModule` or `StreamModule` or `MixerModule` or `MIDI` or `MML` or `Oscillator`.\n     * @param {string} source This argument is one of 'oscillator', 'oneshot', 'audio', 'media', 'stream', 'mixer', 'midi', 'mml'.\n     * @param {number} index This argument is in order to select one of some oscillators.\n     * @return {OscillatorModule|OneshotModule|AudioModule|MediaModule|StreamModule|MixerModule|MIDI|MML|Oscillator}\n     */\n    const XSound = (source, index) => {\n        const s = String(source).replace(/-/g, '').toLowerCase();\n\n        switch (s) {\n            case 'oscillator':\n                if (index === undefined) {\n                    return sources.oscillator;\n                }\n\n                const i = parseInt(index, 10);\n\n                if ((i >= 0) && (i < sources.oscillator.length())) {\n                    return sources.oscillator.get(i);\n                }\n\n                return null;\n            case 'oneshot':\n            case 'audio'  :\n            case 'media'  :\n            case 'stream' :\n            case 'mixer'  :\n            case 'midi'   :\n            case 'mml'    :\n                return sources[s];\n            default :\n                return null;\n        }\n    };\n\n    /**\n     * Class (Static) properties\n     */\n    XSound.IS_XSOUND         = IS_XSOUND;\n    XSound.SAMPLE_RATE       = audiocontext.sampleRate;\n    XSound.NUMBER_OF_INPUTS  = SoundModule.NUMBER_OF_INPUTS;\n    XSound.NUMBER_OF_OUTPUTS = SoundModule.NUMBER_OF_OUTPUTS;\n    XSound.read              = read;\n    XSound.file              = file;\n    XSound.ajax              = ajax;\n    XSound.decode            = decode;\n    XSound.toFrequencies     = toFrequencies;\n    XSound.convertTime       = convertTime;\n    XSound.fullscreen        = fullscreen;\n    XSound.exitFullscreen    = exitFullscreen;\n\n    /**\n     * This class (static) method changes state ('running') of `AudioContext`.\n     * The initial state is 'suspended' by Autoplay Policy Change.\n     * Therefore, this method must be invoked by user gestures.\n     * @return {Promise} This is returned as `Promise`.\n     */\n    XSound.setup = () => {\n        if (audiocontext.state !== 'running') {\n            return audiocontext.resume();\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * This class (static) method returns function as closure that is getter of cloned module.\n     * @return {function} This is returned as closure that is getter of cloned module.\n     */\n    XSound.clone = () => {\n        const clones = {\n            'oscillator' : new OscillatorModule(audiocontext),\n            'oneshot'    : new OneshotModule(audiocontext),\n            'audio'      : new AudioModule(audiocontext),\n            'media'      : new MediaModule(audiocontext),\n            'stream'     : new StreamModule(audiocontext),\n            'mixer'      : new MixerModule(audiocontext),\n            'midi'       : new MIDI(audiocontext),\n            'mml'        : new MML(audiocontext)\n        };\n\n        const C = (source, index) => {\n            const s = String(source).replace(/-/g, '').toLowerCase();\n\n            switch (s) {\n                case 'oscillator':\n                    if (index === undefined) {\n                        return clones.oscillator;\n                    }\n\n                    const i = parseInt(index, 10);\n\n                    if ((i >= 0) && (i < clones.oscillator.length())) {\n                        return clones.oscillator.get(i);\n                    }\n\n                    return null;\n                case 'oneshot':\n                case 'audio'  :\n                case 'media'  :\n                case 'stream' :\n                case 'mixer'  :\n                case 'midi'   :\n                case 'mml'    :\n                    return clones[s];\n                default :\n                    return null;\n            }\n        };\n\n        C.free  = sourceList => {\n            if (!Array.isArray(sourceList)) {\n                sourceList = [sourceList];\n            }\n\n            for (const source of sourceList) {\n                // Already deleted ?\n                if (source === null) {\n                    continue;\n                }\n\n                for (const key in clones) {\n                    if (source === clones[key]) {\n                        clones[key] = null;\n                    }\n                }\n            }\n        };\n\n        // Closure\n        return C;\n    };\n\n    /**\n     * This class (static) method releases memory of unnecessary instances.\n     * @param {Array.<SoundModule|MIDI|MML>} sourceList This argument is the array that contains the instances of `SoundModule` or `MIDI` or `MML`.\n     */\n    XSound.free = sourceList => {\n        if (!Array.isArray(sourceList)) {\n            sourceList = [sourceList];\n        }\n\n        for (const source of sourceList) {\n            // Already deleted ?\n            if (source === null) {\n                continue;\n            }\n\n            for (const key in sources) {\n                if (source === sources[key]) {\n                    sources[key] = null;\n                }\n            }\n        }\n    };\n\n    /**\n     * This class (static) method removes one of the global objects or both of the global objects.\n     * @param {boolean} deep This argument is in order to select whether removing both of global objects.\n     *     If this value is `true`, both of global objects are removed.\n     * @return {XSound}\n     */\n    XSound.noConflict = deep => {\n        if (window.X === XSound) {\n            window.X = undefined;\n        }\n\n        // both of global objects are removed ?\n        if (deep && (window.XSound === XSound)) {\n            window.XSound = undefined;\n        }\n\n        return XSound;\n    };\n\n    /**\n     * This class (static) method gets the instance of `AudioContext`.\n     * @return {AudioContext}\n     */\n    XSound.get = () => {\n        return audiocontext;\n    };\n\n    /**\n     * This class (static) method gets `currentTime` property in the instance of `AudioContext`.\n     * @return {number}\n     */\n    XSound.getCurrentTime = () => {\n        return audiocontext.currentTime;\n    };\n\n    /** @override */\n    XSound.toString = () => {\n        return '[XSound]';\n    };\n\n    // for Chrome 70+\n    const userAgent = navigator.userAgent.toLowerCase();\n\n    if ((userAgent.indexOf('chrome') !== -1) && (userAgent.indexOf('edge') === -1)) {\n        const setup = () => {\n            XSound.setup().then(() => {}).catch(() => {});\n\n            document.removeEventListener('click',      setup, true);\n            document.removeEventListener('mousedown',  setup, true);\n            document.removeEventListener('mouseup',    setup, true);\n            document.removeEventListener('touchstart', setup, true);\n            document.removeEventListener('touchend',   setup, true);\n        };\n\n        document.addEventListener('click',      setup, true);\n        document.addEventListener('mousedown',  setup, true);\n        document.addEventListener('mouseup',    setup, true);\n        document.addEventListener('touchstart', setup, true);\n        document.addEventListener('touchend',   setup, true);\n    }\n\n    // Export\n    window.XSound = XSound;\n    window.X      = XSound;  // Alias of XSound\n} else {\n    const XSound = () => null;\n\n    XSound.IS_XSOUND = IS_XSOUND;\n\n    // Export\n    window.XSound = XSound;\n    window.X      = XSound;  // Alias of XSound\n}\n"],"sourceRoot":""}