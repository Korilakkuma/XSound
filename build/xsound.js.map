{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/SoundModule/Effector.js","webpack:///./src/SoundModule/index.js","webpack:///./src/SoundModule/Analyser/Visualizer.js","webpack:///./src/OscillatorModule/index.js","webpack:///./src/OneshotModule/index.js","webpack:///./src/AudioModule/index.js","webpack:///./src/MediaModule/index.js","webpack:///./src/StreamModule/index.js","webpack:///./src/main.js","webpack:///./src/SoundModule/Analyser/index.js","webpack:///./src/SoundModule/Analyser/TimeOverview.js","webpack:///./src/SoundModule/Analyser/Time.js","webpack:///./src/SoundModule/Analyser/FFT.js","webpack:///./src/SoundModule/Recorder.js","webpack:///./src/SoundModule/Session.js","webpack:///./src/SoundModule/Compressor.js","webpack:///./src/SoundModule/Distortion.js","webpack:///./src/SoundModule/Wah.js","webpack:///./src/SoundModule/Equalizer.js","webpack:///./src/SoundModule/Filter.js","webpack:///./src/SoundModule/Autopanner.js","webpack:///./src/SoundModule/AutopannerFallback.js","webpack:///./src/SoundModule/Tremolo.js","webpack:///./src/SoundModule/Ringmodulator.js","webpack:///./src/SoundModule/Phaser.js","webpack:///./src/SoundModule/Flanger.js","webpack:///./src/SoundModule/Chorus.js","webpack:///./src/SoundModule/Delay.js","webpack:///./src/SoundModule/Reverb.js","webpack:///./src/SoundModule/Panner.js","webpack:///./src/SoundModule/Listener.js","webpack:///./src/SoundModule/EnvelopeGenerator.js","webpack:///./src/OscillatorModule/Oscillator.js","webpack:///./src/OscillatorModule/Glide.js","webpack:///./src/NoiseModule/index.js","webpack:///./src/AudioModule/VocalCanceler.js","webpack:///./src/StreamModule/NoiseGate.js","webpack:///./src/MixerModule/index.js","webpack:///./src/MIDI/index.js","webpack:///./src/MML/index.js","webpack:///./src/XSound/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","length","configurable","writable","Effector","context","bufferSize","this","isActive","input","createGain","output","lfo","createOscillator","depth","rate","frequency","processor","createScriptProcessor","start","noteOn","stop","noteOff","values","isStop","startTime","parseFloat","isNaN","currentTime","stopTime","releaseTime","type","state","String","toLowerCase","Boolean","connect","JSON","stringify","params","k","a","u","f","h","v","y","b","g","w","O","S","A","SoundModule","sampleRate","userAgent","navigator","parseInt","test","mastervolume","NUMBER_OF_INPUTS","NUMBER_OF_OUTPUTS","analyser","_Analyser2","recorder","_Recorder2","session","_Session2","compressor","_Compressor2","distortion","_Distortion2","wah","_Wah2","equalizer","_Equalizer2","filter","_Filter2","autopanner","createStereoPanner","_Autopanner2","_AutopannerFallback2","tremolo","_Tremolo2","ringmodulator","_Ringmodulator2","phaser","_Phaser2","flanger","_Flanger2","chorus","_Chorus2","delay","_Delay2","reverb","_Reverb2","panner","_Panner2","listener","_Listener2","envelopegenerator","_EnvelopeGenerator2","replace","gain","source","connects","Array","isArray","disconnect","len","destination","sender","toString","Visualizer","graphics","canvas","svg","interval","timerid","styles","shape","grad","offset","color","wave","grid","text","font","family","size","style","weight","width","cap","join","top","right","bottom","left","element","HTMLCanvasElement","CANVAS","getContext","SVGElement","SVG","isError","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","grads","err","return","prop","data","minDecibels","maxDecibels","drawOnCanvas","drawBySVG","toDataURL","outerHTML","innerWidth","innerHeight","middle","nPlotInterval","CanvasRenderingContext2D","Float32Array","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","x","Math","floor","moveTo","lineTo","stroke","fillStyle","upside","gradient","createLinearGradient","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","gradients","addColorStop","fillRect","linearGradientId","path","document","createElementNS","XMLNS","setAttribute","defs","createSVGLinearGradient","appendChild","rect","linearGradient","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_styles$font","XLINK","SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW","SVG_LINEAR_GRADIENT_ID_TIME","SVG_LINEAR_GRADIENT_ID_FFT","OscillatorModule","_this","__proto__","getPrototypeOf","sources","times","isAnalyser","glide","_Glide2","states","_Oscillator2","setGenerator","arguments","param","st","sp","clear","frequencies","processCallback","_this2","onaudioprocess","oscillator","ready","volume","on","event","inputLs","inputBuffer","getChannelData","inputRs","outputLs","outputBuffer","outputRs","off","set","index","time","octave","fine","OneshotModule","resources","buffers","volumes","isStops","settings","transpose","timeout","successCallback","errorCallback","progressCallback","properties","success","error","progress","buffer","loop","end","load","url","xhr","XMLHttpRequest","ontimeout","ERROR_AJAX_TIMEOUT","onprogress","abort","onerror","ERROR_AJAX","onload","status","arrayBuffer","response","ArrayBuffer","decodeAudioData","audioBuffer","ERROR_DECODE","open","responseType","send","AudioBuffer","_this3","selectedIndex","bufferIndex","playbackRate","loopStart","loopEnd","AudioBufferSourceNode","createBufferSource","noteGrainOn","window","setTimeout","onended","every","oneshot","AudioModule","paused","callbacks","decode","update","ended","vocalcanceler","_VocalCanceler2","setup","max","duration","numberOfChannels","position","pos","timeOverviewL","timeOverviewR","audio","playbackrate","isSource","MediaModule","media","ext","controls","muted","autoplay","listeners","formats","HTMLAudioElement","AUDIO","HTMLVideoElement","VIDEO","format","canPlayType","Error","MediaElementAudioSourceNode","createMediaElementSource","addEventListener","loadstart","pause","min","HTMLMediaElement","channelCount","src","indexOf","play","then","catch","StreamModule","constraints","video","stream","noisegate","_NoiseGate2","streamCallback","mediaDevices","getUserMedia","createMediaStreamSource","isStreaming","level","_XSound2","AudioContext","webkitAudioContext","IS_XSOUND","audiocontext","createJavaScriptNode","createGainNode","createDelay","createDelayNode","createPeriodicWave","createWaveTable","_OscillatorModule2","_OneshotModule2","noise","_NoiseModule2","_AudioModule2","_MediaModule2","_StreamModule2","mixer","_MixerModule2","midi","_MIDI2","mml","_MML2","XSound","SAMPLE_RATE","_SoundModule2","read","file","ajax","toFrequencies","convertTime","fullscreen","exitFullscreen","resume","Promise","reject","clone","clones","C","free","sourceList","noConflict","deep","X","getCurrentTime","removeEventListener","Analyser","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","callback","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","clearTimeout","createAnalyser","_TimeOverview2","_Time2","fft","_FFT2","fftSize","smoothingTimeConstant","frequencyBinCount","domain","Uint8Array","getByteTimeDomainData","getFloatTimeDomainData","getByteFrequencyData","getFloatFrequencyData","slice","toUpperCase","TimeOverview","savedImage","plotInterval","textInterval","_canvas","height","nTextInterval","clearRect","drawTimeDomainFloat32ArrayOnCanvas","createFontString","fillText","measureText","trim","getImageData","getAttribute","innerHTML","drawTimeDomainFloat32ArrayBySVG","_Visualizer3","textContent","classList","add","ImageData","_canvas2","putImageData","querySelector","drawNode","move","isDown","draw","getOffsetX","preventDefault","offsetX","offsetLeft","parentNode","pageX","touches","Time","UINT","FLOAT","FFT","mindB","maxdB","range","drawnSize","fsDivN","abs","Recorder","numberOfInputs","numberOfOutputs","mixedLs","mixedRs","numberOfTracks","trackLs","trackRs","activeTrack","gainL","gainR","track","isTrack","recordedLs","recordedRs","push","channel","tracks","mixes","sum","num","currentBuffer","numberOfMaxBuffers","currentTrack","mixTrack","qbit","soundLs","soundRs","mix","CHANNEL","QBIT","SIZE","CHUNK_SIZE","RIFF_CHUNK","RATE","BPS","DATA_SIZE","sounds","binary","pow","Int16Array","URL","webkitURL","mozURL","createObjectURL","waves","blob","Blob","fromCharCode","dataURL","btoa","Session","receiver","websocket","tls","host","port","openCallback","closeCallback","close","scheme","charAt","WebSocket","binaryType","onopen","onclose","onmessage","total","byteLength","BYTES_PER_ELEMENT","bufferLs","bufferRs","isConnected","bufferedAmount","readyState","OPEN","stateCallback","waitCallback","intervalid","setInterval","clearInterval","Compressor","createDynamicsCompressor","threshold","knee","ratio","attack","release","Distortion","createWaveShaper","drive","createBiquadFilter","tone","CLEAN","numberOfSamples","BANDPASS","Q","SQRT1_2","LOWPASS","curve","createCurve","AMOUNTS","CRUNCH","OVERDRIVE","DISTORTION","FUZZ","samples","amount","curves","Wah","lowpass","depthRate","Function","getOwnPropertyDescriptor","cutoff","resonance","Equalizer","bass","treble","presence","LOWSHELF","PEAKING","HIGHSHELF","Filter","setTargetAtTime","setTargetValueAtTime","maxFrequency","decay","sustain","FILTER_TYPES","t0","t1","t2","t2Value","minFrequnecy","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","t3","t4","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass","Autopanner","pan","AutopannerFallback","amplitudeL","amplitudeR","splitter","createChannelSplitter","merger","createChannelMerger","lfoSplitter","inputs","Tremolo","amplitude","WAVE_TYPES","sine","square","sawtooth","triangle","Ringmodulator","Phaser","numberOfStages","filters","MAXIMUM_STAGES","ALLPASS","feedback","stage","Flanger","delayTime","Chorus","Delay","MAX_DELAY_TIME","dry","wet","Reverb","rirs","convolver","createConvolver","impulse","onprogresss","Panner","createPanner","positions","z","orientations","refDistance","maxDistance","rolloffFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","panningModel","HRTF","distanceModel","INVERSE_DISTANCE","setPosition","setOrientation","PANNING_MODELS","DISTANCE_MODELS","equalpower","linear","inverse","exponential","Listener","fronts","ups","EnvelopeGenerator","generators","activeIndexes","activeCounter","AudioNode","activeIndex","counter","MIN_GAIN","isDisconnect","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","generator","Oscillator","setPeriodicWave","setWaveTable","customs","real","imag","reals","imags","subarray","periodicWave","OCTAVE","detune","Glide","LINEAR","EXPONENTIAL","diff","NoiseModule","WHITE_NOISE","getGenerator","random","VocalCanceler","dataL","dataR","NoiseGate","MixerModule","MIDI","midiAccess","outputs","sysex","requestMIDIAccess","inputIterator","outputIterator","MML","sequences","timerids","prev","mmls","OscillatorNode","notes","shift","match","REGEXP_MML","ERROR_STRING","indexes","timeOf4note","note","REGEXP_TEMPO","bpm","ERROR_TEMPO","ONE_MINUTES","REGEXP_OCTAVE","ERROR_OCTAVE","REGEXP_NOTE","chord","REGEXP_CHORD","pitchname","computeIndex","EQUAL_TEMPERAMENT","ERROR_NOTE","REST","computeFrequency","durations","split","REGEXP_DURATION","numOf4note","QUARTER_NOTE","reverse","part","sequence","pop","j","node","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","isPaused","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","toAscii","computedIndex","FREQUENCY_RATIO","string","converted","charCode","charCodeAt","reader","FileReader","code","NOT_FOUND_ERR","SECURITY_ERR","ABORT_ERR","NOT_READABLE_ERR","ENCODING_ERR","result","readAsArrayBuffer","readAsDataURL","readAsText","Event","stopPropagation","dataTransfer","files","target","File","minutes","seconds","milliseconds","ms","Element","webkitRequestFullscreen","ALLOW_KEYBOARD_INPUT","mozRequestFullScreen","msRequestFullscreen","requestFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","cancelFullScreen"],"mappings":"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","file":"xsound.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","'use strict';\n\n/**\n * This private class defines common properties for effector classes.\n * @constructor\n */\nexport default class Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.isActive = true;\n\n        this.context = context;\n\n        // for connecting external node\n        this.input  = context.createGain();\n        this.output = context.createGain();\n\n        // for LFO (Low Frequency Oscillator)\n        // LFO changes parameter cyclically\n        this.lfo       = context.createOscillator();\n        this.depth     = context.createGain();\n        this.rate      = this.lfo.frequency;\n        this.processor = context.createScriptProcessor(bufferSize, 1, 2);\n\n        // for legacy browsers\n        this.lfo.start = this.lfo.start || this.lfo.noteOn;\n        this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n        this.values = {};\n\n        this.isStop = true;\n    }\n\n    /**\n     * This abstract method gets or sets parameter.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Effector} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @abstract\n     */\n    param() {\n    }\n\n    /**\n     * This abstract method connects nodes according to state.\n     * @abstract\n     */\n    connect() {\n    }\n\n    /**\n     * This method starts LFO. Namely, this method starts effector.\n     * @param {number} startTime This argument is in order to schedule parameter.\n     * @return {Effector} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops LFO, and creates the instance of `OscillatorNode` again.\n     * @param {number} stopTime This argument is in order to schedule parameter.\n     * @param {number} releaseTime This argument is in order to schedule parameter when it is necessary to consider release time.\n     * @return {Effector} This is returned for method chain.\n     */\n    stop(stopTime, releaseTime) {\n        if (this.isActive && !this.isStop) {\n            let s = parseFloat(stopTime);\n            let r = parseFloat(releaseTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            if (isNaN(r) || (r < 0)) {\n                r = 0;\n            }\n\n            // for saving value\n            const type = this.lfo.type;\n            const rate = this.lfo.frequency.value;\n\n            // Destroy the instance of `OscillatorNode`\n            this.lfo.stop(s + r);\n\n            // Create the instance of `OscillatorNode` again\n            this.lfo = this.context.createOscillator();\n\n           // for legacy browsers\n            this.lfo.start = this.lfo.start || this.lfo.noteOn;\n            this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n            // Set the saved value\n            this.lfo.type            = type;\n            this.lfo.frequency.value = rate;\n\n            this.rate = this.lfo.frequency;\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Effector} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        // Start LFO\n        this.start(this.context.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     * @abstract\n     */\n    params() {\n        return {};\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     * @abstract\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Effector]';\n    }\n}\n","'use strict';\n\nimport Analyser from './Analyser';\nimport Recorder from './Recorder';\nimport Session from './Session';\nimport Compressor from './Compressor';\nimport Distortion from './Distortion';\nimport Wah from './Wah';\nimport Equalizer from './Equalizer';\nimport Filter from './Filter';\nimport Autopanner from './Autopanner';\nimport AutopannerFallback from './AutopannerFallback';\nimport Tremolo from './Tremolo';\nimport Ringmodulator from './Ringmodulator';\nimport Phaser from './Phaser';\nimport Flanger from './Flanger';\nimport Chorus from './Chorus';\nimport Delay from './Delay';\nimport Reverb from './Reverb';\nimport Panner from './Panner';\nimport Listener from './Listener';\nimport EnvelopeGenerator from './EnvelopeGenerator';\n\n/**\n * This class is superclass that is the top in this library.\n * This library's users do not create the instance of `SoundModule`.\n * This class is used for inherit in subclass (`OscillatorModule`, `OneshotModule`, `AudioModule`, `MediaModule`, `StreamModule`, `MixerModule`).\n * Therefore, this class defines the common properties for each sound sources.\n * @constructor\n */\nexport default class SoundModule {\n    static NUMBER_OF_INPUTS  = 2;\n    static NUMBER_OF_OUTPUTS = 2;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 256, 512, 1024, 2048, 4096, 8192, 16384.\n     *     However, the opportunity for designating buffer size is not so much.\n     *     The reason why is that the constructor of `SoundModule` selects buffer size automaticly.\n     *     This buffer size can be changed explicitly by calling `resize` method.\n     */\n    constructor(context, bufferSize) {\n        this.context    = context;\n        this.sampleRate = context.sampleRate;\n\n        const userAgent = navigator.userAgent;\n\n        if (bufferSize !== undefined) {\n            switch (parseInt(bufferSize, 10)) {\n                case   256:\n                case   512:\n                case  1024:\n                case  2048:\n                case  4096:\n                case  8192:\n                case 16384:\n                    this.bufferSize = parseInt(bufferSize, 10);\n                    break;\n                default:\n                    return;\n            }\n        } else if (/(Win(dows )?NT 6\\.2)/.test(userAgent)) {\n            this.bufferSize = 1024;  // Windows 8\n        } else if (/(Win(dows )?NT 6\\.1)/.test(userAgent)) {\n            this.bufferSize = 1024;  // Windows 7\n        } else if (/(Win(dows )?NT 6\\.0)/.test(userAgent)) {\n            this.bufferSize = 2048;  // Windows Vista\n        } else if (/Win(dows )?(NT 5\\.1|XP)/.test(userAgent)) {\n            this.bufferSize = 4096;  // Windows XP\n        } else if (/Mac|PPC/.test(userAgent)) {\n            this.bufferSize = 1024;  // Mac OS X\n        } else if (/Linux/.test(userAgent)) {\n            this.bufferSize = 8192;  // Linux\n        } else if (/iPhone|iPad|iPod/.test(userAgent)) {\n            this.bufferSize = 2048;  // iOS\n        } else {\n            this.bufferSize = 16384;  // Otherwise\n        }\n\n        this.mastervolume = context.createGain();\n        this.processor    = context.createScriptProcessor(this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n\n        this.analyser          = new Analyser(context);\n        this.recorder          = new Recorder(context, this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        this.session           = new Session(context, this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS, this.analyser);\n        this.compressor        = new Compressor(context, this.bufferSize);\n        this.distortion        = new Distortion(context, this.bufferSize);\n        this.wah               = new Wah(context, this.bufferSize);\n        this.equalizer         = new Equalizer(context, this.bufferSize);\n        this.filter            = new Filter(context, this.bufferSize);\n        this.autopanner        = context.createStereoPanner ? new Autopanner(context, this.bufferSize) : new AutopannerFallback(context, this.bufferSize);\n        this.tremolo           = new Tremolo(context, this.bufferSize);\n        this.ringmodulator     = new Ringmodulator(context, this.bufferSize);\n        this.phaser            = new Phaser(context, this.bufferSize);\n        this.flanger           = new Flanger(context, this.bufferSize);\n        this.chorus            = new Chorus(context, this.bufferSize);\n        this.delay             = new Delay(context, this.bufferSize);\n        this.reverb            = new Reverb(context, this.bufferSize);\n        this.panner            = new Panner(context, this.bufferSize);\n        this.listener          = new Listener(context);\n        this.envelopegenerator = new EnvelopeGenerator(context);  // for `OscillatorModule`, `OneshotModule`\n\n        // The default order for connection\n        this.modules = [\n            this.compressor,\n            this.distortion,\n            this.wah,\n            this.equalizer,\n            this.filter,\n            this.autopanner,\n            this.tremolo,\n            this.ringmodulator,\n            this.phaser,\n            this.flanger,\n            this.chorus,\n            this.delay,\n            this.reverb,\n            this.panner\n        ];\n    }\n\n    /** @abstract */\n    setup() {\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string} key This argument is property name.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v   = null;\n        let min = null;\n        let max = null;\n\n        switch (k) {\n            case 'mastervolume':\n                if (value === undefined) {\n                    return this.mastervolume.gain.value;\n                }\n\n                v   = parseFloat(value);\n                min = 0;\n                max = 1;\n\n                if ((v >= min) && (v <= max)) {\n                    this.mastervolume.gain.value = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @abstract */\n    ready() {\n    }\n\n    /** @abstract */\n    start() {\n    }\n\n    /** @abstract */\n    stop() {\n    }\n\n    /** @abstract */\n    get() {\n    }\n\n    /**\n     * This method changes buffer size for `ScriptProcessorNode`.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 256, 512, 1024, 2048, 4096, 8192, 16384.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    resize(bufferSize) {\n        this.processor = this.context.createScriptProcessor(bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        return this;\n    }\n\n    /**\n     * This method gets buffer size for `ScriptProcessorNode`.\n     * @return {number} This is returned as buffer size for `ScriptProcessorNode`.\n     */\n    getBufferSize() {\n        return this.processor.bufferSize;\n    }\n\n    /**\n     * This method connects nodes that are defined by this library and Web Audio API.\n     * @param {AudioNode} source This argument is `AudioNode` for input of sound.\n     * @param {Array.<Effector>} connects This argument is array for changing the default connection.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    connect(source, connects) {\n        // Customize connection ?\n        if (Array.isArray(connects)) {\n            this.modules = connects;\n        }\n\n        // Start connection\n        // AudioSourceNode (Input)-> node -> ... -> node -> GainNode (Master Volume) -> AnalyserNode  -> AudioDestinationNode (Output)\n        source.disconnect(0);  // Clear connection\n\n        if (this.modules.length > 0) {\n            source.connect(this.modules[0].input);\n        } else {\n            source.connect(this.mastervolume);\n        }\n\n        for (let i = 0, len = this.modules.length; i < len; i++) {\n            // Clear connection\n            this.modules[i].output.disconnect(0);\n\n            if (i < (this.modules.length - 1)) {\n                // Connect to next node\n                this.modules[i].output.connect(this.modules[i + 1].input);\n            } else {\n                this.modules[i].output.connect(this.mastervolume);\n            }\n        }\n\n        this.mastervolume.connect(this.context.destination);\n\n        // for analyser\n        this.mastervolume.connect(this.analyser.input);\n\n        // for recording\n        this.mastervolume.connect(this.recorder.processor);\n        this.recorder.processor.connect(this.context.destination);\n\n        // for session\n        this.mastervolume.connect(this.session.sender);\n        this.session.sender.connect(this.context.destination);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of module that is defined by this library. This method enables to access the instance of module by unified call.\n     * @param {string} module This argument is module's name.\n     * @return {Analyser|Recorder|Session|Effector|Listener|EnvelopeGenerator|Glide|VocalCanceler|NoiseGate} This value is the instance of module.\n     */\n    module(module) {\n        const m = String(module).replace(/-/g, '').toLowerCase();\n\n        switch (m) {\n            case 'analyser'     :\n            case 'recorder'     :\n            case 'session'      :\n            case 'compressor'   :\n            case 'distortion'   :\n            case 'wah'          :\n            case 'equalizer'    :\n            case 'filter'       :\n            case 'autopanner'   :\n            case 'tremolo'      :\n            case 'ringmodulator':\n            case 'phaser'       :\n            case 'flanger'      :\n            case 'chorus'       :\n            case 'delay'        :\n            case 'reverb'       :\n            case 'panner'       :\n            case 'listener'     :\n                return this[m];\n            case 'envelopegenerator':\n            case 'eg'               :\n                // OscillatorModule, OneshotModule, NoiseModule\n                return this.envelopegenerator;\n            case 'glide':\n                if (m in this) {\n                    return this[m];  // OscillatorModule\n                }\n\n                // fall through\n            case 'vocalcanceler':\n                if (m in this) {\n                    return this[m];  // AudioModule, MediaModule\n                }\n\n                // fall through\n            case 'noisegate':\n                if (m in this) {\n                    return this[m];  // StreamModule\n                }\n\n                // fall through\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method starts effectors.\n     * @param {number} startTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    on(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.start(s);\n        this.flanger.start(s);\n        this.phaser.start(s);\n        this.autopanner.start(s);\n        this.tremolo.start(s);\n        this.ringmodulator.start(s);\n        this.wah.start(s);\n        this.filter.start(s);\n\n        return this;\n    }\n\n    /**\n     * This method stops effectors.\n     * @param {number} stopTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    off(stopTime) {\n        let s = parseFloat(stopTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.stop(s);\n        this.flanger.stop(s);\n        this.phaser.stop(s);\n        this.autopanner.stop(s);\n        this.tremolo.stop(s);\n        this.ringmodulator.stop(s);\n        this.wah.stop(s);\n        // this.filter.stop(s);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {};\n\n        for (const module in this) {\n            if (Object.prototype.toString.call(this[module]) === '[object Function]') {\n                continue;\n            }\n\n            const m = module.toLowerCase();\n\n            if (m === 'mastervolume') {\n                params[m] = this[module].gain.value;  // AudioParam\n            } else if ((Object.prototype.toString.call(this[module]) === '[object Object]') && ('params' in this[module])) {\n                params[m] = this[module].params();\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines the properties that subclasses (`TimeOverview`, `Time`, `FFT`) require.\n * @constructor\n */\nexport default class Visualizer {\n    static CANVAS = 'canvas';\n    static SVG    = 'svg';\n\n    static XMLNS = 'http://www.w3.org/2000/svg';\n    static XLINK = 'http://www.w3.org/1999/xlink';\n\n    static SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW = 'svg-linear-gradient-time-overview';\n    static SVG_LINEAR_GRADIENT_ID_TIME          = 'svg-linear-gradient-time';\n    static SVG_LINEAR_GRADIENT_ID_FFT           = 'svg-linear-gradient-fft';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        this.sampleRate = sampleRate;\n\n        this.isActive = false;\n\n        // either 'canvas' or 'svg'\n        this.graphics = '';\n\n        // in the case of using Canvas\n        this.canvas  = null;\n        this.context = null;\n\n        // in the case of using SVG\n        this.svg = null;\n\n        // for timer\n        this.interval = 1000;\n        this.timerid  = null;\n\n        this.styles = {\n            'shape'  : 'line',\n            'grad'   : [\n                {\n                    'offset' : 0,\n                    'color'  : 'rgba(0, 128, 255, 1.0)'\n                },\n                {\n                    'offset' : 1,\n                    'color'  : 'rgba(0, 0, 255, 1.0)'\n                }\n            ],\n            'wave'   : 'rgba(0, 0, 255, 1.0)',\n            'grid'   : 'rgba(255, 0, 0, 1.0)',\n            'text'   : 'rgba(255, 255, 255, 1.0)',\n            'font'   : {\n                'family' : 'Arial',\n                'size'   : '13px',\n                'style'  : 'normal',\n                'weight' : 'normal'\n            },\n            'width'  : 1.5,\n            'cap'    : 'round',\n            'join'   : 'miter',\n            'top'    : 15,\n            'right'  : 30,\n            'bottom' : 15,\n            'left'   : 30\n        };\n    }\n\n    /**\n     * This method sets up for using Canvas or SVG.\n     * @param {HTMLCanvasElement|SVGElement} element This argument is either `HTMLCanvasElement` or `SVGElement`.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    setup(element) {\n        if (element instanceof HTMLCanvasElement) {\n            this.graphics = Visualizer.CANVAS;\n            this.canvas   = element;\n            this.context  = this.canvas.getContext('2d');\n        } else if (element instanceof SVGElement) {\n            this.graphics = Visualizer.SVG;\n            this.svg      = element;\n\n            // this.svg.setAttribute('xmlns',       Visualizer.XMLNS);\n            // this.svg.setAttribute('xmlns:xlink', Visualizer.XLINK);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {string|number|Array.<object>} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {string|number|Array.<object>} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v = null;\n\n        switch (k) {\n            case 'interval':\n                if (value === undefined) {\n                    return this.interval;\n                }\n\n                if (String(value).toLowerCase() === 'auto') {\n                    this.interval = 'auto';\n                } else {\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.interval = v;\n                    }\n                }\n\n                break;\n            case 'shape':\n                if (value === undefined) {\n                    return this.styles.shape;\n                }\n\n                v = String(value).toLowerCase();\n\n                if ((v === 'line') || (v === 'rect')) {\n                    this.styles.shape = (this.styles.wave !== 'gradient') ? v : 'rect';\n                }\n\n                break;\n            case 'grad':\n                if (value === undefined) {\n                    return this.styles.grad;\n                }\n\n                if (!Array.isArray(value)) {\n                    value = [value];\n                }\n\n                let isError = false;\n\n                for (const grads of value) {\n                    if (('offset' in grads) && ('color' in grads)) {\n                        const offset = parseFloat(grads.offset);\n\n                        if (isNaN(offset) || (offset < 0) || (offset > 1)) {\n                            isError = true;\n                            break;\n                        }\n                    } else {\n                        isError = true;\n                        break;\n                    }\n                }\n\n                if (!isError) {\n                    this.styles.grad = value;\n                }\n\n                break;\n            case 'font':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (Object.prototype.toString.call(value) === '[object Object]') {\n                    for (const prop in value) {\n                        if (/family|size|style|weight/i.test(prop)) {\n                            this.styles.font[prop] = String(value[prop]);\n                        }\n                    }\n                }\n\n                break;\n            case 'wave':\n            case 'grid':\n            case 'text':\n            case 'cap' :\n            case 'join':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (typeof value === 'string') {\n                    if ((k === 'wave') && (value === 'gradient')) {\n                        this.styles.shape = 'rect';\n                    }\n\n                    this.styles[k] = value.toLowerCase();\n                }\n\n                break;\n            case 'width' :\n            case 'top'   :\n            case 'right' :\n            case 'bottom':\n            case 'left'  :\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                v = (k === 'width') ? parseFloat(value) : parseInt(value, 10);\n\n                if (v >= 0) {\n                    this.styles[k] = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method draws sound wave to Canvas or SVG. This method conceals difference of API for drawing.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is parameter for spectrum. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is parameter for spectrum. The default value is -30 dB.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    start(data, minDecibels, maxDecibels) {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                this.drawOnCanvas(data, minDecibels, maxDecibels);\n                break;\n            case Visualizer.SVG:\n                this.drawBySVG(data, minDecibels, maxDecibels);\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates string for `Data URL` or `HTML` for the drawn figure.\n     * @return {string|Visualizer} This is returned as `Data URL` or `HTML` string. If `setup` method has not been invoked, this is returned for method chain.\n     */\n    create() {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                return this.canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            case Visualizer.SVG:\n                return this.svg.outerHTML;\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Visualizer} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to Canvas.\n     * @param {CanvasRenderingContext2D} context This argument is the instance of `CanvasRenderingContext2D`.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     */\n    drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval) {\n        if (!(context instanceof CanvasRenderingContext2D)) {\n            return this;\n        }\n\n        if (!(data instanceof Float32Array)) {\n            return this;\n        }\n\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        // Begin drawing\n        switch (this.styles.shape) {\n            case 'line':\n                // Set style\n                context.strokeStyle = this.styles.wave;\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            context.moveTo((x + (this.styles.width / 2)),  y);\n                        } else {\n                            context.lineTo(x, y);\n                        }\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case 'rect':\n                // Set style\n                if (this.styles.wave !== 'gradient') {\n                    context.fillStyle = this.styles.wave;\n                }\n\n                // Draw wave\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = -1 * Math.floor(data[i] * (h / 2));\n\n                        // Set style\n                        if (this.styles.wave === 'gradient') {\n                            const upside   = (innerHeight / 2) + this.styles.top;\n                            const gradient = context.createLinearGradient(0, upside, 0, (upside + y));\n\n                            for (const gradients of this.styles.grad) {\n                                gradient.addColorStop(gradients.offset, gradients.color);\n                            }\n\n                            context.fillStyle = gradient;\n                        }\n\n                        context.fillRect(x, m, this.styles.width, y);\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to SVG.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGPathElement|SVGGElement} This is returned as `SVGElement`.\n     */\n    drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, linearGradientId) {\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        switch (this.styles.shape) {\n            case 'line':\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            d += `M${x + (this.styles.width / 2)} ${y}`;\n                        } else {\n                            d += ` L${x} ${y}`;\n                        }\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          this.styles.wave);\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                return path;\n            case 'rect':\n                let defs = null;\n\n                if (this.styles.wave === 'gradient') {\n                    defs = this.createSVGLinearGradient(linearGradientId);\n                }\n\n                // Draw wave\n                const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                if (defs !== null) {\n                    g.appendChild(defs);\n                }\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor(data[i] * (innerHeight / 2));\n\n                        rect.setAttribute('x',     x);\n                        rect.setAttribute('y',     m);\n                        rect.setAttribute('width', this.styles.width);\n\n                        if (y < 0) {\n                            rect.setAttribute('height', -y);\n                        } else {\n                            rect.setAttribute('height',    y);\n                            rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${m})`);\n                        }\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${linearGradientId})`);\n\n                        g.appendChild(rect);\n                    }\n                }\n\n                return g;\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * This method creates elements for SVG linear gradient.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGDefsElement} This is returned as the instance of `SVGDefsElement`.\n     */\n    createSVGLinearGradient(linearGradientId) {\n        const defs           = document.createElementNS(Visualizer.XMLNS, 'defs');\n        const linearGradient = document.createElementNS(Visualizer.XMLNS, 'linearGradient');\n\n        linearGradient.setAttribute('id', String(linearGradientId));\n        linearGradient.setAttribute('x1', '0%');\n        linearGradient.setAttribute('y1', '0%');\n        linearGradient.setAttribute('x2', '0%');\n        linearGradient.setAttribute('y2', '100%');\n\n        for (const gradients of this.styles.grad) {\n            const stop = document.createElementNS(Visualizer.XMLNS, 'stop');\n\n            stop.setAttribute('offset',     gradients.offset);\n            stop.setAttribute('stop-color', gradients.color);\n\n            linearGradient.appendChild(stop);\n        }\n\n        defs.appendChild(linearGradient);\n\n        return defs;\n    }\n\n    /**\n     * This method creates string for font.\n     * @return {string} This is returned as string for font.\n     */\n    createFontString() {\n        const { size, style, weight, family } = this.styles.font;\n\n        return `${size} ${style} ${weight} \"${family}\"`;\n    }\n\n    /** @abstract */\n    drawOnCanvas() {\n    }\n\n    /** @abstract */\n    drawBySVG() {\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Visualizer]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport Oscillator from './Oscillator';\nimport Glide from './Glide';\n\n/**\n * This subclass defines properties for creating sound.\n * Actually, properties for creating sound is defined in private class (`Oscillator`).\n * Therefore, this class manages these private classes for creating sound.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class OscillatorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        /** @type {Array.<Oscillator>} */\n        this.sources = [];\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n\n        this.glide = new Glide(context);\n    }\n\n    /**\n     * This method creates the instances of `Oscillator`.\n     * @param {Array.<boolean>|boolean} states This argument is initial state in the instance of `Oscillator`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    setup(states) {\n        // Clear\n        this.sources.length = 0;\n\n        if (!Array.isArray(states)) {\n            states = [states];\n        }\n\n        for (let i = 0, len = states.length ; i < len; i++) {\n            this.sources[i] = new Oscillator(this.context, Boolean(states[i]));\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OscillatorModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            return (r === undefined) ? this : r;\n        }\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(true);\n\n        return this;\n    }\n\n    /**\n     * This method starts some sounds that are active at the same time.\n     * @param {Array.<number>}|number} frequencies This argument each oscillator frequency. The default value is 0 Hz.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    start(frequencies, connects, processCallback) {\n        const startTime = this.context.currentTime + this.times.start;\n\n        // Validate the 1st argument\n        if (!Array.isArray(frequencies)) {\n            frequencies = [frequencies];\n        }\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            const f = parseFloat(frequencies[i]);\n            frequencies[i] = (f >= 0) ? f : 0;\n        }\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // ScriptProcessorNode (Mix oscillators) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor, connects);\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            if (i >= this.sources.length) {\n                break;\n            }\n\n            const oscillator = this.sources[i];\n            const frequency  = frequencies[i];\n\n            // GainNode (Volume) -> ScriptProcessorNode (Mix oscillators)\n            oscillator.ready(this.processor);\n\n            // OscillatorNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume)\n            this.envelopegenerator.ready(i, oscillator.source, oscillator.volume);\n\n            this.glide.ready(frequency).start(oscillator.source, startTime);\n\n            oscillator.start(startTime);\n        }\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                const inputLs  = event.inputBuffer.getChannelData(0);\n                const inputRs  = event.inputBuffer.getChannelData(1);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                // Stop ?\n                if (this.envelopegenerator.isStop()) {\n                    // Stop\n                    const stopTime = this.context.currentTime;\n\n                    for (const source of this.sources) {\n                        source.stop(stopTime);\n                    }\n\n                    this.off(stopTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops active sounds.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.glide.stop();\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `Oscillator` that is used in `OscillatorModule`.\n     * @param {number} index This argument is required in the case of designating `Oscillator`.\n     * @return {Array.<Oscillator>|Oscillator}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /**\n     * This method returns the number of oscillators.\n     * @return {number} This is returned as the number of oscillators.\n     */\n    length() {\n        return this.sources.length;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oscillator = {\n            'glide' : {\n                'type' : this.glide.param('type'),\n                'time' : this.glide.param('time')\n            }\n        };\n\n        for (let i = 0, len = this.sources.length; i < len; i++) {\n            const source = this.sources[i];\n\n            params.oscillator[`oscillator${i}`] = {\n                'state'  : source.state(),\n                'gain'   : source.param('gain'),\n                'type'   : source.param('type'),\n                'octave' : source.param('octave'),\n                'fine'   : source.param('fine')\n            };\n        }\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\n\n/**\n * This subclass defines properties for playing the one-shot audio.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class OneshotModule extends SoundModule {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.sources   = [];  /** @type {Array.<AudioBufferSourceNode>} */\n        this.resources = [];  /** @type {Array.<string>} */\n        this.buffers   = [];  /** @type {Array.<AudioBuffer>} */\n        this.volumes   = [];  /** @type {Array.<GainNode>} */\n        this.isStops   = [];  /** @type {Array.<boolean>} in order to not call in duplicate `start` or `stop` method in the instance of `AudioBufferSourceNode` */\n\n        // for audio sources\n        this.settings = [];  /** @type {Array.<object>} */\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        this.transpose = 1.0;\n\n        this.isStop = true;\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax.\n     * @param {Array.<string>|Array.<AudioBuffer>} resources This argument is either URLs or the instances of `AudioBuffer` for audio resources.\n     * @param {Array.<object>} settings This argument is the properties of each audio sources.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    setup(resources, settings, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('resources' in properties) {\n                resources = properties.resources;\n            }\n\n            if ('settings' in properties) {\n                settings = properties.settings;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(resources)) {\n            resources = [resources];\n        }\n\n        this.resources = resources;\n\n        if (!Array.isArray(settings)) {\n            settings = [settings];\n        }\n\n        this.buffers.length = resources.length;\n\n        for (let i = 0, len = settings.length; i < len; i++) {\n            if ('buffer' in settings[i]) {\n               const buffer = parseInt(settings[i].buffer, 10);\n\n                if ((buffer >= 0) && (buffer < this.buffers.length)) {\n                    settings[i].buffer = buffer;\n                } else {\n                    return this;\n                }\n            } else {\n                return this;\n            }\n\n            settings[i].rate   = (('rate' in settings[i]) && (settings[i].rate >= 0)) ? parseFloat(settings[i].rate) : 1;\n            settings[i].loop   = ('loop' in settings[i]) ? Boolean(settings[i].loop) : false;\n            settings[i].start  = (('start' in settings[i]) && (settings[i].start >= 0)) ? parseFloat(settings[i].start) : 0;\n            settings[i].end    = (('end' in settings[i]) && (settings[i].end >= 0)) ? parseFloat(settings[i].end) : 0;\n            settings[i].volume = (('volume' in settings[i]) && (settings[i].volume >=0) && (settings[i].volume <= 1)) ? parseFloat(settings[i].volume) : 1;\n\n            this.isStops[i] = true;\n            this.volumes[i] = this.context.createGain();\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        this.settings = settings;\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = error => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(error, OneshotModule.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogress = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, OneshotModule.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            // Success\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.buffers[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (const buffer of this.buffers) {\n                            if (buffer === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event, this.buffers);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, OneshotModule.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = this.resources.length; i < len; i++) {\n            if (typeof this.resources[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(this.resources[i], i);\n            } else if (this.resources[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.buffers[i] = this.resources[i];\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OneshotModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'transpose':\n                    if (value === undefined) {\n                        return this.transpose;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.transpose = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(false);\n\n        return this;\n    }\n\n    /**\n     * This method starts one-shot audio with the designated playback rate and volume.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    start(index, connects, processCallback) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex  = this.settings[selectedIndex].buffer;\n        const playbackRate = this.settings[selectedIndex].rate;\n        const loop         = this.settings[selectedIndex].loop;\n        const loopStart    = this.settings[selectedIndex].start;\n        const loopEnd      = this.settings[selectedIndex].end;\n        const volume       = this.settings[selectedIndex].volume;\n\n        if (!(this.buffers[bufferIndex] instanceof AudioBuffer)) {\n            // `setup` method has not been invoked\n            return this;\n        }\n\n        // the instance of `AudioBufferSourceNode` already exists ?\n        if (this.sources[selectedIndex] instanceof AudioBufferSourceNode) {\n            this.sources[selectedIndex].stop(this.context.currentTime);\n            this.sources[selectedIndex].disconnect(0);\n            this.sources[selectedIndex] = null;\n        }\n\n        const source = this.context.createBufferSource();\n\n        // for legacy browsers\n        source.start = source.start || source.noteGrainOn;\n        source.stop  = source.stop  || source.noteOff;\n\n        source.buffer = this.buffers[bufferIndex];\n\n        // Set properties\n        source.playbackRate.value = playbackRate * this.transpose;\n        source.loop               = loop;\n        source.loopStart          = loopStart;\n        source.loopEnd            = loopEnd;\n\n        this.volumes[selectedIndex].gain.value = volume;\n\n        this.envelopegenerator.clear(false);\n\n        // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n        this.envelopegenerator.ready(selectedIndex, source, this.volumes[selectedIndex]);\n        this.volumes[selectedIndex].connect(this.processor);\n        this.connect(this.processor, connects);\n\n        const startTime = this.context.currentTime + this.times.start;\n\n        source.start(startTime);\n\n        this.sources[selectedIndex] = source;\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.isStops[selectedIndex] = false;\n\n        // in the case of scheduling stop time\n        if (this.times.stop > 0) {\n            window.setTimeout(() => {\n                this.stop(selectedIndex);\n            }, (this.times.stop * 1000));\n        }\n\n        // Call on stopping audio\n        source.onended = () => {\n            this.isStops[selectedIndex] = true;\n        };\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                this.isStop = this.isStops.every(element => element);\n\n                if (this.isStop) {\n                    // Stop\n\n                    this.off(this.context.currentTime);\n\n                    this.envelopegenerator.clear(false);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the designated one-shot audio.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    stop(index) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex= this.settings[selectedIndex].buffer;\n\n        if (!((this.buffers[bufferIndex] instanceof AudioBuffer) && (this.sources[selectedIndex] instanceof AudioBufferSourceNode))) {\n            return this;\n        }\n\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBuffer` that is used in `OneshotModule`.\n     * @param {number} index This argument is required in the case of designating `AudioBuffer`.\n     * @return {Array.<AudioBuffer>|AudioBuffer}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.buffers.length)) ? this.buffers[i] : this.buffers;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oneshot = {\n            'transpose' : this.transpose\n        };\n\n        return params;\n    }\n\n    /**\n     * This method resets settings.\n     * @param {number} index This argument is in order to select target setting.\n     * @param {string} key This argument is in order to select parameter.\n     * @param {number|boolean} value This argument is new value.\n     * @return {OneshotModule} This is returned for method chain.\n     */\n    reset(index, key, value) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (String(key).toLowerCase() in this.settings[selectedIndex]) {\n            this.settings[selectedIndex][key.toLowerCase()] = value;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OneshotModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport VocalCanceler from './VocalCanceler';\n\n/**\n * This subclass defines properties for playing the single audio.\n * This class creates audio player that has higher features than `HTMLAudioElment`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class AudioModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.source = context.createBufferSource();  // for the instance of `AudioBufferSourceNode`\n        this.buffer = null;                          // for the instance of `AudioBuffer`\n\n        this.currentTime = 0;\n\n        this.paused = true;\n\n        this.callbacks = {\n            'decode' : () => {},\n            'ready'  : () => {},\n            'start'  : () => {},\n            'stop'   : () => {},\n            'update' : () => {},\n            'ended'  : () => {},\n            'error'  : () => {}\n        };\n\n        this.vocalcanceler = new VocalCanceler();\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    setup(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = 0;\n            let min = 0;\n            let max = 0;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return this.source.playbackRate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1024;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.source.playbackRate.value = v;\n                    }\n\n                    break;\n                case 'loop'   :\n                case 'looping':\n                    if (value === undefined) {\n                        return this.source.loop;\n                    }\n\n                    this.source.loop = Boolean(value);\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    if (this.buffer instanceof AudioBuffer) {\n                        v   = parseFloat(value);\n                        max = this.buffer.duration;\n                        min = 0;\n\n                        if ((v >= min) && (v <= max)) {\n                            if (this.paused) {\n                                this.currentTime = v;\n                            } else {\n                                this.stop();\n                                this.start(v);\n                            }\n                        }\n                    } else {\n                        this.currentTime = 0;\n                    }\n\n                    break;\n                case 'duration':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.duration : 0;  // Getter only\n                case 'samplerate':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.sampleRate : this.sampleRate;  // Getter only\n                case 'channels':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.numberOfChannels : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n     * @param {ArrayBuffer} arrayBuffer This argument is the instance of `ArrayBuffer`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    ready(arrayBuffer) {\n        if (arrayBuffer instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.buffer = buffer;\n\n                this.analyser.start('timeOverviewL', buffer);\n                this.analyser.start('timeOverviewR', buffer);\n\n                this.callbacks.ready(buffer);\n            };\n\n            this.context.decodeAudioData(arrayBuffer, successCallback, this.callbacks.error);\n\n            this.callbacks.decode(arrayBuffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts audio from the designated time.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.buffer instanceof AudioBuffer) && this.paused) {\n            const startTime = this.context.currentTime;\n\n            const pos = parseFloat(position);\n\n            this.currentTime = ((pos >= 0) && (pos <= this.buffer.duration)) ? pos : 0;\n\n            const playbackRate = this.source.playbackRate.value;\n            const loop         = this.source.loop;\n\n            this.source = this.context.createBufferSource();\n\n            // for legacy browsers\n            this.source.start = this.source.start || this.source.noteGrainOn;\n            this.source.stop  = this.source.stop  || this.source.noteOff;\n\n            this.source.buffer             = this.buffer;\n            this.source.playbackRate.value = playbackRate;\n            this.source.loop               = loop;\n\n            // AudioBufferSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            this.source.start(startTime, pos, (this.buffer.duration - pos));\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            this.paused = false;\n\n            this.on(startTime);\n\n            this.callbacks.start(this.source, this.currentTime);\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (this.currentTime < Math.floor(this.source.buffer.duration)) {\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n\n                            this.currentTime += ((1 * this.source.playbackRate.value) / this.source.buffer.sampleRate);\n\n                            const index = Math.floor(this.currentTime * this.source.buffer.sampleRate);\n                            const n100msec = 0.100 * this.source.buffer.sampleRate;\n\n                            // Invoke callback every 100 msec\n                            if ((index % n100msec) === 0) {\n                                this.callbacks.update(this.source, this.currentTime);\n                            }\n                        }\n\n                        this.analyser.timeOverviewL.update(this.currentTime);\n                        this.analyser.timeOverviewR.update(this.currentTime);\n                    } else {\n                        if (this.source.loop) {\n                            this.currentTime = 0;\n                        } else {\n                            this.end();\n                        }\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops audio.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.buffer instanceof AudioBuffer) && !this.paused) {\n            const stopTime = this.context.currentTime;\n\n            this.source.stop(stopTime);\n\n            this.off(stopTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Clear\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            this.paused = true;\n            this.callbacks.stop(this.source, this.currentTime);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBufferSourceNode`.\n     * @return {AudioBufferSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops audio according to audio state.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    toggle(position, connects, processCallback) {\n        if (this.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method rewinds audio.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    end() {\n        this.stop();\n        this.currentTime = 0;\n        this.callbacks.ended(this.source, this.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBuffer` exists.\n     * @return {boolean} If the instance of `AudioBuffer` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isBuffer() {\n        return this.buffer instanceof AudioBuffer;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBufferSourceNode` exists.\n     * @return {boolean} If the instance of `AudioBufferSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSource() {\n        return (this.source instanceof AudioBufferSourceNode) && (this.source.buffer instanceof AudioBuffer);\n    }\n\n    /**\n     * This method determines whether the audio is paused.\n     * @return {boolean} If the audio is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        return this.paused;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.audio = {\n            'playbackrate'  : this.isSource() ? this.source.playbackRate.value : 1,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule]';\n    }\n}\n","'use strict';\n\nimport AudioModule from '../AudioModule';\n\n/**\n * This class defines properties for processing sound data from `HTMLMediaElement`.\n * Namely, this class creates audio player that has higher features from `HTMLMediaElement`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {AudioModule}\n */\nexport default class MediaModule extends AudioModule {\n    static AUDIO = 'audio';\n    static VIDEO = 'video';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.source = null;  // for the instance of `MediaElementAudioSourceNode`\n        this.media  = null;  // for the instance of `HTMLMediaElement`\n        this.ext    = '';    // 'wav', 'ogg', 'mp3, 'webm', 'ogv', 'mp4' ...etc\n\n        this.playbackRate = 1;\n        this.controls     = false;\n        this.loop         = false;\n        this.muted        = false;\n        this.autoplay     = false;\n\n        // The keys are the event interfaces that are defined by `HTMLMediaElement`.\n        // For example, `loadstart`, `loadedmetadata`, `loadeddata`, `canplay`, `canplaythrough`, `timeupdate`, `ended` ...etc\n        this.listeners = {};\n    }\n\n    /**\n     * This method gets `HTMLMediaElement` and selects media format. In addition, this method adds event listeners that are defined by `HTMLMediaElement`.\n     * @param {HTMLAudioElement|HTMLVideoElement} media This argument is either `HTMLAudioElement` or `HTMLVideoElement`.\n     * @param {Array.<string>|string} formats This argument is usable media format. For example, 'wav', 'ogg', 'webm', 'mp4' ...etc.\n     * @param {object} listeners This argument is event handlers that are defined by `HTMLMediaElement`.\n     * @param {boolean} autoplay This argument is in order to determine autoplay. The default value is `false`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    setup(media, formats, listeners, autoplay) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('media' in properties) {\n                media = properties.media;\n            }\n\n            if ('formats' in properties) {\n                formats = properties.formats;\n            }\n\n            if ('listeners' in properties) {\n                listeners = properties.listeners;\n            }\n\n            if ('autoplay' in properties) {\n                autoplay = properties.autoplay;\n            }\n        }\n\n        let type = '';\n\n        if (media instanceof HTMLAudioElement) {\n            type = MediaModule.AUDIO;\n        } else if (media instanceof HTMLVideoElement) {\n            type = MediaModule.VIDEO;\n        } else {\n            return this;\n        }\n\n        this.media = media;\n\n        if (!Array.isArray(formats)) {\n            formats = [formats];\n        }\n\n        for (const format of formats) {\n            const f = `${type}/${String(format).toLowerCase()}`;\n\n            if (/^(?:maybe|probably)/.test(this.media.canPlayType(f))) {\n                this.ext = format;\n                break;\n            }\n        }\n\n        if (this.ext === '') {\n            throw new Error('Media format that can be played does not exist.');\n        }\n\n        if (Object.prototype.toString.call(listeners) === '[object Object]') {\n            for (const k in listeners) {\n                this.listeners[k.toLowerCase()] = (Object.prototype.toString.call(listeners[k]) === '[object Function]') ? listeners[k] : () => {};\n            }\n        }\n\n        this.autoplay = Boolean(autoplay);\n\n        // in the case of autoplay, `loadstart` event not fire\n        if (this.autoplay && !(this.source instanceof MediaElementAudioSourceNode)) {\n            this.source = this.context.createMediaElementSource(this.media);\n        }\n\n        this.media.addEventListener('loadstart', event => {\n            // To create the instance of `MediaElementAudioSourceNode` again causes error to occur\n            if (!(this.source instanceof MediaElementAudioSourceNode)) {\n                this.source = this.context.createMediaElementSource(this.media);\n            }\n\n            if ('loadstart' in this.listeners) {\n                this.listeners.loadstart(event);\n            }\n        }, false);\n\n        this.media.addEventListener('ended', event => {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            if ('ended' in this.listeners) {\n                this.listeners.ended(event);\n            }\n        }, false);\n\n        for (const k in this.listeners) {\n            this.media.addEventListener(k, event => {\n                this.listeners[(event.type).toLowerCase()](event);\n            }, false);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|MediaModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let r;\n\n            if (k === 'mastervolume') {\n                r = super.param(k, value);\n            }\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.playbackRate : this.playbackRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.5;  // for Chrome\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLMediaElement) {\n                            this.media.playbackRate = v;\n                        }\n\n                        this.playbackRate = v;\n                    }\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.currentTime : 0;\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        v   = parseFloat(value);\n                        min = 0;\n                        max = this.media.duration;\n\n                        if ((v >= min) && (v <= max)) {\n                            this.media.currentTime = v;\n                        }\n                    }\n\n                    break;\n                case 'loop'    :\n                case 'muted'   :\n                case 'controls':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media[k] : this[k];\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        this.media[k] = Boolean(value);\n                    }\n\n                    this[k] = Boolean(value);\n\n                    break;\n                case 'width' :\n                case 'height':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLVideoElement) ? this.media[k] : 0;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLVideoElement) {\n                            this.media[k] = v;\n                        }\n                    }\n\n                    break;\n                case 'duration':\n                    return this.media.duration;  // Getter only\n                case 'channels':\n                    return (this.source instanceof MediaElementAudioSourceNode) ? this.source.channelCount : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method prepares for playing the media anytime after loading the media resource.\n     * @param {string} source This argument is path name or `Data URL` or `Object URL` for the media resource.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    ready(source) {\n        const src = String(source);\n\n        try {\n            // `Data URL` or `Object URL` ?\n            if ((src.indexOf('data:') !== -1) || (src.indexOf('blob:') !== -1)) {\n                this.media.src = src;  // `Data URL` or `Object URL`\n            } else {\n                this.media.src = `${src}.${this.ext}`;  // Path\n            }\n        } catch (error) {\n            throw new Error('The designated resource cannot be loaded.');\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts media from the designated time.\n     * @param {number} position This argument is the time that media is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.source instanceof MediaElementAudioSourceNode) && this.media.paused) {\n            // MediaElementAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            const promise = this.media.play();\n\n            promise.then(() => {\n                const pos = parseFloat(position);\n\n                this.media.currentTime  = ((pos >= 0) && (pos <= this.media.duration)) ? pos : 0;\n                this.media.playbackRate = this.playbackRate;\n                this.media.controls     = this.controls;\n                this.media.loop         = this.loop;\n                this.media.muted        = this.muted;\n\n                this.on(this.context.currentTime);\n\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                const bufferSize = this.processor.bufferSize;\n\n                if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                    this.processor.onaudioprocess = processCallback;\n                } else {\n                    this.processor.onaudioprocess = event => {\n                        const inputLs  = event.inputBuffer.getChannelData(0);\n                        const inputRs  = event.inputBuffer.getChannelData(1);\n                        const outputLs = event.outputBuffer.getChannelData(0);\n                        const outputRs = event.outputBuffer.getChannelData(1);\n\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n                        }\n                    };\n                }\n            }).catch(() => {\n                this.stop();\n\n                if (this.autoplay) {\n                    this.media.muted  = this.muted = true;\n                    this.media.volume = 0;\n                }\n\n                this.start(position, connects, processCallback);\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops media.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.source instanceof MediaElementAudioSourceNode) && !this.media.paused) {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaElementAudioSourceNode`.\n     * @return {MediaElementAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops media according to media state.\n     * @param {number} position This argument is time that media is started at.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    toggle(position, connects, processCallback) {\n        if (this.media.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `HTMLMediaElement` exists.\n     * @return {boolean} If the instance of `HTMLMediaElement` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isMedia() {\n        return this.media instanceof HTMLMediaElement;\n    }\n\n    /**\n     * This method determines whether the instance of `MediaElementAudioSourceNode` exists.\n     * @return {boolean} If the instance of `MediaElementAudioSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isSource() {\n        return this.source instanceof MediaElementAudioSourceNode;\n    }\n\n    /**\n     * This method determines whether the media is paused.\n     * @return {boolean} If the media is paused or does not exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isPaused() {\n        return (this.media instanceof HTMLMediaElement) ? this.media.paused : true;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.media = {\n            'playbackrate'  : this.playbackRate,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        delete params.audio;\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[MediaModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport NoiseGate from './NoiseGate';\n\n/**\n * This class defines properties that processes sound data from WebRTC in Web Audio API.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class StreamModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        // for the instance of `MediaStreamAudioSourceNode`\n        this.source = null;\n\n        // for `navigator.mediaDevices.getUserMedia`\n        this.constraints = {\n            'audio' : true,\n            'video' : false\n        };\n\n        this.callbacks = {\n            'stream' : () => {},\n            'error'  : () => {}\n        };\n\n        this.output = true;\n\n        this.isStop = true;\n\n        this.noisegate = new NoiseGate();\n    }\n\n    /**\n     * This method sets up for using WebRTC.\n     * @param {object} constraints This argument is the 1st argument for `getUserMedia`.\n     * @param {function} streamCallback This argument is invoked on streaming.\n     * @param {function} errorCallback This argument is invoked when error occurs on streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    setup(constraints, streamCallback, errorCallback) {\n        if (Object.prototype.toString.call(constraints) === '[object Object]') {\n            this.constraints = constraints;\n        }\n\n        if (Object.prototype.toString.call(streamCallback) === '[object Function]') {\n            this.callbacks.stream = streamCallback;\n        }\n\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            this.callbacks.error = errorCallback;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|StreamModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            switch (k) {\n                case 'output':\n                    if (value === undefined) {\n                        return this.output;\n                    }\n\n                    this.output = Boolean(value);\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    ready() {\n        return this;\n    }\n\n    /**\n     * This method starts streaming.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    start(connects, processCallback) {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new Error('Cannot use WebRTC.');\n        }\n\n        const bufferSize = this.processor.bufferSize;\n\n        let isAnalyser = false;\n\n        const start = (stream, connects, processCallback) => {\n            this.source = this.context.createMediaStreamSource(stream);\n\n            // MediaStreamAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            if (!this.output) {\n                this.mastervolume.disconnect(0);\n\n                // for analyser\n                this.mastervolume.connect(this.analyser.input);\n\n                // for recording\n                this.mastervolume.connect(this.recorder.processor);\n                this.recorder.processor.connect(this.context.destination);\n\n                // for session\n                this.mastervolume.connect(this.session.sender);\n                this.session.sender.connect(this.context.destination);\n            }\n\n            this.on(this.context.currentTime);\n\n            if (!isAnalyser) {\n                this.analyser.start('time');\n                this.analyser.start('fft');\n                isAnalyser = true;\n            }\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.noisegate.start(inputLs[i]);\n                        outputRs[i] = this.noisegate.start(inputRs[i]);\n                    }\n                };\n            }\n        };\n\n        this.isStop = false;\n\n        navigator.mediaDevices.getUserMedia(this.constraints).then(stream => {\n            if (this.isStop) {\n                return;\n            }\n\n            start(stream, connects, processCallback);\n            this.callbacks.stream(stream);\n        }).catch(error => {\n            this.callbacks.error(error);\n        });\n\n        return this;\n    }\n\n    /**\n     * This method stops streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        this.source = null;\n\n        this.off(this.context.currentTime, true);\n\n        this.analyser.stop('time');\n        this.analyser.stop('fft');\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        this.isStop = true;\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaStreamAudioSourceNode`.\n     * @return {MediaStreamAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops streaming according to current state.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     */\n    toggle(connects, processCallback) {\n        if (this.isStreaming()) {\n            this.stop();\n        } else {\n            this.start(connects, processCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether streaming is active.\n     * @return {boolean} If streaming is active, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStreaming() {\n        return !this.isStop;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.stream = {\n            'output'    : this.output,\n            'noisegate' : {\n                'level' : this.noisegate.param('level')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from './SoundModule';\nimport OscillatorModule from './OscillatorModule';\nimport OneshotModule from './OneshotModule';\nimport NoiseModule from './NoiseModule';\nimport AudioModule from './AudioModule';\nimport MediaModule from './MediaModule';\nimport StreamModule from './StreamModule';\nimport MixerModule from './MixerModule';\nimport MIDI from './MIDI';\nimport MML from './MML';\nimport { read, file, ajax, decode, toFrequencies, convertTime, fullscreen, exitFullscreen } from './XSound';\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nconst IS_XSOUND = Boolean(window.AudioContext);\n\nif (IS_XSOUND) {\n    const audiocontext = new AudioContext();\n\n    // for legacy browsers\n    audiocontext.createScriptProcessor = audiocontext.createScriptProcessor || audiocontext.createJavaScriptNode;\n    audiocontext.createGain            = audiocontext.createGain            || audiocontext.createGainNode;\n    audiocontext.createDelay           = audiocontext.createDelay           || audiocontext.createDelayNode;\n    audiocontext.createPeriodicWave    = audiocontext.createPeriodicWave    || audiocontext.createWaveTable;\n\n    const sources = {\n        'oscillator' : new OscillatorModule(audiocontext),\n        'oneshot'    : new OneshotModule(audiocontext),\n        'noise'      : new NoiseModule(audiocontext),\n        'audio'      : new AudioModule(audiocontext),\n        'media'      : new MediaModule(audiocontext),\n        'stream'     : new StreamModule(audiocontext),\n        'mixer'      : new MixerModule(audiocontext),\n        'midi'       : new MIDI(audiocontext),\n        'mml'        : new MML(audiocontext)\n    };\n\n    /**\n     * This function is global object for getting the instance of `OscillatorModule` or `OneshotModule` or `NoiseModule` or `AudioModule` or `MediaModule` or `StreamModule` or `MixerModule` or `MIDI` or `MML` or `Oscillator`.\n     * @param {string} source This argument is one of 'oscillator', 'oneshot', 'noise', 'audio', 'media', 'stream', 'mixer', 'midi', 'mml'.\n     * @param {number} index This argument is in order to select one of some oscillators.\n     * @return {OscillatorModule|OneshotModule|NoiseModule|AudioModule|MediaModule|StreamModule|MixerModule|MIDI|MML|Oscillator}\n     */\n    const XSound = (source, index) => {\n        const s = String(source).replace(/-/g, '').toLowerCase();\n\n        switch (s) {\n            case 'oscillator':\n                if (index === undefined) {\n                    return sources.oscillator;\n                }\n\n                const i = parseInt(index, 10);\n\n                if ((i >= 0) && (i < sources.oscillator.length())) {\n                    return sources.oscillator.get(i);\n                }\n\n                return null;\n            case 'oneshot':\n            case 'noise'  :\n            case 'audio'  :\n            case 'media'  :\n            case 'stream' :\n            case 'mixer'  :\n            case 'midi'   :\n            case 'mml'    :\n                return sources[s];\n            default :\n                return null;\n        }\n    };\n\n    /**\n     * Class (Static) properties\n     */\n    XSound.IS_XSOUND         = IS_XSOUND;\n    XSound.SAMPLE_RATE       = audiocontext.sampleRate;\n    XSound.NUMBER_OF_INPUTS  = SoundModule.NUMBER_OF_INPUTS;\n    XSound.NUMBER_OF_OUTPUTS = SoundModule.NUMBER_OF_OUTPUTS;\n    XSound.read              = read;\n    XSound.file              = file;\n    XSound.ajax              = ajax;\n    XSound.decode            = decode;\n    XSound.toFrequencies     = toFrequencies;\n    XSound.convertTime       = convertTime;\n    XSound.fullscreen        = fullscreen;\n    XSound.exitFullscreen    = exitFullscreen;\n\n    /**\n     * This class (static) method changes state ('running') of `AudioContext`.\n     * The initial state is 'suspended' by Autoplay Policy Change.\n     * Therefore, this method must be invoked by user gestures.\n     * @return {Promise} This is returned as `Promise`.\n     */\n    XSound.setup = () => {\n        if (audiocontext.state !== 'running') {\n            return audiocontext.resume();\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * This class (static) method returns function as closure that is getter of cloned module.\n     * @return {function} This is returned as closure that is getter of cloned module.\n     */\n    XSound.clone = () => {\n        const clones = {\n            'oscillator' : new OscillatorModule(audiocontext),\n            'oneshot'    : new OneshotModule(audiocontext),\n            'noise'      : new NoiseModule(audiocontext),\n            'audio'      : new AudioModule(audiocontext),\n            'media'      : new MediaModule(audiocontext),\n            'stream'     : new StreamModule(audiocontext),\n            'mixer'      : new MixerModule(audiocontext),\n            'midi'       : new MIDI(audiocontext),\n            'mml'        : new MML(audiocontext)\n        };\n\n        const C = (source, index) => {\n            const s = String(source).replace(/-/g, '').toLowerCase();\n\n            switch (s) {\n                case 'oscillator':\n                    if (index === undefined) {\n                        return clones.oscillator;\n                    }\n\n                    const i = parseInt(index, 10);\n\n                    if ((i >= 0) && (i < clones.oscillator.length())) {\n                        return clones.oscillator.get(i);\n                    }\n\n                    return null;\n                case 'oneshot':\n                case 'noise'  :\n                case 'audio'  :\n                case 'media'  :\n                case 'stream' :\n                case 'mixer'  :\n                case 'midi'   :\n                case 'mml'    :\n                    return clones[s];\n                default :\n                    return null;\n            }\n        };\n\n        C.free  = sourceList => {\n            if (!Array.isArray(sourceList)) {\n                sourceList = [sourceList];\n            }\n\n            for (const source of sourceList) {\n                // Already deleted ?\n                if (source === null) {\n                    continue;\n                }\n\n                for (const key in clones) {\n                    if (source === clones[key]) {\n                        clones[key] = null;\n                    }\n                }\n            }\n        };\n\n        // Closure\n        return C;\n    };\n\n    /**\n     * This class (static) method releases memory of unnecessary instances.\n     * @param {Array.<SoundModule|MIDI|MML>} sourceList This argument is the array that contains the instances of `SoundModule` or `MIDI` or `MML`.\n     */\n    XSound.free = sourceList => {\n        if (!Array.isArray(sourceList)) {\n            sourceList = [sourceList];\n        }\n\n        for (const source of sourceList) {\n            // Already deleted ?\n            if (source === null) {\n                continue;\n            }\n\n            for (const key in sources) {\n                if (source === sources[key]) {\n                    sources[key] = null;\n                }\n            }\n        }\n    };\n\n    /**\n     * This class (static) method removes one of the global objects or both of the global objects.\n     * @param {boolean} deep This argument is in order to select whether removing both of global objects.\n     *     If this value is `true`, both of global objects are removed.\n     * @return {XSound}\n     */\n    XSound.noConflict = deep => {\n        if (window.X === XSound) {\n            window.X = undefined;\n        }\n\n        // both of global objects are removed ?\n        if (deep && (window.XSound === XSound)) {\n            window.XSound = undefined;\n        }\n\n        return XSound;\n    };\n\n    /**\n     * This class (static) method gets the instance of `AudioContext`.\n     * @return {AudioContext}\n     */\n    XSound.get = () => {\n        return audiocontext;\n    };\n\n    /**\n     * This class (static) method gets `currentTime` property in the instance of `AudioContext`.\n     * @return {number}\n     */\n    XSound.getCurrentTime = () => {\n        return audiocontext.currentTime;\n    };\n\n    /** @override */\n    XSound.toString = () => {\n        return '[XSound]';\n    };\n\n    // for Chrome 70+\n    const userAgent = navigator.userAgent.toLowerCase();\n\n    if ((userAgent.indexOf('chrome') !== -1) && (userAgent.indexOf('edge') === -1)) {\n        const setup = () => {\n            XSound.setup().then(() => {}).catch(() => {});\n\n            document.removeEventListener('click',      setup, true);\n            document.removeEventListener('mousedown',  setup, true);\n            document.removeEventListener('mouseup',    setup, true);\n            document.removeEventListener('touchstart', setup, true);\n            document.removeEventListener('touchend',   setup, true);\n        };\n\n        document.addEventListener('click',      setup, true);\n        document.addEventListener('mousedown',  setup, true);\n        document.addEventListener('mouseup',    setup, true);\n        document.addEventListener('touchstart', setup, true);\n        document.addEventListener('touchend',   setup, true);\n    }\n\n    // Export\n    window.XSound = XSound;\n    window.X      = XSound;  // Alias of XSound\n} else {\n    const XSound = () => null;\n\n    XSound.IS_XSOUND = IS_XSOUND;\n\n    // Export\n    window.XSound = XSound;\n    window.X      = XSound;  // Alias of XSound\n}\n","'use strict';\n\nimport TimeOverview from './TimeOverview';\nimport Time from './Time';\nimport FFT from './FFT';\n\n/**\n * This private class manages 3 private classes (`TimeOverview`, `Time`, `FFT`) for drawing sound wave.\n * @constructor\n */\nexport default class Analyser {\n    /**\n     * @param {AudioContext} context This argument is This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        window.requestAnimationFrame = window.requestAnimationFrame       ||\n                                       window.webkitRequestAnimationFrame ||\n                                       window.mozRequestAnimationFrame    ||\n                                       (callback => window.setTimeout(callback, (1000 / 60)));\n\n        window.cancelAnimationFrame = window.cancelAnimationFrame       ||\n                                      window.webkitCancelAnimationFrame ||\n                                      window.mozCancelAnimationFrame    ||\n                                      window.clearTimeout;\n\n        this.analyser = context.createAnalyser();\n        this.input    = context.createGain();\n\n        // GainNode (Input) -> AnalyserNode\n        this.input.connect(this.analyser);\n\n        this.timeOverviewL = new TimeOverview(context.sampleRate);\n        this.timeOverviewR = new TimeOverview(context.sampleRate);\n        this.time          = new Time(context.sampleRate);\n        this.fft           = new FFT(context.sampleRate);\n\n        // Set default value\n        this.analyser.fftSize               = 2048;\n        this.analyser.minDecibels           = -100;\n        this.analyser.maxDecibels           = -30;\n        this.analyser.smoothingTimeConstant = 0.8;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Analyser} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'fftsize':\n                    if (value === undefined) {\n                        return this.analyser.fftSize;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case   32:\n                        case   64:\n                        case  128:\n                        case  256:\n                        case  512:\n                        case 1024:\n                        case 2048:\n                            this.analyser.fftSize = v;\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequencybincount':\n                    return this.analyser.frequencyBinCount;  // Getter only\n                case 'mindecibels':\n                    if (value === undefined) {\n                        return this.analyser.minDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    max = -30;\n\n                    if (v < max) {\n                        this.analyser.minDecibels = v;\n                    }\n\n                    break;\n                case 'maxdecibels':\n                    if (value === undefined) {\n                        return this.analyser.maxDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -100;\n\n                    if (v > min) {\n                        this.analyser.maxDecibels = v;\n                    }\n\n                    break;\n                case 'smoothingtimeconstant':\n                    if (value === undefined) {\n                        return this.analyser.smoothingTimeConstant;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.analyser.smoothingTimeConstant = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates data for drawing and executes drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @param {AudioBuffer} buffer This argument is the instance of `AudioBuffer`. The data for drawing audio wave in overview of time domain is gotten from this argument.\n     * @return {Analyser} This is returned for method chain.\n     */\n    start(domain, buffer) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        let data = null;\n\n        switch (d) {\n            case 'timeoverviewl':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 0) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(0));\n                        this.timeOverviewL.start(data);\n                    }\n                }\n\n                break;\n            case 'timeoverviewr':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 1) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(1));\n                        this.timeOverviewR.start(data);\n                    }\n                }\n\n                break;\n            case 'time':\n                if (this.time.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.fftSize);\n                    this.analyser.getByteTimeDomainData(data);\n                    this.time.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.fftSize);\n                    this.analyser.getFloatTimeDomainData(data);\n                    this.time.start(data);\n                }\n\n                if (this.time.param('interval') === 'auto') {\n                    this.time.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.time.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.time.param('interval'));\n                }\n\n                break;\n            case 'fft':\n                if (this.fft.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.frequencyBinCount);\n                    this.analyser.getByteFrequencyData(data);\n                    this.fft.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.frequencyBinCount);\n                    this.analyser.getFloatFrequencyData(data);\n                    this.fft.start(data, this.analyser.minDecibels, this.analyser.maxDecibels);\n                }\n\n                if (this.fft.param('interval') === 'auto') {\n                    this.fft.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.fft.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.fft.param('interval'));\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {Analyser} This is returned for method chain.\n     */\n    stop(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                break;\n            case 'time':\n                if (this.time.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.time.timerid);\n                } else {\n                    window.clearTimeout(this.time.timerid);\n                }\n\n                this.time.timerid = null;\n\n                break;\n            case 'fft':\n                if (this.fft.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.fft.timerid);\n                } else {\n                    window.clearTimeout(this.fft.timerid);\n                }\n\n                this.fft.timerid = null;\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects domain for drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {TimeOverview|Time|FFT|Analyser} This value is the instance of selected class.\n     */\n    domain(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                return this[`timeOverview${d.slice(-1).toUpperCase()}`];\n            case 'time':\n            case 'fft' :\n                return this[d];\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method gets the instance of `AnalyserNode`.\n     * @return {AnalyserNode}\n     */\n    get() {\n        return this.analyser;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser]';\n    }\n}\n","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing audio wave in overview of time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport default class TimeOverview extends Visualizer {\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = null;\n        this.length     = 0;\n\n        this.currentTime  = 'rgba(0, 0, 0, 0.5)';  // This style is used for the rectangle that displays current time of audio\n        this.plotInterval = 0.0625;                // Draw wave at intervals of this value [sec]\n        this.textInterval = 60;                    // Draw text at intervals of this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    this.currentTime = String(value).toLowerCase();\n\n                    break;\n                case 'plotinterval':\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this[k.replace('interval', 'Interval')];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k.replace('interval', 'Interval')] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to Canvas.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval);\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) / 60)} min`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = context.getImageData(0, 0, width, height);\n        this.length     = data.length;\n\n        // This rectangle displays current time of audio\n        context.fillStyle = this.currentTime;\n        context.fillRect(this.styles.left, this.styles.top, 1, innerHeight);\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to SVG.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW));\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = Math.floor((i / this.sampleRate) / 60) + ' min';\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        // This rectangle displays current time of audio\n        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n        rect.classList.add('svg-current-time');\n\n        rect.setAttribute('x',      this.styles.left);\n        rect.setAttribute('y',      (this.styles.top + 1));\n        // rect.setAttribute('width',  1);\n        rect.setAttribute('height', (innerHeight - 1));\n\n        rect.setAttribute('stroke', 'none');\n        rect.setAttribute('fill',   this.currentTime);\n\n        svg.appendChild(rect);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = svg;\n        this.length     = data.length;\n\n        return this;\n    }\n\n    /**\n     * This method draws current time of audio on Canvas or SVG.\n     * @param {number} time This argument is current time of audio.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    update(time) {\n        const t = parseFloat(time);\n\n        if (isNaN(t) || (t < 0)) {\n            return this;\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                if (this.savedImage instanceof ImageData) {\n                    const context = this.context;\n\n                    const { width, height } = this.canvas;\n\n                    const innerWidth  = width  - (this.styles.left + this.styles.right);\n                    const innerHeight = height - (this.styles.top  + this.styles.bottom);\n                    const x           = Math.floor(((t * this.sampleRate) / this.length) * innerWidth);\n\n                    context.clearRect(0, 0, width, height);\n                    context.putImageData(this.savedImage, 0, 0);\n\n                    context.fillStyle = this.currentTime;\n                    context.fillRect(this.styles.left, (this.styles.top + 1), x, (innerHeight - 1));\n                }\n\n                break;\n            case Visualizer.SVG:\n                const rect = this.svg.querySelector('.svg-current-time');\n\n                if (rect instanceof SVGElement) {\n                    const width      = parseInt(this.svg.getAttribute('width'), 10);\n                    const innerWidth = width  - (this.styles.left + this.styles.right);\n                    const x          = Math.floor(((t * this.sampleRate) / this.length) * innerWidth);\n\n                    rect.setAttribute('width', x);\n                    // rect.setAttribute('transform', `translate(${x} 0)`);\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method registers event listener for setting current time by drag.\n     * @param {function} callback This argument is invoked when current time is changed.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    drag(callback) {\n        let drawNode = null;\n\n        let start = '';\n        let move  = '';\n        let end   = '';\n\n        // Touch Panel ?\n        if (/iPhone|iPad|iPod|Android/.test(navigator.userAgent)) {\n            start = 'touchstart';\n            move  = 'touchmove';\n            end   = 'touchend';\n        } else {\n            start = 'mousedown';\n            move  = 'mousemove';\n            end   = 'mouseup';\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                drawNode = this.canvas;\n                break;\n            case Visualizer.SVG:\n                drawNode = this.svg;\n                break;\n            default:\n                return this;\n        }\n\n        let isDown = false;\n\n        drawNode.addEventListener(start, event => {\n            this.draw(this.getOffsetX(event), callback);\n            isDown = true;\n        }, true);\n\n        drawNode.addEventListener(move, event => {\n            if (isDown) {\n                event.preventDefault();  // for Touch Panel\n                this.draw(this.getOffsetX(event), callback);\n            }\n        }, true);\n\n        window.addEventListener(end, () => {\n            if (isDown) {\n                isDown = false;\n            }\n        }, true);\n\n        return this;\n    }\n\n    /**\n     * This method draws the rectangle for current time of audio.\n     * @param {number} offsetX This argument is X coordinate on Canvas or SVG.\n     * @param {function} callback This argument is invoked when the rectangle is drawn.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    draw(offsetX, callback) {\n        let offsetLeft = 0;\n        let width      = 0;\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                offsetLeft = this.canvas.offsetLeft;\n                width      = this.canvas.width;\n                break;\n            case Visualizer.SVG:\n                offsetLeft = this.svg.parentNode.offsetLeft;\n                width      = parseInt(this.svg.getAttribute('width'), 10);\n                break;\n            default:\n                break;\n        }\n\n        let x = offsetX - (offsetLeft + this.styles.left);\n\n        width -= (this.styles.left + this.styles.right);\n\n        // Exceed ?\n        if (x < 0)     {x = 0;}\n        if (x > width) {x = width;}\n\n        const plot = (x / width) * this.length;\n        const time = plot / this.sampleRate;\n\n        this.update(time);\n\n        if (Object.prototype.toString.call(callback) === '[object Function]') {\n            callback(time);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method returns X coordinate from `Event` object.\n     * @param {Event} event This argument is the instance of `Event`.\n     * @return {number} This is returned as X coordinate.\n     */\n    getOffsetX(event) {\n        if (event.pageX) {\n            return event.pageX;\n        }\n\n        if (event.touches[0]) {\n            return event.touches[0].pageX;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser TimeOverview]';\n    }\n}\n","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport default class Time extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = Time.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.textInterval = 0.005;      // Draw text at intervals this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Time.UINT) || (v === Time.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle);\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        // Draw wave\n                        context.beginPath();\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((0.5 - (data[i] / 255)) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = (innerHeight / 2) + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, middle, this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Begin drawing\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, null, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME));\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_TIME);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor(((data[i] / 255) - 0.5) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     middle);\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${middle})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_TIME})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Time]';\n    }\n}\n","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in frequency domain (spectrum).\n * @constructor\n * @extends {Visualizer}\n */\nexport default class FFT extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = FFT.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.size         = 256;       // Range for drawing\n        this.textInterval = 1000;      // Draw text at intervals of this value [Hz]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === FFT.UINT) || (v === FFT.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'size':\n                    if (value === undefined) {\n                        return this.size;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = 1024;  // `AnalyserNode#fftSize` max 2048 -> half 1024\n\n                    if ((v > min) && (v <= max)) {\n                        this.size = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data, minDecibels, maxDecibels) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (Sampling rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Set style\n                context.strokeStyle = (this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)';  // line only\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = (Math.abs(data[i] - maxdB) * (innerHeight / range)) + this.styles.top;  // [dB] * [px / dB] = [px]\n\n                    if (i === 0) {\n                        context.moveTo((x + (this.styles.width / 2)), y);\n                    } else {\n                        context.lineTo(x, y);\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        context.beginPath();\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = -1 * Math.floor((data[i] / 255) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = innerHeight + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, (innerHeight + this.styles.top), this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i} dB`;\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data, minDecibels, maxDecibels) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (sample rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = Math.floor(-1 * (data[i] - maxdB) * (innerHeight / range)) + this.styles.top;\n\n                    if (i === 0) {\n                        d += `M${x + (this.styles.width / 2)} ${y}`;\n                    } else {\n                        d += ` L${x} ${y}`;\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          ((this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)'));  // line only\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                svg.appendChild(path);\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        // Draw wave\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_FFT);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            let rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((data[i] / 255) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     (this.styles.top + innerHeight));\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${this.styles.top + innerHeight})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_FFT})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i}dB`;\n                        const x = this.styles.left;\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = this.styles.left;\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser FFT]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for multi track recording.\n * @constructor\n */\nexport default class Recorder {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs) {\n        this.sampleRate = context.sampleRate;\n\n        this.context   = context;\n        this.processor = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.mixedLs = null;  /** @type {Float32Array} */\n        this.mixedRs = null;  /** @type {Float32Array} */\n\n        this.numberOfTracks = 0;\n        this.trackLs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n        this.trackRs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n\n        this.activeTrack = -1;    // There is not any active track in the case of -1\n        this.paused      = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n\n        this.gainL = 1;  // Gain of Left  channel\n        this.gainR = 1;  // Gain of Right channel\n    }\n\n    /**\n     * This method sets the max number of tracks.\n     * @param {number} numberOfTracks This argument is the max number of tracks. The default value is 1.\n     * @return {Recorder} This is returned for method chain.\n     */\n    setup(numberOfTracks) {\n        const n = parseInt(numberOfTracks, 10);\n\n        if (n > 0) {\n            this.numberOfTracks = n;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            for (let i = 0; i < n; i++) {this.trackLs[i] = [];}  // n x array\n            for (let i = 0; i < n; i++) {this.trackRs[i] = [];}  // n x array\n        } else {\n            this.numberOfTracks = 1;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            this.trackLs[0] = [];  // 1 * array\n            this.trackRs[0] = [];  // 1 * array\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Recorder} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'gainl':\n                case 'gainr':\n                    if (value === undefined) {\n                        return this[`gain${k.slice(-1).toUpperCase()}`];\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[`gain${k.slice(-1).toUpperCase()}`] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects active track.\n     * @param {number} track This argument is in order to select active track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    ready(track) {\n        if (this.isTrack(track)) {\n            this.activeTrack = track;\n        } else {\n            this.activeTrack = -1;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts recording. If there is not any active track, this method stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    start() {\n        if ((this.activeTrack !== -1) && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                if (this.activeTrack !== -1) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const recordedLs = new Float32Array(bufferSize);\n                    const recordedRs = new Float32Array(bufferSize);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        recordedLs[i] = this.gainL * inputLs[i];\n                        recordedRs[i] = this.gainR * inputRs[i];\n                    }\n\n                    this.trackLs[this.activeTrack].push(recordedLs);\n                    this.trackRs[this.activeTrack].push(recordedRs);\n                } else {\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method turns off the all of tracks, and stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    stop() {\n        this.activeTrack = -1;  // Flag becomes inactive\n        this.paused      = true;\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the designated track number is valid.\n     * @param {number} track This argument is track number for validation.\n     * @return {boolean} If the designated track is valid range, this value is `true`. Otherwise, this value is `false`.\n     */\n    isTrack(track) {\n        const t = parseInt(track, 10);\n\n        return (t >= 0) && (t < this.numberOfTracks);\n    }\n\n    /**\n     * This method determines whether active track exists.\n     * @return {number} This is returned as active track.\n     */\n    getActiveTrack() {\n        return this.activeTrack;\n    }\n\n    /**\n     * This method synthesizes recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @return {Float32Array} This is returned as array for synthesized sound.\n     */\n    mixTrack(channel) {\n        const tracks      = this[`track${channel}s`];\n        const mixes       = { 'values' : null, 'sum' : 0, 'num' : 0 };\n        const bufferSize  = this.processor.bufferSize;\n        let currentBuffer = 0;\n        let index         = 0;\n\n        // Calculate sound data size\n        let numberOfMaxBuffers = 0;\n\n        // Search the max number of Float32Arrays each track\n        for (const track of tracks) {\n            if (numberOfMaxBuffers < track.length) {\n                numberOfMaxBuffers = track.length;\n            }\n        }\n\n        mixes.values = new Float32Array(numberOfMaxBuffers * bufferSize);\n\n        while (true) {\n            for (let currentTrack = 0, len = tracks.length; currentTrack < len; currentTrack++) {\n                if (tracks[currentTrack][currentBuffer] instanceof Float32Array) {\n                    mixes.sum += tracks[currentTrack][currentBuffer][index];\n                    mixes.num++;\n                }\n            }\n\n            if (mixes.num > 0) {\n                const offset = currentBuffer * bufferSize;\n\n                // Average\n                mixes.values[offset + index] = mixes.sum / mixes.num;\n\n                // Clear\n                mixes.sum = 0;\n                mixes.num = 0;\n\n                // Next data\n                if (index < (bufferSize - 1)) {\n                    // Next element in Float32Array\n                    index++;\n                } else {\n                    // Next Float32Array\n                    currentBuffer++;\n                    index = 0;\n                }\n            } else {\n                return mixes.values;\n            }\n        }\n    }\n\n    /**\n     * This method synthesizes the all of recorded sounds in track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    mix() {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        this.mixedLs = this.mixTrack('L');\n        this.mixedRs = this.mixTrack('R');\n\n        return this;\n    }\n\n    /**\n     * This method clears recorded sound of the designated track.\n     * @param {number|string} track This argument is track for clearing.\n     * @return {Recorder} This is returned for method chain.\n     */\n    clear(track) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        if (String(track).toLowerCase() === 'all') {\n            for (const track of this.trackLs) {track.length = 0;}\n            for (const track of this.trackRs) {track.length = 0;}\n        } else {\n            if (this.isTrack(track)) {\n                this.trackLs[track].length = 0;\n                this.trackRs[track].length = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates WAVE file as Object URL or Data URL.\n     * @param {string|number} track This argument is the target track.\n     * @param {number} numberOfChannels This argument is in order to select stereo or monaural of WAVE file. The default value is 2.\n     * @param {number} qbit This argument is quantization bit of PCM. The default value is 16 (bit).\n     * @return {string} This is returned as Object URL or Data URL for WAVE file.\n     */\n    create(track, numberOfChannels, qbit) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        /** @type {Float32Array} */\n        let soundLs = null;\n\n        /** @type {Float32Array} */\n        let soundRs = null;\n\n        if (String(track).toLowerCase() === 'all') {\n            this.mix();\n\n            soundLs = this.mixedLs;\n            soundRs = this.mixedRs;\n        } else {\n            if (this.isTrack(track)) {\n                soundLs = this.trackLs[track - 1];\n                soundRs = this.trackRs[track - 1];\n            }\n        }\n\n        // Sound data exists ?\n        if ((soundLs.length === 0) && (soundRs.length === 0)) {\n            return '';\n        }\n\n        // PCM parameters\n        const CHANNEL = (numberOfChannels === 1) ? 1 : 2;\n        const QBIT    = (qbit === 8) ? 8 : 16;\n        const SIZE    = (CHANNEL === 1) ? Math.min(soundLs.length, soundRs.length) : (2 * Math.min(soundLs.length, soundRs.length));\n\n        // Parameters for WAVE file\n        const FMT_CHUNK  = 28;\n        const DATA_CHUNK =  8 + (SIZE * (QBIT / 8));\n        const CHUNK_SIZE = 36 + (SIZE * (QBIT / 8));\n        const RIFF_CHUNK =  8 + (FMT_CHUNK + DATA_CHUNK);\n        const RATE       = this.sampleRate;\n        const BPS        = RATE * CHANNEL * (QBIT / 8);\n        const DATA_SIZE  = SIZE * (QBIT / 8);\n\n        /** @type {Uint8Array|Int16Array} */\n        let sounds = null;\n\n        switch (QBIT) {\n            case 8:\n                sounds = new Uint8Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 8 bit unsigned integer (-1 -> 0, 0 -> 128, 1 -> 255)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = ((soundLs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Left channel\n                    } else {\n                        binary = ((soundRs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (Math.pow(2, 8) - 1)) {binary = (Math.pow(2, 8) - 1);}\n                    if (binary < (Math.pow(2, 0) - 1)) {binary = (Math.pow(2, 0) - 1);}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            case 16:\n                sounds = new Int16Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 16 bit integer (-1 -> -32768, 0 -> 0, 1 -> 32767)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = soundLs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Left channel\n                    } else {\n                        binary = soundRs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (+Math.pow(2, 15) - 1)) {binary =  Math.pow(2, 15) - 1;}\n                    if (binary < (-Math.pow(2, 15) - 1)) {binary = -Math.pow(2, 15) - 1;}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        // Create WAVE file (Object URL or Data URL)\n        window.URL = window.URL || window.webkitURL || window.mozURL;\n\n        if (window.URL && window.URL.createObjectURL) {\n            // Object URL\n\n            const waves = [];\n\n            waves[0] = 0x52;  // 'R'\n            waves[1] = 0x49;  // 'I'\n            waves[2] = 0x46;  // 'F'\n            waves[3] = 0x46;  // 'F'\n\n            waves[4] = (CHUNK_SIZE >>  0) & 0xFF;\n            waves[5] = (CHUNK_SIZE >>  8) & 0xFF;\n            waves[6] = (CHUNK_SIZE >> 16) & 0xFF;\n            waves[7] = (CHUNK_SIZE >> 24) & 0xFF;\n\n            waves[8]  = 0x57;  // 'W'\n            waves[9]  = 0x41;  // 'A'\n            waves[10] = 0x56;  // 'V'\n            waves[11] = 0x45;  // 'E'\n\n            // fmt chunk\n            waves[12] = 0x66;  // 'f'\n            waves[13] = 0x6D;  // 'm'\n            waves[14] = 0x74;  // 't'\n            waves[15] = 0x20;  // ' '\n\n            waves[16] = 16;\n            waves[17] =  0;\n            waves[18] =  0;\n            waves[19] =  0;\n\n            waves[20] = 1;\n            waves[21] = 0;\n\n            // fmt chunk -> Channels (Monaural or Stereo)\n            waves[22] = CHANNEL;\n            waves[23] = 0;\n\n            // fmt chunk -> Sample rate\n            waves[24] = (RATE >>  0) & 0xFF;\n            waves[25] = (RATE >>  8) & 0xFF;\n            waves[26] = (RATE >> 16) & 0xFF;\n            waves[27] = (RATE >> 24) & 0xFF;\n\n            // fmt chunk -> Byte per second\n            waves[28] = (BPS >>  0) & 0xFF;\n            waves[29] = (BPS >>  8) & 0xFF;\n            waves[30] = (BPS >> 16) & 0xFF;\n            waves[31] = (BPS >> 24) & 0xFF;\n\n            // fmt chunk -> Block size\n            waves[32] = CHANNEL * (QBIT / 8);\n            waves[33] = 0;\n\n            // fmt chunk -> Byte per Sample\n            waves[34] = QBIT;\n            waves[35] = 0;\n\n            // data chunk\n            waves[36] = 0x64;  // 'd'\n            waves[37] = 0x61;  // 'a'\n            waves[38] = 0x74;  // 't\n            waves[39] = 0x61;  // 'a'\n\n            waves[40] = (DATA_SIZE >>  0) & 0xFF;\n            waves[41] = (DATA_SIZE >>  8) & 0xFF;\n            waves[42] = (DATA_SIZE >> 16) & 0xFF;\n            waves[43] = (DATA_SIZE >> 24) & 0xFF;\n\n            for (let i = 0; i < SIZE; i++) {\n                switch (QBIT) {\n                    case  8:\n                        waves[(RIFF_CHUNK - DATA_SIZE) + i] = sounds[i];\n                        break;\n                    case 16:\n                        // The byte order in WAVE file is little endian\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 0] = ((sounds[i] >> 0) & 0xFF);\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 1] = ((sounds[i] >> 8) & 0xFF);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            const blob      = new Blob([new Uint8Array(waves)], { 'type' : 'audio/wav' });\n            const objectURL = window.URL.createObjectURL(blob);\n\n            return objectURL;\n        }\n\n        // Data URL\n\n        let wave = '';\n\n        wave += 'RIFF';\n        wave += String.fromCharCode(((CHUNK_SIZE >> 0) & 0xFF), ((CHUNK_SIZE >> 8) & 0xFF), ((CHUNK_SIZE >> 16) & 0xFF), ((CHUNK_SIZE >> 24) & 0xFF));\n        wave += 'WAVE';\n\n        // fmt chunk\n        wave += `fmt ${String.fromCharCode(16, 0, 0, 0)}`;\n        wave += String.fromCharCode(1, 0);\n\n        // fmt chunk -> Channels (Monaural or Stereo)\n        wave += String.fromCharCode(CHANNEL, 0);\n\n        // fmt chunk -> Sample rate\n        wave += String.fromCharCode(((RATE >> 0) & 0xFF), ((RATE >> 8) & 0xFF), ((RATE >> 16) & 0xFF), ((RATE >> 24) & 0xFF));\n\n        // fmt chunk -> Byte per second\n        wave += String.fromCharCode(((BPS >> 0) & 0xFF), ((BPS >> 8) & 0xFF), ((BPS >> 16) & 0xFF), ((BPS >> 24) & 0xFF));\n\n        // fmt chunk -> Block size\n        wave += String.fromCharCode((CHANNEL * (QBIT / 8)), 0);\n\n        // fmt chunk -> Byte per Sample\n        wave += String.fromCharCode(QBIT, 0);\n\n        // data chunk\n        wave += 'data';\n        wave += String.fromCharCode(((DATA_SIZE >> 0) & 0xFF), ((DATA_SIZE >> 8) & 0xFF), ((DATA_SIZE >> 16) & 0xFF), ((DATA_SIZE >> 24) & 0xFF));\n\n        for (let i = 0; i < SIZE; i++) {\n            switch (QBIT) {\n                case  8:\n                    wave += String.fromCharCode(sounds[i]);\n                    break;\n                case 16:\n                    // The byte order in WAVE file is little endian\n                    wave += String.fromCharCode(((sounds[i] >> 0) & 0xFF), ((sounds[i] >> 8) & 0xFF));\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        const base64  = window.btoa(wave);\n        const dataURL = `data:audio/wav;base64,${base64}`;\n\n        return dataURL;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Recorder]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for sound session on network.\n * @constructor\n */\nexport default class Session {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     * @param {Analyser} analyser This argument is the instance of `Analyser`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs, analyser) {\n        this.isActive = false;\n\n        this.context  = context;\n        this.analyser = analyser;  // the instance of `Analyser`\n\n        this.sender   = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n        this.receiver = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.websocket = null;  // for the instance of `WebSocket`\n        this.paused    = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n    }\n\n    /**\n     * This method creates the instance of `WebSocket` and registers event handlers.\n     * @param {boolean} tls This argument is in order to select protocol (either `wss` or `ws`).\n     * @param {string} host This argument is server's hostname.\n     * @param {number} port This argument is port number for connection.\n     * @param {string} path This argument is file that is executed in server side.\n     * @param {function} openCallback This argument is invoked as `onopen` event handler in the instance of `WebSocket`.\n     * @param {function} closeCallback This argument is invoked as `onclose` event handler in the instance of `WebSocket`.\n     * @param {function} errorCallback This argument is invoked as `onerror` event handler in the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    setup(tls, host, port, path, openCallback, closeCallback, errorCallback) {\n        /*\n        if (!navigator.onLine) {\n            // Clear\n            this.isActive = false;\n            this.paused   = true;\n            this.connect();\n            this.websocket = null;\n\n            throw new Error('Now Offline.');\n        }\n        */\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('tls' in properties) {\n                tls = properties.tls;\n            }\n\n            if ('host' in properties) {\n                host = properties.host;\n            }\n\n            if ('port' in properties) {\n                port = properties.port;\n            }\n\n            if ('path' in properties) {\n                path = properties.path;\n            }\n\n            if ('open' in properties) {\n                openCallback = properties.open;\n            }\n\n            if ('close' in properties) {\n                closeCallback = properties.close;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n        }\n\n        const scheme = tls ? 'wss://' : 'ws://';\n\n        if (path.charAt(0) !== '/') {\n            path = `/${path}`;\n        }\n\n        const p = parseInt(port, 10);\n\n        if (isNaN(p) || (p < 0) || (p > 65535)) {\n            return this;\n        }\n\n        this.websocket = new WebSocket(`${scheme}${host}:${p}${path}`);\n        this.websocket.binaryType = 'arraybuffer';\n\n        this.websocket.onopen = event => {\n            if (Object.prototype.toString.call(openCallback) === '[object Function]') {\n                openCallback(event);\n            }\n        };\n\n        this.websocket.onclose = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(closeCallback) === '[object Function]') {\n                closeCallback(event);\n            }\n        };\n\n        this.websocket.onerror = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(event);\n            }\n        };\n\n        this.websocket.onmessage = event => {\n            if (!this.isActive) {\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n\n                return;\n            }\n\n            if (event.data instanceof ArrayBuffer) {\n                const total  = event.data.byteLength / Float32Array.BYTES_PER_ELEMENT;\n                const length = Math.floor(total / 2);\n                const offset = length * Float32Array.BYTES_PER_ELEMENT;\n\n                const bufferLs = new Float32Array(event.data,      0, length);  // Get Left  channel data\n                const bufferRs = new Float32Array(event.data, offset, length);  // Get Right channel data\n\n                // Start drawing sound wave\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                this.receiver.onaudioprocess = event => {\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (bufferLs instanceof Float32Array) {outputLs.set(bufferLs);}\n                    if (bufferRs instanceof Float32Array) {outputRs.set(bufferRs);}\n\n                    // bufferLs = null;\n                    // bufferRs = null;\n\n                    if (!this.isActive || (this.websocket === null)) {\n                        this.analyser.stop('time');\n                        this.analyser.stop('fft');\n                    }\n                };\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes according to state.\n     * @return {Session} This is returned for method chain.\n     */\n    connect() {\n        // Clear connection\n        this.receiver.disconnect(0);\n        this.sender.disconnect(0);\n\n        this.receiver.onaudioprocess = null;\n        this.sender.onaudioprocess   = null;\n\n        if (this.isActive) {\n            // ScriptProcessorNode (Input) -> Analyser\n            this.receiver.connect(this.analyser.input);\n\n            // ScriptProcessorNode (Input) -> AudioDestinationNode (Output)\n            this.receiver.connect(this.context.destination);\n        } else {\n            this.paused = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sends sound data to server.\n     * @return {Session} This is returned for method chain.\n     */\n    start() {\n        if (this.isActive && this.isConnected() && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.sender.bufferSize;\n\n            this.sender.onaudioprocess = event => {\n                if (this.isActive && this.isConnected()) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const buffer = new Float32Array(2 * bufferSize);\n                    const offset = parseInt((buffer.length / 2), 10);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        buffer[i]          = inputLs[i];\n                        buffer[offset + i] = inputRs[i];\n                    }\n\n                    if (this.websocket.bufferedAmount === 0) {\n                        this.websocket.send(buffer);\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method closes connection to server and destroys the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    close() {\n        if (this.websocket instanceof WebSocket) {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n            this.websocket.close();\n\n            this.websocket = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether there is the connection to server.\n     * @return {boolean} If the connection to server exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isConnected() {\n        return (this.websocket instanceof WebSocket) && (this.websocket.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @param {function} stateCallback This argument is invoked when `bufferedAmount` equals to 0.\n     * @param {function} waitCallback This argument is invoked until `bufferedAmount` equals to 0.\n     * @return {Session} This is returned for method chain.\n     */\n    state(state, stateCallback, waitCallback) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (Object.prototype.toString.call(waitCallback) === '[object Function]') {\n            waitCallback();\n        }\n\n        const intervalid = window.setInterval(() => {\n            if ((this.websocket instanceof WebSocket) && (this.websocket.bufferedAmount !== 0)) {\n                return;\n            }\n\n            if (String(state).toLowerCase() === 'toggle') {\n                this.isActive = !this.isActive;\n            } else {\n                this.isActive = Boolean(state);\n            }\n\n            this.connect();\n\n            if (Object.prototype.toString.call(stateCallback) === '[object Function]') {\n                stateCallback();\n            }\n\n            window.clearInterval(intervalid);\n        }, 10);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `WebSocket`.\n     * @return {WebSocket}\n     */\n    get() {\n        return this.websocket;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Session]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Compressor extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.compressor = context.createDynamicsCompressor();\n\n        // Set default value\n        this.compressor.threshold.value = -24;\n        this.compressor.knee.value      = 30;\n        this.compressor.ratio.value     = 12;\n        this.compressor.attack.value    = 0.003;\n        this.compressor.release.value   = 0.25;\n\n        // `Compressor` is connected by default\n        this.state(true);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.compressor) {\n                if (value === undefined) {\n                    return this.compressor[k].value;\n                }\n\n                const v = parseFloat(value);\n\n                const minValues = {\n                    'threshold' : -100,\n                    'knee'      : 0,\n                    'ratio'     : 1,\n                    'attack'    : 0,\n                    'release'   : 0\n                };\n\n                const maxValues = {\n                    'threshold' : 0,\n                    'knee'      : 40,\n                    'ratio'     : 20,\n                    'attack'    : 1,\n                    'release'   : 1\n                };\n\n                const min = minValues[k];\n                const max = maxValues[k];\n\n                if ((v >= min) && (v <= max)) {\n                    this.compressor[k].value = v;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.compressor.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n            // GainNode (Input) -> DynamicsCompressorNode -> GainNode (Output)\n            this.input.connect(this.compressor);\n            this.compressor.connect(this.output);\n        } else {\n            // Effect OFF\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'threshold' : this.compressor.threshold.value,\n            'knee'      : this.compressor.knee.value,\n            'ratio'     : this.compressor.ratio.value,\n            'attack'    : this.compressor.attack.value,\n            'release'   : this.compressor.release.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Compressor]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Distortion extends Effector {\n    static CLEAN      = 'clean';\n    static CRUNCH     = 'crunch';\n    static OVERDRIVE  = 'overdrive';\n    static DISTORTION = 'distortion';\n    static FUZZ       = 'fuzz';\n\n    static AMOUNTS = {\n        'CLEAN'      : 0.0,\n        'CRUNCH'     : 0.5,\n        'OVERDRIVE'  : 0.7,\n        'DISTORTION' : 0.8,\n        'FUZZ'       : 0.9\n    };\n\n    /**\n     * This class (static) method creates the instance of `Float32Array` for distortion.\n     * @param {number} amount This argument is the depth of distortion.\n     * @param {number} numberOfSamples This argument is the size of `Float32Array`.\n     * @return {Float32Array|null} This is `curve` property in `WaveShaperNode`.\n     */\n    static createCurve = (amount, numberOfSamples) => {\n        if ((amount > 0) && (amount < 1)) {\n            const curves = new Float32Array(numberOfSamples);\n\n            const k = (2 * amount) / (1 - amount);\n\n            for (let i = 0; i < numberOfSamples; i++) {\n                // LINEAR INTERPOLATION: x := (c - a) * (z - y) / (b - a) + y\n                // a = 0, b = 2048, z = 1, y = -1, c = i\n                const x = (((i - 0) * (1 - (-1))) / (numberOfSamples - 0)) + (-1);\n                curves[i] = ((1 + k) * x) / (1 + k * Math.abs(x));\n            }\n\n            return curves;\n        }\n\n        return null;  // Clean sound (default value)\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.distortion = context.createWaveShaper();\n        this.drive      = context.createGain();\n        this.color      = context.createBiquadFilter();\n        this.tone       = context.createBiquadFilter();\n\n        // Distortion type\n        this.type = Distortion.CLEAN;\n\n        // for creating curve\n        this.numberOfSamples = 4096;\n\n        // Initialize parameters\n        this.drive.gain.value      = 1;\n        this.color.type            = (typeof this.color.type === 'string') ? 'bandpass' : (this.color.BANDPASS || 2);\n        this.color.frequency.value = 350;\n        this.color.Q.value         = Math.SQRT1_2;\n        this.color.gain.value      = 0;  // Not used\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n\n        // `Distortion` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else  {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'curve':\n                    if (value === undefined) {\n                        return this.distortion.curve;\n                    }\n\n                    let curve = null;\n\n                    switch (String(value).toLowerCase()) {\n                        case Distortion.CLEAN:\n                            this.type = Distortion.CLEAN;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CLEAN, this.numberOfSamples);\n                            break;\n                        case Distortion.CRUNCH:\n                            this.type = Distortion.CRUNCH;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CRUNCH, this.numberOfSamples);\n                            break;\n                        case Distortion.OVERDRIVE:\n                            this.type = Distortion.OVERDRIVE;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.OVERDRIVE, this.numberOfSamples);\n                            break;\n                        case Distortion.DISTORTION:\n                            this.type = Distortion.DISTORTION;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.DISTORTION, this.numberOfSamples);\n                            break;\n                        case Distortion.FUZZ:\n                            this.type = Distortion.FUZZ;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.FUZZ, this.numberOfSamples);\n                            break;\n                        default:\n                            if (value instanceof Float32Array) {\n                                curve = value;\n                            }\n\n                            break;\n                    }\n\n                    this.distortion.curve = curve;\n\n                    break;\n                case 'samples':\n                    if (value === undefined) {\n                        return this.numberOfSamples;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    if (v >= 0) {\n                        this.numberOfSamples = v;\n                        this.param('curve', this.type);\n                    }\n\n                    break;\n                case 'drive':\n                    if (value === undefined) {\n                        return this.drive.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.drive.gain.value = v;\n                    }\n\n                    break;\n                case 'color':\n                case 'tone' :\n                    if (value === undefined) {\n                        return this[k].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.distortion.disconnect(0);\n        this.drive.disconnect(0);\n        this.color.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Color) -> WaveShaperNode (Distortion) -> GainNode (Drive) -> BiquadFilterNode (Tone) -> GainNode (Output)\n            this.input.connect(this.color);\n            this.color.connect(this.distortion);\n            this.distortion.connect(this.drive);\n            this.drive.connect(this.tone);\n            this.tone.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'   : this.isActive,\n            'curve'   : this.type,\n            'samples' : this.numberOfSamples,\n            'drive'   : this.drive.gain.value,\n            'color'   : this.color.frequency.value,\n            'tone'    : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Distortion]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Wah extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.lowpass = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.lowpass.type            = (typeof this.lowpass.type === 'string') ? 'lowpass' : (this.lowpass.LOWPASS || 0);\n        this.lowpass.frequency.value = 350;\n        this.lowpass.Q.value         = 1;\n        this.lowpass.gain.value      = 0;  // Not used\n\n        this.depth.gain.value  = 0;\n        this.rate.value        = 0;\n        this.depthRate         = 0;\n\n        // `Wah` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.lowpass.frequency);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.lowpass.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.frequency.value = v;\n                        this.depth.gain.value        = this.lowpass.frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.lowpass.frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.lowpass.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.Q.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.lowpass.frequency);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.lowpass.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Low-Pass Filter) -> GainNode (Output)\n            this.input.connect(this.lowpass);\n            this.lowpass.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'cutoff'    : this.lowpass.frequency.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'resonance' : this.lowpass.Q.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Wah]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Equalizer extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     **/\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.bass     = context.createBiquadFilter();\n        this.middle   = context.createBiquadFilter();\n        this.treble   = context.createBiquadFilter();\n        this.presence = context.createBiquadFilter();\n\n        // Set filter type\n        this.bass.type     = (typeof this.bass.type     === 'string') ? 'lowshelf'  : (this.bass.LOWSHELF      || 3);\n        this.middle.type   = (typeof this.middle.type   === 'string') ? 'peaking'   : (this.middle.PEAKING     || 5);\n        this.treble.type   = (typeof this.treble.type   === 'string') ? 'peaking'   : (this.treble.PEAKING     || 5);\n        this.presence.type = (typeof this.presence.type === 'string') ? 'highshelf' : (this.presence.HIGHSHELF || 4);\n\n        // Set cutoff frequency\n        this.bass.frequency.value     =  500;  // 500 Hz\n        this.middle.frequency.value   = 1000;  // 1 kHz\n        this.treble.frequency.value   = 2000;  // 2 kHz\n        this.presence.frequency.value = 4000;  // 4 kHz\n\n        // Set Q\n        // this.bass.Q.value     = Math.SQRT1_2;  // Not used\n        this.middle.Q.value   = Math.SQRT1_2;\n        this.treble.Q.value   = Math.SQRT1_2;\n        // this.presence.Q.value = Math.SQRT1_2;  // Not used\n\n        // Set Gain\n        this.bass.gain.value     = 0;\n        this.middle.gain.value   = 0;\n        this.treble.gain.value   = 0;\n        this.presence.gain.value = 0;\n\n        // `Equalizer` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'bass'    :\n                case 'middle'  :\n                case 'treble'  :\n                case 'presence':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.bass.disconnect(0);\n        this.middle.disconnect(0);\n        this.treble.disconnect(0);\n        this.presence.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Bass) -> BiquadFilterNode (Middle) -> BiquadFilterNode (Treble) -> BiquadFilterNode (Presence) -> GainNode (Output)\n            this.input.connect(this.bass);\n            this.bass.connect(this.middle);\n            this.middle.connect(this.treble);\n            this.treble.connect(this.presence);\n            this.presence.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'bass'     : this.bass.gain.value,\n            'middle'   : this.middle.gain.value,\n            'treble'   : this.treble.gain.value,\n            'presence' : this.presence.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Equalizer]';\n    }\n}\n\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Filter extends Effector {\n    // for legacy browsers\n    static FILTER_TYPES = {\n        'lowpass'   : 0,\n        'highpass'  : 1,\n        'bandpass'  : 2,\n        'lowshelf'  : 3,\n        'highshelf' : 4,\n        'peaking'   : 5,\n        'notch'     : 6,\n        'allpass'   : 7\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.filter = context.createBiquadFilter();\n\n        // for legacy browsers\n        this.filter.frequency.setTargetAtTime = this.filter.frequency.setTargetAtTime || this.filter.frequency.setTargetValueAtTime;\n\n        // Initialize parameters\n        this.filter.type            = (typeof this.filter.type === 'string') ? 'lowpass' : (this.filter.LOWPASS || 0);\n        this.filter.frequency.value = 350;\n        this.filter.Q.value         = 1;\n        this.filter.gain.value      = 0;\n\n        this.maxFrequency = this.filter.frequency.value;\n        this.range        = 0.1;  // 10% -> between `this.maxFrequency * 0.1` and `this.maxFrequency`\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 1.0;\n        this.release = 1.0;\n\n        // `Filter` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.filter.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Filter.FILTER_TYPES) {\n                        this.filter.type = (typeof this.filter.type === 'string') ? v : Filter.FILTER_TYPES[v];\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filter.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.maxFrequency           = v;\n                        this.filter.frequency.value = v;\n                    }\n\n                    break;\n                case 'gain':\n                    if (value === undefined) {\n                        return this.filter.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.gain.value = v;\n                    }\n\n                    break;\n                case 'q':\n                    if (value === undefined) {\n                        return this.filter.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.Q.value = v;\n                    }\n\n                    break;\n                case 'range':\n                    if (value === undefined) {\n                        return this.range;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.range= v;\n                    }\n\n                    break;\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.filter.disconnect(0);\n\n        if (this.isActive) {\n            // Effector ON\n\n            // GainNode (Input) -> BiquadFilterNode -> GainNode (Output)\n            this.input.connect(this.filter);\n            this.filter.connect(this.output);\n        } else {\n            // Effector OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            const t0      = s;\n            const t1      = t0 + this.attack;\n            const t2      = this.decay;\n            const t2Value = this.sustain * this.maxFrequency;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t0);\n            this.filter.frequency.setValueAtTime(minFrequnecy, t0);\n            this.filter.frequency.linearRampToValueAtTime(this.maxFrequency, t1);  // Attack\n            this.filter.frequency.setTargetAtTime(t2Value, t1, t2);  // Decay -> Sustain\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime) {\n        if (this.isActive) {\n            let s = parseFloat(stopTime) - this.release;\n\n           if (isNaN(s) || (s < this.context.currentTime)) {\n               s = this.context.currentTime;\n           }\n\n            const t3 = s;\n            const t4 = this.release;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t3);\n            this.filter.frequency.setValueAtTime(this.filter.frequency.value, t3);\n            this.filter.frequency.setTargetAtTime(minFrequnecy, t3, t4);  // Sustain -> Release\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'type'      : this.filter.type,\n            'frequency' : this.filter.frequency.value,\n            'Q'         : this.filter.Q.value,\n            'gain'      : this.filter.gain.value,\n            'range'     : this.range,\n            'attack'    : this.attack,\n            'decay'     : this.decay,\n            'sustain'   : this.sustain,\n            'release'   : this.release\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Filter]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Autopanner extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createStereoPanner();\n\n        // Initialize parameters\n        this.panner.pan.value = 0;\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Autopanner` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (pan)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.panner.pan);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                       return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                       return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> StereoPannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.panner.pan);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Autopanner]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class AutopannerFallback extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitudeL = context.createGain();\n        this.amplitudeR = context.createGain();\n        this.splitter   = context.createChannelSplitter(2);\n        this.merger     = context.createChannelMerger(2);\n\n        this.amplitudeL.gain.value = 1;  // 1 +- depth\n        this.amplitudeR.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameters\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `AutopannerFallback` is not connected by default\n        this.state(false);\n\n        // LFO\n        this.lfoSplitter = context.createChannelSplitter(2);\n\n        // OscillatorNode (LFO) -> GainNode (Depth) -> ScriptProcessorNode -> ChannelSplitterNode -> AudioParam (gain) (L) / (R)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.processor);\n        this.processor.connect(this.lfoSplitter);\n        this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n        this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitudeL.disconnect(0);\n        this.amplitudeR.disconnect(0);\n        this.splitter.disconnect(0);\n        this.splitter.disconnect(1);\n        this.merger.disconnect(0);\n\n        if (this.isActive) {\n            // GainNode (Input) -> ChannelSplitterNode -> GainNode (L) / (R) -> ChannelMergerNode -> GainNode (Output)\n            this.input.connect(this.splitter);\n            this.splitter.connect(this.amplitudeL, 0, 0);\n            this.splitter.connect(this.amplitudeR, 1, 0);\n            this.amplitudeL.connect(this.merger, 0, 0);\n            this.amplitudeR.connect(this.merger, 0, 1);\n            this.merger.connect(this.output);\n        } else {\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                const inputs   = event.inputBuffer.getChannelData(0);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                if (this.isActive && (this.depth.gain.value !== 0) && (this.rate.value !== 0)) {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] =  inputs[i];\n                        outputRs[i] = -inputs[i];\n                    }\n                } else {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = 0;\n                        outputRs[i] = 0;\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.processor);\n            this.processor.connect(this.lfoSplitter);\n            this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n            this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule AutopannerFallback]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Tremolo extends Effector {\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Tremolo` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'wave':\n                    if (value === undefined) {\n                        return this.lfo.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Tremolo.WAVE_TYPES) {\n                        this.lfo.type = (typeof this.lfo.type === 'string') ? v : Tremolo.WAVE_TYPES[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value,\n            'wave'  : this.lfo.type\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Tremolo]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Ringmodulator extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 0;  // 0 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 1;\n        this.rate.value       = 0;\n\n        // `Ringmodulator` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Ringmodulator]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Phaser extends Effector {\n    static MAXIMUM_STAGES = 24;  // The maximum number of All-Pass Filters\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.numberOfStages = 12;  // The default number of All-Pass Filters\n        this.filters        = new Array(Phaser.MAXIMUM_STAGES);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i]                 = context.createBiquadFilter();\n            this.filters[i].type            = (typeof this.filters[i].type === 'string') ? 'allpass' : (this.filters[i].ALLPASS || 7);\n            this.filters[i].frequency.value = 350;\n            this.filters[i].Q.value         = 1;\n            this.filters[i].gain.value      = 0;  // Not used\n        }\n\n        this.mix      = context.createGain();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.depth.gain.value    = 0;\n        this.rate.value          = 0;\n        this.mix.gain.value      = 0;\n        this.feedback.gain.value = 0;\n        this.depthRate           = 0;\n\n        // `Phaser` is not connected by default\n        this.state(false);\n\n        // LFO\n        // GainNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.depth.connect(this.filters[i].frequency);\n        }\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'stage':\n                    if (value === undefined) {\n                        return this.numberOfStages;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case  0:\n                        case  2:\n                        case  4:\n                        case  8:\n                        case 12:\n                        case 24:\n                            this.numberOfStages = v;\n                            this.connect();\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filters[0].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[i].frequency.value = v;\n                        }\n\n                        this.depth.gain.value = this.filters[0].frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.filters[0].Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[0].Q.value = v;\n                        }\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.filters[0].frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i].disconnect(0);\n        }\n\n        this.mix.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive && (this.numberOfStages > 0)) {\n            // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.filters[0]);\n\n            for (let i = 0; i < this.numberOfStages; i++) {\n                if (i < (this.numberOfStages - 1)) {\n                    this.filters[i].connect(this.filters[i + 1]);\n                } else {\n                    this.filters[i].connect(this.mix);\n                    this.mix.connect(this.output);\n\n                    // Feedback\n                    // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Feedback) -> BiquadFilterNode (All-Pass Filter x N) ...\n                    this.filters[i].connect(this.feedback);\n                    this.feedback.connect(this.filters[0]);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n           // Connect nodes again\n           this.lfo.connect(this.depth);\n\n           for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n               this.depth.connect(this.filters[i].frequency);\n           }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'stage'     : this.numberOfStages,\n            'frequency' : this.filters[0].frequency.value,\n            'resonance' : this.filters[0].Q.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'mix'       : this.mix.gain.value,\n            'feedback'  : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Phaser]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Flanger extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Flanger` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (delayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Flanger]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Chorus extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Chorus` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (elayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Chorus]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Delay extends Effector {\n    static MAX_DELAY_TIME = 5;  // Max delay time is 5000 [ms]\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay(Delay.MAX_DELAY_TIME);\n        this.dry      = context.createGain();\n        this.wet      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.dry.gain.value        = 1;\n        this.wet.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n\n        // `Delay` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = Delay.MAX_DELAY_TIME;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                    }\n\n                    break;\n                case 'dry'     :\n                case 'wet'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Wet) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.wet);\n            this.wet.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'dry'      : this.dry.gain.value,\n            'wet'      : this.wet.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Delay]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Reverb extends Effector {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.rirs      = [];\n        this.convolver = context.createConvolver();\n        this.dry       = context.createGain();\n        this.wet       = context.createGain();\n        this.tone      = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.dry.gain.value       = 1;\n        this.wet.gain.value       = 0;\n        this.tone.type            = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value = 350;\n        this.tone.Q.value         = Math.SQRT1_2;\n        this.tone.gain.value      = 0;  // Not used\n\n        // `Reverb` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.convolver.buffer;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = this.rirs.length - 1;\n\n                    if (value === null) {\n                        this.convolver.buffer = null;\n\n                        // If `buffer` in `ConvolverNode` is `null` after setting the instance of `AudioBuffer`, `Reverb` is not OFF.\n                        // Therefore, `Reverb` is OFF by disconnecting nodes.\n                        this.input.disconnect(0);\n                        this.input.connect(this.output);\n                    } else if ((v >= min) && (v <= max)) {\n                        this.convolver.buffer = this.rirs[v];\n                        this.connect();\n                    }\n\n                    break;\n                case 'dry':\n                case 'wet':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                case 'rirs':\n                    return this.rirs;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.convolver.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> ConvolverNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.convolver);\n            this.convolver.connect(this.wet);\n            this.wet.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets instance of `AudioBuffer` to `ConvolverNode`.\n     * @param {AudioBuffer|ArrayBuffer} impulse This argument is in order to convolve impulse response.\n     *     This argument is the instance of `AudioBuffer` or `ArrayBuffer` for impulse response.\n     * @param {function} errorCallback This argument is in order to be invoked when error occurs.\n     * @return {Reverb} This is returned for method chain.\n     * @override\n     */\n    start(impulse, errorCallback) {\n        if ((impulse instanceof AudioBuffer) || (impulse === null)) {\n            this.convolver.buffer = impulse;\n            this.rirs.push(impulse);  // Add to preset\n        } else if (impulse instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.convolver.buffer = buffer;\n                this.rirs.push(buffer);  // Add to preset\n            };\n\n            if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n                errorCallback = () => {};\n            }\n\n            this.context.decodeAudioData(impulse, successCallback, errorCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax for Revreb presets.\n     * @param {Array.<string>|Array.<AudioBuffer>} rirs This argument is either URLs or the instances of `AudioBuffer` for impulse response.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked when the creating the instances of `AudioBuffer` was completed.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {Reverb} This is returned for method chain.\n     */\n    preset(rirs, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('rirs' in properties) {\n                rirs = properties.rirs;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(rirs)) {\n            rirs = [rirs];\n        }\n\n        this.rirs = new Array(rirs.length);\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogresss = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.rirs[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (let i = 0, len = this.rirs.length; i < len; i++) {\n                            if (this.rirs[i] === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, Reverb.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = rirs.length; i < len; i++) {\n            if (typeof rirs[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(rirs[i], i);\n            } else if (rirs[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.rirs[i] = rirs[i];\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'dry'   : this.dry.gain.value,\n            'wet'   : this.wet.gain.value,\n            'tone'  : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Reverb]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Panner extends Effector {\n    static PANNING_MODELS = {\n        'equalpower' : 0,\n        'HRTF'       : 1\n    };\n\n    static DISTANCE_MODELS = {\n        'linear'      : 0,\n        'inverse'     : 1,\n        'exponential' : 2\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createPanner();\n\n        this.positions    = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.orientations = { 'x' : 1, 'y' : 0, 'z' : 0 };\n\n        this.panner.refDistance   = 1;\n        this.panner.maxDistance   = 10000;\n        this.panner.rolloffFactor = 1;\n\n        this.panner.coneInnerAngle = 360;\n        this.panner.coneOuterAngle = 360;\n        this.panner.coneOuterGain  = 0;\n\n        this.panner.panningModel  = (typeof this.panner.panningModel  === 'string') ? 'HRTF'    : (this.panner.HRTF || 1);\n        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? 'inverse' : (this.panner.INVERSE_DISTANCE || 1);\n\n        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n\n        // `Panner` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'ox':\n                case 'oy':\n                case 'oz':\n                    if (value === undefined) {\n                        return this.orientations[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.orientations[k.charAt(1)] = v;\n                        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n                    }\n\n                    break;\n                case 'refdistance':\n                    if (value === undefined) {\n                        return this.panner.refDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.panner.refDistance = v;\n                    }\n\n                    break;\n                case 'maxdistance':\n                    if (value === undefined) {\n                        return this.panner.maxDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.panner.maxDistance = v;\n                    }\n\n                    break;\n                case 'rollofffactor':\n                    if (value === undefined) {\n                        return this.panner.rolloffFactor;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.rolloffFactor = v;\n                    }\n\n                    break;\n                case 'coneinnerangle':\n                    if (value === undefined) {\n                        return this.panner.coneInnerAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneInnerAngle = v;\n                    }\n\n                    break;\n                case 'coneouterangle':\n                    if (value === undefined) {\n                        return this.panner.coneOuterAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterAngle = v;\n                    }\n\n                    break;\n                case 'coneoutergain':\n                    if (value === undefined) {\n                        return this.panner.coneOuterGain;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterGain = v;\n                    }\n\n                    break;\n                case 'panningmodel':\n                    if (value === undefined) {\n                        return this.panner.panningModel;\n                    }\n\n                    v = /HRTF/i.test(value) ? String(value).toUpperCase() : String(value).toLowerCase();\n\n                    if (v in Panner.PANNING_MODELS) {\n                        this.panner.panningModel = (typeof this.panner.panningModel === 'string') ? v : Panner.PANNING_MODELS[v];\n                    }\n\n                    break;\n                case 'distancemodel':\n                    if (value === undefined) {\n                        return this.panner.distanceModel;\n                    }\n\n                    v = String(value).replace(/-/g, '').toLowerCase();\n\n                    if (v in Panner.DISTANCE_MODELS) {\n                        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? v : Panner.DISTANCE_MODELS[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> PannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'          : this.isActive,\n            'positions'      : this.positions,\n            'orientations'   : this.orientations,\n            'refDistance'    : this.panner.refDistance,\n            'maxDistance'    : this.panner.maxDistance,\n            'rolloffFactor'  : this.panner.rolloffFactor,\n            'coneInnerAngle' : this.panner.coneInnerAngle,\n            'coneOuterAngle' : this.panner.coneOuterAngle,\n            'coneOuterGain'  : this.panner.coneOuterGain,\n            'panningModel'   : this.panner.panningModel,\n            'distanceModel'  : this.panner.distanceModel\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Panner]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines property for audio listener.\n * These properties relate to properties of `PannerNode`.\n * @constructor\n */\nexport default class Listener {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        // the instance of `AudioListener`\n        this.listener = context.listener;\n\n        // Set default value\n        this.positions = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.fronts    = { 'x' : 0, 'y' : 0, 'z' : -1 };\n        this.ups       = { 'x' : 0, 'y' : 1, 'z' : 0 };\n\n        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Listener} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'fx':\n                case 'fy':\n                case 'fz':\n                    if (value === undefined) {\n                        return this.fronts[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.fronts[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                case 'ux':\n                case 'uy':\n                case 'uz':\n                    if (value === undefined) {\n                        return this.ups[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.ups[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'positions' : this.positions,\n            'fronts'    : this.fronts,\n            'ups'       : this.ups\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Listener]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Envelope Generator.\n * @constructor\n */\nexport default class EnvelopeGenerator {\n    static MIN_GAIN = 1e-3;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        /** @type {Array.<GainNode>} */\n        this.generators = [];\n\n        // for `GainNode`\n        this.activeIndexes = [];\n        this.activeCounter = 0;\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 0.5;\n        this.release = 1.0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|EnvelopeGenerator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects the instance of `AudioNode`.\n     * @param {number} index This argument is in order to select the instance of `GainNode` that is Envelope Generator.\n     * @param {AudioNode} input This argument is the instance of `AudioNode` as input.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    ready(index, input, output) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        if ((input instanceof AudioNode) && (output instanceof AudioNode)) {\n            input.connect(this.generators[i]);\n            this.generators[i].connect(output);\n        } else if (input instanceof AudioNode) {\n            input.connect(this.generators[i]);\n        } else if (output instanceof AudioNode) {\n            this.generators[i].connect(output);\n        }\n\n        this.activeIndexes[i] = i;\n        this.activeCounter++;\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack -> Decay -> Sustain).\n     * @param {number} startTime This argument is the start time of Attack.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    start(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Attack -> Decay -> Sustain\n        const t0      = s;\n        const t1      = t0 + this.attack;\n        const t2      = this.decay;\n        const t2Value = this.sustain;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // Start from `gain.value = 0`\n            this.generators[activeIndex].gain.cancelScheduledValues(t0);\n            this.generators[activeIndex].gain.setValueAtTime(0, t0);\n\n            // Attack : `gain.value` increases linearly until assigned time (t1)\n            this.generators[activeIndex].gain.linearRampToValueAtTime(1, t1);\n\n            // Decay -> Sustain : `gain.value` gradually decreases to value of Sustain during of Decay time (t2) from assigned time (t1)\n            this.generators[activeIndex].gain.setTargetAtTime(t2Value, t1, t2);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack or Decay or Sustain -> Release).\n     * @param {number} stopTime This argument is the start time of Release.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        let s = parseFloat(stopTime) - this.release;\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Sustain -> Release\n        const t3 = s;\n        const t4 = this.release;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // in the case of mouseup on the way of Decay\n            this.generators[activeIndex].gain.cancelScheduledValues(t3);\n            this.generators[activeIndex].gain.setValueAtTime(this.generators[activeIndex].gain.value, t3);\n\n            // Release : `gain.value` gradually decreases to 0 during of Release time (t4) from assigned time (t3)\n            this.generators[activeIndex].gain.setTargetAtTime(0, t3, t4);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {GainNode} This is returned as the instance of `GainNode` for Envelope Generator.\n     */\n    getGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        return this.generators[i];\n    }\n\n    /**\n     * This method sets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    setGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        this.generators[i] = this.context.createGain();\n\n        // for legacy browsers\n        this.generators[i].gain.setTargetAtTime = this.generators[i].gain.setTargetAtTime || this.generators[i].gain.setTargetValueAtTime;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the all of gain schedulings have ended.\n     * @return {boolean} If the all of gain schedulings have ended, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStop() {\n        let counter = 0;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            if (this.generators[activeIndex].gain.value > EnvelopeGenerator.MIN_GAIN) {\n                return false;\n            }\n\n            counter++;\n\n            // the all of schedulings are stopped ?\n            if (counter === this.activeCounter) {\n                return true;\n            }\n        }\n    }\n\n    /**\n     * This method clears variables for managing the instance of `GainNode`.\n     * @param {boolean} isDisconnect This argument is in order to determine whether disconnect `AudioNode`.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    clear(isDisconnect) {\n        this.activeIndexes.length = 0;\n        this.activeCounter = 0;\n\n        for (const generator of this.generators) {\n            generator.gain.cancelScheduledValues(this.context.currentTime);\n            generator.gain.value = 1;\n\n            if (isDisconnect) {\n                generator.disconnect(0);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'attack'  : this.attack,\n            'decay'   : this.decay,\n            'sustain' : this.sustain,\n            'release' : this.release\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule EnvelopeGenerator]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for the instance of `OscillatorNode`.\n * @constructor\n */\nexport default class Oscillator {\n    // 1 Octave = 1200 cent\n    static OCTAVE = 1200;\n\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {boolean} state This argument is initial state.\n     */\n    constructor(context, state) {\n        this.isActive = state;\n\n        this.context = context;\n\n        this.source = context.createOscillator();\n\n        // for legacy browsers\n        this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n        this.source.start           = this.source.start           || this.source.noteOn;\n        this.source.stop            = this.source.stop            || this.source.noteOff;\n\n        this.volume = context.createGain();\n\n        // in order to not call in duplicate `start` or `stop`  method in the instance of `OscillatorNode`\n        this.isStop = true;\n\n        this.octave  = 0;\n        this.fine    = 0;\n        this.customs = {\n            'real' : new Float32Array([0, 1]),\n            'imag' : new Float32Array([0, 1])\n        };\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|Oscillator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.source.type;\n                    }\n\n                    if (Object.prototype.toString.call(value) !== '[object Object]') {\n                        v = String(value).toLowerCase();\n\n                        if (v in Oscillator.WAVE_TYPES) {\n                            this.source.type = (typeof this.source.type === 'string') ? v : Oscillator.WAVE_TYPES[v];\n                        }\n                    } else {\n                        // Custom wave\n                        if (('real' in value) && ('imag' in value)) {\n                            let reals = null;\n                            let imags = null;\n\n                            if (value.real instanceof Float32Array) {\n                                reals = value.real;\n                            } else if (Array.isArray(value.real)) {\n                                reals = new Float32Array(value.real);\n                            }\n\n                            if (value.imag instanceof Float32Array) {\n                                imags = value.imag;\n                            } else if (Array.isArray(value.imag)) {\n                                imags = new Float32Array(value.imag);\n                            }\n\n                            if ((reals instanceof Float32Array) && (imags instanceof Float32Array)) {\n                                const MAX_SIZE = 4096;  // This size is defined by specification\n\n                                if (reals.length > MAX_SIZE) {reals = reals.subarray(0, MAX_SIZE);}\n                                if (imags.length > MAX_SIZE) {imags = imags.subarray(0, MAX_SIZE);}\n\n                                // The 1st value is fixed by 0 (This is is defined by specification)\n                                if (reals[0] !== 0) {reals[0] = 0;}\n                                if (imags[0] !== 0) {imags[0] = 0;}\n\n                                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                                this.source.setPeriodicWave(periodicWave);\n                                this.customs.real = reals;\n                                this.customs.imag = imags;\n                            }\n                        }\n                    }\n\n                    break;\n                case 'octave':\n                    if (value === undefined) {\n                        return this.octave;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -4800 / Oscillator.OCTAVE;\n                    max =  4800 / Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.octave = v;\n                        this.source.detune.value = this.fine + (v * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'fine':\n                    if (value === undefined) {\n                        return this.fine;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -Oscillator.OCTAVE;\n                    max =  Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.fine = v;\n                        this.source.detune.value = v + (this.octave * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'volume':\n                case 'gain'  :\n                    if (value === undefined) {\n                        return this.volume.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.volume.gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    ready(output) {\n        if (this.isActive) {\n            // for saving value\n            const params = {\n                'type'      : this.source.type,\n                'frequency' : this.source.frequency.value,\n                'detune'    : this.source.detune.value\n            };\n\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.source.disconnect(0);\n            }\n\n            this.source = this.context.createOscillator();\n\n            // for legacy browsers\n            this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n            this.source.start           = this.source.start           || this.source.noteOn;\n            this.source.stop            = this.source.stop            || this.source.noteOff;\n\n            if (params.type === 'custom') {\n                // Custom wave\n                const reals        = this.customs.real;\n                const imags        = this.customs.imag;\n                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                this.source.setPeriodicWave(periodicWave);\n            } else {\n                this.source.type = params.type;\n            }\n\n            this.source.frequency.value = params.frequency;\n            this.source.detune.value    = params.detune;\n\n            this.volume.connect(output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts sound.\n     * @param {number} startTime This argument is the start time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive) {\n            this.source.start(startTime);\n            this.isStop = false;\n        } else {\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.isStop = true;\n            }\n\n            this.source.disconnect(0);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops sound.\n     * @param {number} stopTime This argument is the stop time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        if (!this.isStop) {\n            this.source.stop(stopTime);\n            this.source.disconnect(0);\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Oscillator} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `OscillatorNode`.\n     * @return {OscillatorNode}\n     */\n    get() {\n        return this.source;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Oscillator]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Glide.\n * @constructor\n */\nexport default class Glide {\n    static LINEAR      = 'linear';\n    static EXPONENTIAL = 'exponential';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.frequencies = {\n            'start' : -1,  // Abnormal value for the 1st sound\n            'end'   : 0\n        };\n\n        this.time = 0;             // Glide time\n        this.type = Glide.LINEAR;  // either 'linear' or 'exponential'\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Glide} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'time':\n                    if (value === undefined) {\n                        return this.time;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.time = v;\n                    }\n\n                    break;\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Glide.LINEAR) || (v === Glide.EXPONENTIAL)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets frequencies for Glide.\n     * @param {number} frequency This argument is the frequency at which glide ends.\n     * @return {Glide} This is returned for method chain.\n     */\n    ready(frequency) {\n        this.frequencies.end = frequency;\n\n        const diff = (this.frequencies.start === -1) ? 0 : (this.frequencies.end - this.frequencies.start);\n\n        if ((this.frequencies.start === -1) || (this.time === 0) || (diff === 0)) {\n            // The 1st sound or Glide OFF or The same sound\n            this.frequencies.start = this.frequencies.end;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts Glide.\n     * @param {OscillatorNode} oscillator This argument is the instance of `OscillatorNode`.\n     * @param {number} startTime This argument is the start time of Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    start(oscillator, startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        const t0 = s;\n        const t1 = t0 + this.time;\n\n        // Start Glide\n        oscillator.frequency.cancelScheduledValues(t0);\n        oscillator.frequency.setValueAtTime(this.frequencies.start, t0);\n        oscillator.frequency[`${this.type}RampToValueAtTime`](this.frequencies.end, t1);\n\n        return this;\n    }\n\n    /**\n     * This method stops Glide. Moreover, This method prepares for next Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    stop() {\n        // Stop Glide or on the way of Glide\n        this.frequencies.start = this.frequencies.end;\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Glide]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\n\nexport default class NoiseModule extends SoundModule {\n    static WHITE_NOISE = 'whitenoise';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.type = NoiseModule.WHITE_NOISE;\n\n        this.envelopegenerator.setGenerator(0);\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|NoiseModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            return (r === undefined) ? this : r;\n        }\n    }\n\n    /** @override */\n    start(connects) {\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // GainNode (Envelope Generator) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.envelopegenerator.getGenerator(0), connects);\n\n        // ScriptProcessorNode (Input) -> GainNode (Envelope Generator)\n        this.envelopegenerator.ready(0, this.processor);\n\n        this.envelopegenerator.start(this.context.currentTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        const bufferSize = this.processor.bufferSize;\n\n        this.processor.onaudioprocess = event => {\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            if (this.envelopegenerator.isStop()) {\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n            } else {\n                for (let i = 0; i < bufferSize; i++) {\n                    outputLs[i] = 2 * (Math.random() - 0.5);\n                    outputRs[i] = 2 * (Math.random() - 0.5);\n                }\n            }\n        };\n\n        return this;\n    }\n\n    /** @override */\n    stop() {\n        this.envelopegenerator.stop(this.context.currentTime);\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[NoiseModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Vocal Canceler.\n * @constructor\n */\nexport default class VocalCanceler {\n    constructor() {\n        this.depth = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|VocalCanceler} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method removes vocal part in the played audio.\n     * @param {number} dataL This argument is gain level for Left channel.\n     * @param {number} dataR This argument is gain level for Right channel.\n     * @return {number} This is returned as audio data except vocal part.\n     */\n    start(dataL, dataR) {\n        return dataL - (this.depth * dataR);\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule VocalCanceler]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Noise Gate.\n * @constructor\n */\nexport default class NoiseGate {\n    constructor() {\n        this.level = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|NoiseGate} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'level':\n                    if (value === undefined) {\n                        return this.level;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.level = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method detects background noise and removes this.\n     * @param {number} data This argument is amplitude (between -1 and 1).\n     * @return {number} This is returned as 0 or the raw data.\n     */\n    start(data) {\n        const d = Math.abs(parseFloat(data));\n\n        // data : The amplitude is equal to argument.\n        // 0    : Because signal is detected as background noise, the amplitude is 0.\n        return (d > this.level) ? data : 0;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule NoiseGate]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport OscillatorModule from '../OscillatorModule';\nimport OneshotModule from '../OneshotModule';\nimport AudioModule from '../AudioModule';\nimport MediaModule from '../MediaModule';\nimport StreamModule from '../StreamModule';\n\n/**\n * This class defines properties for mixing sound sources that is defined in this library.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class MixerModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        /** @type {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} */\n        this.sources = [];\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method mixes sound source.\n     * @param {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} sources This argument is the array of sound source that is defined by this library.\n     * @return {MixerModule} This is returned for method chain.\n     */\n    mix(sources) {\n        if (!Array.isArray(sources)) {\n            sources = [sources];\n        }\n\n        this.sources = sources;\n\n        for (const source of this.sources) {\n            if (!((source instanceof OscillatorModule) || (source instanceof OneshotModule) || (source instanceof AudioModule) || (source instanceof MediaModule) || (source instanceof StreamModule))) {\n                return this;\n            }\n\n            const stopTime = this.context.currentTime;\n\n            this.off(stopTime, false);\n\n            source.analyser.stop('time');\n            source.analyser.stop('fft');\n            source.isAnalyser = false;\n\n            source.recorder.stop();\n            source.session.close();\n\n            // ScriptProcessorNode (each sound source) -> ScriptProcessorNode (Mix sound sources)\n            source.processor.disconnect(0);\n            source.processor.connect(this.processor);\n        }\n\n        // (... ->) ScriptProcessorNode (Mix sound sources) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor);\n\n        const startTime = this.context.currentTime;\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.processor.onaudioprocess = event => {\n            const inputLs  = event.inputBuffer.getChannelData(0);\n            const inputRs  = event.inputBuffer.getChannelData(1);\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            // Stop ?\n            let isStop = false;\n\n            for (const source of sources) {\n                if ((source instanceof OscillatorModule) && source.envelopegenerator.isStop()) {\n                    isStop = true;\n                } else if ((source instanceof OneshotModule) && source.isStop) {\n                    isStop = true;\n                } else if ((source instanceof AudioModule) && source.paused) {\n                    isStop = true;\n                } else if ((source instanceof MediaModule) && source.media.paused) {\n                    isStop = true;\n                } else if ((source instanceof StreamModule) && source.isStop) {\n                    isStop = true;\n                }\n            }\n\n            if (isStop) {\n                const stopTime = this.context.currentTime;\n\n                this.on(stopTime, true);\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n\n                // Stop `onaudioprocess` event\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n            } else {\n                outputLs.set(inputLs);\n                outputRs.set(inputRs);\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of sound source that is mixed in this class.\n     * @param {number} index This argument is required in the case of designating sound source.\n     * @return {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>|OscillatorModule|OneshotModule|AudioModule|MediaModule|StreamModule}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /** @override */\n    toString() {\n        return '[MixerModule]';\n    }\n}\n","'use strict';\n\n/**\n * This class defines properties for using Web MIDI API.\n * @constructor\n */\nexport default class MIDI {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.midiAccess = null;  // for the instance of `MIDIAccess`\n        this.inputs     = [];    // for the instances of `MIDIInput`\n        this.outputs    = [];    // for the instances of `MIDIOutput`\n    }\n\n    /**\n     * This method invokes `requestMIDIAccess` and gets objects for using Web MIDI API.\n     * @param {boolean} sysex This argument is in order to select whether using system exclusive message.\n     * @param {function} successCallback This argument is invoked when `requestMIDIAccess` succeeds.\n     * @param {function} errorCallback This argument is invoked when `requestMIDIAccess` fails.\n     * @return {MIDI} This is returned for method chain.\n     */\n    setup(sysex, successCallback, errorCallback) {\n        if (!navigator.requestMIDIAccess) {\n            throw new Error('Cannot use Web MIDI API.');\n        }\n\n        navigator.requestMIDIAccess({ sysex : Boolean(sysex) }).then(midiAccess => {\n            this.midiAccess = midiAccess;\n\n            if (Object.prototype.toString.call(midiAccess) === '[object Function]') {\n                // Legacy Chrome\n                this.inputs  = midiAccess.inputs();\n                this.outputs = midiAccess.outputs();\n            } else {\n                // Chrome 39 and later\n                const inputIterator  = midiAccess.inputs.values();\n                const outputIterator = midiAccess.outputs.values();\n\n                for (let i = inputIterator.next(); !i.done; i = inputIterator.next()) {\n                    this.inputs.push(i.value);\n                }\n\n                for (let o = outputIterator.next(); !o.done; o = outputIterator.next()) {\n                    this.outputs.push(o.value);\n                }\n            }\n\n            if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                successCallback(this.midiAccess, this.inputs, this.outputs);\n            }\n        }).catch(error => {\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(error);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MIDIAccess`.\n     * @return {MIDIAccess}\n     */\n    get() {\n        return this.midiAccess;\n    }\n\n    /** @override */\n    toString() {\n        return '[MIDI]';\n    }\n}\n","'use strict';\n\nimport OscillatorModule from '../OscillatorModule';\nimport OneshotModule from '../OneshotModule';\n\n/**\n * This class defines properties for playing the MML (Music Macro Language).\n * @constructor\n */\nexport default class MML {\n    static ONE_MINUTES       = 60;  // sec\n    static EQUAL_TEMPERAMENT = 12;\n    static QUARTER_NOTE      = 4;\n    static REGEXP_MML        = /\\s*(?:T\\d+)\\s*|\\s*(?:O\\d+)\\s*|\\s*(?:(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*\\s*/gi;\n    static REGEXP_TEMPO      = /T\\d+/i;\n    static REGEXP_OCTAVE     = /O\\d+/i;\n    static REGEXP_NOTE       = /(?:(?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*/i;\n    static REGEXP_CHORD      = /((?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*/i;\n    static REGEXP_DURATION   = /(?:[CDEFGABR][#+-]?)+((?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*)/i;\n    static REST              = 'R';\n    static ERROR_STRING      = 'MML';\n    static ERROR_TEMPO       = 'TEMPO';\n    static ERROR_OCTAVE      = 'OCTAVE';\n    static ERROR_NOTE        = 'NOTE';\n\n    /**\n     * This class (static) method computes index by octave and pitch name.\n     * @param {number} octave This argument is octave.\n     * @param {string} pitchname This argument is pitch name.\n     * @return {number|string} This is returned as index that is computed by octave and pitch name.\n     */\n    static computeIndex = (octave, pitchname) => {\n        let index = 0;\n\n        switch (pitchname) {\n            case 'C':\n                index = 3;\n                break;\n            case 'D':\n                index = 5;\n                break;\n            case 'E':\n                index = 7;\n                break;\n            case 'F':\n                index = 8;\n                break;\n            case 'G':\n                index = 10;\n                break;\n            case 'A':\n                index = 12;\n                break;\n            case 'B':\n                index = 14;\n                break;\n            case MML.REST:\n                return MML.REST;\n            default :\n                break;\n        }\n\n        const computedIndex = (MML.EQUAL_TEMPERAMENT * (octave - 1)) + index;\n\n        return (computedIndex >= 0) ? computedIndex : -1;\n    };\n\n    /**\n     * This class (static) method computes frequency from the index that corresponds to the 12 equal temperament.\n     * @param {number} index This argument is the index that corresponds to the 12 equal temperament.\n     *     For example, This value is between 0 and 88 in the case of piano.\n     * @return {number} This is returned as frequency.\n     */\n    static computeFrequency = index => {\n        // The 12 equal temperament\n        //\n        // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n        //\n        // A * 1.059463 -> A# (half up)\n\n        const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n        const MIN_A           = 27.5;\n\n        return (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : -1;\n    };\n\n    /**\n     * This class (static) method converts string to ASCII string.\n     * @param {string} string This argument is string.\n     * @return {string} This is returned as string that is converted to ASCII string.\n     */\n    static toAscii = string => {\n        let converted = '';\n\n        for (let i = 0, len = string.length; i < len; i++) {\n            const charCode = string.charCodeAt(i);\n\n            if (charCode > 0xFF) {\n                converted += `&#${charCode};`;\n            } else {\n                converted += string.charAt(i);\n            }\n        }\n\n        return converted;\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        // for the array of `OscillatorNode` or `OscillatorModule` or `OneshotModule`\n        this.source = null;\n\n        this.sequences = [];  /** @type {Array.<Array.<object>>} */\n        this.timerids  = [];  /** @type {Array.<number>} */\n        this.prev      = [];  /** @type {Array.<object>} */\n\n        this.callbacks = {\n            'start' : () => {},\n            'stop'  : () => {},\n            'ended' : () => {},\n            'error' : () => {}\n        };\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {MML} This is returned for method chain.\n     */\n    setup(key, value) {\n        if ((arguments.length > 0) && (Object.prototype.toString.call(arguments[0]) === '[object Object]')) {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else if (arguments.length > 1) {\n            const k = String(key).toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method parses MML string.\n     * @param {Array.<OscillatorNode>|OscillatorModule|OneshotModule} source This argument is in order to select sound source.\n     * @param {Array.<string>} mmls This argument is MML strings.\n     * @return {Array.<Array.<object>>} This is returned as array that contains object for playing the MML.\n     */\n    ready(source, mmls) {\n        if (this.source !== null) {\n            this.stop();  // Stop the previous MML\n        }\n\n        // Clear\n        this.sequences.length = 0;\n        this.timerids.length  = 0;\n        this.prev.length      = 0;\n\n        if (Array.isArray(source)) {\n            for (const s of source) {\n                if (!(s instanceof OscillatorNode)) {\n                    return this;\n                }\n            }\n\n            this.source = source;\n        } else if (source instanceof OscillatorNode) {\n            this.source = [source];\n        } else if ((source instanceof OscillatorModule) || (source instanceof OneshotModule)) {\n            this.source = source;\n        } else {\n            return this;\n        }\n\n        if (!Array.isArray(mmls)) {\n            mmls = [mmls];\n        }\n\n        while (mmls.length > 0) {\n            const mml = String(mmls.shift());\n\n            /** @type {Array.<object>}*/\n            const sequences = [];\n\n            const notes = mml.match(MML.REGEXP_MML);\n\n            if (notes === null) {\n                this.callbacks.error(MML.ERROR_STRING, '');\n                return;\n            }\n\n            let indexes     = [];\n            let frequencies = [];\n\n            let start    = 0;\n            let duration = 0;\n            let stop     = 0;\n\n            let currentTime = 0;\n            let timeOf4note = null;\n            let octave      = null;\n\n            while (notes.length > 0) {\n                const note = notes.shift().trim();\n\n                if (MML.REGEXP_TEMPO.test(note)) {\n                    const bpm = parseInt(note.slice(1), 10);\n\n                    if (bpm > 0) {\n                        timeOf4note = MML.ONE_MINUTES / bpm;\n                    } else {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_OCTAVE.test(note)) {\n                    octave = parseInt(note.slice(1), 10);\n\n                    if (octave < 0) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_NOTE.test(note)) {\n                    if (timeOf4note === null) {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n\n                    if (octave === null) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n\n                    const chord = note.match(MML.REGEXP_CHORD)[1];\n\n                    indexes = [];\n\n                    for (let i = 0, len = chord.length; i < len; i++) {\n                        const pitchname = chord.charAt(i);\n\n                        let index = MML.computeIndex(octave, pitchname.toUpperCase());\n\n                        // Half up or Half down (Sharp or Flat) ?\n                        switch (chord.charAt(i + 1)) {\n                            case '#':\n                            case '+':\n                                // Half up (Sharp)\n                                index++;\n                                i++;\n                                break;\n                            case '-':\n                                // Half down (Flat)\n                                index--;\n                                i++;\n                                break;\n                            default:\n                                // Normal (Natural)\n                                break;\n                        }\n\n                        // in the case of chord\n                        if (index >= indexes[0]) {\n                            index -= MML.EQUAL_TEMPERAMENT;\n                        }\n\n                        // Validation\n                        if (index < 0) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        indexes.push(index);\n                    }\n\n                    frequencies = [];\n\n                    for (const index of indexes) {\n                        const frequency = (index !== MML.REST) ? MML.computeFrequency(index) : 0;\n\n                        // Validation\n                        if (frequency === -1) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        frequencies.push(frequency);\n                    }\n\n                    const durations = note.split('&');  // Tie\n\n                    while (durations.length > 0) {\n                        const d = durations.shift().match(MML.REGEXP_DURATION)[1];\n\n                        switch (parseInt(d, 10)) {\n                            case   1:\n                            case   2:\n                            case   4:\n                            case   8:\n                            case  16:\n                            case  32:\n                            case  64:\n                            case 128:\n                            case 256:\n                                const numOf4note = MML.QUARTER_NOTE / parseInt(d, 10);\n\n                                // a dotted note ?\n                                duration += (d.indexOf('.') !== -1) ? ((1.5 * numOf4note) * timeOf4note) : (numOf4note * timeOf4note);\n                                break;\n                            case   6:\n                                // Triplet of half note\n                                duration += (2 * timeOf4note) / 3;\n                                break;\n                            case  12:\n                                // Triplet of quarter note\n                                duration += timeOf4note / 3;\n                                break;\n                            case  18:\n                                // Nonuplet of half note\n                                duration += (2 * timeOf4note) / 9;\n                                break;\n                            case  24:\n                                // Triplet of 8th note\n                                duration += (0.5 * timeOf4note) / 3;\n                                break;\n                            case  36:\n                                // Nonuplet of quarter note\n                                duration += timeOf4note / 9;\n                                break;\n                            case  48:\n                                // Triplet of 16th note\n                                duration += (0.25 * timeOf4note) / 3;\n                                break;\n                            case  72:\n                                // Nonuplet of 8th note\n                                duration += (0.5 * timeOf4note) / 9;\n                                break;\n                            case  96:\n                                // Triplet of 32th note\n                                duration += (0.125 * timeOf4note) / 3;\n                                break;\n                            case 144:\n                                // Nonuplet of 16th note\n                                duration += (0.25 * timeOf4note) / 9;\n                                break;\n                            case 192:\n                                // Triplet of 64th note\n                                duration += (0.0625 * timeOf4note) / 3;\n                                break;\n                            default:\n                                this.callbacks.error(MML.ERROR_NOTE, note);\n                                break;\n                        }\n                    }\n\n                    start = currentTime;\n                    stop  = start + duration;\n\n                    currentTime += duration;\n\n                    sequences.push({\n                        'indexes'     : indexes,\n                        'frequencies' : frequencies,\n                        'start'       : start,\n                        'duration'    : duration,\n                        'stop'        : stop\n                    });\n\n                    duration = 0;\n                }\n            }\n\n            if (sequences.length > 0) {\n                // `start` method gets element by `pop` for performance\n                sequences.reverse();\n\n                this.sequences.push(sequences);\n                this.timerids.push(null);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts the designated MML part. Moreover, this method schedules next sound.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>|Array.<AudioNode>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    start(part, connects, processCallback) {\n        const p = parseInt(part, 10);\n\n        if ((p >= 0) && (p < this.sequences.length)) {\n            if (!Array.isArray(this.sequences[p])) {\n                return this;\n            }\n\n            // End ?\n            if (this.sequences[p].length === 0) {\n                this.stop(processCallback);\n                this.callbacks.ended();\n\n                return this;\n            }\n\n            const sequence = this.sequences[p].pop();\n\n            if (Array.isArray(this.source)) {\n                for (let i = 0, len = this.source.length; i < len; i++) {\n                    let source = this.source[i];\n\n                    const type   = source.type;\n                    const detune = source.detune.value;\n\n                    source = this.context.createOscillator();\n\n                    // for legacy browsers\n                    source.start = source.start || source.noteOn;\n                    source.stop  = source.stop  || source.noteOff;\n\n                    source.type            = type;\n                    source.frequency.value = sequence.frequencies[i];\n                    source.detune.value    = detune;\n\n                    if (Array.isArray(connects)) {\n                        // OscillatorNode (Input) -> AudioNode -> ... -> AudioNode -> AudioDestinationNode (Output)\n                        source.connect(connects[0]);\n\n                        for (let j = 0, num = connects.length; j < num; j++) {\n                            const node = connects[j];\n\n                            if (j < (num - 1)) {\n                                const next = connects[j + 1];\n\n                                if (!((node instanceof AudioNode) && (next instanceof AudioNode))) {\n                                    return this;\n                                }\n\n                                node.connect(next);\n                            } else {\n                                node.connect(this.context.destination);\n                            }\n                        }\n                    } else {\n                        // OscillatorNode (Input) -> AudioDestinationNode (Output)\n                        source.connect(this.context.destination);\n                    }\n\n                    source.start(this.context.currentTime);\n                    source.stop(this.context.currentTime + sequence.duration);\n\n                    this.source[i] = source;\n                }\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OscillatorModule) {\n                this.source.start(sequence.frequencies, connects, processCallback);\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OneshotModule) {\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    if (sequence.indexes[i] !== MML.REST) {\n                        this.source.start(sequence.indexes[i], connects, processCallback);\n                    }\n\n                    this.callbacks.start(sequence, i);\n                }\n            }\n\n            this.timerids[p] = window.setTimeout(() => {\n                if (Array.isArray(this.source)) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.start(sequence, i);\n                    }\n                } else if (this.source instanceof OscillatorModule) {\n                    this.source.stop();\n\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.stop(sequence, i);\n                    }\n                } else if (this.source instanceof OneshotModule) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        if (sequence.indexes[i] !== MML.REST) {\n                            this.source.stop(sequence.indexes[i], processCallback);\n                        }\n\n                        this.callbacks.stop(sequence, i);\n                    }\n                }\n\n                // for `MML#stop`\n                this.prev = sequence;\n\n                // Start next sound by recursive call\n                this.start(p, connects, processCallback);\n            }, (sequence.duration * 1000));\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the all of MML parts.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const sequence = this.prev;\n\n        if (sequence.length === 0) {\n            return this;\n        }\n\n        if (Array.isArray(this.source)) {\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OscillatorModule) {\n            this.source.stop();\n\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OneshotModule) {\n            for (const index of sequence.indexes) {\n                if (index !== MML.REST) {\n                    this.source.stop(index, processCallback);\n                }\n\n                this.callbacks.stop(sequence, index);\n            }\n        }\n\n        for (let i = 0, len = this.timerids.length; i < len; i++) {\n            window.clearTimeout(this.timerids[i]);\n            this.timerids[i] = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the array that contains object for playing the MML.\n     * @param {number} index This argument is required in the case of designating sequence.\n     * @return {Array.<Array.<object>>|Array.<object>}\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sequences.length)) ? this.sequences[i] : this.sequences;\n    }\n\n    /**\n     * This method starts or stops MML according to state.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    toggle(part, connects, processCallback) {\n        if (this.isPaused()) {\n            this.start(part, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the array that is used to play the MML exists.\n     * @return {boolean} If the array exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSequences() {\n        return Array.isArray(this.sequences[0]);\n    }\n\n    /**\n     * This method determines whether the MML is paused.\n     * @return {boolean} If the MML is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        for (const timerid of this.timerids) {\n            if ((timerid === null) || (timerid === undefined)) {\n                // Next timer\n            } else {\n                // Playing the MML\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * This method creates text file for MML.\n     * @param {string} mml This argument is MML string.\n     * @return {string} This is returned as text file that MML is written.\n     */\n    create(mml) {\n        const base64  = window.btoa(MML.toAscii(String(mml)));\n        const dataURL = `data:text/plain;base64,${base64}`;\n\n        return dataURL;\n    }\n\n    /** @override */\n    toString() {\n        return '[MML]';\n    }\n}\n","'use strict';\n\n/**\n * This class (static) method reads file of audio or text.\n * @param {Blob} file This argument is the instance of `Blob`. This is entity of file.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n */\nexport function read(file, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('file' in properties) {\n            file = properties.file;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(file instanceof Blob)) {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(null, 'FILE_IS_NOT_BLOB');\n        }\n\n        return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    reader.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            let error = '';\n\n            switch (reader.error.code) {\n                case reader.error.NOT_FOUND_ERR:\n                    error = 'NOT_FOUND_ERR';\n                    break;\n                case reader.error.SECURITY_ERR:\n                    error = 'SECURITY_ERR';\n                    break;\n                case reader.error.ABORT_ERR:\n                    error = 'ABORT_ERR';\n                    break;\n                case reader.error.NOT_READABLE_ERR:\n                    error = 'NOT_READABLE_ERR';\n                    break;\n                case reader.error.ENCODING_ERR:\n                    error = 'ENCODING_ERR';\n                    break;\n                default:\n                    error = 'ERR';\n                    break;\n            }\n\n            errorCallback(event, error);\n        }\n    };\n\n    reader.onload = event => {\n        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n            let result = reader.result;\n\n            // Escape `<script>` in the case of text\n            if ((typeof result === 'string') && (result.indexOf('data:') === -1) && (result.indexOf('blob:') === -1)) {\n                result = result.replace(/<(\\/?script.*?)>/gi, '&lt;$1&gt;');\n            }\n\n            successCallback(event, result);\n        }\n    };\n\n    if (/arraybuffer/i.test(type)) {\n        reader.readAsArrayBuffer(file);\n    } else if (/dataurl/i.test(type)) {\n        reader.readAsDataURL(file);\n    } else if (/text/i.test(type)) {\n        reader.readAsText(file, 'UTF-8');\n    }\n}\n\n/**\n * This class (static) method gets the instance of `File` (extends `Blob`).\n * @param {Event} event This argument is the instance of Event by Drag & Drop or `<input type=\"file\">`.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'ObjectURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n * @return {File|ObjectURL} This is returned as the instance of `File` (extends `Blob`) or Object URL.\n */\nexport function file(event, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('event' in properties) {\n            event = properties.event;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(event instanceof Event)) {\n        return;\n    }\n\n    // for the instance of `File` (extends `Blob`)\n    let file = null;\n\n    if (event.type === 'drop') {\n        // Drag & Drop\n        event.stopPropagation();\n        event.preventDefault();\n\n        file = /* ('items' in event.dataTransfer) ? event.dataTransfer.items[0].getAsFile() : */event.dataTransfer.files[0];\n    } else if ((event.type === 'change') && ('files' in event.target)) {\n        // `<input type=\"file\">`\n        file = event.target.files[0];\n    } else {\n        return;\n    }\n\n    if (!(file instanceof File)) {\n        throw new Error('Please upload file.');\n    } else if ((/text/i.test(type)) && (file.type.indexOf('text') === -1)) {\n        throw new Error('Please upload text file.');\n    } else if ((/arraybuffer|dataurl/i.test(type)) && !/audio|video/.test(file.type)) {\n        throw new Error('Please upload audio or video file.');\n    } else {\n        if (/objecturl/i.test(type)) {\n            window.URL = window.URL || window.webkitURL || window.mozURL;\n            return window.URL.createObjectURL(file);\n        }\n\n        read({\n            'file'     : file,\n            'type'     : type,\n            'success'  : successCallback,\n            'error'    : errorCallback,\n            'progress' : progressCallback\n        });\n\n        return file;\n    }\n}\n\n/**\n * This class (static) method gets audio data as `ArrayBuffer` by Ajax.\n * @param {string} url This argument is URL for audio resource.\n * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when error occurred.\n * @param {function} progressCallback This argument is invoked during receiving audio data.\n */\nexport function ajax(url, timeout, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('url' in properties) {\n            url = properties.url;\n        }\n\n        if ('timeout' in properties) {\n            timeout = properties.timeout;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    // for errorCallback\n    const ERROR_AJAX         = 'error';\n    const ERROR_AJAX_TIMEOUT = 'timeout';\n\n    const xhr = new XMLHttpRequest();\n\n    const t = parseInt(timeout, 10);\n\n    xhr.timeout = (t > 0) ? t : 60000;\n\n    xhr.ontimeout = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX_TIMEOUT);\n        }\n    };\n\n    xhr.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    xhr.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX);\n        }\n    };\n\n    xhr.onload = event => {\n        if (xhr.status === 200) {\n            const arrayBuffer = xhr.response;\n\n            if ((arrayBuffer instanceof ArrayBuffer) && (Object.prototype.toString.call(successCallback) === '[object Function]')) {\n                successCallback(event, arrayBuffer);\n            }\n        }\n    };\n\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n    xhr.send(null);\n}\n\n/**\n * This class (static) method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n * @param {AudioContext} context This argument is the instance of `AudioContext` for `decodeAudioData` method.\n * @param {ArrayBuffer} arrayBuffer This argument is converted to the instance of `AudioBuffer`.\n * @param {function} successCallback This argument is invoked when `decodeAudioData` method is successful.\n       The 1st argument in this callback function is the instance of `AudioBuffer`.\n * @param {function} errorCallback This argument is invoked when `decodeAudioData` method failed.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function decode(context, arrayBuffer, successCallback, errorCallback) {\n    if (!(context instanceof AudioContext)) {\n        return;\n    }\n\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n        return;\n    }\n\n    if (Object.prototype.toString.call(successCallback) !== '[object Function]') {\n        successCallback = () => {};\n    }\n\n    if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n        errorCallback = () => {};\n    }\n\n    return context.decodeAudioData(arrayBuffer, successCallback, errorCallback);\n}\n\n/**\n * This class (static) method calculates frequency from the index that corresponds to the 12 equal temperament.\n * @param {Array.<number>} indexes This argument is array of index that corresponds to the 12 equal temperament.\n *     For example, This value is between 0 and 88 in the case of piano.\n * @return {Array.<number>} This is returned as array that contains frequencies.\n */\nexport function toFrequencies(indexes) {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n\n    const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n    const MIN_A           = 27.5;\n\n    if (!Array.isArray(indexes)) {\n        indexes = [indexes];\n    }\n\n    const frequencies = new Array(indexes.length);\n\n    for (let i = 0, len = indexes.length; i < len; i++) {\n        const index = parseInt(indexes[i], 10);\n\n        frequencies[i] = (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : 0;\n    }\n\n    return frequencies;\n}\n\n/**\n * This class (static) method calculates minutes and seconds from the designated time in seconds.\n * @param {number} time This argument is the time in seconds.\n * @return {object} This is returned as associative array that contains `minutes`, `seconds` and `milliseconds` keys.\n */\nexport function convertTime(time) {\n    const t = parseFloat(time);\n\n    if (t >= 0) {\n        const m  = Math.floor(t / 60);\n        const s  = Math.floor(t % 60);\n        const ms = t - parseInt(t, 10);\n\n        return {\n            'minutes'      : m,\n            'seconds'      : s,\n            'milliseconds' : ms\n        };\n    }\n}\n\n/**\n * This class (static) method shows the designated `Element` in full screen.\n * @param {Element} element This argument is the instance of `Element` that is the target of full screen.\n */\nexport function fullscreen(element) {\n    if (!(element instanceof Element)) {\n        return;\n    }\n\n    if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n    } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n    } else if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else {\n        throw new Error('Cannot change to full screen.');\n    }\n}\n\n/**\n * This class (static) method shows `Element` in original size from full screen.\n */\nexport function exitFullscreen() {\n    if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen();\n    } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n    } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n    } else if (document.cancelFullScreen) {\n        document.cancelFullScreen();\n    } else if (document.exitFullscreen) {\n        document.exitFullscreen();\n    } else {\n        throw new Error('Cannot exit from full screen.');\n    }\n}\n"],"sourceRoot":""}