{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/SoundModule/Effector.js","webpack:///./src/SoundModule/index.js","webpack:///./src/AudioModule/index.js","webpack:///./src/OneshotModule/index.js","webpack:///./src/OscillatorModule/index.js","webpack:///./src/SoundModule/Analyser/Visualizer.js","webpack:///./src/StreamModule/index.js","webpack:///./src/MediaModule/index.js","webpack:///./src/XSound/index.js","webpack:///./src/MML/index.js","webpack:///./src/MIDI/index.js","webpack:///./src/MixerModule/index.js","webpack:///./src/StreamModule/NoiseGate.js","webpack:///./src/AudioModule/VocalCanceler.js","webpack:///./src/OscillatorModule/Glide.js","webpack:///./src/OscillatorModule/Oscillator.js","webpack:///./src/SoundModule/EnvelopeGenerator.js","webpack:///./src/SoundModule/Listener.js","webpack:///./src/SoundModule/Panner.js","webpack:///./src/SoundModule/Reverb.js","webpack:///./src/SoundModule/Delay.js","webpack:///./src/SoundModule/Chorus.js","webpack:///./src/SoundModule/Flanger.js","webpack:///./src/SoundModule/Phaser.js","webpack:///./src/SoundModule/Ringmodulator.js","webpack:///./src/SoundModule/Tremolo.js","webpack:///./src/SoundModule/AutopannerFallback.js","webpack:///./src/SoundModule/Autopanner.js","webpack:///./src/SoundModule/Filter.js","webpack:///./src/SoundModule/Equalizer.js","webpack:///./src/SoundModule/Wah.js","webpack:///./src/SoundModule/Distortion.js","webpack:///./src/SoundModule/Compressor.js","webpack:///./src/SoundModule/Session.js","webpack:///./src/SoundModule/Recorder.js","webpack:///./src/SoundModule/Analyser/FFT.js","webpack:///./src/SoundModule/Analyser/Time.js","webpack:///./src/SoundModule/Analyser/TimeOverview.js","webpack:///./src/SoundModule/Analyser/index.js","webpack:///./src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","t","e","length","writable","key","Effector","context","bufferSize","this","isActive","input","createGain","output","lfo","createOscillator","depth","rate","frequency","processor","createScriptProcessor","start","noteOn","stop","noteOff","values","isStop","startTime","parseFloat","isNaN","currentTime","stopTime","releaseTime","type","state","String","toLowerCase","Boolean","connect","JSON","stringify","params","k","a","u","f","h","v","y","b","g","w","O","S","A","SoundModule","sampleRate","userAgent","navigator","parseInt","test","mastervolume","NUMBER_OF_INPUTS","NUMBER_OF_OUTPUTS","analyser","_Analyser2","recorder","_Recorder2","session","_Session2","compressor","_Compressor2","distortion","_Distortion2","wah","_Wah2","equalizer","_Equalizer2","filter","_Filter2","autopanner","createStereoPanner","_Autopanner2","_AutopannerFallback2","tremolo","_Tremolo2","ringmodulator","_Ringmodulator2","phaser","_Phaser2","flanger","_Flanger2","chorus","_Chorus2","delay","_Delay2","reverb","_Reverb2","panner","_Panner2","listener","_Listener2","envelopegenerator","_EnvelopeGenerator2","replace","gain","source","connects","Array","isArray","disconnect","len","destination","sender","toString","AudioModule","_this","__proto__","getPrototypeOf","createBufferSource","buffer","paused","callbacks","decode","ready","update","ended","error","vocalcanceler","_VocalCanceler2","arguments","setup","param","max","playbackRate","loop","AudioBuffer","duration","numberOfChannels","arrayBuffer","_this2","ArrayBuffer","decodeAudioData","position","processCallback","_this3","pos","noteGrainOn","on","onaudioprocess","event","inputLs","inputBuffer","getChannelData","inputRs","outputLs","outputBuffer","outputRs","Math","floor","timeOverviewL","timeOverviewR","end","off","AudioBufferSourceNode","audio","playbackrate","isSource","OneshotModule","sources","resources","buffers","volumes","isStops","settings","times","transpose","isAnalyser","timeout","successCallback","errorCallback","progressCallback","properties","success","progress","volume","setGenerator","isError","load","url","index","xhr","XMLHttpRequest","ontimeout","ERROR_AJAX_TIMEOUT","onprogress","abort","onerror","ERROR_AJAX","onload","status","response","audioBuffer","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","ERROR_DECODE","open","responseType","send","st","sp","clear","selectedIndex","bufferIndex","loopStart","loopEnd","window","setTimeout","onended","every","element","set","oneshot","OscillatorModule","glide","_Glide2","states","_Oscillator2","frequencies","oscillator","time","octave","fine","Visualizer","graphics","canvas","svg","interval","timerid","styles","shape","grad","offset","color","wave","grid","text","font","family","size","style","weight","width","cap","join","top","right","bottom","left","HTMLCanvasElement","CANVAS","getContext","SVGElement","SVG","setAttribute","XMLNS","XLINK","grads","prop","data","minDecibels","maxDecibels","drawOnCanvas","drawBySVG","toDataURL","outerHTML","innerWidth","innerHeight","middle","nPlotInterval","CanvasRenderingContext2D","Float32Array","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","x","moveTo","lineTo","stroke","fillStyle","upside","gradient","createLinearGradient","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","gradients","addColorStop","fillRect","linearGradientId","path","document","createElementNS","defs","createSVGLinearGradient","appendChild","rect","linearGradient","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_styles$font","SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW","SVG_LINEAR_GRADIENT_ID_TIME","SVG_LINEAR_GRADIENT_ID_FFT","StreamModule","constraints","video","stream","noisegate","_NoiseGate2","streamCallback","mediaDevices","getUserMedia","Error","createMediaStreamSource","then","catch","isStreaming","level","MediaModule","media","ext","controls","muted","autoplay","listeners","formats","HTMLAudioElement","AUDIO","HTMLVideoElement","VIDEO","format","canPlayType","MediaElementAudioSourceNode","createMediaElementSource","addEventListener","loadstart","pause","min","HTMLMediaElement","channelCount","src","indexOf","play","read","file","Blob","reader","FileReader","code","NOT_FOUND_ERR","SECURITY_ERR","ABORT_ERR","NOT_READABLE_ERR","ENCODING_ERR","result","readAsArrayBuffer","readAsDataURL","readAsText","Event","stopPropagation","preventDefault","dataTransfer","files","target","File","ajax","AudioContext","toFrequencies","indexes","FREQUENCY_RATIO","pow","convertTime","minutes","seconds","milliseconds","ms","fullscreen","Element","webkitRequestFullscreen","ALLOW_KEYBOARD_INPUT","mozRequestFullScreen","msRequestFullscreen","requestFullscreen","exitFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","cancelFullScreen","MML","sequences","timerids","prev","mmls","OscillatorNode","notes","shift","match","REGEXP_MML","ERROR_STRING","timeOf4note","note","trim","REGEXP_TEMPO","bpm","slice","ERROR_TEMPO","ONE_MINUTES","REGEXP_OCTAVE","ERROR_OCTAVE","REGEXP_NOTE","chord","REGEXP_CHORD","pitchname","charAt","computeIndex","toUpperCase","EQUAL_TEMPERAMENT","ERROR_NOTE","push","REST","computeFrequency","durations","split","REGEXP_DURATION","numOf4note","QUARTER_NOTE","reverse","part","sequence","pop","detune","j","num","node","AudioNode","_OscillatorModule2","_OneshotModule2","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","clearTimeout","isPaused","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","mml","dataURL","btoa","toAscii","computedIndex","string","converted","charCode","charCodeAt","MIDI","midiAccess","inputs","outputs","sysex","requestMIDIAccess","inputIterator","outputIterator","MixerModule","close","NoiseGate","abs","VocalCanceler","dataL","dataR","Glide","LINEAR","EXPONENTIAL","diff","t0","t1","cancelScheduledValues","setValueAtTime","Oscillator","setPeriodicWave","setWaveTable","customs","real","imag","WAVE_TYPES","reals","imags","subarray","periodicWave","createPeriodicWave","OCTAVE","sine","square","sawtooth","triangle","EnvelopeGenerator","generators","activeIndexes","activeCounter","attack","decay","sustain","release","t2","t2Value","activeIndex","linearRampToValueAtTime","setTargetAtTime","t3","t4","setTargetValueAtTime","counter","MIN_GAIN","isDisconnect","generator","Listener","positions","z","fronts","ups","setPosition","setOrientation","Panner","createPanner","orientations","refDistance","maxDistance","rolloffFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","panningModel","HRTF","distanceModel","INVERSE_DISTANCE","PANNING_MODELS","DISTANCE_MODELS","equalpower","linear","inverse","exponential","Reverb","rirs","convolver","createConvolver","dry","wet","tone","createBiquadFilter","LOWPASS","Q","SQRT1_2","impulse","onprogresss","Delay","createDelay","MAX_DELAY_TIME","feedback","delayTime","Chorus","mix","depthRate","Function","getOwnPropertyDescriptor","Flanger","Phaser","numberOfStages","filters","MAXIMUM_STAGES","ALLPASS","stage","resonance","Ringmodulator","amplitude","Tremolo","AutopannerFallback","amplitudeL","amplitudeR","splitter","createChannelSplitter","merger","createChannelMerger","lfoSplitter","Autopanner","pan","Filter","maxFrequency","range","FILTER_TYPES","minFrequnecy","lowpass","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass","Equalizer","bass","treble","presence","LOWSHELF","PEAKING","HIGHSHELF","Wah","cutoff","Distortion","createWaveShaper","drive","CLEAN","numberOfSamples","BANDPASS","curve","createCurve","AMOUNTS","CRUNCH","OVERDRIVE","DISTORTION","FUZZ","samples","amount","curves","Compressor","createDynamicsCompressor","threshold","knee","ratio","Session","numberOfInputs","numberOfOutputs","receiver","websocket","tls","host","port","openCallback","closeCallback","scheme","WebSocket","binaryType","onopen","onclose","onmessage","total","byteLength","BYTES_PER_ELEMENT","bufferLs","bufferRs","isConnected","bufferedAmount","readyState","OPEN","stateCallback","waitCallback","intervalid","setInterval","clearInterval","Recorder","mixedLs","mixedRs","numberOfTracks","trackLs","trackRs","activeTrack","gainL","gainR","track","isTrack","recordedLs","recordedRs","channel","tracks","mixes","sum","currentBuffer","numberOfMaxBuffers","currentTrack","mixTrack","qbit","soundLs","soundRs","CHANNEL","QBIT","SIZE","CHUNK_SIZE","RIFF_CHUNK","RATE","BPS","DATA_SIZE","sounds","Uint8Array","binary","Int16Array","URL","webkitURL","mozURL","createObjectURL","waves","blob","fromCharCode","FFT","UINT","textInterval","FLOAT","mindB","maxdB","_canvas","height","drawnSize","fsDivN","nTextInterval","clearRect","createFontString","fillText","measureText","getAttribute","innerHTML","_Visualizer3","textContent","Time","drawTimeDomainFloat32ArrayOnCanvas","drawTimeDomainFloat32ArrayBySVG","TimeOverview","savedImage","plotInterval","getImageData","classList","add","ImageData","_canvas2","putImageData","querySelector","callback","drawNode","move","isDown","draw","getOffsetX","offsetX","offsetLeft","parentNode","pageX","touches","Analyser","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","createAnalyser","_TimeOverview2","_Time2","fft","_FFT2","fftSize","smoothingTimeConstant","frequencyBinCount","domain","getByteTimeDomainData","getFloatTimeDomainData","getByteFrequencyData","getFloatFrequencyData","_XSound2","webkitAudioContext","IS_XSOUND","audiocontext","createJavaScriptNode","createGainNode","createDelayNode","createWaveTable","_AudioModule2","_MediaModule2","_StreamModule2","mixer","_MixerModule2","midi","_MIDI2","_MML2","XSound","SAMPLE_RATE","_SoundModule2","resume","Promise","reject","clone","clones","C","free","sourceList","noConflict","deep","X","getCurrentTime"],"mappings":"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","file":"xsound.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","'use strict';\n\n/**\n * This private class defines common properties for effector classes.\n * @constructor\n */\nexport default class Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.isActive = true;\n\n        this.context = context;\n\n        // for connecting external node\n        this.input  = context.createGain();\n        this.output = context.createGain();\n\n        // for LFO (Low Frequency Oscillator)\n        // LFO changes parameter cyclically\n        this.lfo       = context.createOscillator();\n        this.depth     = context.createGain();\n        this.rate      = this.lfo.frequency;\n        this.processor = context.createScriptProcessor(bufferSize, 1, 2);\n\n        // for legacy browsers\n        this.lfo.start = this.lfo.start || this.lfo.noteOn;\n        this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n        this.values = {};\n\n        this.isStop = true;\n    }\n\n    /**\n     * This abstract method gets or sets parameter.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Effector} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @abstract\n     */\n    param() {\n    }\n\n    /**\n     * This abstract method connects nodes according to state.\n     * @abstract\n     */\n    connect() {\n    }\n\n    /**\n     * This method starts LFO. Namely, this method starts effector.\n     * @param {number} startTime This argument is in order to schedule parameter.\n     * @return {Effector} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops LFO, and creates the instance of `OscillatorNode` again.\n     * @param {number} stopTime This argument is in order to schedule parameter.\n     * @param {number} releaseTime This argument is in order to schedule parameter when it is necessary to consider release time.\n     * @return {Effector} This is returned for method chain.\n     */\n    stop(stopTime, releaseTime) {\n        if (this.isActive && !this.isStop) {\n            let s = parseFloat(stopTime);\n            let r = parseFloat(releaseTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            if (isNaN(r) || (r < 0)) {\n                r = 0;\n            }\n\n            // for saving value\n            const type = this.lfo.type;\n            const rate = this.lfo.frequency.value;\n\n            // Destroy the instance of `OscillatorNode`\n            this.lfo.stop(s + r);\n\n            // Create the instance of `OscillatorNode` again\n            this.lfo = this.context.createOscillator();\n\n           // for legacy browsers\n            this.lfo.start = this.lfo.start || this.lfo.noteOn;\n            this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n            // Set the saved value\n            this.lfo.type            = type;\n            this.lfo.frequency.value = rate;\n\n            this.rate = this.lfo.frequency;\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Effector} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        // Start LFO\n        this.start(this.context.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     * @abstract\n     */\n    params() {\n        return {};\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     * @abstract\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Effector]';\n    }\n}\n","'use strict';\n\nimport Analyser from './Analyser';\nimport Recorder from './Recorder';\nimport Session from './Session';\nimport Compressor from './Compressor';\nimport Distortion from './Distortion';\nimport Wah from './Wah';\nimport Equalizer from './Equalizer';\nimport Filter from './Filter';\nimport Autopanner from './Autopanner';\nimport AutopannerFallback from './AutopannerFallback';\nimport Tremolo from './Tremolo';\nimport Ringmodulator from './Ringmodulator';\nimport Phaser from './Phaser';\nimport Flanger from './Flanger';\nimport Chorus from './Chorus';\nimport Delay from './Delay';\nimport Reverb from './Reverb';\nimport Panner from './Panner';\nimport Listener from './Listener';\nimport EnvelopeGenerator from './EnvelopeGenerator';\n\n/**\n * This class is superclass that is the top in this library.\n * This library's users do not create the instance of `SoundModule`.\n * This class is used for inherit in subclass (`OscillatorModule`, `OneshotModule`, `AudioModule`, `MediaModule`, `StreamModule`, `MixerModule`).\n * Therefore, this class defines the common properties for each sound sources.\n * @constructor\n */\nexport default class SoundModule {\n    static NUMBER_OF_INPUTS  = 2;\n    static NUMBER_OF_OUTPUTS = 2;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 256, 512, 1024, 2048, 4096, 8192, 16384.\n     *     However, the opportunity for designating buffer size is not so much.\n     *     The reason why is that the constructor of `SoundModule` selects buffer size automaticly.\n     *     This buffer size can be changed explicitly by calling `resize` method.\n     */\n    constructor(context, bufferSize) {\n        this.context    = context;\n        this.sampleRate = context.sampleRate;\n\n        const userAgent = navigator.userAgent;\n\n        if (bufferSize !== undefined) {\n            switch (parseInt(bufferSize, 10)) {\n                case   256:\n                case   512:\n                case  1024:\n                case  2048:\n                case  4096:\n                case  8192:\n                case 16384:\n                    this.bufferSize = parseInt(bufferSize, 10);\n                    break;\n                default:\n                    return;\n            }\n        } else if (/(Win(dows )?NT 6\\.2)/.test(userAgent)) {\n            this.bufferSize = 1024;  // Windows 8\n        } else if (/(Win(dows )?NT 6\\.1)/.test(userAgent)) {\n            this.bufferSize = 1024;  // Windows 7\n        } else if (/(Win(dows )?NT 6\\.0)/.test(userAgent)) {\n            this.bufferSize = 2048;  // Windows Vista\n        } else if (/Win(dows )?(NT 5\\.1|XP)/.test(userAgent)) {\n            this.bufferSize = 4096;  // Windows XP\n        } else if (/Mac|PPC/.test(userAgent)) {\n            this.bufferSize = 1024;  // Mac OS X\n        } else if (/Linux/.test(userAgent)) {\n            this.bufferSize = 8192;  // Linux\n        } else if (/iPhone|iPad|iPod/.test(userAgent)) {\n            this.bufferSize = 2048;  // iOS\n        } else {\n            this.bufferSize = 16384;  // Otherwise\n        }\n\n        this.mastervolume = context.createGain();\n        this.processor    = context.createScriptProcessor(this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n\n        this.analyser          = new Analyser(context);\n        this.recorder          = new Recorder(context, this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        this.session           = new Session(context, this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS, this.analyser);\n        this.compressor        = new Compressor(context, this.bufferSize);\n        this.distortion        = new Distortion(context, this.bufferSize);\n        this.wah               = new Wah(context, this.bufferSize);\n        this.equalizer         = new Equalizer(context, this.bufferSize);\n        this.filter            = new Filter(context, this.bufferSize);\n        this.autopanner        = context.createStereoPanner ? new Autopanner(context, this.bufferSize) : new AutopannerFallback(context, this.bufferSize);\n        this.tremolo           = new Tremolo(context, this.bufferSize);\n        this.ringmodulator     = new Ringmodulator(context, this.bufferSize);\n        this.phaser            = new Phaser(context, this.bufferSize);\n        this.flanger           = new Flanger(context, this.bufferSize);\n        this.chorus            = new Chorus(context, this.bufferSize);\n        this.delay             = new Delay(context, this.bufferSize);\n        this.reverb            = new Reverb(context, this.bufferSize);\n        this.panner            = new Panner(context, this.bufferSize);\n        this.listener          = new Listener(context);\n        this.envelopegenerator = new EnvelopeGenerator(context);  // for `OscillatorModule`, `OneshotModule`\n\n        // The default order for connection\n        this.modules = [\n            this.compressor,\n            this.distortion,\n            this.wah,\n            this.equalizer,\n            this.filter,\n            this.autopanner,\n            this.tremolo,\n            this.ringmodulator,\n            this.phaser,\n            this.flanger,\n            this.chorus,\n            this.delay,\n            this.reverb,\n            this.panner\n        ];\n    }\n\n    /** @abstract */\n    setup() {\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string} key This argument is property name.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v   = null;\n        let min = null;\n        let max = null;\n\n        switch (k) {\n            case 'mastervolume':\n                if (value === undefined) {\n                    return this.mastervolume.gain.value;\n                }\n\n                v   = parseFloat(value);\n                min = 0;\n                max = 1;\n\n                if ((v >= min) && (v <= max)) {\n                    this.mastervolume.gain.value = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @abstract */\n    ready() {\n    }\n\n    /** @abstract */\n    start() {\n    }\n\n    /** @abstract */\n    stop() {\n    }\n\n    /** @abstract */\n    get() {\n    }\n\n    /**\n     * This method changes buffer size for `ScriptProcessorNode`.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 256, 512, 1024, 2048, 4096, 8192, 16384.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    resize(bufferSize) {\n        this.processor = this.context.createScriptProcessor(bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        return this;\n    }\n\n    /**\n     * This method gets buffer size for `ScriptProcessorNode`.\n     * @return {number} This is returned as buffer size for `ScriptProcessorNode`.\n     */\n    getBufferSize() {\n        return this.processor.bufferSize;\n    }\n\n    /**\n     * This method connects nodes that are defined by this library and Web Audio API.\n     * @param {AudioNode} source This argument is `AudioNode` for input of sound.\n     * @param {Array.<Effector>} connects This argument is array for changing the default connection.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    connect(source, connects) {\n        // Customize connection ?\n        if (Array.isArray(connects)) {\n            this.modules = connects;\n        }\n\n        // Start connection\n        // AudioSourceNode (Input)-> node -> ... -> node -> GainNode (Master Volume) -> AnalyserNode  -> AudioDestinationNode (Output)\n        source.disconnect(0);  // Clear connection\n\n        if (this.modules.length > 0) {\n            source.connect(this.modules[0].input);\n        } else {\n            source.connect(this.mastervolume);\n        }\n\n        for (let i = 0, len = this.modules.length; i < len; i++) {\n            // Clear connection\n            this.modules[i].output.disconnect(0);\n\n            if (i < (this.modules.length - 1)) {\n                // Connect to next node\n                this.modules[i].output.connect(this.modules[i + 1].input);\n            } else {\n                this.modules[i].output.connect(this.mastervolume);\n            }\n        }\n\n        this.mastervolume.connect(this.context.destination);\n\n        // for analyser\n        this.mastervolume.connect(this.analyser.input);\n\n        // for recording\n        this.mastervolume.connect(this.recorder.processor);\n        this.recorder.processor.connect(this.context.destination);\n\n        // for session\n        this.mastervolume.connect(this.session.sender);\n        this.session.sender.connect(this.context.destination);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of module that is defined by this library. This method enables to access the instance of module by unified call.\n     * @param {string} module This argument is module's name.\n     * @return {Analyser|Recorder|Session|Effector|Listener|EnvelopeGenerator|Glide|VocalCanceler|NoiseGate} This value is the instance of module.\n     */\n    module(module) {\n        const m = String(module).replace(/-/g, '').toLowerCase();\n\n        switch (m) {\n            case 'analyser'     :\n            case 'recorder'     :\n            case 'session'      :\n            case 'compressor'   :\n            case 'distortion'   :\n            case 'wah'          :\n            case 'equalizer'    :\n            case 'filter'       :\n            case 'autopanner'   :\n            case 'tremolo'      :\n            case 'ringmodulator':\n            case 'phaser'       :\n            case 'flanger'      :\n            case 'chorus'       :\n            case 'delay'        :\n            case 'reverb'       :\n            case 'panner'       :\n            case 'listener'     :\n                return this[m];\n            case 'envelopegenerator':\n            case 'eg'               :\n                // OscillatorModule, OneshotModule\n                return this.envelopegenerator;\n            case 'glide':\n                if (m in this) {\n                    return this[m];  // OscillatorModule\n                }\n\n                // fall through\n            case 'vocalcanceler':\n                if (m in this) {\n                    return this[m];  // AudioModule, MediaModule\n                }\n\n                // fall through\n            case 'noisegate':\n                if (m in this) {\n                    return this[m];  // StreamModule\n                }\n\n                // fall through\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method starts effectors.\n     * @param {number} startTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    on(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.start(s);\n        this.flanger.start(s);\n        this.phaser.start(s);\n        this.autopanner.start(s);\n        this.tremolo.start(s);\n        this.ringmodulator.start(s);\n        this.wah.start(s);\n        this.filter.start(s);\n\n        return this;\n    }\n\n    /**\n     * This method stops effectors.\n     * @param {number} stopTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    off(stopTime) {\n        let s = parseFloat(stopTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.stop(s);\n        this.flanger.stop(s);\n        this.phaser.stop(s);\n        this.autopanner.stop(s);\n        this.tremolo.stop(s);\n        this.ringmodulator.stop(s);\n        this.wah.stop(s);\n        // this.filter.stop(s);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {};\n\n        for (const module in this) {\n            if (Object.prototype.toString.call(this[module]) === '[object Function]') {\n                continue;\n            }\n\n            const m = module.toLowerCase();\n\n            if (m === 'mastervolume') {\n                params[m] = this[module].gain.value;  // AudioParam\n            } else if ((Object.prototype.toString.call(this[module]) === '[object Object]') && ('params' in this[module])) {\n                params[m] = this[module].params();\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport VocalCanceler from './VocalCanceler';\n\n/**\n * This subclass defines properties for playing the single audio.\n * This class creates audio player that has higher features than `HTMLAudioElment`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class AudioModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.source = context.createBufferSource();  // for the instance of `AudioBufferSourceNode`\n        this.buffer = null;                          // for the instance of `AudioBuffer`\n\n        this.currentTime = 0;\n\n        this.paused = true;\n\n        this.callbacks = {\n            'decode' : () => {},\n            'ready'  : () => {},\n            'start'  : () => {},\n            'stop'   : () => {},\n            'update' : () => {},\n            'ended'  : () => {},\n            'error'  : () => {}\n        };\n\n        this.vocalcanceler = new VocalCanceler();\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    setup(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = 0;\n            let min = 0;\n            let max = 0;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return this.source.playbackRate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1024;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.source.playbackRate.value = v;\n                    }\n\n                    break;\n                case 'loop'   :\n                case 'looping':\n                    if (value === undefined) {\n                        return this.source.loop;\n                    }\n\n                    this.source.loop = Boolean(value);\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    if (this.buffer instanceof AudioBuffer) {\n                        v   = parseFloat(value);\n                        max = this.buffer.duration;\n                        min = 0;\n\n                        if ((v >= min) && (v <= max)) {\n                            if (this.paused) {\n                                this.currentTime = v;\n                            } else {\n                                this.stop();\n                                this.start(v);\n                            }\n                        }\n                    } else {\n                        this.currentTime = 0;\n                    }\n\n                    break;\n                case 'duration':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.duration : 0;  // Getter only\n                case 'samplerate':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.sampleRate : this.sampleRate;  // Getter only\n                case 'channels':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.numberOfChannels : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n     * @param {ArrayBuffer} arrayBuffer This argument is the instance of `ArrayBuffer`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    ready(arrayBuffer) {\n        if (arrayBuffer instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.buffer = buffer;\n\n                this.analyser.start('timeOverviewL', buffer);\n                this.analyser.start('timeOverviewR', buffer);\n\n                this.callbacks.ready(buffer);\n            };\n\n            this.context.decodeAudioData(arrayBuffer, successCallback, this.callbacks.error);\n\n            this.callbacks.decode(arrayBuffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts audio from the designated time.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.buffer instanceof AudioBuffer) && this.paused) {\n            const startTime = this.context.currentTime;\n\n            const pos = parseFloat(position);\n\n            this.currentTime = ((pos >= 0) && (pos <= this.buffer.duration)) ? pos : 0;\n\n            const playbackRate = this.source.playbackRate.value;\n            const loop         = this.source.loop;\n\n            this.source = this.context.createBufferSource();\n\n            // for legacy browsers\n            this.source.start = this.source.start || this.source.noteGrainOn;\n            this.source.stop  = this.source.stop  || this.source.noteOff;\n\n            this.source.buffer             = this.buffer;\n            this.source.playbackRate.value = playbackRate;\n            this.source.loop               = loop;\n\n            // AudioBufferSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            this.source.start(startTime, pos, (this.buffer.duration - pos));\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            this.paused = false;\n\n            this.on(startTime);\n\n            this.callbacks.start(this.source, this.currentTime);\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (this.currentTime < Math.floor(this.source.buffer.duration)) {\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n\n                            this.currentTime += ((1 * this.source.playbackRate.value) / this.source.buffer.sampleRate);\n\n                            const index = Math.floor(this.currentTime * this.source.buffer.sampleRate);\n                            const n100msec = 0.100 * this.source.buffer.sampleRate;\n\n                            // Invoke callback every 100 msec\n                            if ((index % n100msec) === 0) {\n                                this.callbacks.update(this.source, this.currentTime);\n                            }\n                        }\n\n                        this.analyser.timeOverviewL.update(this.currentTime);\n                        this.analyser.timeOverviewR.update(this.currentTime);\n                    } else {\n                        if (this.source.loop) {\n                            this.currentTime = 0;\n                        } else {\n                            this.end();\n                        }\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops audio.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.buffer instanceof AudioBuffer) && !this.paused) {\n            const stopTime = this.context.currentTime;\n\n            this.source.stop(stopTime);\n\n            this.off(stopTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Clear\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            this.paused = true;\n            this.callbacks.stop(this.source, this.currentTime);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBufferSourceNode`.\n     * @return {AudioBufferSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops audio according to audio state.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    toggle(position, connects, processCallback) {\n        if (this.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method rewinds audio.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    end() {\n        this.stop();\n        this.currentTime = 0;\n        this.callbacks.ended(this.source, this.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBuffer` exists.\n     * @return {boolean} If the instance of `AudioBuffer` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isBuffer() {\n        return this.buffer instanceof AudioBuffer;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBufferSourceNode` exists.\n     * @return {boolean} If the instance of `AudioBufferSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSource() {\n        return (this.source instanceof AudioBufferSourceNode) && (this.source.buffer instanceof AudioBuffer);\n    }\n\n    /**\n     * This method determines whether the audio is paused.\n     * @return {boolean} If the audio is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        return this.paused;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.audio = {\n            'playbackrate'  : this.isSource() ? this.source.playbackRate.value : 1,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\n\n/**\n * This subclass defines properties for playing the one-shot audio.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class OneshotModule extends SoundModule {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.sources   = [];  /** @type {Array.<AudioBufferSourceNode>} */\n        this.resources = [];  /** @type {Array.<string>} */\n        this.buffers   = [];  /** @type {Array.<AudioBuffer>} */\n        this.volumes   = [];  /** @type {Array.<GainNode>} */\n        this.isStops   = [];  /** @type {Array.<boolean>} in order to not call in duplicate `start` or `stop` method in the instance of `AudioBufferSourceNode` */\n\n        // for audio sources\n        this.settings = [];  /** @type {Array.<object>} */\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        this.transpose = 1.0;\n\n        this.isStop = true;\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax.\n     * @param {Array.<string>|Array.<AudioBuffer>} resources This argument is either URLs or the instances of `AudioBuffer` for audio resources.\n     * @param {Array.<object>} settings This argument is the properties of each audio sources.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    setup(resources, settings, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('resources' in properties) {\n                resources = properties.resources;\n            }\n\n            if ('settings' in properties) {\n                settings = properties.settings;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(resources)) {\n            resources = [resources];\n        }\n\n        this.resources = resources;\n\n        if (!Array.isArray(settings)) {\n            settings = [settings];\n        }\n\n        this.buffers.length = resources.length;\n\n        for (let i = 0, len = settings.length; i < len; i++) {\n            if ('buffer' in settings[i]) {\n               const buffer = parseInt(settings[i].buffer, 10);\n\n                if ((buffer >= 0) && (buffer < this.buffers.length)) {\n                    settings[i].buffer = buffer;\n                } else {\n                    return this;\n                }\n            } else {\n                return this;\n            }\n\n            settings[i].rate   = (('rate' in settings[i]) && (settings[i].rate >= 0)) ? parseFloat(settings[i].rate) : 1;\n            settings[i].loop   = ('loop' in settings[i]) ? Boolean(settings[i].loop) : false;\n            settings[i].start  = (('start' in settings[i]) && (settings[i].start >= 0)) ? parseFloat(settings[i].start) : 0;\n            settings[i].end    = (('end' in settings[i]) && (settings[i].end >= 0)) ? parseFloat(settings[i].end) : 0;\n            settings[i].volume = (('volume' in settings[i]) && (settings[i].volume >=0) && (settings[i].volume <= 1)) ? parseFloat(settings[i].volume) : 1;\n\n            this.isStops[i] = true;\n            this.volumes[i] = this.context.createGain();\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        this.settings = settings;\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = error => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(error, OneshotModule.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogress = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, OneshotModule.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            // Success\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.buffers[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (const buffer of this.buffers) {\n                            if (buffer === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event, this.buffers);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, OneshotModule.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = this.resources.length; i < len; i++) {\n            if (typeof this.resources[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(this.resources[i], i);\n            } else if (this.resources[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.buffers[i] = this.resources[i];\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OneshotModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'transpose':\n                    if (value === undefined) {\n                        return this.transpose;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.transpose = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(false);\n\n        return this;\n    }\n\n    /**\n     * This method starts one-shot audio with the designated playback rate and volume.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    start(index, connects, processCallback) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex  = this.settings[selectedIndex].buffer;\n        const playbackRate = this.settings[selectedIndex].rate;\n        const loop         = this.settings[selectedIndex].loop;\n        const loopStart    = this.settings[selectedIndex].start;\n        const loopEnd      = this.settings[selectedIndex].end;\n        const volume       = this.settings[selectedIndex].volume;\n\n        if (!(this.buffers[bufferIndex] instanceof AudioBuffer)) {\n            // `setup` method has not been invoked\n            return this;\n        }\n\n        // the instance of `AudioBufferSourceNode` already exists ?\n        if (this.sources[selectedIndex] instanceof AudioBufferSourceNode) {\n            this.sources[selectedIndex].stop(this.context.currentTime);\n            this.sources[selectedIndex].disconnect(0);\n            this.sources[selectedIndex] = null;\n        }\n\n        const source = this.context.createBufferSource();\n\n        // for legacy browsers\n        source.start = source.start || source.noteGrainOn;\n        source.stop  = source.stop  || source.noteOff;\n\n        source.buffer = this.buffers[bufferIndex];\n\n        // Set properties\n        source.playbackRate.value = playbackRate * this.transpose;\n        source.loop               = loop;\n        source.loopStart          = loopStart;\n        source.loopEnd            = loopEnd;\n\n        this.volumes[selectedIndex].gain.value = volume;\n\n        this.envelopegenerator.clear(false);\n\n        // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n        this.envelopegenerator.ready(selectedIndex, source, this.volumes[selectedIndex]);\n        this.volumes[selectedIndex].connect(this.processor);\n        this.connect(this.processor, connects);\n\n        const startTime = this.context.currentTime + this.times.start;\n\n        source.start(startTime);\n\n        this.sources[selectedIndex] = source;\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.isStops[selectedIndex] = false;\n\n        // in the case of scheduling stop time\n        if (this.times.stop > 0) {\n            window.setTimeout(() => {\n                this.stop(selectedIndex);\n            }, (this.times.stop * 1000));\n        }\n\n        // Call on stopping audio\n        source.onended = () => {\n            this.isStops[selectedIndex] = true;\n        };\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                this.isStop = this.isStops.every(element => element);\n\n                if (this.isStop) {\n                    // Stop\n\n                    this.off(this.context.currentTime);\n\n                    this.envelopegenerator.clear(false);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the designated one-shot audio.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    stop(index) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex= this.settings[selectedIndex].buffer;\n\n        if (!((this.buffers[bufferIndex] instanceof AudioBuffer) && (this.sources[selectedIndex] instanceof AudioBufferSourceNode))) {\n            return this;\n        }\n\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBuffer` that is used in `OneshotModule`.\n     * @param {number} index This argument is required in the case of designating `AudioBuffer`.\n     * @return {Array.<AudioBuffer>|AudioBuffer}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.buffers.length)) ? this.buffers[i] : this.buffers;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oneshot = {\n            'transpose' : this.transpose\n        };\n\n        return params;\n    }\n\n    /**\n     * This method resets settings.\n     * @param {number} index This argument is in order to select target setting.\n     * @param {string} key This argument is in order to select parameter.\n     * @param {number|boolean} value This argument is new value.\n     * @return {OneshotModule} This is returned for method chain.\n     */\n    reset(index, key, value) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (String(key).toLowerCase() in this.settings[selectedIndex]) {\n            this.settings[selectedIndex][key.toLowerCase()] = value;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OneshotModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport Oscillator from './Oscillator';\nimport Glide from './Glide';\n\n/**\n * This subclass defines properties for creating sound.\n * Actually, properties for creating sound is defined in private class (`Oscillator`).\n * Therefore, this class manages these private classes for creating sound.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class OscillatorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        /** @type {Array.<Oscillator>} */\n        this.sources = [];\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n\n        this.glide = new Glide(context);\n    }\n\n    /**\n     * This method creates the instances of `Oscillator`.\n     * @param {Array.<boolean>|boolean} states This argument is initial state in the instance of `Oscillator`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    setup(states) {\n        // Clear\n        this.sources.length = 0;\n\n        if (!Array.isArray(states)) {\n            states = [states];\n        }\n\n        for (let i = 0, len = states.length ; i < len; i++) {\n            this.sources[i] = new Oscillator(this.context, Boolean(states[i]));\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OscillatorModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            return (r === undefined) ? this : r;\n        }\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(true);\n\n        return this;\n    }\n\n    /**\n     * This method starts some sounds that are active at the same time.\n     * @param {Array.<number>}|number} frequencies This argument each oscillator frequency. The default value is 0 Hz.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    start(frequencies, connects, processCallback) {\n        const startTime = this.context.currentTime + this.times.start;\n\n        // Validate the 1st argument\n        if (!Array.isArray(frequencies)) {\n            frequencies = [frequencies];\n        }\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            const f = parseFloat(frequencies[i]);\n            frequencies[i] = (f >= 0) ? f : 0;\n        }\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // ScriptProcessorNode (Mix oscillators) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor, connects);\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            if (i >= this.sources.length) {\n                break;\n            }\n\n            const oscillator = this.sources[i];\n            const frequency  = frequencies[i];\n\n            // GainNode (Volume) -> ScriptProcessorNode (Mix oscillators)\n            oscillator.ready(this.processor);\n\n            // OscillatorNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume)\n            this.envelopegenerator.ready(i, oscillator.source, oscillator.volume);\n\n            this.glide.ready(frequency).start(oscillator.source, startTime);\n\n            oscillator.start(startTime);\n        }\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                const inputLs  = event.inputBuffer.getChannelData(0);\n                const inputRs  = event.inputBuffer.getChannelData(1);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                // Stop ?\n                if (this.envelopegenerator.isStop()) {\n                    // Stop\n                    const stopTime = this.context.currentTime;\n\n                    for (const source of this.sources) {\n                        source.stop(stopTime);\n                    }\n\n                    this.off(stopTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops active sounds.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.glide.stop();\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `Oscillator` that is used in `OscillatorModule`.\n     * @param {number} index This argument is required in the case of designating `Oscillator`.\n     * @return {Array.<Oscillator>|Oscillator}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /**\n     * This method returns the number of oscillators.\n     * @return {number} This is returned as the number of oscillators.\n     */\n    length() {\n        return this.sources.length;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oscillator = {\n            'glide' : {\n                'type' : this.glide.param('type'),\n                'time' : this.glide.param('time')\n            }\n        };\n\n        for (let i = 0, len = this.sources.length; i < len; i++) {\n            const source = this.sources[i];\n\n            params.oscillator[`oscillator${i}`] = {\n                'state'  : source.state(),\n                'gain'   : source.param('gain'),\n                'type'   : source.param('type'),\n                'octave' : source.param('octave'),\n                'fine'   : source.param('fine')\n            };\n        }\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines the properties that subclasses (`TimeOverview`, `Time`, `FFT`) require.\n * @constructor\n */\nexport default class Visualizer {\n    static CANVAS = 'canvas';\n    static SVG    = 'svg';\n\n    static XMLNS = 'http://www.w3.org/2000/svg';\n    static XLINK = 'http://www.w3.org/1999/xlink';\n\n    static SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW = 'svg-linear-gradient-time-overview';\n    static SVG_LINEAR_GRADIENT_ID_TIME          = 'svg-linear-gradient-time';\n    static SVG_LINEAR_GRADIENT_ID_FFT           = 'svg-linear-gradient-fft';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        this.sampleRate = sampleRate;\n\n        this.isActive = false;\n\n        // either 'canvas' or 'svg'\n        this.graphics = '';\n\n        // in the case of using Canvas\n        this.canvas  = null;\n        this.context = null;\n\n        // in the case of using SVG\n        this.svg = null;\n\n        // for timer\n        this.interval = 1000;\n        this.timerid  = null;\n\n        this.styles = {\n            'shape'  : 'line',\n            'grad'   : [\n                {\n                    'offset' : 0,\n                    'color'  : 'rgba(0, 128, 255, 1.0)'\n                },\n                {\n                    'offset' : 1,\n                    'color'  : 'rgba(0, 0, 255, 1.0)'\n                }\n            ],\n            'wave'   : 'rgba(0, 0, 255, 1.0)',\n            'grid'   : 'rgba(255, 0, 0, 1.0)',\n            'text'   : 'rgba(255, 255, 255, 1.0)',\n            'font'   : {\n                'family' : 'Arial',\n                'size'   : '13px',\n                'style'  : 'normal',\n                'weight' : 'normal'\n            },\n            'width'  : 1.5,\n            'cap'    : 'round',\n            'join'   : 'miter',\n            'top'    : 15,\n            'right'  : 30,\n            'bottom' : 15,\n            'left'   : 30\n        };\n    }\n\n    /**\n     * This method sets up for using Canvas or SVG.\n     * @param {HTMLCanvasElement|SVGElement} element This argument is either `HTMLCanvasElement` or `SVGElement`.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    setup(element) {\n        if (element instanceof HTMLCanvasElement) {\n            this.graphics = Visualizer.CANVAS;\n            this.canvas   = element;\n            this.context  = this.canvas.getContext('2d');\n        } else if (element instanceof SVGElement) {\n            this.graphics = Visualizer.SVG;\n            this.svg      = element;\n\n            this.svg.setAttribute('xmlns',       Visualizer.XMLNS);\n            this.svg.setAttribute('xmlns:xlink', Visualizer.XLINK);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {string|number|Array.<object>} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {string|number|Array.<object>} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v = null;\n\n        switch (k) {\n            case 'interval':\n                if (value === undefined) {\n                    return this.interval;\n                }\n\n                if (String(value).toLowerCase() === 'auto') {\n                    this.interval = 'auto';\n                } else {\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.interval = v;\n                    }\n                }\n\n                break;\n            case 'shape':\n                if (value === undefined) {\n                    return this.styles.shape;\n                }\n\n                v = String(value).toLowerCase();\n\n                if ((v === 'line') || (v === 'rect')) {\n                    this.styles.shape = (this.styles.wave !== 'gradient') ? v : 'rect';\n                }\n\n                break;\n            case 'grad':\n                if (value === undefined) {\n                    return this.styles.grad;\n                }\n\n                if (!Array.isArray(value)) {\n                    value = [value];\n                }\n\n                let isError = false;\n\n                for (const grads of value) {\n                    if (('offset' in grads) && ('color' in grads)) {\n                        const offset = parseFloat(grads.offset);\n\n                        if (isNaN(offset) || (offset < 0) || (offset > 1)) {\n                            isError = true;\n                            break;\n                        }\n                    } else {\n                        isError = true;\n                        break;\n                    }\n                }\n\n                if (!isError) {\n                    this.styles.grad = value;\n                }\n\n                break;\n            case 'font':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (Object.prototype.toString.call(value) === '[object Object]') {\n                    for (const prop in value) {\n                        if (/family|size|style|weight/i.test(prop)) {\n                            this.styles.font[prop] = String(value[prop]);\n                        }\n                    }\n                }\n\n                break;\n            case 'wave':\n            case 'grid':\n            case 'text':\n            case 'cap' :\n            case 'join':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (typeof value === 'string') {\n                    if ((k === 'wave') && (value === 'gradient')) {\n                        this.styles.shape = 'rect';\n                    }\n\n                    this.styles[k] = value.toLowerCase();\n                }\n\n                break;\n            case 'width' :\n            case 'top'   :\n            case 'right' :\n            case 'bottom':\n            case 'left'  :\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                v = (k === 'width') ? parseFloat(value) : parseInt(value, 10);\n\n                if (v >= 0) {\n                    this.styles[k] = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method draws sound wave to Canvas or SVG. This method conceals difference of API for drawing.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is parameter for spectrum. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is parameter for spectrum. The default value is -30 dB.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    start(data, minDecibels, maxDecibels) {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                this.drawOnCanvas(data, minDecibels, maxDecibels);\n                break;\n            case Visualizer.SVG:\n                this.drawBySVG(data, minDecibels, maxDecibels);\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates string for `Data URL` or `HTML` for the drawn figure.\n     * @return {string|Visualizer} This is returned as `Data URL` or `HTML` string. If `setup` method has not been invoked, this is returned for method chain.\n     */\n    create() {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                return this.canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            case Visualizer.SVG:\n                return this.svg.outerHTML;\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Visualizer} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to Canvas.\n     * @param {CanvasRenderingContext2D} context This argument is the instance of `CanvasRenderingContext2D`.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     */\n    drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval) {\n        if (!(context instanceof CanvasRenderingContext2D)) {\n            return this;\n        }\n\n        if (!(data instanceof Float32Array)) {\n            return this;\n        }\n\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        // Begin drawing\n        switch (this.styles.shape) {\n            case 'line':\n                // Set style\n                context.strokeStyle = this.styles.wave;\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            context.moveTo((x + (this.styles.width / 2)),  y);\n                        } else {\n                            context.lineTo(x, y);\n                        }\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case 'rect':\n                // Set style\n                if (this.styles.wave !== 'gradient') {\n                    context.fillStyle = this.styles.wave;\n                }\n\n                // Draw wave\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = -1 * Math.floor(data[i] * (h / 2));\n\n                        // Set style\n                        if (this.styles.wave === 'gradient') {\n                            const upside   = (innerHeight / 2) + this.styles.top;\n                            const gradient = context.createLinearGradient(0, upside, 0, (upside + y));\n\n                            for (const gradients of this.styles.grad) {\n                                gradient.addColorStop(gradients.offset, gradients.color);\n                            }\n\n                            context.fillStyle = gradient;\n                        }\n\n                        context.fillRect(x, m, this.styles.width, y);\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to SVG.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGPathElement|SVGGElement} This is returned as `SVGElement`.\n     */\n    drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, linearGradientId) {\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        switch (this.styles.shape) {\n            case 'line':\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            d += `M${x + (this.styles.width / 2)} ${y}`;\n                        } else {\n                            d += ` L${x} ${y}`;\n                        }\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          this.styles.wave);\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                return path;\n            case 'rect':\n                let defs = null;\n\n                if (this.styles.wave === 'gradient') {\n                    defs = this.createSVGLinearGradient(linearGradientId);\n                }\n\n                // Draw wave\n                const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                if (defs !== null) {\n                    g.appendChild(defs);\n                }\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor(data[i] * (innerHeight / 2));\n\n                        rect.setAttribute('x',     x);\n                        rect.setAttribute('y',     m);\n                        rect.setAttribute('width', this.styles.width);\n\n                        if (y < 0) {\n                            rect.setAttribute('height', -y);\n                        } else {\n                            rect.setAttribute('height',    y);\n                            rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${m})`);\n                        }\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${linearGradientId})`);\n\n                        g.appendChild(rect);\n                    }\n                }\n\n                return g;\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * This method creates elements for SVG linear gradient.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGDefsElement} This is returned as the instance of `SVGDefsElement`.\n     */\n    createSVGLinearGradient(linearGradientId) {\n        const defs           = document.createElementNS(Visualizer.XMLNS, 'defs');\n        const linearGradient = document.createElementNS(Visualizer.XMLNS, 'linearGradient');\n\n        linearGradient.setAttribute('id', String(linearGradientId));\n        linearGradient.setAttribute('x1', '0%');\n        linearGradient.setAttribute('y1', '0%');\n        linearGradient.setAttribute('x2', '0%');\n        linearGradient.setAttribute('y2', '100%');\n\n        for (const gradients of this.styles.grad) {\n            const stop = document.createElementNS(Visualizer.XMLNS, 'stop');\n\n            stop.setAttribute('offset',     gradients.offset);\n            stop.setAttribute('stop-color', gradients.color);\n\n            linearGradient.appendChild(stop);\n        }\n\n        defs.appendChild(linearGradient);\n\n        return defs;\n    }\n\n    /**\n     * This method creates string for font.\n     * @return {string} This is returned as string for font.\n     */\n    createFontString() {\n        const { size, style, weight, family } = this.styles.font;\n\n        return `${size} ${style} ${weight} \"${family}\"`;\n    }\n\n    /** @abstract */\n    drawOnCanvas() {\n    }\n\n    /** @abstract */\n    drawBySVG() {\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Visualizer]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport NoiseGate from './NoiseGate';\n\n/**\n * This class defines properties that processes sound data from WebRTC in Web Audio API.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class StreamModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        // for the instance of `MediaStreamAudioSourceNode`\n        this.source = null;\n\n        // for `navigator.mediaDevices.getUserMedia`\n        this.constraints = {\n            'audio' : true,\n            'video' : false\n        };\n\n        this.callbacks = {\n            'stream' : () => {},\n            'error'  : () => {}\n        };\n\n        this.output = true;\n\n        this.isStop = true;\n\n        this.noisegate = new NoiseGate();\n    }\n\n    /**\n     * This method sets up for using WebRTC.\n     * @param {object} constraints This argument is the 1st argument for `getUserMedia`.\n     * @param {function} streamCallback This argument is invoked on streaming.\n     * @param {function} errorCallback This argument is invoked when error occurs on streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    setup(constraints, streamCallback, errorCallback) {\n        if (Object.prototype.toString.call(constraints) === '[object Object]') {\n            this.constraints = constraints;\n        }\n\n        if (Object.prototype.toString.call(streamCallback) === '[object Function]') {\n            this.callbacks.stream = streamCallback;\n        }\n\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            this.callbacks.error = errorCallback;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|StreamModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            switch (k) {\n                case 'output':\n                    if (value === undefined) {\n                        return this.output;\n                    }\n\n                    this.output = Boolean(value);\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    ready() {\n        return this;\n    }\n\n    /**\n     * This method starts streaming.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    start(connects, processCallback) {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new Error('Cannot use WebRTC.');\n        }\n\n        const bufferSize = this.processor.bufferSize;\n\n        let isAnalyser = false;\n\n        const start = (stream, connects, processCallback) => {\n            this.source = this.context.createMediaStreamSource(stream);\n\n            // MediaStreamAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            if (!this.output) {\n                this.mastervolume.disconnect(0);\n\n                // for analyser\n                this.mastervolume.connect(this.analyser.input);\n\n                // for recording\n                this.mastervolume.connect(this.recorder.processor);\n                this.recorder.processor.connect(this.context.destination);\n\n                // for session\n                this.mastervolume.connect(this.session.sender);\n                this.session.sender.connect(this.context.destination);\n            }\n\n            this.on(this.context.currentTime);\n\n            if (!isAnalyser) {\n                this.analyser.start('time');\n                this.analyser.start('fft');\n                isAnalyser = true;\n            }\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.noisegate.start(inputLs[i]);\n                        outputRs[i] = this.noisegate.start(inputRs[i]);\n                    }\n                };\n            }\n        };\n\n        this.isStop = false;\n\n        navigator.mediaDevices.getUserMedia(this.constraints).then(stream => {\n            if (this.isStop) {\n                return;\n            }\n\n            start(stream, connects, processCallback);\n            this.callbacks.stream(stream);\n        }).catch(error => {\n            this.callbacks.error(error);\n        });\n\n        return this;\n    }\n\n    /**\n     * This method stops streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        this.source = null;\n\n        this.off(this.context.currentTime, true);\n\n        this.analyser.stop('time');\n        this.analyser.stop('fft');\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        this.isStop = true;\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaStreamAudioSourceNode`.\n     * @return {MediaStreamAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops streaming according to current state.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     */\n    toggle(connects, processCallback) {\n        if (this.isStreaming()) {\n            this.stop();\n        } else {\n            this.start(connects, processCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether streaming is active.\n     * @return {boolean} If streaming is active, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStreaming() {\n        return !this.isStop;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.stream = {\n            'output'    : this.output,\n            'noisegate' : {\n                'level' : this.noisegate.param('level')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule]';\n    }\n}\n","'use strict';\n\nimport AudioModule from '../AudioModule';\n\n/**\n * This class defines properties for processing sound data from `HTMLMediaElement`.\n * Namely, this class creates audio player that has higher features from `HTMLMediaElement`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {AudioModule}\n */\nexport default class MediaModule extends AudioModule {\n    static AUDIO = 'audio';\n    static VIDEO = 'video';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.source = null;  // for the instance of `MediaElementAudioSourceNode`\n        this.media  = null;  // for the instance of `HTMLMediaElement`\n        this.ext    = '';    // 'wav', 'ogg', 'mp3, 'webm', 'ogv', 'mp4' ...etc\n\n        this.playbackRate = 1;\n        this.controls     = false;\n        this.loop         = false;\n        this.muted        = false;\n        this.autoplay     = false;\n\n        // The keys are the event interfaces that are defined by `HTMLMediaElement`.\n        // For example, `loadstart`, `loadedmetadata`, `loadeddata`, `canplay`, `canplaythrough`, `timeupdate`, `ended` ...etc\n        this.listeners = {};\n    }\n\n    /**\n     * This method gets `HTMLMediaElement` and selects media format. In addition, this method adds event listeners that are defined by `HTMLMediaElement`.\n     * @param {HTMLAudioElement|HTMLVideoElement} media This argument is either `HTMLAudioElement` or `HTMLVideoElement`.\n     * @param {Array.<string>|string} formats This argument is usable media format. For example, 'wav', 'ogg', 'webm', 'mp4' ...etc.\n     * @param {object} listeners This argument is event handlers that are defined by `HTMLMediaElement`.\n     * @param {boolean} autoplay This argument is in order to determine autoplay. The default value is `false`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    setup(media, formats, listeners, autoplay) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('media' in properties) {\n                media = properties.media;\n            }\n\n            if ('formats' in properties) {\n                formats = properties.formats;\n            }\n\n            if ('listeners' in properties) {\n                listeners = properties.listeners;\n            }\n\n            if ('autoplay' in properties) {\n                autoplay = properties.autoplay;\n            }\n        }\n\n        let type = '';\n\n        if (media instanceof HTMLAudioElement) {\n            type = MediaModule.AUDIO;\n        } else if (media instanceof HTMLVideoElement) {\n            type = MediaModule.VIDEO;\n        } else {\n            return this;\n        }\n\n        this.media = media;\n\n        if (!Array.isArray(formats)) {\n            formats = [formats];\n        }\n\n        for (const format of formats) {\n            const f = `${type}/${String(format).toLowerCase()}`;\n\n            if (/^(?:maybe|probably)/.test(this.media.canPlayType(f))) {\n                this.ext = format;\n                break;\n            }\n        }\n\n        if (this.ext === '') {\n            throw new Error('Media format that can be played does not exist.');\n        }\n\n        if (Object.prototype.toString.call(listeners) === '[object Object]') {\n            for (const k in listeners) {\n                this.listeners[k.toLowerCase()] = (Object.prototype.toString.call(listeners[k]) === '[object Function]') ? listeners[k] : () => {};\n            }\n        }\n\n        this.autoplay = Boolean(autoplay);\n\n        // in the case of autoplay, `loadstart` event not fire\n        if (this.autoplay && !(this.source instanceof MediaElementAudioSourceNode)) {\n            this.source = this.context.createMediaElementSource(this.media);\n        }\n\n        this.media.addEventListener('loadstart', event => {\n            // To create the instance of `MediaElementAudioSourceNode` again causes error to occur\n            if (!(this.source instanceof MediaElementAudioSourceNode)) {\n                this.source = this.context.createMediaElementSource(this.media);\n            }\n\n            if ('loadstart' in this.listeners) {\n                this.listeners.loadstart(event);\n            }\n        }, false);\n\n        this.media.addEventListener('ended', event => {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            if ('ended' in this.listeners) {\n                this.listeners.ended(event);\n            }\n        }, false);\n\n        for (const k in this.listeners) {\n            this.media.addEventListener(k, event => {\n                this.listeners[(event.type).toLowerCase()](event);\n            }, false);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|MediaModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let r;\n\n            if (k === 'mastervolume') {\n                r = super.param(k, value);\n            }\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.playbackRate : this.playbackRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.5;  // for Chrome\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLMediaElement) {\n                            this.media.playbackRate = v;\n                        }\n\n                        this.playbackRate = v;\n                    }\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.currentTime : 0;\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        v   = parseFloat(value);\n                        min = 0;\n                        max = this.media.duration;\n\n                        if ((v >= min) && (v <= max)) {\n                            this.media.currentTime = v;\n                        }\n                    }\n\n                    break;\n                case 'loop'    :\n                case 'muted'   :\n                case 'controls':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media[k] : this[k];\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        this.media[k] = Boolean(value);\n                    }\n\n                    this[k] = Boolean(value);\n\n                    break;\n                case 'width' :\n                case 'height':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLVideoElement) ? this.media[k] : 0;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLVideoElement) {\n                            this.media[k] = v;\n                        }\n                    }\n\n                    break;\n                case 'duration':\n                    return this.media.duration;  // Getter only\n                case 'channels':\n                    return (this.source instanceof MediaElementAudioSourceNode) ? this.source.channelCount : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method prepares for playing the media anytime after loading the media resource.\n     * @param {string} source This argument is path name or `Data URL` or `Object URL` for the media resource.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    ready(source) {\n        const src = String(source);\n\n        try {\n            // `Data URL` or `Object URL` ?\n            if ((src.indexOf('data:') !== -1) || (src.indexOf('blob:') !== -1)) {\n                this.media.src = src;  // `Data URL` or `Object URL`\n            } else {\n                this.media.src = `${src}.${this.ext}`;  // Path\n            }\n        } catch (error) {\n            throw new Error('The designated resource cannot be loaded.');\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts media from the designated time.\n     * @param {number} position This argument is the time that media is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.source instanceof MediaElementAudioSourceNode) && this.media.paused) {\n            // MediaElementAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            this.media.play();\n\n            const pos = parseFloat(position);\n\n            this.media.currentTime  = ((pos >= 0) && (pos <= this.media.duration)) ? pos : 0;\n            this.media.playbackRate = this.playbackRate;\n            this.media.controls     = this.controls;\n            this.media.loop         = this.loop;\n            this.media.muted        = this.muted;\n\n            this.on(this.context.currentTime);\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                        outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops media.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.source instanceof MediaElementAudioSourceNode) && !this.media.paused) {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaElementAudioSourceNode`.\n     * @return {MediaElementAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops media according to media state.\n     * @param {number} position This argument is time that media is started at.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    toggle(position, connects, processCallback) {\n        if (this.media.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `HTMLMediaElement` exists.\n     * @return {boolean} If the instance of `HTMLMediaElement` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isMedia() {\n        return this.media instanceof HTMLMediaElement;\n    }\n\n    /**\n     * This method determines whether the instance of `MediaElementAudioSourceNode` exists.\n     * @return {boolean} If the instance of `MediaElementAudioSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isSource() {\n        return this.source instanceof MediaElementAudioSourceNode;\n    }\n\n    /**\n     * This method determines whether the media is paused.\n     * @return {boolean} If the media is paused or does not exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isPaused() {\n        return (this.media instanceof HTMLMediaElement) ? this.media.paused : true;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.media = {\n            'playbackrate'  : this.playbackRate,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        delete params.audio;\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[MediaModule]';\n    }\n}\n","'use strict';\n\n/**\n * This class (static) method reads file of audio or text.\n * @param {Blob} file This argument is the instance of `Blob`. This is entity of file.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n */\nexport function read(file, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('file' in properties) {\n            file = properties.file;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(file instanceof Blob)) {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(null, 'FILE_IS_NOT_BLOB');\n        }\n\n        return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    reader.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            let error = '';\n\n            switch (reader.error.code) {\n                case reader.error.NOT_FOUND_ERR:\n                    error = 'NOT_FOUND_ERR';\n                    break;\n                case reader.error.SECURITY_ERR:\n                    error = 'SECURITY_ERR';\n                    break;\n                case reader.error.ABORT_ERR:\n                    error = 'ABORT_ERR';\n                    break;\n                case reader.error.NOT_READABLE_ERR:\n                    error = 'NOT_READABLE_ERR';\n                    break;\n                case reader.error.ENCODING_ERR:\n                    error = 'ENCODING_ERR';\n                    break;\n                default:\n                    error = 'ERR';\n                    break;\n            }\n\n            errorCallback(event, error);\n        }\n    };\n\n    reader.onload = event => {\n        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n            let result = reader.result;\n\n            // Escape `<script>` in the case of text\n            if ((typeof result === 'string') && (result.indexOf('data:') === -1) && (result.indexOf('blob:') === -1)) {\n                result = result.replace(/<(\\/?script.*?)>/gi, '&lt;$1&gt;');\n            }\n\n            successCallback(event, result);\n        }\n    };\n\n    if (/arraybuffer/i.test(type)) {\n        reader.readAsArrayBuffer(file);\n    } else if (/dataurl/i.test(type)) {\n        reader.readAsDataURL(file);\n    } else if (/text/i.test(type)) {\n        reader.readAsText(file, 'UTF-8');\n    }\n}\n\n/**\n * This class (static) method gets the instance of `File` (extends `Blob`).\n * @param {Event} event This argument is the instance of Event by Drag & Drop or `<input type=\"file\">`.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n * @return {File} This is returned as the instance of `File` (extends `Blob`).\n */\nexport function file(event, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('event' in properties) {\n            event = properties.event;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(event instanceof Event)) {\n        return;\n    }\n\n    // for the instance of `File` (extends `Blob`)\n    let file = null;\n\n    if (event.type === 'drop') {\n        // Drag & Drop\n        event.stopPropagation();\n        event.preventDefault();\n\n        file = /* ('items' in event.dataTransfer) ? event.dataTransfer.items[0].getAsFile() : */event.dataTransfer.files[0];\n    } else if ((event.type === 'change') && ('files' in event.target)) {\n        // `<input type=\"file\">`\n        file = event.target.files[0];\n    } else {\n        return;\n    }\n\n    if (!(file instanceof File)) {\n        throw new Error('Please upload file.');\n    } else if ((/text/i.test(type)) && (file.type.indexOf('text') === -1)) {\n        throw new Error('Please upload text file.');\n    } else if ((/arraybuffer|dataurl/i.test(type)) && !/audio|video/.test(file.type)) {\n        throw new Error('Please upload audio or video file.');\n    } else {\n        read({\n            'file'     : file,\n            'type'     : type,\n            'success'  : successCallback,\n            'error'    : errorCallback,\n            'progress' : progressCallback\n        });\n\n        return file;\n    }\n}\n\n/**\n * This class (static) method gets audio data as `ArrayBuffer` by Ajax.\n * @param {string} url This argument is URL for audio resource.\n * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when error occurred.\n * @param {function} progressCallback This argument is invoked during receiving audio data.\n */\nexport function ajax(url, timeout, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('url' in properties) {\n            url = properties.url;\n        }\n\n        if ('timeout' in properties) {\n            timeout = properties.timeout;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    // for errorCallback\n    const ERROR_AJAX         = 'error';\n    const ERROR_AJAX_TIMEOUT = 'timeout';\n\n    const xhr = new XMLHttpRequest();\n\n    const t = parseInt(timeout, 10);\n\n    xhr.timeout = (t > 0) ? t : 60000;\n\n    xhr.ontimeout = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX_TIMEOUT);\n        }\n    };\n\n    xhr.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    xhr.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX);\n        }\n    };\n\n    xhr.onload = event => {\n        if (xhr.status === 200) {\n            const arrayBuffer = xhr.response;\n\n            if ((arrayBuffer instanceof ArrayBuffer) && (Object.prototype.toString.call(successCallback) === '[object Function]')) {\n                successCallback(event, arrayBuffer);\n            }\n        }\n    };\n\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n    xhr.send(null);\n}\n\n/**\n * This class (static) method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n * @param {AudioContext} context This argument is the instance of `AudioContext` for `decodeAudioData` method.\n * @param {ArrayBuffer} arrayBuffer This argument is converted to the instance of `AudioBuffer`.\n * @param {function} successCallback This argument is invoked when `decodeAudioData` method is successful.\n       The 1st argument in this callback function is the instance of `AudioBuffer`.\n * @param {function} errorCallback This argument is invoked when `decodeAudioData` method failed.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function decode(context, arrayBuffer, successCallback, errorCallback) {\n    if (!(context instanceof AudioContext)) {\n        return;\n    }\n\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n        return;\n    }\n\n    if (Object.prototype.toString.call(successCallback) !== '[object Function]') {\n        successCallback = () => {};\n    }\n\n    if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n        errorCallback = () => {};\n    }\n\n    return context.decodeAudioData(arrayBuffer, successCallback, errorCallback);\n}\n\n/**\n * This class (static) method calculates frequency from the index that corresponds to the 12 equal temperament.\n * @param {Array.<number>} indexes This argument is array of index that corresponds to the 12 equal temperament.\n *     For example, This value is between 0 and 88 in the case of piano.\n * @return {Array.<number>} This is returned as array that contains frequencies.\n */\nexport function toFrequencies(indexes) {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n\n    const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n    const MIN_A           = 27.5;\n\n    if (!Array.isArray(indexes)) {\n        indexes = [indexes];\n    }\n\n    const frequencies = new Array(indexes.length);\n\n    for (let i = 0, len = indexes.length; i < len; i++) {\n        const index = parseInt(indexes[i], 10);\n\n        frequencies[i] = (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : 0;\n    }\n\n    return frequencies;\n}\n\n/**\n * This class (static) method calculates minutes and seconds from the designated time in seconds.\n * @param {number} time This argument is the time in seconds.\n * @return {object} This is returned as associative array that contains `minutes`, `seconds` and `milliseconds` keys.\n */\nexport function convertTime(time) {\n    const t = parseFloat(time);\n\n    if (t >= 0) {\n        const m  = Math.floor(t / 60);\n        const s  = Math.floor(t % 60);\n        const ms = t - parseInt(t, 10);\n\n        return {\n            'minutes'      : m,\n            'seconds'      : s,\n            'milliseconds' : ms\n        };\n    }\n}\n\n/**\n * This class (static) method shows the designated `Element` in full screen.\n * @param {Element} element This argument is the instance of `Element` that is the target of full screen.\n */\nexport function fullscreen(element) {\n    if (!(element instanceof Element)) {\n        return;\n    }\n\n    if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n    } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n    } else if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else {\n        throw new Error('Cannot change to full screen.');\n    }\n}\n\n/**\n * This class (static) method shows `Element` in original size from full screen.\n */\nexport function exitFullscreen() {\n    if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen();\n    } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n    } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n    } else if (document.cancelFullScreen) {\n        document.cancelFullScreen();\n    } else if (document.exitFullscreen) {\n        document.exitFullscreen();\n    } else {\n        throw new Error('Cannot exit from full screen.');\n    }\n}\n","'use strict';\n\nimport OscillatorModule from '../OscillatorModule';\nimport OneshotModule from '../OneshotModule';\n\n/**\n * This class defines properties for playing the MML (Music Macro Language).\n * @constructor\n */\nexport default class MML {\n    static ONE_MINUTES       = 60;  // sec\n    static EQUAL_TEMPERAMENT = 12;\n    static QUARTER_NOTE      = 4;\n    static REGEXP_MML        = /\\s*(?:T\\d+)\\s*|\\s*(?:O\\d+)\\s*|\\s*(?:(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*\\s*/gi;\n    static REGEXP_TEMPO      = /T\\d+/i;\n    static REGEXP_OCTAVE     = /O\\d+/i;\n    static REGEXP_NOTE       = /(?:(?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*/i;\n    static REGEXP_CHORD      = /((?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*/i;\n    static REGEXP_DURATION   = /(?:[CDEFGABR][#+-]?)+((?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*)/i;\n    static REST              = 'R';\n    static ERROR_STRING      = 'MML';\n    static ERROR_TEMPO       = 'TEMPO';\n    static ERROR_OCTAVE      = 'OCTAVE';\n    static ERROR_NOTE        = 'NOTE';\n\n    /**\n     * This class (static) method computes index by octave and pitch name.\n     * @param {number} octave This argument is octave.\n     * @param {string} pitchname This argument is pitch name.\n     * @return {number|string} This is returned as index that is computed by octave and pitch name.\n     */\n    static computeIndex = (octave, pitchname) => {\n        let index = 0;\n\n        switch (pitchname) {\n            case 'C':\n                index = 3;\n                break;\n            case 'D':\n                index = 5;\n                break;\n            case 'E':\n                index = 7;\n                break;\n            case 'F':\n                index = 8;\n                break;\n            case 'G':\n                index = 10;\n                break;\n            case 'A':\n                index = 12;\n                break;\n            case 'B':\n                index = 14;\n                break;\n            case MML.REST:\n                return MML.REST;\n            default :\n                break;\n        }\n\n        const computedIndex = (MML.EQUAL_TEMPERAMENT * (octave - 1)) + index;\n\n        return (computedIndex >= 0) ? computedIndex : -1;\n    };\n\n    /**\n     * This class (static) method computes frequency from the index that corresponds to the 12 equal temperament.\n     * @param {number} index This argument is the index that corresponds to the 12 equal temperament.\n     *     For example, This value is between 0 and 88 in the case of piano.\n     * @return {number} This is returned as frequency.\n     */\n    static computeFrequency = index => {\n        // The 12 equal temperament\n        //\n        // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n        //\n        // A * 1.059463 -> A# (half up)\n\n        const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n        const MIN_A           = 27.5;\n\n        return (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : -1;\n    };\n\n    /**\n     * This class (static) method converts string to ASCII string.\n     * @param {string} string This argument is string.\n     * @return {string} This is returned as string that is converted to ASCII string.\n     */\n    static toAscii = string => {\n        let converted = '';\n\n        for (let i = 0, len = string.length; i < len; i++) {\n            const charCode = string.charCodeAt(i);\n\n            if (charCode > 0xFF) {\n                converted += `&#${charCode};`;\n            } else {\n                converted += string.charAt(i);\n            }\n        }\n\n        return converted;\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        // for the array of `OscillatorNode` or `OscillatorModule` or `OneshotModule`\n        this.source = null;\n\n        this.sequences = [];  /** @type {Array.<Array.<object>>} */\n        this.timerids  = [];  /** @type {Array.<number>} */\n        this.prev      = [];  /** @type {Array.<object>} */\n\n        this.callbacks = {\n            'start' : () => {},\n            'stop'  : () => {},\n            'ended' : () => {},\n            'error' : () => {}\n        };\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {MML} This is returned for method chain.\n     */\n    setup(key, value) {\n        if ((arguments.length > 0) && (Object.prototype.toString.call(arguments[0]) === '[object Object]')) {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else if (arguments.length > 1) {\n            const k = String(key).toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method parses MML string.\n     * @param {Array.<OscillatorNode>|OscillatorModule|OneshotModule} source This argument is in order to select sound source.\n     * @param {Array.<string>} mmls This argument is MML strings.\n     * @return {Array.<Array.<object>>} This is returned as array that contains object for playing the MML.\n     */\n    ready(source, mmls) {\n        if (this.source !== null) {\n            this.stop();  // Stop the previous MML\n        }\n\n        // Clear\n        this.sequences.length = 0;\n        this.timerids.length  = 0;\n        this.prev.length      = 0;\n\n        if (Array.isArray(source)) {\n            for (const s of source) {\n                if (!(s instanceof OscillatorNode)) {\n                    return this;\n                }\n            }\n\n            this.source = source;\n        } else if (source instanceof OscillatorNode) {\n            this.source = [source];\n        } else if ((source instanceof OscillatorModule) || (source instanceof OneshotModule)) {\n            this.source = source;\n        } else {\n            return this;\n        }\n\n        if (!Array.isArray(mmls)) {\n            mmls = [mmls];\n        }\n\n        while (mmls.length > 0) {\n            const mml = String(mmls.shift());\n\n            /** @type {Array.<object>}*/\n            const sequences = [];\n\n            const notes = mml.match(MML.REGEXP_MML);\n\n            if (notes === null) {\n                this.callbacks.error(MML.ERROR_STRING, '');\n                return;\n            }\n\n            let indexes     = [];\n            let frequencies = [];\n\n            let start    = 0;\n            let duration = 0;\n            let stop     = 0;\n\n            let currentTime = 0;\n            let timeOf4note = null;\n            let octave      = null;\n\n            while (notes.length > 0) {\n                const note = notes.shift().trim();\n\n                if (MML.REGEXP_TEMPO.test(note)) {\n                    const bpm = parseInt(note.slice(1), 10);\n\n                    if (bpm > 0) {\n                        timeOf4note = MML.ONE_MINUTES / bpm;\n                    } else {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_OCTAVE.test(note)) {\n                    octave = parseInt(note.slice(1), 10);\n\n                    if (octave < 0) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_NOTE.test(note)) {\n                    if (timeOf4note === null) {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n\n                    if (octave === null) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n\n                    const chord = note.match(MML.REGEXP_CHORD)[1];\n\n                    indexes = [];\n\n                    for (let i = 0, len = chord.length; i < len; i++) {\n                        const pitchname = chord.charAt(i);\n\n                        let index = MML.computeIndex(octave, pitchname.toUpperCase());\n\n                        // Half up or Half down (Sharp or Flat) ?\n                        switch (chord.charAt(i + 1)) {\n                            case '#':\n                            case '+':\n                                // Half up (Sharp)\n                                index++;\n                                i++;\n                                break;\n                            case '-':\n                                // Half down (Flat)\n                                index--;\n                                i++;\n                                break;\n                            default:\n                                // Normal (Natural)\n                                break;\n                        }\n\n                        // in the case of chord\n                        if (index >= indexes[0]) {\n                            index -= MML.EQUAL_TEMPERAMENT;\n                        }\n\n                        // Validation\n                        if (index < 0) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        indexes.push(index);\n                    }\n\n                    frequencies = [];\n\n                    for (const index of indexes) {\n                        const frequency = (index !== MML.REST) ? MML.computeFrequency(index) : 0;\n\n                        // Validation\n                        if (frequency === -1) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        frequencies.push(frequency);\n                    }\n\n                    const durations = note.split('&');  // Tie\n\n                    while (durations.length > 0) {\n                        const d = durations.shift().match(MML.REGEXP_DURATION)[1];\n\n                        switch (parseInt(d, 10)) {\n                            case   1:\n                            case   2:\n                            case   4:\n                            case   8:\n                            case  16:\n                            case  32:\n                            case  64:\n                            case 128:\n                            case 256:\n                                const numOf4note = MML.QUARTER_NOTE / parseInt(d, 10);\n\n                                // a dotted note ?\n                                duration += (d.indexOf('.') !== -1) ? ((1.5 * numOf4note) * timeOf4note) : (numOf4note * timeOf4note);\n                                break;\n                            case   6:\n                                // Triplet of half note\n                                duration += (2 * timeOf4note) / 3;\n                                break;\n                            case  12:\n                                // Triplet of quarter note\n                                duration += timeOf4note / 3;\n                                break;\n                            case  18:\n                                // Nonuplet of half note\n                                duration += (2 * timeOf4note) / 9;\n                                break;\n                            case  24:\n                                // Triplet of 8th note\n                                duration += (0.5 * timeOf4note) / 3;\n                                break;\n                            case  36:\n                                // Nonuplet of quarter note\n                                duration += timeOf4note / 9;\n                                break;\n                            case  48:\n                                // Triplet of 16th note\n                                duration += (0.25 * timeOf4note) / 3;\n                                break;\n                            case  72:\n                                // Nonuplet of 8th note\n                                duration += (0.5 * timeOf4note) / 9;\n                                break;\n                            case  96:\n                                // Triplet of 32th note\n                                duration += (0.125 * timeOf4note) / 3;\n                                break;\n                            case 144:\n                                // Nonuplet of 16th note\n                                duration += (0.25 * timeOf4note) / 9;\n                                break;\n                            case 192:\n                                // Triplet of 64th note\n                                duration += (0.0625 * timeOf4note) / 3;\n                                break;\n                            default:\n                                this.callbacks.error(MML.ERROR_NOTE, note);\n                                break;\n                        }\n                    }\n\n                    start = currentTime;\n                    stop  = start + duration;\n\n                    currentTime += duration;\n\n                    sequences.push({\n                        'indexes'     : indexes,\n                        'frequencies' : frequencies,\n                        'start'       : start,\n                        'duration'    : duration,\n                        'stop'        : stop\n                    });\n\n                    duration = 0;\n                }\n            }\n\n            if (sequences.length > 0) {\n                // `start` method gets element by `pop` for performance\n                sequences.reverse();\n\n                this.sequences.push(sequences);\n                this.timerids.push(null);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts the designated MML part. Moreover, this method schedules next sound.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>|Array.<AudioNode>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    start(part, connects, processCallback) {\n        const p = parseInt(part, 10);\n\n        if ((p >= 0) && (p < this.sequences.length)) {\n            if (!Array.isArray(this.sequences[p])) {\n                return this;\n            }\n\n            // End ?\n            if (this.sequences[p].length === 0) {\n                this.stop(processCallback);\n                this.callbacks.ended();\n\n                return this;\n            }\n\n            const sequence = this.sequences[p].pop();\n\n            if (Array.isArray(this.source)) {\n                for (let i = 0, len = this.source.length; i < len; i++) {\n                    let source = this.source[i];\n\n                    const type   = source.type;\n                    const detune = source.detune.value;\n\n                    source = this.context.createOscillator();\n\n                    // for legacy browsers\n                    source.start = source.start || source.noteOn;\n                    source.stop  = source.stop  || source.noteOff;\n\n                    source.type            = type;\n                    source.frequency.value = sequence.frequencies[i];\n                    source.detune.value    = detune;\n\n                    if (Array.isArray(connects)) {\n                        // OscillatorNode (Input) -> AudioNode -> ... -> AudioNode -> AudioDestinationNode (Output)\n                        source.connect(connects[0]);\n\n                        for (let j = 0, num = connects.length; j < num; j++) {\n                            const node = connects[j];\n\n                            if (j < (num - 1)) {\n                                const next = connects[j + 1];\n\n                                if (!((node instanceof AudioNode) && (next instanceof AudioNode))) {\n                                    return this;\n                                }\n\n                                node.connect(next);\n                            } else {\n                                node.connect(this.context.destination);\n                            }\n                        }\n                    } else {\n                        // OscillatorNode (Input) -> AudioDestinationNode (Output)\n                        source.connect(this.context.destination);\n                    }\n\n                    source.start(this.context.currentTime);\n                    source.stop(this.context.currentTime + sequence.duration);\n\n                    this.source[i] = source;\n                }\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OscillatorModule) {\n                this.source.start(sequence.frequencies, connects, processCallback);\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OneshotModule) {\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    if (sequence.indexes[i] !== MML.REST) {\n                        this.source.start(sequence.indexes[i], connects, processCallback);\n                    }\n\n                    this.callbacks.start(sequence, i);\n                }\n            }\n\n            this.timerids[p] = window.setTimeout(() => {\n                if (Array.isArray(this.source)) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.start(sequence, i);\n                    }\n                } else if (this.source instanceof OscillatorModule) {\n                    this.source.stop();\n\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.stop(sequence, i);\n                    }\n                } else if (this.source instanceof OneshotModule) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        if (sequence.indexes[i] !== MML.REST) {\n                            this.source.stop(sequence.indexes[i], processCallback);\n                        }\n\n                        this.callbacks.stop(sequence, i);\n                    }\n                }\n\n                // for `MML#stop`\n                this.prev = sequence;\n\n                // Start next sound by recursive call\n                this.start(p, connects, processCallback);\n            }, (sequence.duration * 1000));\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the all of MML parts.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const sequence = this.prev;\n\n        if (sequence.length === 0) {\n            return this;\n        }\n\n        if (Array.isArray(this.source)) {\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OscillatorModule) {\n            this.source.stop();\n\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OneshotModule) {\n            for (const index of sequence.indexes) {\n                if (index !== MML.REST) {\n                    this.source.stop(index, processCallback);\n                }\n\n                this.callbacks.stop(sequence, index);\n            }\n        }\n\n        for (let i = 0, len = this.timerids.length; i < len; i++) {\n            window.clearTimeout(this.timerids[i]);\n            this.timerids[i] = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the array that contains object for playing the MML.\n     * @param {number} index This argument is required in the case of designating sequence.\n     * @return {Array.<Array.<object>>|Array.<object>}\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sequences.length)) ? this.sequences[i] : this.sequences;\n    }\n\n    /**\n     * This method starts or stops MML according to state.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    toggle(part, connects, processCallback) {\n        if (this.isPaused()) {\n            this.start(part, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the array that is used to play the MML exists.\n     * @return {boolean} If the array exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSequences() {\n        return Array.isArray(this.sequences[0]);\n    }\n\n    /**\n     * This method determines whether the MML is paused.\n     * @return {boolean} If the MML is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        for (const timerid of this.timerids) {\n            if ((timerid === null) || (timerid === undefined)) {\n                // Next timer\n            } else {\n                // Playing the MML\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * This method creates text file for MML.\n     * @param {string} mml This argument is MML string.\n     * @return {string} This is returned as text file that MML is written.\n     */\n    create(mml) {\n        const base64  = window.btoa(MML.toAscii(String(mml)));\n        const dataURL = `data:text/plain;base64,${base64}`;\n\n        return dataURL;\n    }\n\n    /** @override */\n    toString() {\n        return '[MML]';\n    }\n}\n","'use strict';\n\n/**\n * This class defines properties for using Web MIDI API.\n * @constructor\n */\nexport default class MIDI {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.midiAccess = null;  // for the instance of `MIDIAccess`\n        this.inputs     = [];    // for the instances of `MIDIInput`\n        this.outputs    = [];    // for the instances of `MIDIOutput`\n    }\n\n    /**\n     * This method invokes `requestMIDIAccess` and gets objects for using Web MIDI API.\n     * @param {boolean} sysex This argument is in order to select whether using system exclusive message.\n     * @param {function} successCallback This argument is invoked when `requestMIDIAccess` succeeds.\n     * @param {function} errorCallback This argument is invoked when `requestMIDIAccess` fails.\n     * @return {MIDI} This is returned for method chain.\n     */\n    setup(sysex, successCallback, errorCallback) {\n        if (!navigator.requestMIDIAccess) {\n            throw new Error('Cannot use Web MIDI API.');\n        }\n\n        navigator.requestMIDIAccess({ sysex : Boolean(sysex) }).then(midiAccess => {\n            this.midiAccess = midiAccess;\n\n            if (Object.prototype.toString.call(midiAccess) === '[object Function]') {\n                // Legacy Chrome\n                this.inputs  = midiAccess.inputs();\n                this.outputs = midiAccess.outputs();\n            } else {\n                // Chrome 39 and later\n                const inputIterator  = midiAccess.inputs.values();\n                const outputIterator = midiAccess.outputs.values();\n\n                for (let i = inputIterator.next(); !i.done; i = inputIterator.next()) {\n                    this.inputs.push(i.value);\n                }\n\n                for (let o = outputIterator.next(); !o.done; o = outputIterator.next()) {\n                    this.outputs.push(o.value);\n                }\n            }\n\n            if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                successCallback(this.midiAccess, this.inputs, this.outputs);\n            }\n        }).catch(error => {\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(error);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MIDIAccess`.\n     * @return {MIDIAccess}\n     */\n    get() {\n        return this.midiAccess;\n    }\n\n    /** @override */\n    toString() {\n        return '[MIDI]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport OscillatorModule from '../OscillatorModule';\nimport OneshotModule from '../OneshotModule';\nimport AudioModule from '../AudioModule';\nimport MediaModule from '../MediaModule';\nimport StreamModule from '../StreamModule';\n\n/**\n * This class defines properties for mixing sound sources that is defined in this library.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class MixerModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        /** @type {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} */\n        this.sources = [];\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method mixes sound source.\n     * @param {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} sources This argument is the array of sound source that is defined by this library.\n     * @return {MixerModule} This is returned for method chain.\n     */\n    mix(sources) {\n        if (!Array.isArray(sources)) {\n            sources = [sources];\n        }\n\n        this.sources = sources;\n\n        for (const source of this.sources) {\n            if (!((source instanceof OscillatorModule) || (source instanceof OneshotModule) || (source instanceof AudioModule) || (source instanceof MediaModule) || (source instanceof StreamModule))) {\n                return this;\n            }\n\n            const stopTime = this.context.currentTime;\n\n            this.off(stopTime, false);\n\n            source.analyser.stop('time');\n            source.analyser.stop('fft');\n            source.isAnalyser = false;\n\n            source.recorder.stop();\n            source.session.close();\n\n            // ScriptProcessorNode (each sound source) -> ScriptProcessorNode (Mix sound sources)\n            source.processor.disconnect(0);\n            source.processor.connect(this.processor);\n        }\n\n        // (... ->) ScriptProcessorNode (Mix sound sources) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor);\n\n        const startTime = this.context.currentTime;\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.processor.onaudioprocess = event => {\n            const inputLs  = event.inputBuffer.getChannelData(0);\n            const inputRs  = event.inputBuffer.getChannelData(1);\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            // Stop ?\n            let isStop = false;\n\n            for (const source of sources) {\n                if ((source instanceof OscillatorModule) && source.envelopegenerator.isStop()) {\n                    isStop = true;\n                } else if ((source instanceof OneshotModule) && source.isStop) {\n                    isStop = true;\n                } else if ((source instanceof AudioModule) && source.paused) {\n                    isStop = true;\n                } else if ((source instanceof MediaModule) && source.media.paused) {\n                    isStop = true;\n                } else if ((source instanceof StreamModule) && source.isStop) {\n                    isStop = true;\n                }\n            }\n\n            if (isStop) {\n                const stopTime = this.context.currentTime;\n\n                this.on(stopTime, true);\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n\n                // Stop `onaudioprocess` event\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n            } else {\n                outputLs.set(inputLs);\n                outputRs.set(inputRs);\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of sound source that is mixed in this class.\n     * @param {number} index This argument is required in the case of designating sound source.\n     * @return {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>|OscillatorModule|OneshotModule|AudioModule|MediaModule|StreamModule}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /** @override */\n    toString() {\n        return '[MixerModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Noise Gate.\n * @constructor\n */\nexport default class NoiseGate {\n    constructor() {\n        this.level = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|NoiseGate} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'level':\n                    if (value === undefined) {\n                        return this.level;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.level = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method detects background noise and removes this.\n     * @param {number} data This argument is amplitude (between -1 and 1).\n     * @return {number} This is returned as 0 or the raw data.\n     */\n    start(data) {\n        const d = Math.abs(parseFloat(data));\n\n        // data : The amplitude is equal to argument.\n        // 0    : Because signal is detected as background noise, the amplitude is 0.\n        return (d > this.level) ? data : 0;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule NoiseGate]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Vocal Canceler.\n * @constructor\n */\nexport default class VocalCanceler {\n    constructor() {\n        this.depth = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|VocalCanceler} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method removes vocal part in the played audio.\n     * @param {number} dataL This argument is gain level for Left channel.\n     * @param {number} dataR This argument is gain level for Right channel.\n     * @return {number} This is returned as audio data except vocal part.\n     */\n    start(dataL, dataR) {\n        return dataL - (this.depth * dataR);\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule VocalCanceler]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Glide.\n * @constructor\n */\nexport default class Glide {\n    static LINEAR      = 'linear';\n    static EXPONENTIAL = 'exponential';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.frequencies = {\n            'start' : -1,  // Abnormal value for the 1st sound\n            'end'   : 0\n        };\n\n        this.time = 0;             // Glide time\n        this.type = Glide.LINEAR;  // either 'linear' or 'exponential'\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Glide} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'time':\n                    if (value === undefined) {\n                        return this.time;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.time = v;\n                    }\n\n                    break;\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Glide.LINEAR) || (v === Glide.EXPONENTIAL)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets frequencies for Glide.\n     * @param {number} frequency This argument is the frequency at which glide ends.\n     * @return {Glide} This is returned for method chain.\n     */\n    ready(frequency) {\n        this.frequencies.end = frequency;\n\n        const diff = (this.frequencies.start === -1) ? 0 : (this.frequencies.end - this.frequencies.start);\n\n        if ((this.frequencies.start === -1) || (this.time === 0) || (diff === 0)) {\n            // The 1st sound or Glide OFF or The same sound\n            this.frequencies.start = this.frequencies.end;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts Glide.\n     * @param {OscillatorNode} oscillator This argument is the instance of `OscillatorNode`.\n     * @param {number} startTime This argument is the start time of Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    start(oscillator, startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        const t0 = s;\n        const t1 = t0 + this.time;\n\n        // Start Glide\n        oscillator.frequency.cancelScheduledValues(t0);\n        oscillator.frequency.setValueAtTime(this.frequencies.start, t0);\n        oscillator.frequency[`${this.type}RampToValueAtTime`](this.frequencies.end, t1);\n\n        return this;\n    }\n\n    /**\n     * This method stops Glide. Moreover, This method prepares for next Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    stop() {\n        // Stop Glide or on the way of Glide\n        this.frequencies.start = this.frequencies.end;\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Glide]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for the instance of `OscillatorNode`.\n * @constructor\n */\nexport default class Oscillator {\n    // 1 Octave = 1200 cent\n    static OCTAVE = 1200;\n\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {boolean} state This argument is initial state.\n     */\n    constructor(context, state) {\n        this.isActive = state;\n\n        this.context = context;\n\n        this.source = context.createOscillator();\n\n        // for legacy browsers\n        this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n        this.source.start           = this.source.start           || this.source.noteOn;\n        this.source.stop            = this.source.stop            || this.source.noteOff;\n\n        this.volume = context.createGain();\n\n        // in order to not call in duplicate `start` or `stop`  method in the instance of `OscillatorNode`\n        this.isStop = true;\n\n        this.octave  = 0;\n        this.fine    = 0;\n        this.customs = {\n            'real' : new Float32Array([0, 1]),\n            'imag' : new Float32Array([0, 1])\n        };\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|Oscillator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.source.type;\n                    }\n\n                    if (Object.prototype.toString.call(value) !== '[object Object]') {\n                        v = String(value).toLowerCase();\n\n                        if (v in Oscillator.WAVE_TYPES) {\n                            this.source.type = (typeof this.source.type === 'string') ? v : Oscillator.WAVE_TYPES[v];\n                        }\n                    } else {\n                        // Custom wave\n                        if (('real' in value) && ('imag' in value)) {\n                            let reals = null;\n                            let imags = null;\n\n                            if (value.real instanceof Float32Array) {\n                                reals = value.real;\n                            } else if (Array.isArray(value.real)) {\n                                reals = new Float32Array(value.real);\n                            }\n\n                            if (value.imag instanceof Float32Array) {\n                                imags = value.imag;\n                            } else if (Array.isArray(value.imag)) {\n                                imags = new Float32Array(value.imag);\n                            }\n\n                            if ((reals instanceof Float32Array) && (imags instanceof Float32Array)) {\n                                const MAX_SIZE = 4096;  // This size is defined by specification\n\n                                if (reals.length > MAX_SIZE) {reals = reals.subarray(0, MAX_SIZE);}\n                                if (imags.length > MAX_SIZE) {imags = imags.subarray(0, MAX_SIZE);}\n\n                                // The 1st value is fixed by 0 (This is is defined by specification)\n                                if (reals[0] !== 0) {reals[0] = 0;}\n                                if (imags[0] !== 0) {imags[0] = 0;}\n\n                                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                                this.source.setPeriodicWave(periodicWave);\n                                this.customs.real = reals;\n                                this.customs.imag = imags;\n                            }\n                        }\n                    }\n\n                    break;\n                case 'octave':\n                    if (value === undefined) {\n                        return this.octave;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -4800 / Oscillator.OCTAVE;\n                    max =  4800 / Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.octave = v;\n                        this.source.detune.value = this.fine + (v * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'fine':\n                    if (value === undefined) {\n                        return this.fine;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -Oscillator.OCTAVE;\n                    max =  Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.fine = v;\n                        this.source.detune.value = v + (this.octave * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'volume':\n                case 'gain'  :\n                    if (value === undefined) {\n                        return this.volume.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.volume.gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    ready(output) {\n        if (this.isActive) {\n            // for saving value\n            const params = {\n                'type'      : this.source.type,\n                'frequency' : this.source.frequency.value,\n                'detune'    : this.source.detune.value\n            };\n\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.source.disconnect(0);\n            }\n\n            this.source = this.context.createOscillator();\n\n            // for legacy browsers\n            this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n            this.source.start           = this.source.start           || this.source.noteOn;\n            this.source.stop            = this.source.stop            || this.source.noteOff;\n\n            if (params.type === 'custom') {\n                // Custom wave\n                const reals        = this.customs.real;\n                const imags        = this.customs.imag;\n                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                this.source.setPeriodicWave(periodicWave);\n            } else {\n                this.source.type = params.type;\n            }\n\n            this.source.frequency.value = params.frequency;\n            this.source.detune.value    = params.detune;\n\n            this.volume.connect(output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts sound.\n     * @param {number} startTime This argument is the start time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive) {\n            this.source.start(startTime);\n            this.isStop = false;\n        } else {\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.isStop = true;\n            }\n\n            this.source.disconnect(0);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops sound.\n     * @param {number} stopTime This argument is the stop time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        if (!this.isStop) {\n            this.source.stop(stopTime);\n            this.source.disconnect(0);\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Oscillator} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `OscillatorNode`.\n     * @return {OscillatorNode}\n     */\n    get() {\n        return this.source;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Oscillator]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Envelope Generator.\n * @constructor\n */\nexport default class EnvelopeGenerator {\n    static MIN_GAIN = 1e-3;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        /** @type {Array.<GainNode>} */\n        this.generators = [];\n\n        // for `GainNode`\n        this.activeIndexes = [];\n        this.activeCounter = 0;\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 0.5;\n        this.release = 1.0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|EnvelopeGenerator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects the instance of `AudioNode`.\n     * @param {number} index This argument is in order to select the instance of `GainNode` that is Envelope Generator.\n     * @param {AudioNode} input This argument is the instance of `AudioNode` as input.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    ready(index, input, output) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        input.connect(this.generators[i]);\n        this.generators[i].connect(output);\n\n        this.activeIndexes[i] = i;\n        this.activeCounter++;\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack -> Decay -> Sustain).\n     * @param {number} startTime This argument is the start time of Attack.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    start(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Attack -> Decay -> Sustain\n        const t0      = s;\n        const t1      = t0 + this.attack;\n        const t2      = this.decay;\n        const t2Value = this.sustain;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // Start from `gain.value = 0`\n            this.generators[activeIndex].gain.cancelScheduledValues(t0);\n            this.generators[activeIndex].gain.setValueAtTime(0, t0);\n\n            // Attack : `gain.value` increases linearly until assigned time (t1)\n            this.generators[activeIndex].gain.linearRampToValueAtTime(1, t1);\n\n            // Decay -> Sustain : `gain.value` gradually decreases to value of Sustain during of Decay time (t2) from assigned time (t1)\n            this.generators[activeIndex].gain.setTargetAtTime(t2Value, t1, t2);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack or Decay or Sustain -> Release).\n     * @param {number} stopTime This argument is the start time of Release.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        let s = parseFloat(stopTime) - this.release;\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Sustain -> Release\n        const t3 = s;\n        const t4 = this.release;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // in the case of mouseup on the way of Decay\n            this.generators[activeIndex].gain.cancelScheduledValues(t3);\n            this.generators[activeIndex].gain.setValueAtTime(this.generators[activeIndex].gain.value, t3);\n\n            // Release : `gain.value` gradually decreases to 0 during of Release time (t4) from assigned time (t3)\n            this.generators[activeIndex].gain.setTargetAtTime(0, t3, t4);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {GainNode} This is returned as the instance of `GainNode` for Envelope Generator.\n     */\n    getGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        return this.generators[i];\n    }\n\n    /**\n     * This method sets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    setGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        this.generators[i] = this.context.createGain();\n\n        // for legacy browsers\n        this.generators[i].gain.setTargetAtTime = this.generators[i].gain.setTargetAtTime || this.generators[i].gain.setTargetValueAtTime;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the all of gain schedulings have ended.\n     * @return {boolean} If the all of gain schedulings have ended, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStop() {\n        let counter = 0;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            if (this.generators[activeIndex].gain.value > EnvelopeGenerator.MIN_GAIN) {\n                return false;\n            }\n\n            counter++;\n\n            // the all of schedulings are stopped ?\n            if (counter === this.activeCounter) {\n                return true;\n            }\n        }\n    }\n\n    /**\n     * This method clears variables for managing the instance of `GainNode`.\n     * @param {boolean} isDisconnect This argument is in order to determine whether disconnect `AudioNode`.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    clear(isDisconnect) {\n        this.activeIndexes.length = 0;\n        this.activeCounter = 0;\n\n        for (const generator of this.generators) {\n            generator.gain.cancelScheduledValues(this.context.currentTime);\n            generator.gain.value = 1;\n\n            if (isDisconnect) {\n                generator.disconnect(0);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'attack'  : this.attack,\n            'decay'   : this.decay,\n            'sustain' : this.sustain,\n            'release' : this.release\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule EnvelopeGenerator]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines property for audio listener.\n * These properties relate to properties of `PannerNode`.\n * @constructor\n */\nexport default class Listener {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        // the instance of `AudioListener`\n        this.listener = context.listener;\n\n        // Set default value\n        this.positions = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.fronts    = { 'x' : 0, 'y' : 0, 'z' : -1 };\n        this.ups       = { 'x' : 0, 'y' : 1, 'z' : 0 };\n\n        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Listener} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'fx':\n                case 'fy':\n                case 'fz':\n                    if (value === undefined) {\n                        return this.fronts[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.fronts[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                case 'ux':\n                case 'uy':\n                case 'uz':\n                    if (value === undefined) {\n                        return this.ups[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.ups[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'positions' : this.positions,\n            'fronts'    : this.fronts,\n            'ups'       : this.ups\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Listener]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Panner extends Effector {\n    static PANNING_MODELS = {\n        'equalpower' : 0,\n        'HRTF'       : 1\n    };\n\n    static DISTANCE_MODELS = {\n        'linear'      : 0,\n        'inverse'     : 1,\n        'exponential' : 2\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createPanner();\n\n        this.positions    = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.orientations = { 'x' : 1, 'y' : 0, 'z' : 0 };\n\n        this.panner.refDistance   = 1;\n        this.panner.maxDistance   = 10000;\n        this.panner.rolloffFactor = 1;\n\n        this.panner.coneInnerAngle = 360;\n        this.panner.coneOuterAngle = 360;\n        this.panner.coneOuterGain  = 0;\n\n        this.panner.panningModel  = (typeof this.panner.panningModel  === 'string') ? 'HRTF'    : (this.panner.HRTF || 1);\n        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? 'inverse' : (this.panner.INVERSE_DISTANCE || 1);\n\n        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n\n        // `Panner` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'ox':\n                case 'oy':\n                case 'oz':\n                    if (value === undefined) {\n                        return this.orientations[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.orientations[k.charAt(1)] = v;\n                        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n                    }\n\n                    break;\n                case 'refdistance':\n                    if (value === undefined) {\n                        return this.panner.refDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.panner.refDistance = v;\n                    }\n\n                    break;\n                case 'maxdistance':\n                    if (value === undefined) {\n                        return this.panner.maxDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.panner.maxDistance = v;\n                    }\n\n                    break;\n                case 'rollofffactor':\n                    if (value === undefined) {\n                        return this.panner.rolloffFactor;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.rolloffFactor = v;\n                    }\n\n                    break;\n                case 'coneinnerangle':\n                    if (value === undefined) {\n                        return this.panner.coneInnerAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneInnerAngle = v;\n                    }\n\n                    break;\n                case 'coneouterangle':\n                    if (value === undefined) {\n                        return this.panner.coneOuterAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterAngle = v;\n                    }\n\n                    break;\n                case 'coneoutergain':\n                    if (value === undefined) {\n                        return this.panner.coneOuterGain;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterGain = v;\n                    }\n\n                    break;\n                case 'panningmodel':\n                    if (value === undefined) {\n                        return this.panner.panningModel;\n                    }\n\n                    v = /HRTF/i.test(value) ? String(value).toUpperCase() : String(value).toLowerCase();\n\n                    if (v in Panner.PANNING_MODELS) {\n                        this.panner.panningModel = (typeof this.panner.panningModel === 'string') ? v : Panner.PANNING_MODELS[v];\n                    }\n\n                    break;\n                case 'distancemodel':\n                    if (value === undefined) {\n                        return this.panner.distanceModel;\n                    }\n\n                    v = String(value).replace(/-/g, '').toLowerCase();\n\n                    if (v in Panner.DISTANCE_MODELS) {\n                        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? v : Panner.DISTANCE_MODELS[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> PannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'          : this.isActive,\n            'positions'      : this.positions,\n            'orientations'   : this.orientations,\n            'refDistance'    : this.panner.refDistance,\n            'maxDistance'    : this.panner.maxDistance,\n            'rolloffFactor'  : this.panner.rolloffFactor,\n            'coneInnerAngle' : this.panner.coneInnerAngle,\n            'coneOuterAngle' : this.panner.coneOuterAngle,\n            'coneOuterGain'  : this.panner.coneOuterGain,\n            'panningModel'   : this.panner.panningModel,\n            'distanceModel'  : this.panner.distanceModel\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Panner]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Reverb extends Effector {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.rirs      = [];\n        this.convolver = context.createConvolver();\n        this.dry       = context.createGain();\n        this.wet       = context.createGain();\n        this.tone      = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.dry.gain.value       = 1;\n        this.wet.gain.value       = 0;\n        this.tone.type            = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value = 350;\n        this.tone.Q.value         = Math.SQRT1_2;\n        this.tone.gain.value      = 0;  // Not used\n\n        // `Reverb` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.convolver.buffer;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = this.rirs.length - 1;\n\n                    if (value === null) {\n                        this.convolver.buffer = null;\n\n                        // If `buffer` in `ConvolverNode` is `null` after setting the instance of `AudioBuffer`, `Reverb` is not OFF.\n                        // Therefore, `Reverb` is OFF by disconnecting nodes.\n                        this.input.disconnect(0);\n                        this.input.connect(this.output);\n                    } else if ((v >= min) && (v <= max)) {\n                        this.convolver.buffer = this.rirs[v];\n                        this.connect();\n                    }\n\n                    break;\n                case 'dry':\n                case 'wet':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                case 'rirs':\n                    return this.rirs;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.convolver.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> ConvolverNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.convolver);\n            this.convolver.connect(this.wet);\n            this.wet.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets instance of `AudioBuffer` to `ConvolverNode`.\n     * @param {AudioBuffer|ArrayBuffer} impulse This argument is in order to convolve impulse response.\n     *     This argument is the instance of `AudioBuffer` or `ArrayBuffer` for impulse response.\n     * @param {function} errorCallback This argument is in order to be invoked when error occurs.\n     * @return {Reverb} This is returned for method chain.\n     * @override\n     */\n    start(impulse, errorCallback) {\n        if ((impulse instanceof AudioBuffer) || (impulse === null)) {\n            this.convolver.buffer = impulse;\n            this.rirs.push(impulse);  // Add to preset\n        } else if (impulse instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.convolver.buffer = buffer;\n                this.rirs.push(buffer);  // Add to preset\n            };\n\n            if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n                errorCallback = () => {};\n            }\n\n            this.context.decodeAudioData(impulse, successCallback, errorCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax for Revreb presets.\n     * @param {Array.<string>|Array.<AudioBuffer>} rirs This argument is either URLs or the instances of `AudioBuffer` for impulse response.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked when the creating the instances of `AudioBuffer` was completed.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {Reverb} This is returned for method chain.\n     */\n    preset(rirs, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('rirs' in properties) {\n                rirs = properties.rirs;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(rirs)) {\n            rirs = [rirs];\n        }\n\n        this.rirs = new Array(rirs.length);\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogresss = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.rirs[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (let i = 0, len = this.rirs.length; i < len; i++) {\n                            if (this.rirs[i] === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, Reverb.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = rirs.length; i < len; i++) {\n            if (typeof rirs[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(rirs[i], i);\n            } else if (rirs[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.rirs[i] = rirs[i];\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'dry'   : this.dry.gain.value,\n            'wet'   : this.wet.gain.value,\n            'tone'  : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Reverb]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Delay extends Effector {\n    static MAX_DELAY_TIME = 5;  // Max delay time is 5000 [ms]\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay(Delay.MAX_DELAY_TIME);\n        this.dry      = context.createGain();\n        this.wet      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.dry.gain.value        = 1;\n        this.wet.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n\n        // `Delay` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = Delay.MAX_DELAY_TIME;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                    }\n\n                    break;\n                case 'dry'     :\n                case 'wet'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Wet) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.wet);\n            this.wet.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'dry'      : this.dry.gain.value,\n            'wet'      : this.wet.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Delay]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Chorus extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Chorus` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (elayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Chorus]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Flanger extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Flanger` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (delayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Flanger]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Phaser extends Effector {\n    static MAXIMUM_STAGES = 24;  // The maximum number of All-Pass Filters\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.numberOfStages = 12;  // The default number of All-Pass Filters\n        this.filters        = new Array(Phaser.MAXIMUM_STAGES);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i]                 = context.createBiquadFilter();\n            this.filters[i].type            = (typeof this.filters[i].type === 'string') ? 'allpass' : (this.filters[i].ALLPASS || 7);\n            this.filters[i].frequency.value = 350;\n            this.filters[i].Q.value         = 1;\n            this.filters[i].gain.value      = 0;  // Not used\n        }\n\n        this.mix      = context.createGain();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.depth.gain.value    = 0;\n        this.rate.value          = 0;\n        this.mix.gain.value      = 0;\n        this.feedback.gain.value = 0;\n        this.depthRate           = 0;\n\n        // `Phaser` is not connected by default\n        this.state(false);\n\n        // LFO\n        // GainNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.depth.connect(this.filters[i].frequency);\n        }\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'stage':\n                    if (value === undefined) {\n                        return this.numberOfStages;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case  0:\n                        case  2:\n                        case  4:\n                        case  8:\n                        case 12:\n                        case 24:\n                            this.numberOfStages = v;\n                            this.connect();\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filters[0].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[i].frequency.value = v;\n                        }\n\n                        this.depth.gain.value = this.filters[0].frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.filters[0].Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[0].Q.value = v;\n                        }\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.filters[0].frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i].disconnect(0);\n        }\n\n        this.mix.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive && (this.numberOfStages > 0)) {\n            // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.filters[0]);\n\n            for (let i = 0; i < this.numberOfStages; i++) {\n                if (i < (this.numberOfStages - 1)) {\n                    this.filters[i].connect(this.filters[i + 1]);\n                } else {\n                    this.filters[i].connect(this.mix);\n                    this.mix.connect(this.output);\n\n                    // Feedback\n                    // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Feedback) -> BiquadFilterNode (All-Pass Filter x N) ...\n                    this.filters[i].connect(this.feedback);\n                    this.feedback.connect(this.filters[0]);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n           // Connect nodes again\n           this.lfo.connect(this.depth);\n\n           for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n               this.depth.connect(this.filters[i].frequency);\n           }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'stage'     : this.numberOfStages,\n            'frequency' : this.filters[0].frequency.value,\n            'resonance' : this.filters[0].Q.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'mix'       : this.mix.gain.value,\n            'feedback'  : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Phaser]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Ringmodulator extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 0;  // 0 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 1;\n        this.rate.value       = 0;\n\n        // `Ringmodulator` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Ringmodulator]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Tremolo extends Effector {\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Tremolo` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'wave':\n                    if (value === undefined) {\n                        return this.lfo.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Tremolo.WAVE_TYPES) {\n                        this.lfo.type = (typeof this.lfo.type === 'string') ? v : Tremolo.WAVE_TYPES[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value,\n            'wave'  : this.lfo.type\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Tremolo]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class AutopannerFallback extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitudeL = context.createGain();\n        this.amplitudeR = context.createGain();\n        this.splitter   = context.createChannelSplitter(2);\n        this.merger     = context.createChannelMerger(2);\n\n        this.amplitudeL.gain.value = 1;  // 1 +- depth\n        this.amplitudeR.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameters\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `AutopannerFallback` is not connected by default\n        this.state(false);\n\n        // LFO\n        this.lfoSplitter = context.createChannelSplitter(2);\n\n        // OscillatorNode (LFO) -> GainNode (Depth) -> ScriptProcessorNode -> ChannelSplitterNode -> AudioParam (gain) (L) / (R)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.processor);\n        this.processor.connect(this.lfoSplitter);\n        this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n        this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitudeL.disconnect(0);\n        this.amplitudeR.disconnect(0);\n        this.splitter.disconnect(0);\n        this.splitter.disconnect(1);\n        this.merger.disconnect(0);\n\n        if (this.isActive) {\n            // GainNode (Input) -> ChannelSplitterNode -> GainNode (L) / (R) -> ChannelMergerNode -> GainNode (Output)\n            this.input.connect(this.splitter);\n            this.splitter.connect(this.amplitudeL, 0, 0);\n            this.splitter.connect(this.amplitudeR, 1, 0);\n            this.amplitudeL.connect(this.merger, 0, 0);\n            this.amplitudeR.connect(this.merger, 0, 1);\n            this.merger.connect(this.output);\n        } else {\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                const inputs   = event.inputBuffer.getChannelData(0);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                if (this.isActive && (this.depth.gain.value !== 0) && (this.rate.value !== 0)) {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] =  inputs[i];\n                        outputRs[i] = -inputs[i];\n                    }\n                } else {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = 0;\n                        outputRs[i] = 0;\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.processor);\n            this.processor.connect(this.lfoSplitter);\n            this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n            this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule AutopannerFallback]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Autopanner extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createStereoPanner();\n\n        // Initialize parameters\n        this.panner.pan.value = 0;\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Autopanner` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (pan)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.panner.pan);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                       return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                       return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> StereoPannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.panner.pan);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Autopanner]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Filter extends Effector {\n    // for legacy browsers\n    static FILTER_TYPES = {\n        'lowpass'   : 0,\n        'highpass'  : 1,\n        'bandpass'  : 2,\n        'lowshelf'  : 3,\n        'highshelf' : 4,\n        'peaking'   : 5,\n        'notch'     : 6,\n        'allpass'   : 7\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.filter = context.createBiquadFilter();\n\n        // for legacy browsers\n        this.filter.frequency.setTargetAtTime = this.filter.frequency.setTargetAtTime || this.filter.frequency.setTargetValueAtTime;\n\n        // Initialize parameters\n        this.filter.type            = (typeof this.filter.type === 'string') ? 'lowpass' : (this.filter.LOWPASS || 0);\n        this.filter.frequency.value = 350;\n        this.filter.Q.value         = 1;\n        this.filter.gain.value      = 0;\n\n        this.maxFrequency = this.filter.frequency.value;\n        this.range        = 0.1;  // 10% -> between `this.maxFrequency * 0.1` and `this.maxFrequency`\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 1.0;\n        this.release = 1.0;\n\n        // `Filter` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.filter.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Filter.FILTER_TYPES) {\n                        this.filter.type = (typeof this.filter.type === 'string') ? v : Filter.FILTER_TYPES[v];\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filter.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.maxFrequency           = v;\n                        this.filter.frequency.value = v;\n                    }\n\n                    break;\n                case 'gain':\n                    if (value === undefined) {\n                        return this.filter.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.gain.value = v;\n                    }\n\n                    break;\n                case 'q':\n                    if (value === undefined) {\n                        return this.filter.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.Q.value = v;\n                    }\n\n                    break;\n                case 'range':\n                    if (value === undefined) {\n                        return this.range;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.range= v;\n                    }\n\n                    break;\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.filter.disconnect(0);\n\n        if (this.isActive) {\n            // Effector ON\n\n            // GainNode (Input) -> BiquadFilterNode -> GainNode (Output)\n            this.input.connect(this.filter);\n            this.filter.connect(this.output);\n        } else {\n            // Effector OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            const t0      = s;\n            const t1      = t0 + this.attack;\n            const t2      = this.decay;\n            const t2Value = this.sustain * this.maxFrequency;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t0);\n            this.filter.frequency.setValueAtTime(minFrequnecy, t0);\n            this.filter.frequency.linearRampToValueAtTime(this.maxFrequency, t1);  // Attack\n            this.filter.frequency.setTargetAtTime(t2Value, t1, t2);  // Decay -> Sustain\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime) {\n        if (this.isActive) {\n            let s = parseFloat(stopTime) - this.release;\n\n           if (isNaN(s) || (s < this.context.currentTime)) {\n               s = this.context.currentTime;\n           }\n\n            const t3 = s;\n            const t4 = this.release;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t3);\n            this.filter.frequency.setValueAtTime(this.filter.frequency.value, t3);\n            this.filter.frequency.setTargetAtTime(minFrequnecy, t3, t4);  // Sustain -> Release\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'type'      : this.filter.type,\n            'frequency' : this.filter.frequency.value,\n            'Q'         : this.filter.Q.value,\n            'gain'      : this.filter.gain.value,\n            'range'     : this.range,\n            'attack'    : this.attack,\n            'decay'     : this.decay,\n            'sustain'   : this.sustain,\n            'release'   : this.release\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Filter]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Equalizer extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     **/\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.bass     = context.createBiquadFilter();\n        this.middle   = context.createBiquadFilter();\n        this.treble   = context.createBiquadFilter();\n        this.presence = context.createBiquadFilter();\n\n        // Set filter type\n        this.bass.type     = (typeof this.bass.type     === 'string') ? 'lowshelf'  : (this.bass.LOWSHELF      || 3);\n        this.middle.type   = (typeof this.middle.type   === 'string') ? 'peaking'   : (this.middle.PEAKING     || 5);\n        this.treble.type   = (typeof this.treble.type   === 'string') ? 'peaking'   : (this.treble.PEAKING     || 5);\n        this.presence.type = (typeof this.presence.type === 'string') ? 'highshelf' : (this.presence.HIGHSHELF || 4);\n\n        // Set cutoff frequency\n        this.bass.frequency.value     =  500;  // 500 Hz\n        this.middle.frequency.value   = 1000;  // 1 kHz\n        this.treble.frequency.value   = 2000;  // 2 kHz\n        this.presence.frequency.value = 4000;  // 4 kHz\n\n        // Set Q\n        // this.bass.Q.value     = Math.SQRT1_2;  // Not used\n        this.middle.Q.value   = Math.SQRT1_2;\n        this.treble.Q.value   = Math.SQRT1_2;\n        // this.presence.Q.value = Math.SQRT1_2;  // Not used\n\n        // Set Gain\n        this.bass.gain.value     = 0;\n        this.middle.gain.value   = 0;\n        this.treble.gain.value   = 0;\n        this.presence.gain.value = 0;\n\n        // `Equalizer` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'bass'    :\n                case 'middle'  :\n                case 'treble'  :\n                case 'presence':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.bass.disconnect(0);\n        this.middle.disconnect(0);\n        this.treble.disconnect(0);\n        this.presence.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Bass) -> BiquadFilterNode (Middle) -> BiquadFilterNode (Treble) -> BiquadFilterNode (Presence) -> GainNode (Output)\n            this.input.connect(this.bass);\n            this.bass.connect(this.middle);\n            this.middle.connect(this.treble);\n            this.treble.connect(this.presence);\n            this.presence.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'bass'     : this.bass.gain.value,\n            'middle'   : this.middle.gain.value,\n            'treble'   : this.treble.gain.value,\n            'presence' : this.presence.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Equalizer]';\n    }\n}\n\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Wah extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.lowpass = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.lowpass.type            = (typeof this.lowpass.type === 'string') ? 'lowpass' : (this.lowpass.LOWPASS || 0);\n        this.lowpass.frequency.value = 350;\n        this.lowpass.Q.value         = 1;\n        this.lowpass.gain.value      = 0;  // Not used\n\n        this.depth.gain.value  = 0;\n        this.rate.value        = 0;\n        this.depthRate         = 0;\n\n        // `Wah` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.lowpass.frequency);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.lowpass.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.frequency.value = v;\n                        this.depth.gain.value        = this.lowpass.frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.lowpass.frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.lowpass.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.Q.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.lowpass.frequency);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.lowpass.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Low-Pass Filter) -> GainNode (Output)\n            this.input.connect(this.lowpass);\n            this.lowpass.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'cutoff'    : this.lowpass.frequency.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'resonance' : this.lowpass.Q.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Wah]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Distortion extends Effector {\n    static CLEAN      = 'clean';\n    static CRUNCH     = 'crunch';\n    static OVERDRIVE  = 'overdrive';\n    static DISTORTION = 'distortion';\n    static FUZZ       = 'fuzz';\n\n    static AMOUNTS = {\n        'CLEAN'      : 0.0,\n        'CRUNCH'     : 0.5,\n        'OVERDRIVE'  : 0.7,\n        'DISTORTION' : 0.8,\n        'FUZZ'       : 0.9\n    };\n\n    /**\n     * This class (static) method creates the instance of `Float32Array` for distortion.\n     * @param {number} amount This argument is the depth of distortion.\n     * @param {number} numberOfSamples This argument is the size of `Float32Array`.\n     * @return {Float32Array|null} This is `curve` property in `WaveShaperNode`.\n     */\n    static createCurve = (amount, numberOfSamples) => {\n        if ((amount > 0) && (amount < 1)) {\n            const curves = new Float32Array(numberOfSamples);\n\n            const k = (2 * amount) / (1 - amount);\n\n            for (let i = 0; i < numberOfSamples; i++) {\n                // LINEAR INTERPOLATION: x := (c - a) * (z - y) / (b - a) + y\n                // a = 0, b = 2048, z = 1, y = -1, c = i\n                const x = (((i - 0) * (1 - (-1))) / (numberOfSamples - 0)) + (-1);\n                curves[i] = ((1 + k) * x) / (1 + k * Math.abs(x));\n            }\n\n            return curves;\n        }\n\n        return null;  // Clean sound (default value)\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.distortion = context.createWaveShaper();\n        this.drive      = context.createGain();\n        this.color      = context.createBiquadFilter();\n        this.tone       = context.createBiquadFilter();\n\n        // Distortion type\n        this.type = Distortion.CLEAN;\n\n        // for creating curve\n        this.numberOfSamples = 4096;\n\n        // Initialize parameters\n        this.drive.gain.value      = 1;\n        this.color.type            = (typeof this.color.type === 'string') ? 'bandpass' : (this.color.BANDPASS || 2);\n        this.color.frequency.value = 350;\n        this.color.Q.value         = Math.SQRT1_2;\n        this.color.gain.value      = 0;  // Not used\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n\n        // `Distortion` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else  {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'curve':\n                    if (value === undefined) {\n                        return this.distortion.curve;\n                    }\n\n                    let curve = null;\n\n                    switch (String(value).toLowerCase()) {\n                        case Distortion.CLEAN:\n                            this.type = Distortion.CLEAN;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CLEAN, this.numberOfSamples);\n                            break;\n                        case Distortion.CRUNCH:\n                            this.type = Distortion.CRUNCH;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CRUNCH, this.numberOfSamples);\n                            break;\n                        case Distortion.OVERDRIVE:\n                            this.type = Distortion.OVERDRIVE;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.OVERDRIVE, this.numberOfSamples);\n                            break;\n                        case Distortion.DISTORTION:\n                            this.type = Distortion.DISTORTION;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.DISTORTION, this.numberOfSamples);\n                            break;\n                        case Distortion.FUZZ:\n                            this.type = Distortion.FUZZ;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.FUZZ, this.numberOfSamples);\n                            break;\n                        default:\n                            if (value instanceof Float32Array) {\n                                curve = value;\n                            }\n\n                            break;\n                    }\n\n                    this.distortion.curve = curve;\n\n                    break;\n                case 'samples':\n                    if (value === undefined) {\n                        return this.numberOfSamples;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    if (v >= 0) {\n                        this.numberOfSamples = v;\n                        this.param('curve', this.type);\n                    }\n\n                    break;\n                case 'drive':\n                    if (value === undefined) {\n                        return this.drive.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.drive.gain.value = v;\n                    }\n\n                    break;\n                case 'color':\n                case 'tone' :\n                    if (value === undefined) {\n                        return this[k].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.distortion.disconnect(0);\n        this.drive.disconnect(0);\n        this.color.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Color) -> WaveShaperNode (Distortion) -> GainNode (Drive) -> BiquadFilterNode (Tone) -> GainNode (Output)\n            this.input.connect(this.color);\n            this.color.connect(this.distortion);\n            this.distortion.connect(this.drive);\n            this.drive.connect(this.tone);\n            this.tone.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'   : this.isActive,\n            'curve'   : this.type,\n            'samples' : this.numberOfSamples,\n            'drive'   : this.drive.gain.value,\n            'color'   : this.color.frequency.value,\n            'tone'    : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Distortion]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Compressor extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.compressor = context.createDynamicsCompressor();\n\n        // Set default value\n        this.compressor.threshold.value = -24;\n        this.compressor.knee.value      = 30;\n        this.compressor.ratio.value     = 12;\n        this.compressor.attack.value    = 0.003;\n        this.compressor.release.value   = 0.25;\n\n        // `Compressor` is connected by default\n        this.state(true);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.compressor) {\n                if (value === undefined) {\n                    return this.compressor[k].value;\n                }\n\n                const v = parseFloat(value);\n\n                const minValues = {\n                    'threshold' : -100,\n                    'knee'      : 0,\n                    'ratio'     : 1,\n                    'attack'    : 0,\n                    'release'   : 0\n                };\n\n                const maxValues = {\n                    'threshold' : 0,\n                    'knee'      : 40,\n                    'ratio'     : 20,\n                    'attack'    : 1,\n                    'release'   : 1\n                };\n\n                const min = minValues[k];\n                const max = maxValues[k];\n\n                if ((v >= min) && (v <= max)) {\n                    this.compressor[k].value = v;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.compressor.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n            // GainNode (Input) -> DynamicsCompressorNode -> GainNode (Output)\n            this.input.connect(this.compressor);\n            this.compressor.connect(this.output);\n        } else {\n            // Effect OFF\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'threshold' : this.compressor.threshold.value,\n            'knee'      : this.compressor.knee.value,\n            'ratio'     : this.compressor.ratio.value,\n            'attack'    : this.compressor.attack.value,\n            'release'   : this.compressor.release.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Compressor]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for sound session on network.\n * @constructor\n */\nexport default class Session {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     * @param {Analyser} analyser This argument is the instance of `Analyser`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs, analyser) {\n        this.isActive = false;\n\n        this.context  = context;\n        this.analyser = analyser;  // the instance of `Analyser`\n\n        this.sender   = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n        this.receiver = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.websocket = null;  // for the instance of `WebSocket`\n        this.paused    = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n    }\n\n    /**\n     * This method creates the instance of `WebSocket` and registers event handlers.\n     * @param {boolean} tls This argument is in order to select protocol (either `wss` or `ws`).\n     * @param {string} host This argument is server's hostname.\n     * @param {number} port This argument is port number for connection.\n     * @param {string} path This argument is file that is executed in server side.\n     * @param {function} openCallback This argument is invoked as `onopen` event handler in the instance of `WebSocket`.\n     * @param {function} closeCallback This argument is invoked as `onclose` event handler in the instance of `WebSocket`.\n     * @param {function} errorCallback This argument is invoked as `onerror` event handler in the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    setup(tls, host, port, path, openCallback, closeCallback, errorCallback) {\n        /*\n        if (!navigator.onLine) {\n            // Clear\n            this.isActive = false;\n            this.paused   = true;\n            this.connect();\n            this.websocket = null;\n\n            throw new Error('Now Offline.');\n        }\n        */\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('tls' in properties) {\n                tls = properties.tls;\n            }\n\n            if ('host' in properties) {\n                host = properties.host;\n            }\n\n            if ('port' in properties) {\n                port = properties.port;\n            }\n\n            if ('path' in properties) {\n                path = properties.path;\n            }\n\n            if ('open' in properties) {\n                openCallback = properties.open;\n            }\n\n            if ('close' in properties) {\n                closeCallback = properties.close;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n        }\n\n        const scheme = tls ? 'wss://' : 'ws://';\n\n        if (path.charAt(0) !== '/') {\n            path = `/${path}`;\n        }\n\n        const p = parseInt(port, 10);\n\n        if (isNaN(p) || (p < 0) || (p > 65535)) {\n            return this;\n        }\n\n        this.websocket = new WebSocket(`${scheme}${host}:${p}${path}`);\n        this.websocket.binaryType = 'arraybuffer';\n\n        this.websocket.onopen = event => {\n            if (Object.prototype.toString.call(openCallback) === '[object Function]') {\n                openCallback(event);\n            }\n        };\n\n        this.websocket.onclose = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(closeCallback) === '[object Function]') {\n                closeCallback(event);\n            }\n        };\n\n        this.websocket.onerror = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(event);\n            }\n        };\n\n        this.websocket.onmessage = event => {\n            if (!this.isActive) {\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n\n                return;\n            }\n\n            if (event.data instanceof ArrayBuffer) {\n                const total  = event.data.byteLength / Float32Array.BYTES_PER_ELEMENT;\n                const length = Math.floor(total / 2);\n                const offset = length * Float32Array.BYTES_PER_ELEMENT;\n\n                const bufferLs = new Float32Array(event.data,      0, length);  // Get Left  channel data\n                const bufferRs = new Float32Array(event.data, offset, length);  // Get Right channel data\n\n                // Start drawing sound wave\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                this.receiver.onaudioprocess = event => {\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (bufferLs instanceof Float32Array) {outputLs.set(bufferLs);}\n                    if (bufferRs instanceof Float32Array) {outputRs.set(bufferRs);}\n\n                    // bufferLs = null;\n                    // bufferRs = null;\n\n                    if (!this.isActive || (this.websocket === null)) {\n                        this.analyser.stop('time');\n                        this.analyser.stop('fft');\n                    }\n                };\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes according to state.\n     * @return {Session} This is returned for method chain.\n     */\n    connect() {\n        // Clear connection\n        this.receiver.disconnect(0);\n        this.sender.disconnect(0);\n\n        this.receiver.onaudioprocess = null;\n        this.sender.onaudioprocess   = null;\n\n        if (this.isActive) {\n            // ScriptProcessorNode (Input) -> Analyser\n            this.receiver.connect(this.analyser.input);\n\n            // ScriptProcessorNode (Input) -> AudioDestinationNode (Output)\n            this.receiver.connect(this.context.destination);\n        } else {\n            this.paused = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sends sound data to server.\n     * @return {Session} This is returned for method chain.\n     */\n    start() {\n        if (this.isActive && this.isConnected() && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.sender.bufferSize;\n\n            this.sender.onaudioprocess = event => {\n                if (this.isActive && this.isConnected()) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const buffer = new Float32Array(2 * bufferSize);\n                    const offset = parseInt((buffer.length / 2), 10);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        buffer[i]          = inputLs[i];\n                        buffer[offset + i] = inputRs[i];\n                    }\n\n                    if (this.websocket.bufferedAmount === 0) {\n                        this.websocket.send(buffer);\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method closes connection to server and destroys the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    close() {\n        if (this.websocket instanceof WebSocket) {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n            this.websocket.close();\n\n            this.websocket = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether there is the connection to server.\n     * @return {boolean} If the connection to server exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isConnected() {\n        return (this.websocket instanceof WebSocket) && (this.websocket.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @param {function} stateCallback This argument is invoked when `bufferedAmount` equals to 0.\n     * @param {function} waitCallback This argument is invoked until `bufferedAmount` equals to 0.\n     * @return {Session} This is returned for method chain.\n     */\n    state(state, stateCallback, waitCallback) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (Object.prototype.toString.call(waitCallback) === '[object Function]') {\n            waitCallback();\n        }\n\n        const intervalid = window.setInterval(() => {\n            if ((this.websocket instanceof WebSocket) && (this.websocket.bufferedAmount !== 0)) {\n                return;\n            }\n\n            if (String(state).toLowerCase() === 'toggle') {\n                this.isActive = !this.isActive;\n            } else {\n                this.isActive = Boolean(state);\n            }\n\n            this.connect();\n\n            if (Object.prototype.toString.call(stateCallback) === '[object Function]') {\n                stateCallback();\n            }\n\n            window.clearInterval(intervalid);\n        }, 10);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `WebSocket`.\n     * @return {WebSocket}\n     */\n    get() {\n        return this.websocket;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Session]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for multi track recording.\n * @constructor\n */\nexport default class Recorder {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs) {\n        this.sampleRate = context.sampleRate;\n\n        this.context   = context;\n        this.processor = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.mixedLs = null;  /** @type {Float32Array} */\n        this.mixedRs = null;  /** @type {Float32Array} */\n\n        this.numberOfTracks = 0;\n        this.trackLs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n        this.trackRs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n\n        this.activeTrack = -1;    // There is not any active track in the case of -1\n        this.paused      = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n\n        this.gainL = 1;  // Gain of Left  channel\n        this.gainR = 1;  // Gain of Right channel\n    }\n\n    /**\n     * This method sets the max number of tracks.\n     * @param {number} numberOfTracks This argument is the max number of tracks. The default value is 1.\n     * @return {Recorder} This is returned for method chain.\n     */\n    setup(numberOfTracks) {\n        const n = parseInt(numberOfTracks, 10);\n\n        if (n > 0) {\n            this.numberOfTracks = n;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            for (let i = 0; i < n; i++) {this.trackLs[i] = [];}  // n x array\n            for (let i = 0; i < n; i++) {this.trackRs[i] = [];}  // n x array\n        } else {\n            this.numberOfTracks = 1;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            this.trackLs[0] = [];  // 1 * array\n            this.trackRs[0] = [];  // 1 * array\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Recorder} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'gainl':\n                case 'gainr':\n                    if (value === undefined) {\n                        return this[`gain${k.slice(-1).toUpperCase()}`];\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[`gain${k.slice(-1).toUpperCase()}`] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects active track.\n     * @param {number} track This argument is in order to select active track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    ready(track) {\n        if (this.isTrack(track)) {\n            this.activeTrack = track;\n        } else {\n            this.activeTrack = -1;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts recording. If there is not any active track, this method stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    start() {\n        if ((this.activeTrack !== -1) && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                if (this.activeTrack !== -1) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const recordedLs = new Float32Array(bufferSize);\n                    const recordedRs = new Float32Array(bufferSize);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        recordedLs[i] = this.gainL * inputLs[i];\n                        recordedRs[i] = this.gainR * inputRs[i];\n                    }\n\n                    this.trackLs[this.activeTrack].push(recordedLs);\n                    this.trackRs[this.activeTrack].push(recordedRs);\n                } else {\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method turns off the all of tracks, and stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    stop() {\n        this.activeTrack = -1;  // Flag becomes inactive\n        this.paused      = true;\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the designated track number is valid.\n     * @param {number} track This argument is track number for validation.\n     * @return {boolean} If the designated track is valid range, this value is `true`. Otherwise, this value is `false`.\n     */\n    isTrack(track) {\n        const t = parseInt(track, 10);\n\n        return (t >= 0) && (t < this.numberOfTracks);\n    }\n\n    /**\n     * This method determines whether active track exists.\n     * @return {number} This is returned as active track.\n     */\n    getActiveTrack() {\n        return this.activeTrack;\n    }\n\n    /**\n     * This method synthesizes recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @return {Float32Array} This is returned as array for synthesized sound.\n     */\n    mixTrack(channel) {\n        const tracks      = this[`track${channel}s`];\n        const mixes       = { 'values' : null, 'sum' : 0, 'num' : 0 };\n        const bufferSize  = this.processor.bufferSize;\n        let currentBuffer = 0;\n        let index         = 0;\n\n        // Calculate sound data size\n        let numberOfMaxBuffers = 0;\n\n        // Search the max number of Float32Arrays each track\n        for (const track of tracks) {\n            if (numberOfMaxBuffers < track.length) {\n                numberOfMaxBuffers = track.length;\n            }\n        }\n\n        mixes.values = new Float32Array(numberOfMaxBuffers * bufferSize);\n\n        while (true) {\n            for (let currentTrack = 0, len = tracks.length; currentTrack < len; currentTrack++) {\n                if (tracks[currentTrack][currentBuffer] instanceof Float32Array) {\n                    mixes.sum += tracks[currentTrack][currentBuffer][index];\n                    mixes.num++;\n                }\n            }\n\n            if (mixes.num > 0) {\n                const offset = currentBuffer * bufferSize;\n\n                // Average\n                mixes.values[offset + index] = mixes.sum / mixes.num;\n\n                // Clear\n                mixes.sum = 0;\n                mixes.num = 0;\n\n                // Next data\n                if (index < (bufferSize - 1)) {\n                    // Next element in Float32Array\n                    index++;\n                } else {\n                    // Next Float32Array\n                    currentBuffer++;\n                    index = 0;\n                }\n            } else {\n                return mixes.values;\n            }\n        }\n    }\n\n    /**\n     * This method synthesizes the all of recorded sounds in track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    mix() {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        this.mixedLs = this.mixTrack('L');\n        this.mixedRs = this.mixTrack('R');\n\n        return this;\n    }\n\n    /**\n     * This method clears recorded sound of the designated track.\n     * @param {number|string} track This argument is track for clearing.\n     * @return {Recorder} This is returned for method chain.\n     */\n    clear(track) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        if (String(track).toLowerCase() === 'all') {\n            for (const track of this.trackLs) {track.length = 0;}\n            for (const track of this.trackRs) {track.length = 0;}\n        } else {\n            if (this.isTrack(track)) {\n                this.trackLs[track].length = 0;\n                this.trackRs[track].length = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates WAVE file as Object URL or Data URL.\n     * @param {string|number} track This argument is the target track.\n     * @param {number} numberOfChannels This argument is in order to select stereo or monaural of WAVE file. The default value is 2.\n     * @param {number} qbit This argument is quantization bit of PCM. The default value is 16 (bit).\n     * @return {string} This is returned as Object URL or Data URL for WAVE file.\n     */\n    create(track, numberOfChannels, qbit) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        /** @type {Float32Array} */\n        let soundLs = null;\n\n        /** @type {Float32Array} */\n        let soundRs = null;\n\n        if (String(track).toLowerCase() === 'all') {\n            this.mix();\n\n            soundLs = this.mixedLs;\n            soundRs = this.mixedRs;\n        } else {\n            if (this.isTrack(track)) {\n                soundLs = this.trackLs[track - 1];\n                soundRs = this.trackRs[track - 1];\n            }\n        }\n\n        // Sound data exists ?\n        if ((soundLs.length === 0) && (soundRs.length === 0)) {\n            return '';\n        }\n\n        // PCM parameters\n        const CHANNEL = (numberOfChannels === 1) ? 1 : 2;\n        const QBIT    = (qbit === 8) ? 8 : 16;\n        const SIZE    = (CHANNEL === 1) ? Math.min(soundLs.length, soundRs.length) : (2 * Math.min(soundLs.length, soundRs.length));\n\n        // Parameters for WAVE file\n        const FMT_CHUNK  = 28;\n        const DATA_CHUNK =  8 + (SIZE * (QBIT / 8));\n        const CHUNK_SIZE = 36 + (SIZE * (QBIT / 8));\n        const RIFF_CHUNK =  8 + (FMT_CHUNK + DATA_CHUNK);\n        const RATE       = this.sampleRate;\n        const BPS        = RATE * CHANNEL * (QBIT / 8);\n        const DATA_SIZE  = SIZE * (QBIT / 8);\n\n        /** @type {Uint8Array|Int16Array} */\n        let sounds = null;\n\n        switch (QBIT) {\n            case 8:\n                sounds = new Uint8Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 8 bit unsigned integer (-1 -> 0, 0 -> 128, 1 -> 255)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = ((soundLs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Left channel\n                    } else {\n                        binary = ((soundRs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (Math.pow(2, 8) - 1)) {binary = (Math.pow(2, 8) - 1);}\n                    if (binary < (Math.pow(2, 0) - 1)) {binary = (Math.pow(2, 0) - 1);}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            case 16:\n                sounds = new Int16Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 16 bit integer (-1 -> -32768, 0 -> 0, 1 -> 32767)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = soundLs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Left channel\n                    } else {\n                        binary = soundRs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (+Math.pow(2, 15) - 1)) {binary =  Math.pow(2, 15) - 1;}\n                    if (binary < (-Math.pow(2, 15) - 1)) {binary = -Math.pow(2, 15) - 1;}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        // Create WAVE file (Object URL or Data URL)\n        window.URL = window.URL || window.webkitURL || window.mozURL;\n\n        if (window.URL && window.URL.createObjectURL) {\n            // Object URL\n\n            const waves = [];\n\n            waves[0] = 0x52;  // 'R'\n            waves[1] = 0x49;  // 'I'\n            waves[2] = 0x46;  // 'F'\n            waves[3] = 0x46;  // 'F'\n\n            waves[4] = (CHUNK_SIZE >>  0) & 0xFF;\n            waves[5] = (CHUNK_SIZE >>  8) & 0xFF;\n            waves[6] = (CHUNK_SIZE >> 16) & 0xFF;\n            waves[7] = (CHUNK_SIZE >> 24) & 0xFF;\n\n            waves[8]  = 0x57;  // 'W'\n            waves[9]  = 0x41;  // 'A'\n            waves[10] = 0x56;  // 'V'\n            waves[11] = 0x45;  // 'E'\n\n            // fmt chunk\n            waves[12] = 0x66;  // 'f'\n            waves[13] = 0x6D;  // 'm'\n            waves[14] = 0x74;  // 't'\n            waves[15] = 0x20;  // ' '\n\n            waves[16] = 16;\n            waves[17] =  0;\n            waves[18] =  0;\n            waves[19] =  0;\n\n            waves[20] = 1;\n            waves[21] = 0;\n\n            // fmt chunk -> Channels (Monaural or Stereo)\n            waves[22] = CHANNEL;\n            waves[23] = 0;\n\n            // fmt chunk -> Sample rate\n            waves[24] = (RATE >>  0) & 0xFF;\n            waves[25] = (RATE >>  8) & 0xFF;\n            waves[26] = (RATE >> 16) & 0xFF;\n            waves[27] = (RATE >> 24) & 0xFF;\n\n            // fmt chunk -> Byte per second\n            waves[28] = (BPS >>  0) & 0xFF;\n            waves[29] = (BPS >>  8) & 0xFF;\n            waves[30] = (BPS >> 16) & 0xFF;\n            waves[31] = (BPS >> 24) & 0xFF;\n\n            // fmt chunk -> Block size\n            waves[32] = CHANNEL * (QBIT / 8);\n            waves[33] = 0;\n\n            // fmt chunk -> Byte per Sample\n            waves[34] = QBIT;\n            waves[35] = 0;\n\n            // data chunk\n            waves[36] = 0x64;  // 'd'\n            waves[37] = 0x61;  // 'a'\n            waves[38] = 0x74;  // 't\n            waves[39] = 0x61;  // 'a'\n\n            waves[40] = (DATA_SIZE >>  0) & 0xFF;\n            waves[41] = (DATA_SIZE >>  8) & 0xFF;\n            waves[42] = (DATA_SIZE >> 16) & 0xFF;\n            waves[43] = (DATA_SIZE >> 24) & 0xFF;\n\n            for (let i = 0; i < SIZE; i++) {\n                switch (QBIT) {\n                    case  8:\n                        waves[(RIFF_CHUNK - DATA_SIZE) + i] = sounds[i];\n                        break;\n                    case 16:\n                        // The byte order in WAVE file is little endian\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 0] = ((sounds[i] >> 0) & 0xFF);\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 1] = ((sounds[i] >> 8) & 0xFF);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            const blob      = new Blob([new Uint8Array(waves)], { 'type' : 'audio/wav' });\n            const objectURL = window.URL.createObjectURL(blob);\n\n            return objectURL;\n        }\n\n        // Data URL\n\n        let wave = '';\n\n        wave += 'RIFF';\n        wave += String.fromCharCode(((CHUNK_SIZE >> 0) & 0xFF), ((CHUNK_SIZE >> 8) & 0xFF), ((CHUNK_SIZE >> 16) & 0xFF), ((CHUNK_SIZE >> 24) & 0xFF));\n        wave += 'WAVE';\n\n        // fmt chunk\n        wave += `fmt ${String.fromCharCode(16, 0, 0, 0)}`;\n        wave += String.fromCharCode(1, 0);\n\n        // fmt chunk -> Channels (Monaural or Stereo)\n        wave += String.fromCharCode(CHANNEL, 0);\n\n        // fmt chunk -> Sample rate\n        wave += String.fromCharCode(((RATE >> 0) & 0xFF), ((RATE >> 8) & 0xFF), ((RATE >> 16) & 0xFF), ((RATE >> 24) & 0xFF));\n\n        // fmt chunk -> Byte per second\n        wave += String.fromCharCode(((BPS >> 0) & 0xFF), ((BPS >> 8) & 0xFF), ((BPS >> 16) & 0xFF), ((BPS >> 24) & 0xFF));\n\n        // fmt chunk -> Block size\n        wave += String.fromCharCode((CHANNEL * (QBIT / 8)), 0);\n\n        // fmt chunk -> Byte per Sample\n        wave += String.fromCharCode(QBIT, 0);\n\n        // data chunk\n        wave += 'data';\n        wave += String.fromCharCode(((DATA_SIZE >> 0) & 0xFF), ((DATA_SIZE >> 8) & 0xFF), ((DATA_SIZE >> 16) & 0xFF), ((DATA_SIZE >> 24) & 0xFF));\n\n        for (let i = 0; i < SIZE; i++) {\n            switch (QBIT) {\n                case  8:\n                    wave += String.fromCharCode(sounds[i]);\n                    break;\n                case 16:\n                    // The byte order in WAVE file is little endian\n                    wave += String.fromCharCode(((sounds[i] >> 0) & 0xFF), ((sounds[i] >> 8) & 0xFF));\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        const base64  = window.btoa(wave);\n        const dataURL = `data:audio/wav;base64,${base64}`;\n\n        return dataURL;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Recorder]';\n    }\n}\n","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in frequency domain (spectrum).\n * @constructor\n * @extends {Visualizer}\n */\nexport default class FFT extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = FFT.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.size         = 256;       // Range for drawing\n        this.textInterval = 1000;      // Draw text at intervals of this value [Hz]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === FFT.UINT) || (v === FFT.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'size':\n                    if (value === undefined) {\n                        return this.size;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = 1024;  // `AnalyserNode#fftSize` max 2048 -> half 1024\n\n                    if ((v > min) && (v <= max)) {\n                        this.size = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data, minDecibels, maxDecibels) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (Sampling rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Set style\n                context.strokeStyle = (this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)';  // line only\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = (Math.abs(data[i] - maxdB) * (innerHeight / range)) + this.styles.top;  // [dB] * [px / dB] = [px]\n\n                    if (i === 0) {\n                        context.moveTo((x + (this.styles.width / 2)), y);\n                    } else {\n                        context.lineTo(x, y);\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        context.beginPath();\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = -1 * Math.floor((data[i] / 255) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = innerHeight + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, (innerHeight + this.styles.top), this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i} dB`;\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data, minDecibels, maxDecibels) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (sample rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = Math.floor(-1 * (data[i] - maxdB) * (innerHeight / range)) + this.styles.top;\n\n                    if (i === 0) {\n                        d += `M${x + (this.styles.width / 2)} ${y}`;\n                    } else {\n                        d += ` L${x} ${y}`;\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          ((this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)'));  // line only\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                svg.appendChild(path);\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        // Draw wave\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_FFT);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            let rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((data[i] / 255) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     (this.styles.top + innerHeight));\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${this.styles.top + innerHeight})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_FFT})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i}dB`;\n                        const x = this.styles.left;\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = this.styles.left;\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser FFT]';\n    }\n}\n","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport default class Time extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = Time.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.textInterval = 0.005;      // Draw text at intervals this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Time.UINT) || (v === Time.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle);\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        // Draw wave\n                        context.beginPath();\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((0.5 - (data[i] / 255)) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = (innerHeight / 2) + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, middle, this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Begin drawing\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, null, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME));\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_TIME);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor(((data[i] / 255) - 0.5) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     middle);\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${middle})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_TIME})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Time]';\n    }\n}\n","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing audio wave in overview of time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport default class TimeOverview extends Visualizer {\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = null;\n        this.length     = 0;\n\n        this.currentTime  = 'rgba(255, 255, 255, 1.0)';  // This style is used for the rectangle that displays current time of audio\n        this.plotInterval = 0.0625;                      // Draw wave at intervals of this value [sec]\n        this.textInterval = 60;                          // Draw text at intervals of this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    this.currentTime = String(value).toLowerCase();\n\n                    break;\n                case 'plotinterval':\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this[k.replace('interval', 'Interval')];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k.replace('interval', 'Interval')] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to Canvas.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval);\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) / 60)} min`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = context.getImageData(0, 0, width, height);\n        this.length     = data.length;\n\n        // This rectangle displays current time of audio\n        context.fillStyle = this.currentTime;\n        context.fillRect(this.styles.left, this.styles.top, 1, innerHeight);\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to SVG.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW));\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = Math.floor((i / this.sampleRate) / 60) + ' min';\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        // This rectangle displays current time of audio\n        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n        rect.classList.add('svg-current-time');\n\n        rect.setAttribute('x',      this.styles.left);\n        rect.setAttribute('y',      this.styles.top);\n        rect.setAttribute('width',  1);\n        rect.setAttribute('height', innerHeight);\n\n        rect.setAttribute('stroke', 'none');\n        rect.setAttribute('fill',   this.currentTime);\n\n        svg.appendChild(rect);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = svg;\n        this.length     = data.length;\n\n        return this;\n    }\n\n    /**\n     * This method draws current time of audio on Canvas or SVG.\n     * @param {number} time This argument is current time of audio.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    update(time) {\n        const t = parseFloat(time);\n\n        if (isNaN(t) || (t < 0)) {\n            return this;\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                if (this.savedImage instanceof ImageData) {\n                    const context = this.context;\n\n                    const { width, height } = this.canvas;\n\n                    const innerWidth  = width  - (this.styles.left + this.styles.right);\n                    const innerHeight = height - (this.styles.top  + this.styles.bottom);\n                    const x           = Math.floor(((t * this.sampleRate) / this.length) * innerWidth) + this.styles.left;\n\n                    context.clearRect(0, 0, width, height);\n                    context.putImageData(this.savedImage, 0, 0);\n\n                    context.fillStyle = this.currentTime;\n                    context.fillRect(x, this.styles.top, 1, innerHeight);\n                }\n\n                break;\n            case Visualizer.SVG:\n                const svg = this.svg.querySelector('.svg-current-time');\n\n                if (svg instanceof SVGElement) {\n                    const width      = parseInt(this.svg.getAttribute('width'), 10);\n                    const innerWidth = width  - (this.styles.left + this.styles.right);\n                    const x          = Math.floor(((t * this.sampleRate) / this.length) * innerWidth);\n\n                    svg.setAttribute('transform', `translate(${x} 0)`);\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method registers event listener for setting current time by drag.\n     * @param {function} callback This argument is invoked when current time is changed.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    drag(callback) {\n        let drawNode = null;\n\n        let start = '';\n        let move  = '';\n        let end   = '';\n\n        // Touch Panel ?\n        if (/iPhone|iPad|iPod|Android/.test(navigator.userAgent)) {\n            start = 'touchstart';\n            move  = 'touchmove';\n            end   = 'touchend';\n        } else {\n            start = 'mousedown';\n            move  = 'mousemove';\n            end   = 'mouseup';\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                drawNode = this.canvas;\n                break;\n            case Visualizer.SVG:\n                drawNode = this.svg;\n                break;\n            default:\n                return this;\n        }\n\n        let isDown = false;\n\n        drawNode.addEventListener(start, event => {\n            this.draw(this.getOffsetX(event), callback);\n            isDown = true;\n        }, true);\n\n        drawNode.addEventListener(move, event => {\n            if (isDown) {\n                event.preventDefault();  // for Touch Panel\n                this.draw(this.getOffsetX(event), callback);\n            }\n        }, true);\n\n        window.addEventListener(end, () => {\n            if (isDown) {\n                isDown = false;\n            }\n        }, true);\n\n        return this;\n    }\n\n    /**\n     * This method draws the rectangle for current time of audio.\n     * @param {number} offsetX This argument is X coordinate on Canvas or SVG.\n     * @param {function} callback This argument is invoked when the rectangle is drawn.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    draw(offsetX, callback) {\n        let offsetLeft = 0;\n        let width      = 0;\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                offsetLeft = this.canvas.offsetLeft;\n                width      = this.canvas.width;\n                break;\n            case Visualizer.SVG:\n                offsetLeft = this.svg.parentNode.offsetLeft;\n                width      = parseInt(this.svg.getAttribute('width'), 10);\n                break;\n            default:\n                break;\n        }\n\n        let x = offsetX - (offsetLeft + this.styles.left);\n\n        width -= (this.styles.left + this.styles.right);\n\n        // Exceed ?\n        if (x < 0)     {x = 0;}\n        if (x > width) {x = width;}\n\n        const plot = (x / width) * this.length;\n        const time = plot / this.sampleRate;\n\n        this.update(time);\n\n        if (Object.prototype.toString.call(callback) === '[object Function]') {\n            callback(time);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method returns X coordinate from `Event` object.\n     * @param {Event} event This argument is the instance of `Event`.\n     * @return {number} This is returned as X coordinate.\n     */\n    getOffsetX(event) {\n        if (event.pageX) {\n            return event.pageX;\n        }\n\n        if (event.touches[0]) {\n            return event.touches[0].pageX;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser TimeOverview]';\n    }\n}\n","'use strict';\n\nimport TimeOverview from './TimeOverview';\nimport Time from './Time';\nimport FFT from './FFT';\n\n/**\n * This private class manages 3 private classes (`TimeOverview`, `Time`, `FFT`) for drawing sound wave.\n * @constructor\n */\nexport default class Analyser {\n    /**\n     * @param {AudioContext} context This argument is This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        window.requestAnimationFrame = window.requestAnimationFrame       ||\n                                       window.webkitRequestAnimationFrame ||\n                                       window.mozRequestAnimationFrame    ||\n                                       (callback => window.setTimeout(callback, (1000 / 60)));\n\n        window.cancelAnimationFrame = window.cancelAnimationFrame       ||\n                                      window.webkitCancelAnimationFrame ||\n                                      window.mozCancelAnimationFrame    ||\n                                      window.clearTimeout;\n\n        this.analyser = context.createAnalyser();\n        this.input    = context.createGain();\n\n        // GainNode (Input) -> AnalyserNode\n        this.input.connect(this.analyser);\n\n        this.timeOverviewL = new TimeOverview(context.sampleRate);\n        this.timeOverviewR = new TimeOverview(context.sampleRate);\n        this.time          = new Time(context.sampleRate);\n        this.fft           = new FFT(context.sampleRate);\n\n        // Set default value\n        this.analyser.fftSize               = 2048;\n        this.analyser.minDecibels           = -100;\n        this.analyser.maxDecibels           = -30;\n        this.analyser.smoothingTimeConstant = 0.8;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Analyser} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'fftsize':\n                    if (value === undefined) {\n                        return this.analyser.fftSize;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case   32:\n                        case   64:\n                        case  128:\n                        case  256:\n                        case  512:\n                        case 1024:\n                        case 2048:\n                            this.analyser.fftSize = v;\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequencybincount':\n                    return this.analyser.frequencyBinCount;  // Getter only\n                case 'mindecibels':\n                    if (value === undefined) {\n                        return this.analyser.minDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    max = -30;\n\n                    if (v < max) {\n                        this.analyser.minDecibels = v;\n                    }\n\n                    break;\n                case 'maxdecibels':\n                    if (value === undefined) {\n                        return this.analyser.maxDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -100;\n\n                    if (v > min) {\n                        this.analyser.maxDecibels = v;\n                    }\n\n                    break;\n                case 'smoothingtimeconstant':\n                    if (value === undefined) {\n                        return this.analyser.smoothingTimeConstant;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.analyser.smoothingTimeConstant = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates data for drawing and executes drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @param {AudioBuffer} buffer This argument is the instance of `AudioBuffer`. The data for drawing audio wave in overview of time domain is gotten from this argument.\n     * @return {Analyser} This is returned for method chain.\n     */\n    start(domain, buffer) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        let data = null;\n\n        switch (d) {\n            case 'timeoverviewl':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 0) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(0));\n                        this.timeOverviewL.start(data);\n                    }\n                }\n\n                break;\n            case 'timeoverviewr':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 1) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(1));\n                        this.timeOverviewR.start(data);\n                    }\n                }\n\n                break;\n            case 'time':\n                if (this.time.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.fftSize);\n                    this.analyser.getByteTimeDomainData(data);\n                    this.time.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.fftSize);\n                    this.analyser.getFloatTimeDomainData(data);\n                    this.time.start(data);\n                }\n\n                if (this.time.param('interval') === 'auto') {\n                    this.time.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.time.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.time.param('interval'));\n                }\n\n                break;\n            case 'fft':\n                if (this.fft.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.frequencyBinCount);\n                    this.analyser.getByteFrequencyData(data);\n                    this.fft.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.frequencyBinCount);\n                    this.analyser.getFloatFrequencyData(data);\n                    this.fft.start(data, this.analyser.minDecibels, this.analyser.maxDecibels);\n                }\n\n                if (this.fft.param('interval') === 'auto') {\n                    this.fft.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.fft.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.fft.param('interval'));\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {Analyser} This is returned for method chain.\n     */\n    stop(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                break;\n            case 'time':\n                if (this.time.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.time.timerid);\n                } else {\n                    window.clearTimeout(this.time.timerid);\n                }\n\n                this.time.timerid = null;\n\n                break;\n            case 'fft':\n                if (this.fft.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.fft.timerid);\n                } else {\n                    window.clearTimeout(this.fft.timerid);\n                }\n\n                this.fft.timerid = null;\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects domain for drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {TimeOverview|Time|FFT|Analyser} This value is the instance of selected class.\n     */\n    domain(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                return this[`timeOverview${d.slice(-1).toUpperCase()}`];\n            case 'time':\n            case 'fft' :\n                return this[d];\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method gets the instance of `AnalyserNode`.\n     * @return {AnalyserNode}\n     */\n    get() {\n        return this.analyser;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser]';\n    }\n}\n","'use strict';\n\nimport SoundModule from './SoundModule';\nimport OscillatorModule from './OscillatorModule';\nimport OneshotModule from './OneshotModule';\nimport AudioModule from './AudioModule';\nimport MediaModule from './MediaModule';\nimport StreamModule from './StreamModule';\nimport MixerModule from './MixerModule';\nimport MIDI from './MIDI';\nimport MML from './MML';\nimport { read, file, ajax, decode, toFrequencies, convertTime, fullscreen, exitFullscreen } from './XSound';\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nconst IS_XSOUND = Boolean(window.AudioContext);\n\nif (IS_XSOUND) {\n    const audiocontext = new AudioContext();\n\n    // for legacy browsers\n    audiocontext.createScriptProcessor = audiocontext.createScriptProcessor || audiocontext.createJavaScriptNode;\n    audiocontext.createGain            = audiocontext.createGain            || audiocontext.createGainNode;\n    audiocontext.createDelay           = audiocontext.createDelay           || audiocontext.createDelayNode;\n    audiocontext.createPeriodicWave    = audiocontext.createPeriodicWave    || audiocontext.createWaveTable;\n\n    const sources = {\n        'oscillator' : new OscillatorModule(audiocontext),\n        'oneshot'    : new OneshotModule(audiocontext),\n        'audio'      : new AudioModule(audiocontext),\n        'media'      : new MediaModule(audiocontext),\n        'stream'     : new StreamModule(audiocontext),\n        'mixer'      : new MixerModule(audiocontext),\n        'midi'       : new MIDI(audiocontext),\n        'mml'        : new MML(audiocontext)\n    };\n\n    /**\n     * This function is global object for getting the instance of `OscillatorModule` or `OneshotModule` or `AudioModule` or `MediaModule` or `StreamModule` or `MixerModule` or `MIDI` or `MML` or `Oscillator`.\n     * @param {string} source This argument is one of 'oscillator', 'oneshot', 'audio', 'media', 'stream', 'mixer', 'midi', 'mml'.\n     * @param {number} index This argument is in order to select one of some oscillators.\n     * @return {OscillatorModule|OneshotModule|AudioModule|MediaModule|StreamModule|MixerModule|MIDI|MML|Oscillator}\n     */\n    const XSound = (source, index) => {\n        const s = String(source).replace(/-/g, '').toLowerCase();\n\n        switch (s) {\n            case 'oscillator':\n                if (index === undefined) {\n                    return sources.oscillator;\n                }\n\n                const i = parseInt(index, 10);\n\n                if ((i >= 0) && (i < sources.oscillator.length())) {\n                    return sources.oscillator.get(i);\n                }\n\n                return null;\n            case 'oneshot':\n            case 'audio'  :\n            case 'media'  :\n            case 'stream' :\n            case 'mixer'  :\n            case 'midi'   :\n            case 'mml'    :\n                return sources[s];\n            default :\n                return null;\n        }\n    };\n\n    /**\n     * Class (Static) properties\n     */\n    XSound.IS_XSOUND         = IS_XSOUND;\n    XSound.SAMPLE_RATE       = audiocontext.sampleRate;\n    XSound.NUMBER_OF_INPUTS  = SoundModule.NUMBER_OF_INPUTS;\n    XSound.NUMBER_OF_OUTPUTS = SoundModule.NUMBER_OF_OUTPUTS;\n    XSound.read              = read;\n    XSound.file              = file;\n    XSound.ajax              = ajax;\n    XSound.decode            = decode;\n    XSound.toFrequencies     = toFrequencies;\n    XSound.convertTime       = convertTime;\n    XSound.fullscreen        = fullscreen;\n    XSound.exitFullscreen    = exitFullscreen;\n\n    /**\n     * This class (static) method change state ('running') of `AudioContext`.\n     * The initial state is 'suspended' by Autoplay Policy Change.\n     * Therefore, this method must be invoked by user gestures.\n     * @return {Promise} This is returned as `Promise`.\n     */\n    XSound.setup = () => {\n        if (audiocontext.state !== 'running') {\n            return audiocontext.resume();\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * This class (static) method returns function as closure that is getter of cloned module.\n     * @return {function} This is returned as closure that is getter of cloned module.\n     */\n    XSound.clone = () => {\n        const clones = {\n            'oscillator' : new OscillatorModule(audiocontext),\n            'oneshot'    : new OneshotModule(audiocontext),\n            'audio'      : new AudioModule(audiocontext),\n            'media'      : new MediaModule(audiocontext),\n            'stream'     : new StreamModule(audiocontext),\n            'mixer'      : new MixerModule(audiocontext),\n            'midi'       : new MIDI(audiocontext),\n            'mml'        : new MML(audiocontext)\n        };\n\n        const C = (source, index) => {\n            const s = String(source).replace(/-/g, '').toLowerCase();\n\n            switch (s) {\n                case 'oscillator':\n                    if (index === undefined) {\n                        return clones.oscillator;\n                    }\n\n                    const i = parseInt(index, 10);\n\n                    if ((i >= 0) && (i < clones.oscillator.length())) {\n                        return clones.oscillator.get(i);\n                    }\n\n                    return null;\n                case 'oneshot':\n                case 'audio'  :\n                case 'media'  :\n                case 'stream' :\n                case 'mixer'  :\n                case 'midi'   :\n                case 'mml'    :\n                    return clones[s];\n                default :\n                    return null;\n            }\n        };\n\n        C.free  = sourceList => {\n            if (!Array.isArray(sourceList)) {\n                sourceList = [sourceList];\n            }\n\n            for (const source of sourceList) {\n                // Already deleted ?\n                if (source === null) {\n                    continue;\n                }\n\n                for (const key in clones) {\n                    if (source === clones[key]) {\n                        clones[key] = null;\n                    }\n                }\n            }\n        };\n\n        // Closure\n        return C;\n    };\n\n    /**\n     * This class (static) method releases memory of unnecessary instances.\n     * @param {Array.<SoundModule|MIDI|MML>} sourceList This argument is the array that contains the instances of `SoundModule` or `MIDI` or `MML`.\n     */\n    XSound.free = sourceList => {\n        if (!Array.isArray(sourceList)) {\n            sourceList = [sourceList];\n        }\n\n        for (const source of sourceList) {\n            // Already deleted ?\n            if (source === null) {\n                continue;\n            }\n\n            for (const key in sources) {\n                if (source === sources[key]) {\n                    sources[key] = null;\n                }\n            }\n        }\n    };\n\n    /**\n     * This class (static) method removes one of the global objects or both of the global objects.\n     * @param {boolean} deep This argument is in order to select whether removing both of global objects.\n     *     If this value is `true`, both of global objects are removed.\n     * @return {XSound}\n     */\n    XSound.noConflict = deep => {\n        if (window.X === XSound) {\n            window.X = undefined;\n        }\n\n        // both of global objects are removed ?\n        if (deep && (window.XSound === XSound)) {\n            window.XSound = undefined;\n        }\n\n        return XSound;\n    };\n\n    /**\n     * This class (static) method gets the instance of `AudioContext`.\n     * @return {AudioContext}\n     */\n    XSound.get = () => {\n        return audiocontext;\n    };\n\n    /**\n     * This class (static) method gets `currentTime` property in the instance of `AudioContext`.\n     * @return {number}\n     */\n    XSound.getCurrentTime = () => {\n        return audiocontext.currentTime;\n    };\n\n    /** @override */\n    XSound.toString = () => {\n        return '[XSound]';\n    };\n\n    // Export\n    window.XSound = XSound;\n    window.X      = XSound;  // Alias of XSound\n} else {\n    const XSound = () => null;\n\n    XSound.IS_XSOUND = IS_XSOUND;\n\n    // Export\n    window.XSound = XSound;\n    window.X      = XSound;  // Alias of XSound\n}\n"],"sourceRoot":""}