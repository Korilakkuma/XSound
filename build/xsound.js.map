{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/SoundModule/Analyser/Visualizer.js","webpack:///./src/SoundModule/Analyser/TimeOverview.js","webpack:///./src/SoundModule/Analyser/Time.js","webpack:///./src/SoundModule/Analyser/FFT.js","webpack:///./src/SoundModule/Analyser/index.js","webpack:///./src/SoundModule/Recorder.js","webpack:///./src/SoundModule/Session.js","webpack:///./src/SoundModule/Effectors/Effector.js","webpack:///./src/SoundModule/Effectors/Compressor.js","webpack:///./src/SoundModule/Effectors/Distortion.js","webpack:///./src/SoundModule/Effectors/Wah.js","webpack:///./src/SoundModule/Effectors/Equalizer.js","webpack:///./src/SoundModule/Effectors/Filter.js","webpack:///./src/SoundModule/Effectors/Autopanner.js","webpack:///./src/SoundModule/Effectors/AutopannerFallback.js","webpack:///./src/SoundModule/Effectors/Tremolo.js","webpack:///./src/SoundModule/Effectors/Ringmodulator.js","webpack:///./src/SoundModule/Effectors/Phaser.js","webpack:///./src/SoundModule/Effectors/Flanger.js","webpack:///./src/SoundModule/Effectors/Chorus.js","webpack:///./src/SoundModule/Effectors/Delay.js","webpack:///./src/SoundModule/Effectors/Reverb.js","webpack:///./src/SoundModule/Effectors/Panner.js","webpack:///./src/SoundModule/Effectors/Listener.js","webpack:///./src/SoundModule/Effectors/EnvelopeGenerator.js","webpack:///./src/SoundModule/index.js","webpack:///./src/OscillatorModule/Oscillator.js","webpack:///./src/OscillatorModule/Glide.js","webpack:///./src/OscillatorModule/index.js","webpack:///./src/OneshotModule/index.js","webpack:///./src/NoiseModule/index.js","webpack:///./src/AudioModule/VocalCanceler.js","webpack:///./src/AudioModule/index.js","webpack:///./src/MediaModule/index.js","webpack:///./src/StreamModule/NoiseGate.js","webpack:///./src/StreamModule/index.js","webpack:///./src/MixerModule/index.js","webpack:///./src/MIDI/index.js","webpack:///./src/MML/index.js","webpack:///./src/XSound/index.js","webpack:///./src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Visualizer","constructor","sampleRate","this","isActive","graphics","canvas","context","svg","interval","timerid","styles","shape","grad","offset","color","wave","grid","text","font","family","size","style","weight","width","cap","join","top","right","bottom","left","setup","element","HTMLCanvasElement","CANVAS","getContext","SVGElement","SVG","param","k","String","replace","toLowerCase","v","undefined","parseFloat","Array","isArray","isError","grads","isNaN","toString","prop","test","parseInt","start","data","minDecibels","maxDecibels","drawOnCanvas","drawBySVG","toDataURL","outerHTML","state","Boolean","drawTimeDomainFloat32ArrayOnCanvas","innerWidth","innerHeight","middle","nPlotInterval","CanvasRenderingContext2D","Float32Array","w","h","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","len","length","x","y","moveTo","lineTo","stroke","fillStyle","upside","gradient","createLinearGradient","gradients","addColorStop","fillRect","drawTimeDomainFloat32ArrayBySVG","linearGradientId","path","document","createElementNS","XMLNS","setAttribute","defs","createSVGLinearGradient","g","appendChild","rect","linearGradient","stop","createFontString","TimeOverview","super","savedImage","currentTime","plotInterval","textInterval","arguments","height","Math","floor","nTextInterval","clearRect","fillText","measureText","texts","trim","getImageData","getAttribute","innerHTML","SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW","textContent","classList","add","SVG_CURRENT_TIME_CLASS_NAME","update","time","ImageData","putImageData","querySelector","drag","callback","drawNode","move","end","navigator","userAgent","isDown","addEventListener","event","draw","getOffsetX","preventDefault","window","offsetX","offsetLeft","parentNode","pageX","touches","Time","type","UINT","FLOAT","ceil","SVG_LINEAR_GRADIENT_ID_TIME","FFT","min","max","mindB","maxdB","range","drawnSize","fsDivN","abs","f","slice","SVG_LINEAR_GRADIENT_ID_FFT","Analyser","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","setTimeout","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","clearTimeout","analyser","createAnalyser","input","createGain","connect","timeOverviewL","timeOverviewR","fft","fftSize","smoothingTimeConstant","frequencyBinCount","domain","buffer","AudioBuffer","numberOfChannels","set","getChannelData","Uint8Array","getByteTimeDomainData","getFloatTimeDomainData","getByteFrequencyData","getFloatFrequencyData","toUpperCase","Recorder","bufferSize","numberOfInputs","numberOfOutputs","processor","createScriptProcessor","mixedLs","mixedRs","numberOfTracks","trackLs","trackRs","activeTrack","paused","gainL","gainR","ready","track","isTrack","onaudioprocess","inputLs","inputBuffer","inputRs","recordedLs","recordedRs","push","disconnect","getActiveTrack","mixTrack","channel","tracks","mixes","values","sum","num","currentBuffer","index","numberOfMaxBuffers","currentTrack","mix","clear","qbit","soundLs","soundRs","CHANNEL","QBIT","SIZE","CHUNK_SIZE","RIFF_CHUNK","RATE","BPS","DATA_SIZE","sounds","binary","pow","Int16Array","URL","webkitURL","mozURL","createObjectURL","waves","blob","Blob","fromCharCode","btoa","Session","sender","BUFFER_SIZE","receiver","websocket","tls","host","port","openCallback","closeCallback","errorCallback","properties","open","close","error","scheme","charAt","WebSocket","binaryType","onopen","onclose","onerror","onmessage","ArrayBuffer","total","byteLength","BYTES_PER_ELEMENT","bufferLs","bufferRs","outputLs","outputBuffer","outputRs","destination","isConnected","bufferedAmount","send","readyState","OPEN","stateCallback","waitCallback","intervalid","setInterval","clearInterval","Effector","output","lfo","createOscillator","depth","rate","frequency","noteOn","noteOff","isStop","startTime","stopTime","releaseTime","params","toJSON","JSON","stringify","Compressor","compressor","createDynamicsCompressor","threshold","knee","ratio","attack","release","Distortion","distortion","createWaveShaper","drive","createBiquadFilter","tone","CLEAN","numberOfSamples","gain","BANDPASS","Q","SQRT1_2","LOWPASS","curve","createCurve","AMOUNTS","CRUNCH","OVERDRIVE","DISTORTION","FUZZ","samples","amount","curves","Wah","lowpass","depthRate","cutoff","resonance","Equalizer","bass","treble","presence","LOWSHELF","PEAKING","HIGHSHELF","Filter","filter","setTargetAtTime","setTargetValueAtTime","maxFrequency","decay","sustain","FILTER_TYPES","t0","t1","t2","t2Value","minFrequnecy","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","t3","t4","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass","Autopanner","panner","createStereoPanner","pan","AutopannerFallback","amplitudeL","amplitudeR","splitter","createChannelSplitter","merger","createChannelMerger","lfoSplitter","inputs","Tremolo","amplitude","WAVE_TYPES","sine","square","sawtooth","triangle","Ringmodulator","Phaser","numberOfStages","filters","MAXIMUM_STAGES","ALLPASS","feedback","stage","Flanger","delay","createDelay","delayTime","Chorus","Delay","MAX_DELAY_TIME","dry","wet","Reverb","rirs","convolver","createConvolver","impulse","successCallback","decodeAudioData","preset","timeout","progressCallback","success","progress","load","url","xhr","XMLHttpRequest","ontimeout","ERROR_AJAX_TIMEOUT","onprogresss","abort","ERROR_AJAX","onload","status","arrayBuffer","response","decodeSuccessCallback","audioBuffer","decodeErrorCallback","ERROR_DECODE","responseType","Panner","createPanner","positions","z","orientations","refDistance","maxDistance","rolloffFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","panningModel","HRTF","distanceModel","INVERSE_DISTANCE","setPosition","setOrientation","PANNING_MODELS","DISTANCE_MODELS","equalpower","linear","inverse","exponential","Listener","listener","fronts","ups","EnvelopeGenerator","generators","activeIndexes","activeCounter","AudioNode","activeIndex","getGenerator","setGenerator","counter","MIN_GAIN","isDisconnect","generator","SoundModule","init","mastervolume","recorder","session","forEach","NUMBER_OF_INPUTS","NUMBER_OF_OUTPUTS","wah","equalizer","autopanner","tremolo","ringmodulator","phaser","flanger","chorus","reverb","envelopegenerator","resize","getBufferSize","install","effector","every","source","connects","on","off","Oscillator","setPeriodicWave","setWaveTable","volume","octave","fine","customs","real","imag","reals","imags","MAX_SIZE","subarray","periodicWave","createPeriodicWave","OCTAVE","detune","Glide","frequencies","LINEAR","EXPONENTIAL","diff","oscillator","OscillatorModule","sources","times","isAnalyser","glide","states","st","sp","processCallback","OneshotModule","resources","buffers","volumes","isStops","settings","transpose","loop","onprogress","selectedIndex","bufferIndex","playbackRate","loopStart","loopEnd","AudioBufferSourceNode","createBufferSource","noteGrainOn","onended","oneshot","reset","NoiseModule","WHITE_NOISE","PINK_NOISE","BROWNIAN_NOISE","lastOut","random","b0","b1","b2","b3","b4","b5","b6","white","VocalCanceler","dataL","dataR","AudioModule","callbacks","decode","ended","vocalcanceler","duration","position","pos","toggle","isBuffer","isSource","isPaused","audio","playbackrate","MediaModule","media","ext","controls","muted","autoplay","listeners","formats","HTMLAudioElement","AUDIO","HTMLVideoElement","VIDEO","format","canPlayType","MediaElementAudioSourceNode","createMediaElementSource","loadstart","pause","HTMLMediaElement","channelCount","src","indexOf","Error","play","then","catch","Promise","resolve","reject","isMedia","requestPictureInPicture","pictureInPictureEnabled","disablePictureInPicture","pictureInPictureElement","exitPictureInPicture","NoiseGate","level","StreamModule","constraints","video","stream","noisegate","streamCallback","mediaDevices","getUserMedia","createMediaStreamSource","isStreaming","MixerModule","MIDI","midiAccess","outputs","sysex","requestMIDIAccess","inputIterator","outputIterator","next","done","MML","sequences","timerids","prev","mmls","OscillatorNode","notes","shift","match","REGEXP_MML","ERROR_STRING","indexes","timeOf4note","note","REGEXP_TEMPO","bpm","ERROR_TEMPO","ONE_MINUTES","REGEXP_OCTAVE","ERROR_OCTAVE","REGEXP_NOTE","chord","REGEXP_CHORD","pitchname","computeIndex","EQUAL_TEMPERAMENT","ERROR_NOTE","REST","computeFrequency","durations","split","REGEXP_DURATION","numOf4note","QUARTER_NOTE","reverse","part","sequence","pop","j","node","isSequences","toABC","mml","X","T","M","L","K","abc","totalDuration","splittedNotes","splittedNote","matches","tuplet","chordLength","restNote","read","file","reader","FileReader","code","NOT_FOUND_ERR","SECURITY_ERR","ABORT_ERR","NOT_READABLE_ERR","ENCODING_ERR","result","readAsArrayBuffer","readAsDataURL","readAsText","computedIndex","FREQUENCY_RATIO","global","XSound","AudioContext","webkitAudioContext","IS_XSOUND","audiocontext","createJavaScriptNode","createGainNode","createDelayNode","createWaveTable","noise","mixer","midi","SAMPLE_RATE","ajax","convertTime","minutes","seconds","milliseconds","exitFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","cancelFullScreen","Event","stopPropagation","dataTransfer","files","target","File","fullscreen","Element","webkitRequestFullscreen","ALLOW_KEYBOARD_INPUT","mozRequestFullScreen","msRequestFullscreen","requestFullscreen","toFrequencies","toTextFile","string","converted","charCode","charCodeAt","toAscii","resume","clone","clones","C","free","sourceList","noConflict","deep","getCurrentTime","removeEventListener"],"mappings":"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","file":"xsound.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","'use strict';\n\n/**\n * This private class defines the properties that subclasses (`TimeOverview`, `Time`, `FFT`) require.\n * @constructor\n */\nexport class Visualizer {\n    static CANVAS = 'canvas';\n    static SVG    = 'svg';\n\n    static XMLNS = 'http://www.w3.org/2000/svg';\n    static XLINK = 'http://www.w3.org/1999/xlink';\n\n    static SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW = 'svg-linear-gradient-time-overview';\n    static SVG_LINEAR_GRADIENT_ID_TIME          = 'svg-linear-gradient-time';\n    static SVG_LINEAR_GRADIENT_ID_FFT           = 'svg-linear-gradient-fft';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        this.sampleRate = sampleRate;\n\n        this.isActive = false;\n\n        // either 'canvas' or 'svg'\n        this.graphics = '';\n\n        // in the case of using Canvas\n        this.canvas  = null;\n        this.context = null;\n\n        // in the case of using SVG\n        this.svg = null;\n\n        // for timer\n        this.interval = 1000;\n        this.timerid  = null;\n\n        this.styles = {\n            'shape'  : 'line',\n            'grad'   : [\n                {\n                    'offset' : 0,\n                    'color'  : 'rgba(0, 128, 255, 1.0)'\n                },\n                {\n                    'offset' : 1,\n                    'color'  : 'rgba(0, 0, 255, 1.0)'\n                }\n            ],\n            'wave'   : 'rgba(0, 0, 255, 1.0)',\n            'grid'   : 'rgba(255, 0, 0, 1.0)',\n            'text'   : 'rgba(255, 255, 255, 1.0)',\n            'font'   : {\n                'family' : 'Arial',\n                'size'   : '13px',\n                'style'  : 'normal',\n                'weight' : 'normal'\n            },\n            'width'  : 1.5,\n            'cap'    : 'round',\n            'join'   : 'miter',\n            'top'    : 15,\n            'right'  : 30,\n            'bottom' : 15,\n            'left'   : 30\n        };\n    }\n\n    /**\n     * This method sets up for using Canvas or SVG.\n     * @param {HTMLCanvasElement|SVGElement} element This argument is either `HTMLCanvasElement` or `SVGElement`.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    setup(element) {\n        if (element instanceof HTMLCanvasElement) {\n            this.graphics = Visualizer.CANVAS;\n            this.canvas   = element;\n            this.context  = this.canvas.getContext('2d');\n        } else if (element instanceof SVGElement) {\n            this.graphics = Visualizer.SVG;\n            this.svg      = element;\n\n            // this.svg.setAttribute('xmlns',       Visualizer.XMLNS);\n            // this.svg.setAttribute('xmlns:xlink', Visualizer.XLINK);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {string|number|Array.<object>} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {string|number|Array.<object>} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v = null;\n\n        switch (k) {\n            case 'interval':\n                if (value === undefined) {\n                    return this.interval;\n                }\n\n                if (String(value).toLowerCase() === 'auto') {\n                    this.interval = 'auto';\n                } else {\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.interval = v;\n                    }\n                }\n\n                break;\n            case 'shape':\n                if (value === undefined) {\n                    return this.styles.shape;\n                }\n\n                v = String(value).toLowerCase();\n\n                if ((v === 'line') || (v === 'rect')) {\n                    this.styles.shape = (this.styles.wave !== 'gradient') ? v : 'rect';\n                }\n\n                break;\n            case 'grad':\n                if (value === undefined) {\n                    return this.styles.grad;\n                }\n\n                if (!Array.isArray(value)) {\n                    value = [value];\n                }\n\n                let isError = false;\n\n                for (const grads of value) {\n                    if (('offset' in grads) && ('color' in grads)) {\n                        const offset = parseFloat(grads.offset);\n\n                        if (isNaN(offset) || (offset < 0) || (offset > 1)) {\n                            isError = true;\n                            break;\n                        }\n                    } else {\n                        isError = true;\n                        break;\n                    }\n                }\n\n                if (!isError) {\n                    this.styles.grad = value;\n                }\n\n                break;\n            case 'font':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (Object.prototype.toString.call(value) === '[object Object]') {\n                    for (const prop in value) {\n                        if (/family|size|style|weight/i.test(prop)) {\n                            this.styles.font[prop] = String(value[prop]);\n                        }\n                    }\n                }\n\n                break;\n            case 'wave':\n            case 'grid':\n            case 'text':\n            case 'cap' :\n            case 'join':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (typeof value === 'string') {\n                    if ((k === 'wave') && (value === 'gradient')) {\n                        this.styles.shape = 'rect';\n                    }\n\n                    this.styles[k] = value.toLowerCase();\n                }\n\n                break;\n            case 'width' :\n            case 'top'   :\n            case 'right' :\n            case 'bottom':\n            case 'left'  :\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                v = (k === 'width') ? parseFloat(value) : parseInt(value, 10);\n\n                if (v >= 0) {\n                    this.styles[k] = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method draws sound wave to Canvas or SVG. This method conceals difference of API for drawing.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is parameter for spectrum. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is parameter for spectrum. The default value is -30 dB.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    start(data, minDecibels, maxDecibels) {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                this.drawOnCanvas(data, minDecibels, maxDecibels);\n                break;\n            case Visualizer.SVG:\n                this.drawBySVG(data, minDecibels, maxDecibels);\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates string for `Data URL` or `HTML` for the drawn figure.\n     * @return {string|Visualizer} This is returned as `Data URL` or `HTML` string. If `setup` method has not been invoked, this is returned for method chain.\n     */\n    create() {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                return this.canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            case Visualizer.SVG:\n                return this.svg.outerHTML;\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Visualizer} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to Canvas.\n     * @param {CanvasRenderingContext2D} context This argument is the instance of `CanvasRenderingContext2D`.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     */\n    drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval) {\n        if (!(context instanceof CanvasRenderingContext2D)) {\n            return this;\n        }\n\n        if (!(data instanceof Float32Array)) {\n            return this;\n        }\n\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        // Begin drawing\n        switch (this.styles.shape) {\n            case 'line':\n                // Set style\n                context.strokeStyle = this.styles.wave;\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = ((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            context.moveTo((x + (this.styles.width / 2)),  y);\n                        } else {\n                            context.lineTo(x, y);\n                        }\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case 'rect':\n                // Set style\n                if (this.styles.wave !== 'gradient') {\n                    context.fillStyle = this.styles.wave;\n                }\n\n                // Draw wave\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = -1 * (data[i] * (h / 2));\n\n                        // Set style\n                        if (this.styles.wave === 'gradient') {\n                            const upside   = (innerHeight / 2) + this.styles.top;\n                            const gradient = context.createLinearGradient(0, upside, 0, (upside + y));\n\n                            for (const gradients of this.styles.grad) {\n                                gradient.addColorStop(gradients.offset, gradients.color);\n                            }\n\n                            context.fillStyle = gradient;\n                        }\n\n                        context.fillRect(x, m, this.styles.width, y);\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to SVG.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGPathElement|SVGGElement} This is returned as `SVGElement`.\n     */\n    drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, linearGradientId) {\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        switch (this.styles.shape) {\n            case 'line':\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = ((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            d += `M${x + (this.styles.width / 2)} ${y}`;\n                        } else {\n                            d += ` L${x} ${y}`;\n                        }\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          this.styles.wave);\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                return path;\n            case 'rect':\n                let defs = null;\n\n                if (this.styles.wave === 'gradient') {\n                    defs = this.createSVGLinearGradient(linearGradientId);\n                }\n\n                // Draw wave\n                const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                if (defs !== null) {\n                    g.appendChild(defs);\n                }\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        const x = ((i / len) * w) + this.styles.left;\n                        const y = data[i] * (innerHeight / 2);\n\n                        rect.setAttribute('x',     x);\n                        rect.setAttribute('y',     m);\n                        rect.setAttribute('width', this.styles.width);\n\n                        if (y < 0) {\n                            rect.setAttribute('height', -y);\n                        } else {\n                            rect.setAttribute('height',    y);\n                            rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${m})`);\n                        }\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${linearGradientId})`);\n\n                        g.appendChild(rect);\n                    }\n                }\n\n                return g;\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * This method creates elements for SVG linear gradient.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGDefsElement} This is returned as the instance of `SVGDefsElement`.\n     */\n    createSVGLinearGradient(linearGradientId) {\n        const defs           = document.createElementNS(Visualizer.XMLNS, 'defs');\n        const linearGradient = document.createElementNS(Visualizer.XMLNS, 'linearGradient');\n\n        linearGradient.setAttribute('id', String(linearGradientId));\n        linearGradient.setAttribute('x1', '0%');\n        linearGradient.setAttribute('y1', '0%');\n        linearGradient.setAttribute('x2', '0%');\n        linearGradient.setAttribute('y2', '100%');\n\n        for (const gradients of this.styles.grad) {\n            const stop = document.createElementNS(Visualizer.XMLNS, 'stop');\n\n            stop.setAttribute('offset',     gradients.offset);\n            stop.setAttribute('stop-color', gradients.color);\n\n            linearGradient.appendChild(stop);\n        }\n\n        defs.appendChild(linearGradient);\n\n        return defs;\n    }\n\n    /**\n     * This method creates string for font.\n     * @return {string} This is returned as string for font.\n     */\n    createFontString() {\n        const { size, style, weight, family } = this.styles.font;\n\n        return `${size} ${style} ${weight} \"${family}\"`;\n    }\n\n    /** @abstract */\n    drawOnCanvas() {\n    }\n\n    /** @abstract */\n    drawBySVG() {\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Visualizer]';\n    }\n}\n","'use strict';\n\nimport { Visualizer } from './Visualizer';\n\n/**\n * This private class defines properties for drawing audio wave in overview of time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport class TimeOverview extends Visualizer {\n    static SVG_CURRENT_TIME_CLASS_NAME = 'xsound-svg-current-time';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = null;\n        this.length     = 0;\n\n        this.currentTime  = 'rgba(0, 0, 0, 0.5)';  // This style is used for the rectangle that displays current time of audio\n        this.plotInterval = 0.0625;                // Draw wave at intervals of this value [sec]\n        this.textInterval = 60;                    // Draw text at intervals of this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    this.currentTime = String(value).toLowerCase();\n\n                    break;\n                case 'plotinterval':\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this[k.replace('interval', 'Interval')];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k.replace('interval', 'Interval')] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to Canvas.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval);\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) / 60)} min`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = context.getImageData(0, 0, width, height);\n        this.length     = data.length;\n\n        // This rectangle displays current time of audio\n        context.fillStyle = this.currentTime;\n        context.fillRect(this.styles.left, this.styles.top, 1, innerHeight);\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to SVG.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW));\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = Math.floor((i / this.sampleRate) / 60) + ' min';\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        // This rectangle displays current time of audio\n        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n        rect.classList.add(TimeOverview.SVG_CURRENT_TIME_CLASS_NAME);\n\n        rect.setAttribute('x',      this.styles.left);\n        rect.setAttribute('y',      (this.styles.top + 1));\n        // rect.setAttribute('width',  1);\n        rect.setAttribute('height', (innerHeight - 1));\n\n        rect.setAttribute('stroke', 'none');\n        rect.setAttribute('fill',   this.currentTime);\n\n        rect.setAttribute('aria-label', 'current time');\n\n        svg.appendChild(rect);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = svg;\n        this.length     = data.length;\n\n        return this;\n    }\n\n    /**\n     * This method draws current time of audio on Canvas or SVG.\n     * @param {number} time This argument is current time of audio.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    update(time) {\n        const t = parseFloat(time);\n\n        if (isNaN(t) || (t < 0)) {\n            return this;\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                if (this.savedImage instanceof ImageData) {\n                    const context = this.context;\n\n                    const { width, height } = this.canvas;\n\n                    const innerWidth  = width  - (this.styles.left + this.styles.right);\n                    const innerHeight = height - (this.styles.top  + this.styles.bottom);\n                    const x           = Math.floor(((t * this.sampleRate) / this.length) * innerWidth);\n\n                    context.clearRect(0, 0, width, height);\n                    context.putImageData(this.savedImage, 0, 0);\n\n                    context.fillStyle = this.currentTime;\n                    context.fillRect(this.styles.left, (this.styles.top + 1), x, (innerHeight - 1));\n                }\n\n                break;\n            case Visualizer.SVG:\n                const rect = this.svg.querySelector(`.${TimeOverview.SVG_CURRENT_TIME_CLASS_NAME}`);\n\n                if (rect instanceof SVGElement) {\n                    const width      = parseInt(this.svg.getAttribute('width'), 10);\n                    const innerWidth = width  - (this.styles.left + this.styles.right);\n                    const x          = ((t * this.sampleRate) / this.length) * innerWidth;\n\n                    rect.setAttribute('width', x);\n                    // rect.setAttribute('transform', `translate(${x} 0)`);\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method registers event listener for setting current time by drag.\n     * @param {function} callback This argument is invoked when current time is changed.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    drag(callback) {\n        let drawNode = null;\n\n        let start = '';\n        let move  = '';\n        let end   = '';\n\n        // Touch Panel ?\n        if (/iPhone|iPad|iPod|Android/.test(navigator.userAgent)) {\n            start = 'touchstart';\n            move  = 'touchmove';\n            end   = 'touchend';\n        } else {\n            start = 'mousedown';\n            move  = 'mousemove';\n            end   = 'mouseup';\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                drawNode = this.canvas;\n                break;\n            case Visualizer.SVG:\n                drawNode = this.svg;\n                break;\n            default:\n                return this;\n        }\n\n        let isDown = false;\n\n        drawNode.addEventListener(start, event => {\n            this.draw(this.getOffsetX(event), callback);\n            isDown = true;\n        }, true);\n\n        drawNode.addEventListener(move, event => {\n            if (isDown) {\n                event.preventDefault();  // for Touch Panel\n                this.draw(this.getOffsetX(event), callback);\n            }\n        }, true);\n\n        window.addEventListener(end, () => {\n            if (isDown) {\n                isDown = false;\n            }\n        }, true);\n\n        return this;\n    }\n\n    /**\n     * This method draws the rectangle for current time of audio.\n     * @param {number} offsetX This argument is X coordinate on Canvas or SVG.\n     * @param {function} callback This argument is invoked when the rectangle is drawn.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    draw(offsetX, callback) {\n        let offsetLeft = 0;\n        let width      = 0;\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                offsetLeft = this.canvas.offsetLeft;\n                width      = this.canvas.width;\n                break;\n            case Visualizer.SVG:\n                offsetLeft = this.svg.parentNode.offsetLeft;\n                width      = parseInt(this.svg.getAttribute('width'), 10);\n                break;\n            default:\n                break;\n        }\n\n        let x = offsetX - (offsetLeft + this.styles.left);\n\n        width -= (this.styles.left + this.styles.right);\n\n        // Exceed ?\n        if (x < 0)     {x = 0;}\n        if (x > width) {x = width;}\n\n        const plot = (x / width) * this.length;\n        const time = plot / this.sampleRate;\n\n        this.update(time);\n\n        if (Object.prototype.toString.call(callback) === '[object Function]') {\n            callback(time);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method returns X coordinate from `Event` object.\n     * @param {Event} event This argument is the instance of `Event`.\n     * @return {number} This is returned as X coordinate.\n     */\n    getOffsetX(event) {\n        if (event.pageX) {\n            return event.pageX;\n        }\n\n        if (event.touches[0]) {\n            return event.touches[0].pageX;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser TimeOverview]';\n    }\n}\n","'use strict';\n\nimport { Visualizer } from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport class Time extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = Time.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.textInterval = 0.005;      // Draw text at intervals this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Time.UINT) || (v === Time.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle);\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        // Draw wave\n                        context.beginPath();\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = ((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = (0.5 - (data[i] / 255)) * innerHeight;\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = (innerHeight / 2) + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, middle, this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.ceil((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.ceil((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Begin drawing\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, null, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME));\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = ((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_TIME);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = ((i / len) * innerWidth) + this.styles.left;\n                            const y = ((data[i] / 255) - 0.5) * innerHeight;\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     middle);\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${middle})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_TIME})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.ceil((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.ceil((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Time]';\n    }\n}\n","'use strict';\n\nimport { Visualizer } from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in frequency domain (spectrum).\n * @constructor\n * @extends {Visualizer}\n */\nexport class FFT extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = FFT.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.size         = 256;       // Range for drawing\n        this.textInterval = 1000;      // Draw text at intervals of this value [Hz]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === FFT.UINT) || (v === FFT.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'size':\n                    if (value === undefined) {\n                        return this.size;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = 1024;  // `AnalyserNode#fftSize` max 2048 -> half 1024\n\n                    if ((v > min) && (v <= max)) {\n                        this.size = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data, minDecibels, maxDecibels) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (Sampling rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Set style\n                context.strokeStyle = (this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)';  // line only\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = ((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = (Math.abs(data[i] - maxdB) * (innerHeight / range)) + this.styles.top;  // [dB] * [px / dB] = [px]\n\n                    if (i === 0) {\n                        context.moveTo((x + (this.styles.width / 2)), y);\n                    } else {\n                        context.lineTo(x, y);\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        context.beginPath();\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = ((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = ((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = ((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = -1 * ((data[i] / 255) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = innerHeight + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, (innerHeight + this.styles.top), this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i} dB`;\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data, minDecibels, maxDecibels) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (sample rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = Math.floor(-1 * (data[i] - maxdB) * (innerHeight / range)) + this.styles.top;\n\n                    if (i === 0) {\n                        d += `M${x + (this.styles.width / 2)} ${y}`;\n                    } else {\n                        d += ` L${x} ${y}`;\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          ((this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)'));  // line only\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                svg.appendChild(path);\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        // Draw wave\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_FFT);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            let rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((data[i] / 255) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     (this.styles.top + innerHeight));\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${this.styles.top + innerHeight})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_FFT})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i}dB`;\n                        const x = this.styles.left;\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = this.styles.left;\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser FFT]';\n    }\n}\n","'use strict';\n\nimport { TimeOverview } from './TimeOverview';\nimport { Time } from './Time';\nimport { FFT } from './FFT';\n\n/**\n * This private class manages 3 private classes (`TimeOverview`, `Time`, `FFT`) for drawing sound wave.\n * @constructor\n */\nexport class Analyser {\n    /**\n     * @param {AudioContext} context This argument is This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        window.requestAnimationFrame = window.requestAnimationFrame       ||\n                                       window.webkitRequestAnimationFrame ||\n                                       window.mozRequestAnimationFrame    ||\n                                       (callback => window.setTimeout(callback, (1000 / 60)));\n\n        window.cancelAnimationFrame = window.cancelAnimationFrame       ||\n                                      window.webkitCancelAnimationFrame ||\n                                      window.mozCancelAnimationFrame    ||\n                                      window.clearTimeout;\n\n        this.analyser = context.createAnalyser();\n        this.input    = context.createGain();\n\n        // GainNode (Input) -> AnalyserNode\n        this.input.connect(this.analyser);\n\n        this.timeOverviewL = new TimeOverview(context.sampleRate);\n        this.timeOverviewR = new TimeOverview(context.sampleRate);\n        this.time          = new Time(context.sampleRate);\n        this.fft           = new FFT(context.sampleRate);\n\n        // Set default value\n        this.analyser.fftSize               = 2048;\n        this.analyser.minDecibels           = -100;\n        this.analyser.maxDecibels           = -30;\n        this.analyser.smoothingTimeConstant = 0.8;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Analyser} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'fftsize':\n                    if (value === undefined) {\n                        return this.analyser.fftSize;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case   32:\n                        case   64:\n                        case  128:\n                        case  256:\n                        case  512:\n                        case 1024:\n                        case 2048:\n                            this.analyser.fftSize = v;\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequencybincount':\n                    return this.analyser.frequencyBinCount;  // Getter only\n                case 'mindecibels':\n                    if (value === undefined) {\n                        return this.analyser.minDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    max = -30;\n\n                    if (v < max) {\n                        this.analyser.minDecibels = v;\n                    }\n\n                    break;\n                case 'maxdecibels':\n                    if (value === undefined) {\n                        return this.analyser.maxDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -100;\n\n                    if (v > min) {\n                        this.analyser.maxDecibels = v;\n                    }\n\n                    break;\n                case 'smoothingtimeconstant':\n                    if (value === undefined) {\n                        return this.analyser.smoothingTimeConstant;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.analyser.smoothingTimeConstant = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates data for drawing and executes drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @param {AudioBuffer} buffer This argument is the instance of `AudioBuffer`. The data for drawing audio wave in overview of time domain is gotten from this argument.\n     * @return {Analyser} This is returned for method chain.\n     */\n    start(domain, buffer) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        let data = null;\n\n        switch (d) {\n            case 'timeoverviewl':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 0) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(0));\n                        this.timeOverviewL.start(data);\n                    }\n                }\n\n                break;\n            case 'timeoverviewr':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 1) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(1));\n                        this.timeOverviewR.start(data);\n                    }\n                }\n\n                break;\n            case 'time':\n                if (this.time.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.fftSize);\n                    this.analyser.getByteTimeDomainData(data);\n                    this.time.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.fftSize);\n                    this.analyser.getFloatTimeDomainData(data);\n                    this.time.start(data);\n                }\n\n                if (this.time.param('interval') === 'auto') {\n                    this.time.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.time.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.time.param('interval'));\n                }\n\n                break;\n            case 'fft':\n                if (this.fft.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.frequencyBinCount);\n                    this.analyser.getByteFrequencyData(data);\n                    this.fft.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.frequencyBinCount);\n                    this.analyser.getFloatFrequencyData(data);\n                    this.fft.start(data, this.analyser.minDecibels, this.analyser.maxDecibels);\n                }\n\n                if (this.fft.param('interval') === 'auto') {\n                    this.fft.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.fft.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.fft.param('interval'));\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {Analyser} This is returned for method chain.\n     */\n    stop(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                break;\n            case 'time':\n                if (this.time.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.time.timerid);\n                } else {\n                    window.clearTimeout(this.time.timerid);\n                }\n\n                this.time.timerid = null;\n\n                break;\n            case 'fft':\n                if (this.fft.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.fft.timerid);\n                } else {\n                    window.clearTimeout(this.fft.timerid);\n                }\n\n                this.fft.timerid = null;\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects domain for drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {TimeOverview|Time|FFT|Analyser} This value is the instance of selected class.\n     */\n    domain(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                return this[`timeOverview${d.slice(-1).toUpperCase()}`];\n            case 'time':\n            case 'fft' :\n                return this[d];\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method gets the instance of `AnalyserNode`.\n     * @return {AnalyserNode}\n     */\n    get() {\n        return this.analyser;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for multi track recording.\n * @constructor\n */\nexport class Recorder {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs) {\n        this.sampleRate = context.sampleRate;\n\n        this.context   = context;\n        this.processor = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.mixedLs = null;  /** @type {Float32Array} */\n        this.mixedRs = null;  /** @type {Float32Array} */\n\n        this.numberOfTracks = 0;\n        this.trackLs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n        this.trackRs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n\n        this.activeTrack = -1;    // There is not any active track in the case of -1\n        this.paused      = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n\n        this.gainL = 1;  // Gain of Left  channel\n        this.gainR = 1;  // Gain of Right channel\n    }\n\n    /**\n     * This method sets the max number of tracks.\n     * @param {number} numberOfTracks This argument is the max number of tracks. The default value is 1.\n     * @return {Recorder} This is returned for method chain.\n     */\n    setup(numberOfTracks) {\n        const n = parseInt(numberOfTracks, 10);\n\n        if (n > 0) {\n            this.numberOfTracks = n;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            for (let i = 0; i < n; i++) {this.trackLs[i] = [];}  // n x array\n            for (let i = 0; i < n; i++) {this.trackRs[i] = [];}  // n x array\n        } else {\n            this.numberOfTracks = 1;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            this.trackLs[0] = [];  // 1 * array\n            this.trackRs[0] = [];  // 1 * array\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Recorder} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'gainl':\n                case 'gainr':\n                    if (value === undefined) {\n                        return this[`gain${k.slice(-1).toUpperCase()}`];\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[`gain${k.slice(-1).toUpperCase()}`] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects active track.\n     * @param {number} track This argument is in order to select active track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    ready(track) {\n        if (this.isTrack(track)) {\n            this.activeTrack = track;\n        } else {\n            this.activeTrack = -1;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts recording. If there is not any active track, this method stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    start() {\n        if ((this.activeTrack !== -1) && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                if (this.activeTrack !== -1) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const recordedLs = new Float32Array(bufferSize);\n                    const recordedRs = new Float32Array(bufferSize);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        recordedLs[i] = this.gainL * inputLs[i];\n                        recordedRs[i] = this.gainR * inputRs[i];\n                    }\n\n                    this.trackLs[this.activeTrack].push(recordedLs);\n                    this.trackRs[this.activeTrack].push(recordedRs);\n                } else {\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method turns off the all of tracks, and stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    stop() {\n        this.activeTrack = -1;  // Flag becomes inactive\n        this.paused      = true;\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the designated track number is valid.\n     * @param {number} track This argument is track number for validation.\n     * @return {boolean} If the designated track is valid range, this value is `true`. Otherwise, this value is `false`.\n     */\n    isTrack(track) {\n        const t = parseInt(track, 10);\n\n        return (t >= 0) && (t < this.numberOfTracks);\n    }\n\n    /**\n     * This method determines whether active track exists.\n     * @return {number} This is returned as active track.\n     */\n    getActiveTrack() {\n        return this.activeTrack;\n    }\n\n    /**\n     * This method synthesizes recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @return {Float32Array} This is returned as array for synthesized sound.\n     */\n    mixTrack(channel) {\n        const tracks      = this[`track${channel}s`];\n        const mixes       = { 'values' : null, 'sum' : 0, 'num' : 0 };\n        const bufferSize  = this.processor.bufferSize;\n        let currentBuffer = 0;\n        let index         = 0;\n\n        // Calculate sound data size\n        let numberOfMaxBuffers = 0;\n\n        // Search the max number of Float32Arrays each track\n        for (const track of tracks) {\n            if (numberOfMaxBuffers < track.length) {\n                numberOfMaxBuffers = track.length;\n            }\n        }\n\n        mixes.values = new Float32Array(numberOfMaxBuffers * bufferSize);\n\n        while (true) {\n            for (let currentTrack = 0, len = tracks.length; currentTrack < len; currentTrack++) {\n                if (tracks[currentTrack][currentBuffer] instanceof Float32Array) {\n                    mixes.sum += tracks[currentTrack][currentBuffer][index];\n                    mixes.num++;\n                }\n            }\n\n            if (mixes.num > 0) {\n                const offset = currentBuffer * bufferSize;\n\n                // Average\n                mixes.values[offset + index] = mixes.sum / mixes.num;\n\n                // Clear\n                mixes.sum = 0;\n                mixes.num = 0;\n\n                // Next data\n                if (index < (bufferSize - 1)) {\n                    // Next element in Float32Array\n                    index++;\n                } else {\n                    // Next Float32Array\n                    currentBuffer++;\n                    index = 0;\n                }\n            } else {\n                return mixes.values;\n            }\n        }\n    }\n\n    /**\n     * This method synthesizes the all of recorded sounds in track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    mix() {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        this.mixedLs = this.mixTrack('L');\n        this.mixedRs = this.mixTrack('R');\n\n        return this;\n    }\n\n    /**\n     * This method clears recorded sound of the designated track.\n     * @param {number|string} track This argument is track for clearing.\n     * @return {Recorder} This is returned for method chain.\n     */\n    clear(track) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        if (String(track).toLowerCase() === 'all') {\n            for (const track of this.trackLs) {track.length = 0;}\n            for (const track of this.trackRs) {track.length = 0;}\n        } else {\n            if (this.isTrack(track)) {\n                this.trackLs[track].length = 0;\n                this.trackRs[track].length = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates WAVE file as Object URL or Data URL.\n     * @param {string|number} track This argument is the target track.\n     * @param {number} numberOfChannels This argument is in order to select stereo or monaural of WAVE file. The default value is 2.\n     * @param {number} qbit This argument is quantization bit of PCM. The default value is 16 (bit).\n     * @return {string} This is returned as Object URL or Data URL for WAVE file.\n     */\n    create(track, numberOfChannels, qbit) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        /** @type {Float32Array} */\n        let soundLs = null;\n\n        /** @type {Float32Array} */\n        let soundRs = null;\n\n        if (String(track).toLowerCase() === 'all') {\n            this.mix();\n\n            soundLs = this.mixedLs;\n            soundRs = this.mixedRs;\n        } else {\n            if (this.isTrack(track)) {\n                soundLs = this.trackLs[track - 1];\n                soundRs = this.trackRs[track - 1];\n            }\n        }\n\n        // Sound data exists ?\n        if ((soundLs.length === 0) && (soundRs.length === 0)) {\n            return '';\n        }\n\n        // PCM parameters\n        const CHANNEL = (numberOfChannels === 1) ? 1 : 2;\n        const QBIT    = (qbit === 8) ? 8 : 16;\n        const SIZE    = (CHANNEL === 1) ? Math.min(soundLs.length, soundRs.length) : (2 * Math.min(soundLs.length, soundRs.length));\n\n        // Parameters for WAVE file\n        const FMT_CHUNK  = 28;\n        const DATA_CHUNK =  8 + (SIZE * (QBIT / 8));\n        const CHUNK_SIZE = 36 + (SIZE * (QBIT / 8));\n        const RIFF_CHUNK =  8 + (FMT_CHUNK + DATA_CHUNK);\n        const RATE       = this.sampleRate;\n        const BPS        = RATE * CHANNEL * (QBIT / 8);\n        const DATA_SIZE  = SIZE * (QBIT / 8);\n\n        /** @type {Uint8Array|Int16Array} */\n        let sounds = null;\n\n        switch (QBIT) {\n            case 8:\n                sounds = new Uint8Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 8 bit unsigned integer (-1 -> 0, 0 -> 128, 1 -> 255)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = ((soundLs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Left channel\n                    } else {\n                        binary = ((soundRs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (Math.pow(2, 8) - 1)) {binary = (Math.pow(2, 8) - 1);}\n                    if (binary < (Math.pow(2, 0) - 1)) {binary = (Math.pow(2, 0) - 1);}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            case 16:\n                sounds = new Int16Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 16 bit integer (-1 -> -32768, 0 -> 0, 1 -> 32767)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = soundLs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Left channel\n                    } else {\n                        binary = soundRs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (+Math.pow(2, 15) - 1)) {binary =  Math.pow(2, 15) - 1;}\n                    if (binary < (-Math.pow(2, 15) - 1)) {binary = -Math.pow(2, 15) - 1;}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        // Create WAVE file (Object URL or Data URL)\n        window.URL = window.URL || window.webkitURL || window.mozURL;\n\n        if (window.URL && window.URL.createObjectURL) {\n            // Object URL\n\n            const waves = [];\n\n            waves[0] = 0x52;  // 'R'\n            waves[1] = 0x49;  // 'I'\n            waves[2] = 0x46;  // 'F'\n            waves[3] = 0x46;  // 'F'\n\n            waves[4] = (CHUNK_SIZE >>  0) & 0xFF;\n            waves[5] = (CHUNK_SIZE >>  8) & 0xFF;\n            waves[6] = (CHUNK_SIZE >> 16) & 0xFF;\n            waves[7] = (CHUNK_SIZE >> 24) & 0xFF;\n\n            waves[8]  = 0x57;  // 'W'\n            waves[9]  = 0x41;  // 'A'\n            waves[10] = 0x56;  // 'V'\n            waves[11] = 0x45;  // 'E'\n\n            // fmt chunk\n            waves[12] = 0x66;  // 'f'\n            waves[13] = 0x6D;  // 'm'\n            waves[14] = 0x74;  // 't'\n            waves[15] = 0x20;  // ' '\n\n            waves[16] = 16;\n            waves[17] =  0;\n            waves[18] =  0;\n            waves[19] =  0;\n\n            waves[20] = 1;\n            waves[21] = 0;\n\n            // fmt chunk -> Channels (Monaural or Stereo)\n            waves[22] = CHANNEL;\n            waves[23] = 0;\n\n            // fmt chunk -> Sample rate\n            waves[24] = (RATE >>  0) & 0xFF;\n            waves[25] = (RATE >>  8) & 0xFF;\n            waves[26] = (RATE >> 16) & 0xFF;\n            waves[27] = (RATE >> 24) & 0xFF;\n\n            // fmt chunk -> Byte per second\n            waves[28] = (BPS >>  0) & 0xFF;\n            waves[29] = (BPS >>  8) & 0xFF;\n            waves[30] = (BPS >> 16) & 0xFF;\n            waves[31] = (BPS >> 24) & 0xFF;\n\n            // fmt chunk -> Block size\n            waves[32] = CHANNEL * (QBIT / 8);\n            waves[33] = 0;\n\n            // fmt chunk -> Byte per Sample\n            waves[34] = QBIT;\n            waves[35] = 0;\n\n            // data chunk\n            waves[36] = 0x64;  // 'd'\n            waves[37] = 0x61;  // 'a'\n            waves[38] = 0x74;  // 't\n            waves[39] = 0x61;  // 'a'\n\n            waves[40] = (DATA_SIZE >>  0) & 0xFF;\n            waves[41] = (DATA_SIZE >>  8) & 0xFF;\n            waves[42] = (DATA_SIZE >> 16) & 0xFF;\n            waves[43] = (DATA_SIZE >> 24) & 0xFF;\n\n            for (let i = 0; i < SIZE; i++) {\n                switch (QBIT) {\n                    case  8:\n                        waves[(RIFF_CHUNK - DATA_SIZE) + i] = sounds[i];\n                        break;\n                    case 16:\n                        // The byte order in WAVE file is little endian\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 0] = ((sounds[i] >> 0) & 0xFF);\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 1] = ((sounds[i] >> 8) & 0xFF);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            const blob      = new Blob([new Uint8Array(waves)], { 'type' : 'audio/wav' });\n            const objectURL = window.URL.createObjectURL(blob);\n\n            return objectURL;\n        }\n\n        // Data URL\n\n        let wave = '';\n\n        wave += 'RIFF';\n        wave += String.fromCharCode(((CHUNK_SIZE >> 0) & 0xFF), ((CHUNK_SIZE >> 8) & 0xFF), ((CHUNK_SIZE >> 16) & 0xFF), ((CHUNK_SIZE >> 24) & 0xFF));\n        wave += 'WAVE';\n\n        // fmt chunk\n        wave += `fmt ${String.fromCharCode(16, 0, 0, 0)}`;\n        wave += String.fromCharCode(1, 0);\n\n        // fmt chunk -> Channels (Monaural or Stereo)\n        wave += String.fromCharCode(CHANNEL, 0);\n\n        // fmt chunk -> Sample rate\n        wave += String.fromCharCode(((RATE >> 0) & 0xFF), ((RATE >> 8) & 0xFF), ((RATE >> 16) & 0xFF), ((RATE >> 24) & 0xFF));\n\n        // fmt chunk -> Byte per second\n        wave += String.fromCharCode(((BPS >> 0) & 0xFF), ((BPS >> 8) & 0xFF), ((BPS >> 16) & 0xFF), ((BPS >> 24) & 0xFF));\n\n        // fmt chunk -> Block size\n        wave += String.fromCharCode((CHANNEL * (QBIT / 8)), 0);\n\n        // fmt chunk -> Byte per Sample\n        wave += String.fromCharCode(QBIT, 0);\n\n        // data chunk\n        wave += 'data';\n        wave += String.fromCharCode(((DATA_SIZE >> 0) & 0xFF), ((DATA_SIZE >> 8) & 0xFF), ((DATA_SIZE >> 16) & 0xFF), ((DATA_SIZE >> 24) & 0xFF));\n\n        for (let i = 0; i < SIZE; i++) {\n            switch (QBIT) {\n                case  8:\n                    wave += String.fromCharCode(sounds[i]);\n                    break;\n                case 16:\n                    // The byte order in WAVE file is little endian\n                    wave += String.fromCharCode(((sounds[i] >> 0) & 0xFF), ((sounds[i] >> 8) & 0xFF));\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        const base64  = window.btoa(wave);\n        const dataURL = `data:audio/wav;base64,${base64}`;\n\n        return dataURL;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Recorder]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for sound session on network.\n * @constructor\n */\nexport class Session {\n    static BUFFER_SIZE = 2048;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     * @param {Analyser} analyser This argument is the instance of `Analyser`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs, analyser) {\n        this.isActive = false;\n\n        this.context  = context;\n        this.analyser = analyser;  // the instance of `Analyser`\n\n        // HACK: Fix buffer size on different environments\n        this.sender   = context.createScriptProcessor(Session.BUFFER_SIZE, numberOfInputs, numberOfOutputs);\n        this.receiver = context.createScriptProcessor(Session.BUFFER_SIZE, numberOfInputs, numberOfOutputs);\n\n        this.websocket = null;  // for the instance of `WebSocket`\n        this.paused    = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n    }\n\n    /**\n     * This method creates the instance of `WebSocket` and registers event handlers.\n     * @param {boolean} tls This argument is in order to select protocol (either `wss` or `ws`).\n     * @param {string} host This argument is server's hostname.\n     * @param {number} port This argument is port number for connection.\n     * @param {string} path This argument is file that is executed in server side.\n     * @param {function} openCallback This argument is invoked as `onopen` event handler in the instance of `WebSocket`.\n     * @param {function} closeCallback This argument is invoked as `onclose` event handler in the instance of `WebSocket`.\n     * @param {function} errorCallback This argument is invoked as `onerror` event handler in the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    setup(tls, host, port, path, openCallback, closeCallback, errorCallback) {\n        /*\n        if (!navigator.onLine) {\n            // Clear\n            this.isActive = false;\n            this.paused   = true;\n            this.connect();\n            this.websocket = null;\n\n            throw new Error('Now Offline.');\n        }\n        */\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('tls' in properties) {\n                tls = properties.tls;\n            }\n\n            if ('host' in properties) {\n                host = properties.host;\n            }\n\n            if ('port' in properties) {\n                port = properties.port;\n            }\n\n            if ('path' in properties) {\n                path = properties.path;\n            }\n\n            if ('open' in properties) {\n                openCallback = properties.open;\n            }\n\n            if ('close' in properties) {\n                closeCallback = properties.close;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n        }\n\n        const scheme = tls ? 'wss://' : 'ws://';\n\n        if (path.charAt(0) !== '/') {\n            path = `/${path}`;\n        }\n\n        const p = parseInt(port, 10);\n\n        if (isNaN(p) || (p < 0) || (p > 65535)) {\n            return this;\n        }\n\n        this.websocket = new WebSocket(`${scheme}${host}:${p}${path}`);\n        this.websocket.binaryType = 'arraybuffer';\n\n        this.websocket.onopen = event => {\n            if (Object.prototype.toString.call(openCallback) === '[object Function]') {\n                openCallback(event);\n            }\n        };\n\n        this.websocket.onclose = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(closeCallback) === '[object Function]') {\n                closeCallback(event);\n            }\n        };\n\n        this.websocket.onerror = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(event);\n            }\n        };\n\n        this.websocket.onmessage = event => {\n            if (!this.isActive) {\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n\n                return;\n            }\n\n            if (event.data instanceof ArrayBuffer) {\n                const total  = event.data.byteLength / Float32Array.BYTES_PER_ELEMENT;\n                const length = Math.floor(total / 2);\n                const offset = length * Float32Array.BYTES_PER_ELEMENT;\n\n                const bufferLs = new Float32Array(event.data,      0, length);  // Get Left  channel data\n                const bufferRs = new Float32Array(event.data, offset, length);  // Get Right channel data\n\n                // Start drawing sound wave\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                this.receiver.onaudioprocess = event => {\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (bufferLs instanceof Float32Array) {outputLs.set(bufferLs);}\n                    if (bufferRs instanceof Float32Array) {outputRs.set(bufferRs);}\n\n                    // bufferLs = null;\n                    // bufferRs = null;\n\n                    if (!this.isActive || (this.websocket === null)) {\n                        this.analyser.stop('time');\n                        this.analyser.stop('fft');\n                    }\n                };\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes according to state.\n     * @return {Session} This is returned for method chain.\n     */\n    connect() {\n        // Clear connection\n        this.receiver.disconnect(0);\n        this.sender.disconnect(0);\n\n        this.receiver.onaudioprocess = null;\n        this.sender.onaudioprocess   = null;\n\n        if (this.isActive) {\n            // ScriptProcessorNode (Input) -> Analyser\n            this.receiver.connect(this.analyser.input);\n\n            // ScriptProcessorNode (Input) -> AudioDestinationNode (Output)\n            this.receiver.connect(this.context.destination);\n        } else {\n            this.paused = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sends sound data to server.\n     * @return {Session} This is returned for method chain.\n     */\n    start() {\n        if (this.isActive && this.isConnected() && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.sender.bufferSize;\n\n            this.sender.onaudioprocess = event => {\n                if (this.isActive && this.isConnected()) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const buffer = new Float32Array(2 * bufferSize);\n                    const offset = parseInt((buffer.length / 2), 10);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        buffer[i]          = inputLs[i];\n                        buffer[offset + i] = inputRs[i];\n                    }\n\n                    if (this.websocket.bufferedAmount === 0) {\n                        this.websocket.send(buffer);\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method closes connection to server and destroys the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    close() {\n        if (this.websocket instanceof WebSocket) {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n            this.websocket.close();\n\n            this.websocket = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether there is the connection to server.\n     * @return {boolean} If the connection to server exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isConnected() {\n        return (this.websocket instanceof WebSocket) && (this.websocket.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @param {function} stateCallback This argument is invoked when `bufferedAmount` equals to 0.\n     * @param {function} waitCallback This argument is invoked until `bufferedAmount` equals to 0.\n     * @return {Session} This is returned for method chain.\n     */\n    state(state, stateCallback, waitCallback) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (Object.prototype.toString.call(waitCallback) === '[object Function]') {\n            waitCallback();\n        }\n\n        const intervalid = window.setInterval(() => {\n            if ((this.websocket instanceof WebSocket) && (this.websocket.bufferedAmount !== 0)) {\n                return;\n            }\n\n            if (String(state).toLowerCase() === 'toggle') {\n                this.isActive = !this.isActive;\n            } else {\n                this.isActive = Boolean(state);\n            }\n\n            this.connect();\n\n            if (Object.prototype.toString.call(stateCallback) === '[object Function]') {\n                stateCallback();\n            }\n\n            window.clearInterval(intervalid);\n        }, 10);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `WebSocket`.\n     * @return {WebSocket}\n     */\n    get() {\n        return this.websocket;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Session]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines common properties for effector classes.\n * @constructor\n */\nexport class Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.isActive = true;\n\n        this.context = context;\n\n        // for connecting external node\n        this.input  = context.createGain();\n        this.output = context.createGain();\n\n        // for LFO (Low Frequency Oscillator)\n        // LFO changes parameter cyclically\n        this.lfo       = context.createOscillator();\n        this.depth     = context.createGain();\n        this.rate      = this.lfo.frequency;\n        this.processor = context.createScriptProcessor(bufferSize, 1, 2);\n\n        // for legacy browsers\n        this.lfo.start = this.lfo.start || this.lfo.noteOn;\n        this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n        this.values = {};\n\n        this.isStop = true;\n    }\n\n    /**\n     * This abstract method gets or sets parameter.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Effector} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @abstract\n     */\n    param() {\n    }\n\n    /**\n     * This abstract method connects nodes according to state.\n     * @abstract\n     */\n    connect() {\n    }\n\n    /**\n     * This method starts LFO. Namely, this method starts effector.\n     * @param {number} startTime This argument is in order to schedule parameter.\n     * @return {Effector} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops LFO, and creates the instance of `OscillatorNode` again.\n     * @param {number} stopTime This argument is in order to schedule parameter.\n     * @param {number} releaseTime This argument is in order to schedule parameter when it is necessary to consider release time.\n     * @return {Effector} This is returned for method chain.\n     */\n    stop(stopTime, releaseTime) {\n        if (this.isActive && !this.isStop) {\n            let s = parseFloat(stopTime);\n            let r = parseFloat(releaseTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            if (isNaN(r) || (r < 0)) {\n                r = 0;\n            }\n\n            // for saving value\n            const type = this.lfo.type;\n            const rate = this.lfo.frequency.value;\n\n            // Destroy the instance of `OscillatorNode`\n            this.lfo.stop(s + r);\n\n            // Create the instance of `OscillatorNode` again\n            this.lfo = this.context.createOscillator();\n\n           // for legacy browsers\n            this.lfo.start = this.lfo.start || this.lfo.noteOn;\n            this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n            // Set the saved value\n            this.lfo.type            = type;\n            this.lfo.frequency.value = rate;\n\n            this.rate = this.lfo.frequency;\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Effector} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        // Start LFO\n        this.start(this.context.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     * @abstract\n     */\n    params() {\n        return {};\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     * @abstract\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Effector]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Compressor extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.compressor = context.createDynamicsCompressor();\n\n        // Set default value\n        this.compressor.threshold.value = -24;\n        this.compressor.knee.value      = 30;\n        this.compressor.ratio.value     = 12;\n        this.compressor.attack.value    = 0.003;\n        this.compressor.release.value   = 0.25;\n\n        // `Compressor` is connected by default\n        this.state(true);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.compressor) {\n                if (value === undefined) {\n                    return this.compressor[k].value;\n                }\n\n                const v = parseFloat(value);\n\n                const minValues = {\n                    'threshold' : -100,\n                    'knee'      : 0,\n                    'ratio'     : 1,\n                    'attack'    : 0,\n                    'release'   : 0\n                };\n\n                const maxValues = {\n                    'threshold' : 0,\n                    'knee'      : 40,\n                    'ratio'     : 20,\n                    'attack'    : 1,\n                    'release'   : 1\n                };\n\n                const min = minValues[k];\n                const max = maxValues[k];\n\n                if ((v >= min) && (v <= max)) {\n                    this.compressor[k].value = v;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.compressor.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n            // GainNode (Input) -> DynamicsCompressorNode -> GainNode (Output)\n            this.input.connect(this.compressor);\n            this.compressor.connect(this.output);\n        } else {\n            // Effect OFF\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'threshold' : this.compressor.threshold.value,\n            'knee'      : this.compressor.knee.value,\n            'ratio'     : this.compressor.ratio.value,\n            'attack'    : this.compressor.attack.value,\n            'release'   : this.compressor.release.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Compressor]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Distortion extends Effector {\n    static CLEAN      = 'clean';\n    static CRUNCH     = 'crunch';\n    static OVERDRIVE  = 'overdrive';\n    static DISTORTION = 'distortion';\n    static FUZZ       = 'fuzz';\n\n    static AMOUNTS = {\n        'CLEAN'      : 0.0,\n        'CRUNCH'     : 0.5,\n        'OVERDRIVE'  : 0.7,\n        'DISTORTION' : 0.8,\n        'FUZZ'       : 0.9\n    };\n\n    /**\n     * This class (static) method creates the instance of `Float32Array` for distortion.\n     * @param {number} amount This argument is the depth of distortion.\n     * @param {number} numberOfSamples This argument is the size of `Float32Array`.\n     * @return {Float32Array|null} This is `curve` property in `WaveShaperNode`.\n     */\n    static createCurve = (amount, numberOfSamples) => {\n        if ((amount > 0) && (amount < 1)) {\n            const curves = new Float32Array(numberOfSamples);\n\n            const k = (2 * amount) / (1 - amount);\n\n            for (let i = 0; i < numberOfSamples; i++) {\n                // LINEAR INTERPOLATION: x := (c - a) * (z - y) / (b - a) + y\n                // a = 0, b = 2048, z = 1, y = -1, c = i\n                const x = (((i - 0) * (1 - (-1))) / (numberOfSamples - 0)) + (-1);\n                curves[i] = ((1 + k) * x) / (1 + k * Math.abs(x));\n            }\n\n            return curves;\n        }\n\n        return null;  // Clean sound (default value)\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.distortion = context.createWaveShaper();\n        this.drive      = context.createGain();\n        this.color      = context.createBiquadFilter();\n        this.tone       = context.createBiquadFilter();\n\n        // Distortion type\n        this.type = Distortion.CLEAN;\n\n        // for creating curve\n        this.numberOfSamples = 4096;\n\n        // Initialize parameters\n        this.drive.gain.value      = 1;\n        this.color.type            = (typeof this.color.type === 'string') ? 'bandpass' : (this.color.BANDPASS || 2);\n        this.color.frequency.value = 350;\n        this.color.Q.value         = Math.SQRT1_2;\n        this.color.gain.value      = 0;  // Not used\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n\n        // `Distortion` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else  {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'curve':\n                    if (value === undefined) {\n                        return this.distortion.curve;\n                    }\n\n                    let curve = null;\n\n                    switch (String(value).toLowerCase()) {\n                        case Distortion.CLEAN:\n                            this.type = Distortion.CLEAN;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CLEAN, this.numberOfSamples);\n                            break;\n                        case Distortion.CRUNCH:\n                            this.type = Distortion.CRUNCH;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CRUNCH, this.numberOfSamples);\n                            break;\n                        case Distortion.OVERDRIVE:\n                            this.type = Distortion.OVERDRIVE;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.OVERDRIVE, this.numberOfSamples);\n                            break;\n                        case Distortion.DISTORTION:\n                            this.type = Distortion.DISTORTION;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.DISTORTION, this.numberOfSamples);\n                            break;\n                        case Distortion.FUZZ:\n                            this.type = Distortion.FUZZ;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.FUZZ, this.numberOfSamples);\n                            break;\n                        default:\n                            if (value instanceof Float32Array) {\n                                curve = value;\n                            }\n\n                            break;\n                    }\n\n                    this.distortion.curve = curve;\n\n                    break;\n                case 'samples':\n                    if (value === undefined) {\n                        return this.numberOfSamples;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    if (v >= 0) {\n                        this.numberOfSamples = v;\n                        this.param('curve', this.type);\n                    }\n\n                    break;\n                case 'drive':\n                    if (value === undefined) {\n                        return this.drive.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.drive.gain.value = v;\n                    }\n\n                    break;\n                case 'color':\n                case 'tone' :\n                    if (value === undefined) {\n                        return this[k].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.distortion.disconnect(0);\n        this.drive.disconnect(0);\n        this.color.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Color) -> WaveShaperNode (Distortion) -> GainNode (Drive) -> BiquadFilterNode (Tone) -> GainNode (Output)\n            this.input.connect(this.color);\n            this.color.connect(this.distortion);\n            this.distortion.connect(this.drive);\n            this.drive.connect(this.tone);\n            this.tone.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'   : this.isActive,\n            'curve'   : this.type,\n            'samples' : this.numberOfSamples,\n            'drive'   : this.drive.gain.value,\n            'color'   : this.color.frequency.value,\n            'tone'    : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Distortion]';\n    }\n}\n","'use strict';\n\nimport { Effector }  from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Wah extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.lowpass = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.lowpass.type            = (typeof this.lowpass.type === 'string') ? 'lowpass' : (this.lowpass.LOWPASS || 0);\n        this.lowpass.frequency.value = 350;\n        this.lowpass.Q.value         = 1;\n        this.lowpass.gain.value      = 0;  // Not used\n\n        this.depth.gain.value  = 0;\n        this.rate.value        = 0;\n        this.depthRate         = 0;\n\n        // `Wah` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.lowpass.frequency);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.lowpass.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.frequency.value = v;\n                        this.depth.gain.value        = this.lowpass.frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.lowpass.frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.lowpass.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.Q.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.lowpass.frequency);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.lowpass.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Low-Pass Filter) -> GainNode (Output)\n            this.input.connect(this.lowpass);\n            this.lowpass.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'cutoff'    : this.lowpass.frequency.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'resonance' : this.lowpass.Q.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Wah]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Equalizer extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     **/\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.bass     = context.createBiquadFilter();\n        this.middle   = context.createBiquadFilter();\n        this.treble   = context.createBiquadFilter();\n        this.presence = context.createBiquadFilter();\n\n        // Set filter type\n        this.bass.type     = (typeof this.bass.type     === 'string') ? 'lowshelf'  : (this.bass.LOWSHELF      || 3);\n        this.middle.type   = (typeof this.middle.type   === 'string') ? 'peaking'   : (this.middle.PEAKING     || 5);\n        this.treble.type   = (typeof this.treble.type   === 'string') ? 'peaking'   : (this.treble.PEAKING     || 5);\n        this.presence.type = (typeof this.presence.type === 'string') ? 'highshelf' : (this.presence.HIGHSHELF || 4);\n\n        // Set cutoff frequency\n        this.bass.frequency.value     =  500;  // 500 Hz\n        this.middle.frequency.value   = 1000;  // 1 kHz\n        this.treble.frequency.value   = 2000;  // 2 kHz\n        this.presence.frequency.value = 4000;  // 4 kHz\n\n        // Set Q\n        // this.bass.Q.value     = Math.SQRT1_2;  // Not used\n        this.middle.Q.value   = Math.SQRT1_2;\n        this.treble.Q.value   = Math.SQRT1_2;\n        // this.presence.Q.value = Math.SQRT1_2;  // Not used\n\n        // Set Gain\n        this.bass.gain.value     = 0;\n        this.middle.gain.value   = 0;\n        this.treble.gain.value   = 0;\n        this.presence.gain.value = 0;\n\n        // `Equalizer` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'bass'    :\n                case 'middle'  :\n                case 'treble'  :\n                case 'presence':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.bass.disconnect(0);\n        this.middle.disconnect(0);\n        this.treble.disconnect(0);\n        this.presence.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Bass) -> BiquadFilterNode (Middle) -> BiquadFilterNode (Treble) -> BiquadFilterNode (Presence) -> GainNode (Output)\n            this.input.connect(this.bass);\n            this.bass.connect(this.middle);\n            this.middle.connect(this.treble);\n            this.treble.connect(this.presence);\n            this.presence.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'bass'     : this.bass.gain.value,\n            'middle'   : this.middle.gain.value,\n            'treble'   : this.treble.gain.value,\n            'presence' : this.presence.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Equalizer]';\n    }\n}\n\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Filter extends Effector {\n    // for legacy browsers\n    static FILTER_TYPES = {\n        'lowpass'   : 0,\n        'highpass'  : 1,\n        'bandpass'  : 2,\n        'lowshelf'  : 3,\n        'highshelf' : 4,\n        'peaking'   : 5,\n        'notch'     : 6,\n        'allpass'   : 7\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.filter = context.createBiquadFilter();\n\n        // for legacy browsers\n        this.filter.frequency.setTargetAtTime = this.filter.frequency.setTargetAtTime || this.filter.frequency.setTargetValueAtTime;\n\n        // Initialize parameters\n        this.filter.type            = (typeof this.filter.type === 'string') ? 'lowpass' : (this.filter.LOWPASS || 0);\n        this.filter.frequency.value = 350;\n        this.filter.Q.value         = 1;\n        this.filter.gain.value      = 0;\n\n        this.maxFrequency = this.filter.frequency.value;\n        this.range        = 0.1;  // 10% -> between `this.maxFrequency * 0.1` and `this.maxFrequency`\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 1.0;\n        this.release = 1.0;\n\n        // `Filter` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.filter.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Filter.FILTER_TYPES) {\n                        this.filter.type = (typeof this.filter.type === 'string') ? v : Filter.FILTER_TYPES[v];\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filter.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.maxFrequency           = v;\n                        this.filter.frequency.value = v;\n                    }\n\n                    break;\n                case 'gain':\n                    if (value === undefined) {\n                        return this.filter.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.gain.value = v;\n                    }\n\n                    break;\n                case 'q':\n                    if (value === undefined) {\n                        return this.filter.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.Q.value = v;\n                    }\n\n                    break;\n                case 'range':\n                    if (value === undefined) {\n                        return this.range;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.range= v;\n                    }\n\n                    break;\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.filter.disconnect(0);\n\n        if (this.isActive) {\n            // Effector ON\n\n            // GainNode (Input) -> BiquadFilterNode -> GainNode (Output)\n            this.input.connect(this.filter);\n            this.filter.connect(this.output);\n        } else {\n            // Effector OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            const t0      = s;\n            const t1      = t0 + this.attack;\n            const t2      = this.decay;\n            const t2Value = this.sustain * this.maxFrequency;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t0);\n            this.filter.frequency.setValueAtTime(minFrequnecy, t0);\n            this.filter.frequency.linearRampToValueAtTime(this.maxFrequency, t1);  // Attack\n            this.filter.frequency.setTargetAtTime(t2Value, t1, t2);  // Decay -> Sustain\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime) {\n        if (this.isActive) {\n            let s = parseFloat(stopTime) - this.release;\n\n           if (isNaN(s) || (s < this.context.currentTime)) {\n               s = this.context.currentTime;\n           }\n\n            const t3 = s;\n            const t4 = this.release;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t3);\n            this.filter.frequency.setValueAtTime(this.filter.frequency.value, t3);\n            this.filter.frequency.setTargetAtTime(minFrequnecy, t3, t4);  // Sustain -> Release\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'type'      : this.filter.type,\n            'frequency' : this.filter.frequency.value,\n            'Q'         : this.filter.Q.value,\n            'gain'      : this.filter.gain.value,\n            'range'     : this.range,\n            'attack'    : this.attack,\n            'decay'     : this.decay,\n            'sustain'   : this.sustain,\n            'release'   : this.release\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Filter]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Autopanner extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createStereoPanner();\n\n        // Initialize parameters\n        this.panner.pan.value = 0;\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Autopanner` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (pan)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.panner.pan);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                       return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                       return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> StereoPannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.panner.pan);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Autopanner]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class AutopannerFallback extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitudeL = context.createGain();\n        this.amplitudeR = context.createGain();\n        this.splitter   = context.createChannelSplitter(2);\n        this.merger     = context.createChannelMerger(2);\n\n        this.amplitudeL.gain.value = 1;  // 1 +- depth\n        this.amplitudeR.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameters\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `AutopannerFallback` is not connected by default\n        this.state(false);\n\n        // LFO\n        this.lfoSplitter = context.createChannelSplitter(2);\n\n        // OscillatorNode (LFO) -> GainNode (Depth) -> ScriptProcessorNode -> ChannelSplitterNode -> AudioParam (gain) (L) / (R)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.processor);\n        this.processor.connect(this.lfoSplitter);\n        this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n        this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitudeL.disconnect(0);\n        this.amplitudeR.disconnect(0);\n        this.splitter.disconnect(0);\n        this.splitter.disconnect(1);\n        this.merger.disconnect(0);\n\n        if (this.isActive) {\n            // GainNode (Input) -> ChannelSplitterNode -> GainNode (L) / (R) -> ChannelMergerNode -> GainNode (Output)\n            this.input.connect(this.splitter);\n            this.splitter.connect(this.amplitudeL, 0, 0);\n            this.splitter.connect(this.amplitudeR, 1, 0);\n            this.amplitudeL.connect(this.merger, 0, 0);\n            this.amplitudeR.connect(this.merger, 0, 1);\n            this.merger.connect(this.output);\n        } else {\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                const inputs   = event.inputBuffer.getChannelData(0);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                if (this.isActive && (this.depth.gain.value !== 0) && (this.rate.value !== 0)) {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] =  inputs[i];\n                        outputRs[i] = -inputs[i];\n                    }\n                } else {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = 0;\n                        outputRs[i] = 0;\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.processor);\n            this.processor.connect(this.lfoSplitter);\n            this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n            this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule AutopannerFallback]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Tremolo extends Effector {\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Tremolo` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'wave':\n                    if (value === undefined) {\n                        return this.lfo.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Tremolo.WAVE_TYPES) {\n                        this.lfo.type = (typeof this.lfo.type === 'string') ? v : Tremolo.WAVE_TYPES[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value,\n            'wave'  : this.lfo.type\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Tremolo]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Ringmodulator extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 0;  // 0 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 1;\n        this.rate.value       = 0;\n\n        // `Ringmodulator` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Ringmodulator]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Phaser extends Effector {\n    static MAXIMUM_STAGES = 24;  // The maximum number of All-Pass Filters\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.numberOfStages = 12;  // The default number of All-Pass Filters\n        this.filters        = new Array(Phaser.MAXIMUM_STAGES);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i]                 = context.createBiquadFilter();\n            this.filters[i].type            = (typeof this.filters[i].type === 'string') ? 'allpass' : (this.filters[i].ALLPASS || 7);\n            this.filters[i].frequency.value = 350;\n            this.filters[i].Q.value         = 1;\n            this.filters[i].gain.value      = 0;  // Not used\n        }\n\n        this.mix      = context.createGain();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.depth.gain.value    = 0;\n        this.rate.value          = 0;\n        this.mix.gain.value      = 0;\n        this.feedback.gain.value = 0;\n        this.depthRate           = 0;\n\n        // `Phaser` is not connected by default\n        this.state(false);\n\n        // LFO\n        // GainNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.depth.connect(this.filters[i].frequency);\n        }\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'stage':\n                    if (value === undefined) {\n                        return this.numberOfStages;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case  0:\n                        case  2:\n                        case  4:\n                        case  8:\n                        case 12:\n                        case 24:\n                            this.numberOfStages = v;\n                            this.connect();\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filters[0].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[i].frequency.value = v;\n                        }\n\n                        this.depth.gain.value = this.filters[0].frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.filters[0].Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[0].Q.value = v;\n                        }\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.filters[0].frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i].disconnect(0);\n        }\n\n        this.mix.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive && (this.numberOfStages > 0)) {\n            // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.filters[0]);\n\n            for (let i = 0; i < this.numberOfStages; i++) {\n                if (i < (this.numberOfStages - 1)) {\n                    this.filters[i].connect(this.filters[i + 1]);\n                } else {\n                    this.filters[i].connect(this.mix);\n                    this.mix.connect(this.output);\n\n                    // Feedback\n                    // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Feedback) -> BiquadFilterNode (All-Pass Filter x N) ...\n                    this.filters[i].connect(this.feedback);\n                    this.feedback.connect(this.filters[0]);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n           // Connect nodes again\n           this.lfo.connect(this.depth);\n\n           for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n               this.depth.connect(this.filters[i].frequency);\n           }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'stage'     : this.numberOfStages,\n            'frequency' : this.filters[0].frequency.value,\n            'resonance' : this.filters[0].Q.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'mix'       : this.mix.gain.value,\n            'feedback'  : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Phaser]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Flanger extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Flanger` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (delayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Flanger]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Chorus extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Chorus` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (elayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Chorus]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Delay extends Effector {\n    static MAX_DELAY_TIME = 5;  // Max delay time is 5000 [ms]\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay(Delay.MAX_DELAY_TIME);\n        this.dry      = context.createGain();\n        this.wet      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.dry.gain.value        = 1;\n        this.wet.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n\n        // `Delay` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = Delay.MAX_DELAY_TIME;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                    }\n\n                    break;\n                case 'dry'     :\n                case 'wet'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Wet) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.wet);\n            this.wet.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'dry'      : this.dry.gain.value,\n            'wet'      : this.wet.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Delay]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Reverb extends Effector {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.rirs      = [];\n        this.convolver = context.createConvolver();\n        this.dry       = context.createGain();\n        this.wet       = context.createGain();\n        this.tone      = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.dry.gain.value       = 1;\n        this.wet.gain.value       = 0;\n        this.tone.type            = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value = 350;\n        this.tone.Q.value         = Math.SQRT1_2;\n        this.tone.gain.value      = 0;  // Not used\n\n        // `Reverb` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.convolver.buffer;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = this.rirs.length - 1;\n\n                    if (value === null) {\n                        this.convolver.buffer = null;\n\n                        // If `buffer` in `ConvolverNode` is `null` after setting the instance of `AudioBuffer`, `Reverb` is not OFF.\n                        // Therefore, `Reverb` is OFF by disconnecting nodes.\n                        this.input.disconnect(0);\n                        this.input.connect(this.output);\n                    } else if ((v >= min) && (v <= max)) {\n                        this.convolver.buffer = this.rirs[v];\n                        this.connect();\n                    }\n\n                    break;\n                case 'dry':\n                case 'wet':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                case 'rirs':\n                    return this.rirs;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.convolver.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> ConvolverNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.convolver);\n            this.convolver.connect(this.wet);\n            this.wet.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets instance of `AudioBuffer` to `ConvolverNode`.\n     * @param {AudioBuffer|ArrayBuffer} impulse This argument is in order to convolve impulse response.\n     *     This argument is the instance of `AudioBuffer` or `ArrayBuffer` for impulse response.\n     * @param {function} errorCallback This argument is in order to be invoked when error occurs.\n     * @return {Reverb} This is returned for method chain.\n     * @override\n     */\n    start(impulse, errorCallback) {\n        if ((impulse instanceof AudioBuffer) || (impulse === null)) {\n            this.convolver.buffer = impulse;\n            this.rirs.push(impulse);  // Add to preset\n        } else if (impulse instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.convolver.buffer = buffer;\n                this.rirs.push(buffer);  // Add to preset\n            };\n\n            if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n                errorCallback = () => {};\n            }\n\n            this.context.decodeAudioData(impulse, successCallback, errorCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax for Revreb presets.\n     * @param {Array.<string>|Array.<AudioBuffer>} rirs This argument is either URLs or the instances of `AudioBuffer` for impulse response.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked when the creating the instances of `AudioBuffer` was completed.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {Reverb} This is returned for method chain.\n     */\n    preset(rirs, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('rirs' in properties) {\n                rirs = properties.rirs;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(rirs)) {\n            rirs = [rirs];\n        }\n\n        this.rirs = new Array(rirs.length);\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogresss = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.rirs[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (let i = 0, len = this.rirs.length; i < len; i++) {\n                            if (this.rirs[i] === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, Reverb.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = rirs.length; i < len; i++) {\n            if (typeof rirs[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(rirs[i], i);\n            } else if (rirs[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.rirs[i] = rirs[i];\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'dry'   : this.dry.gain.value,\n            'wet'   : this.wet.gain.value,\n            'tone'  : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Reverb]';\n    }\n}\n","'use strict';\n\nimport { Effector } from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport class Panner extends Effector {\n    static PANNING_MODELS = {\n        'equalpower' : 0,\n        'HRTF'       : 1\n    };\n\n    static DISTANCE_MODELS = {\n        'linear'      : 0,\n        'inverse'     : 1,\n        'exponential' : 2\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createPanner();\n\n        this.positions    = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.orientations = { 'x' : 1, 'y' : 0, 'z' : 0 };\n\n        this.panner.refDistance   = 1;\n        this.panner.maxDistance   = 10000;\n        this.panner.rolloffFactor = 1;\n\n        this.panner.coneInnerAngle = 360;\n        this.panner.coneOuterAngle = 360;\n        this.panner.coneOuterGain  = 0;\n\n        this.panner.panningModel  = (typeof this.panner.panningModel  === 'string') ? 'HRTF'    : (this.panner.HRTF || 1);\n        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? 'inverse' : (this.panner.INVERSE_DISTANCE || 1);\n\n        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n\n        // `Panner` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'ox':\n                case 'oy':\n                case 'oz':\n                    if (value === undefined) {\n                        return this.orientations[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.orientations[k.charAt(1)] = v;\n                        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n                    }\n\n                    break;\n                case 'refdistance':\n                    if (value === undefined) {\n                        return this.panner.refDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.panner.refDistance = v;\n                    }\n\n                    break;\n                case 'maxdistance':\n                    if (value === undefined) {\n                        return this.panner.maxDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.panner.maxDistance = v;\n                    }\n\n                    break;\n                case 'rollofffactor':\n                    if (value === undefined) {\n                        return this.panner.rolloffFactor;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.rolloffFactor = v;\n                    }\n\n                    break;\n                case 'coneinnerangle':\n                    if (value === undefined) {\n                        return this.panner.coneInnerAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneInnerAngle = v;\n                    }\n\n                    break;\n                case 'coneouterangle':\n                    if (value === undefined) {\n                        return this.panner.coneOuterAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterAngle = v;\n                    }\n\n                    break;\n                case 'coneoutergain':\n                    if (value === undefined) {\n                        return this.panner.coneOuterGain;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterGain = v;\n                    }\n\n                    break;\n                case 'panningmodel':\n                    if (value === undefined) {\n                        return this.panner.panningModel;\n                    }\n\n                    v = /HRTF/i.test(value) ? String(value).toUpperCase() : String(value).toLowerCase();\n\n                    if (v in Panner.PANNING_MODELS) {\n                        this.panner.panningModel = (typeof this.panner.panningModel === 'string') ? v : Panner.PANNING_MODELS[v];\n                    }\n\n                    break;\n                case 'distancemodel':\n                    if (value === undefined) {\n                        return this.panner.distanceModel;\n                    }\n\n                    v = String(value).replace(/-/g, '').toLowerCase();\n\n                    if (v in Panner.DISTANCE_MODELS) {\n                        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? v : Panner.DISTANCE_MODELS[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> PannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'          : this.isActive,\n            'positions'      : this.positions,\n            'orientations'   : this.orientations,\n            'refDistance'    : this.panner.refDistance,\n            'maxDistance'    : this.panner.maxDistance,\n            'rolloffFactor'  : this.panner.rolloffFactor,\n            'coneInnerAngle' : this.panner.coneInnerAngle,\n            'coneOuterAngle' : this.panner.coneOuterAngle,\n            'coneOuterGain'  : this.panner.coneOuterGain,\n            'panningModel'   : this.panner.panningModel,\n            'distanceModel'  : this.panner.distanceModel\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Panner]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines property for audio listener.\n * These properties relate to properties of `PannerNode`.\n * @constructor\n */\nexport class Listener {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        // the instance of `AudioListener`\n        this.listener = context.listener;\n\n        // Set default value\n        this.positions = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.fronts    = { 'x' : 0, 'y' : 0, 'z' : -1 };\n        this.ups       = { 'x' : 0, 'y' : 1, 'z' : 0 };\n\n        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Listener} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'fx':\n                case 'fy':\n                case 'fz':\n                    if (value === undefined) {\n                        return this.fronts[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.fronts[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                case 'ux':\n                case 'uy':\n                case 'uz':\n                    if (value === undefined) {\n                        return this.ups[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.ups[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'positions' : this.positions,\n            'fronts'    : this.fronts,\n            'ups'       : this.ups\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Listener]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Envelope Generator.\n * @constructor\n */\nexport class EnvelopeGenerator {\n    static MIN_GAIN = 1e-3;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        /** @type {Array.<GainNode>} */\n        this.generators = [];\n\n        // for `GainNode`\n        this.activeIndexes = [];\n        this.activeCounter = 0;\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 0.5;\n        this.release = 1.0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|EnvelopeGenerator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects the instance of `AudioNode`.\n     * @param {number} index This argument is in order to select the instance of `GainNode` that is Envelope Generator.\n     * @param {AudioNode} input This argument is the instance of `AudioNode` as input.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    ready(index, input, output) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        if ((input instanceof AudioNode) && (output instanceof AudioNode)) {\n            input.connect(this.generators[i]);\n            this.generators[i].connect(output);\n        } else if (input instanceof AudioNode) {\n            input.connect(this.generators[i]);\n        } else if (output instanceof AudioNode) {\n            this.generators[i].connect(output);\n        }\n\n        this.activeIndexes[i] = i;\n        this.activeCounter++;\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack -> Decay -> Sustain).\n     * @param {number} startTime This argument is the start time of Attack.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    start(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Attack -> Decay -> Sustain\n        const t0      = s;\n        const t1      = t0 + this.attack;\n        const t2      = this.decay;\n        const t2Value = this.sustain;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // Start from `gain.value = 0`\n            this.generators[activeIndex].gain.cancelScheduledValues(t0);\n            this.generators[activeIndex].gain.setValueAtTime(0, t0);\n\n            // Attack : `gain.value` increases linearly until assigned time (t1)\n            this.generators[activeIndex].gain.linearRampToValueAtTime(1, t1);\n\n            // Decay -> Sustain : `gain.value` gradually decreases to value of Sustain during of Decay time (t2) from assigned time (t1)\n            this.generators[activeIndex].gain.setTargetAtTime(t2Value, t1, t2);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack or Decay or Sustain -> Release).\n     * @param {number} stopTime This argument is the start time of Release.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        let s = parseFloat(stopTime) - this.release;\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Sustain -> Release\n        const t3 = s;\n        const t4 = this.release;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // in the case of mouseup on the way of Decay\n            this.generators[activeIndex].gain.cancelScheduledValues(t3);\n            this.generators[activeIndex].gain.setValueAtTime(this.generators[activeIndex].gain.value, t3);\n\n            // Release : `gain.value` gradually decreases to 0 during of Release time (t4) from assigned time (t3)\n            this.generators[activeIndex].gain.setTargetAtTime(0, t3, t4);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {GainNode} This is returned as the instance of `GainNode` for Envelope Generator.\n     */\n    getGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        return this.generators[i];\n    }\n\n    /**\n     * This method sets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    setGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        this.generators[i] = this.context.createGain();\n\n        // for legacy browsers\n        this.generators[i].gain.setTargetAtTime = this.generators[i].gain.setTargetAtTime || this.generators[i].gain.setTargetValueAtTime;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the all of gain schedulings have ended.\n     * @return {boolean} If the all of gain schedulings have ended, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStop() {\n        let counter = 0;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            if (this.generators[activeIndex].gain.value > EnvelopeGenerator.MIN_GAIN) {\n                return false;\n            }\n\n            counter++;\n\n            // the all of schedulings are stopped ?\n            if (counter === this.activeCounter) {\n                return true;\n            }\n        }\n    }\n\n    /**\n     * This method clears variables for managing the instance of `GainNode`.\n     * @param {boolean} isDisconnect This argument is in order to determine whether disconnect `AudioNode`.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    clear(isDisconnect) {\n        this.activeIndexes.length = 0;\n        this.activeCounter = 0;\n\n        for (const generator of this.generators) {\n            generator.gain.cancelScheduledValues(this.context.currentTime);\n            generator.gain.value = 1;\n\n            if (isDisconnect) {\n                generator.disconnect(0);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'attack'  : this.attack,\n            'decay'   : this.decay,\n            'sustain' : this.sustain,\n            'release' : this.release\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule EnvelopeGenerator]';\n    }\n}\n","'use strict';\n\nimport { Analyser } from './Analyser';\nimport { Recorder } from './Recorder';\nimport { Session } from './Session';\nimport { Effector } from './Effectors/Effector';\nimport { Compressor } from './Effectors/Compressor';\nimport { Distortion } from './Effectors/Distortion';\nimport { Wah } from './Effectors/Wah';\nimport { Equalizer } from './Effectors/Equalizer';\nimport { Filter } from './Effectors/Filter';\nimport { Autopanner } from './Effectors/Autopanner';\nimport { AutopannerFallback } from './Effectors/AutopannerFallback';\nimport { Tremolo } from './Effectors/Tremolo';\nimport { Ringmodulator } from './Effectors/Ringmodulator';\nimport { Phaser } from './Effectors/Phaser';\nimport { Flanger } from './Effectors/Flanger';\nimport { Chorus } from './Effectors/Chorus';\nimport { Delay } from './Effectors/Delay';\nimport { Reverb } from './Effectors/Reverb';\nimport { Panner } from './Effectors/Panner';\nimport { Listener } from './Effectors/Listener';\nimport { EnvelopeGenerator } from './Effectors/EnvelopeGenerator';\n\n/**\n * This class is superclass that is the top in this library.\n * This library's users do not create the instance of `SoundModule`.\n * This class is used for inherit in subclass (`OscillatorModule`, `OneshotModule`, `AudioModule`, `MediaModule`, `StreamModule`, `MixerModule`).\n * Therefore, this class defines the common properties for each sound sources.\n * @constructor\n */\nexport class SoundModule {\n    static NUMBER_OF_INPUTS  = 2;\n    static NUMBER_OF_OUTPUTS = 2;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.init(context, bufferSize);\n    }\n\n    /**\n     * This method initials modules.\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     However, the opportunity for designating buffer size is not so much.\n     *     The reason why is that the constructor of `SoundModule` selects buffer size automaticly.\n     *     This buffer size can be changed explicitly by calling `resize` method.\n     */\n    init(context, bufferSize) {\n        if (Array.isArray(this.modules) && (this.modules.length > 0)) {\n            this.mastervolume.disconnect(0);\n            this.mastervolume = null;\n\n            this.processor.disconnect(0);\n            this.processor = null;\n\n            this.analyser.input.disconnect(0);\n            this.analyser = null;\n\n            this.recorder.processor.disconnect(0);\n            this.recorder = null;\n\n            this.session.sender.disconnect(0);\n            this.session  = null;\n\n            this.modules.forEach(module => {\n                module.input.disconnect(0);\n                module.output.disconnect(0);\n                module = null;\n            });\n\n            this.modules = [];\n        }\n\n        this.context    = context;\n        this.sampleRate = context.sampleRate;\n\n        let size = parseInt(bufferSize, 10);\n\n        switch (size) {\n            case   256:\n            case   512:\n            case  1024:\n            case  2048:\n            case  4096:\n            case  8192:\n            case 16384:\n                break;\n            default:\n                size = 0;\n                break;\n        }\n\n        this.mastervolume = context.createGain();\n        this.processor    = context.createScriptProcessor(size, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n\n        this.analyser          = new Analyser(context);\n        this.recorder          = new Recorder(context, size, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        this.session           = new Session(context, size, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS, this.analyser);\n        this.compressor        = new Compressor(context, size);\n        this.distortion        = new Distortion(context, size);\n        this.wah               = new Wah(context, size);\n        this.equalizer         = new Equalizer(context, size);\n        this.filter            = new Filter(context, size);\n        this.autopanner        = context.createStereoPanner ? new Autopanner(context, size) : new AutopannerFallback(context, size);\n        this.tremolo           = new Tremolo(context, size);\n        this.ringmodulator     = new Ringmodulator(context, size);\n        this.phaser            = new Phaser(context, size);\n        this.flanger           = new Flanger(context, size);\n        this.chorus            = new Chorus(context, size);\n        this.delay             = new Delay(context, size);\n        this.reverb            = new Reverb(context, size);\n        this.panner            = new Panner(context, size);\n        this.listener          = new Listener(context);\n        this.envelopegenerator = new EnvelopeGenerator(context);  // for `OscillatorModule`, `OneshotModule`\n\n        // The default order for connection\n        this.modules = [\n            this.compressor,\n            this.distortion,\n            this.wah,\n            this.equalizer,\n            this.filter,\n            this.autopanner,\n            this.tremolo,\n            this.ringmodulator,\n            this.phaser,\n            this.flanger,\n            this.chorus,\n            this.delay,\n            this.reverb,\n            this.panner\n        ];\n    }\n\n    /** @abstract */\n    setup() {\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string} key This argument is property name.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v   = null;\n        let min = null;\n        let max = null;\n\n        switch (k) {\n            case 'mastervolume':\n                if (value === undefined) {\n                    return this.mastervolume.gain.value;\n                }\n\n                v   = parseFloat(value);\n                min = 0;\n                max = 1;\n\n                if ((v >= min) && (v <= max)) {\n                    this.mastervolume.gain.value = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @abstract */\n    ready() {\n    }\n\n    /** @abstract */\n    start() {\n    }\n\n    /** @abstract */\n    stop() {\n    }\n\n    /** @abstract */\n    get() {\n    }\n\n    /**\n     * This method changes buffer size for `ScriptProcessorNode`.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 0, 256, 512, 1024, 2048, 4096, 8192, 16384.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    resize(bufferSize) {\n        this.init(this.context, bufferSize);\n        return this;\n    }\n\n    /**\n     * This method gets buffer size for `ScriptProcessorNode`.\n     * @return {number} This is returned as buffer size for `ScriptProcessorNode`.\n     */\n    getBufferSize() {\n        return this.processor.bufferSize;\n    }\n\n    /**\n     * This method installs customized effector.\n     * @param {string} name This argument is in order to select effector.\n     * @param {Effector} effector This argument is the subclass that extends `Effector` class.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    install(name, effector) {\n        if (!(effector instanceof Effector)) {\n            return this;\n        }\n\n        if (String(name) in this) {\n            return this;\n        }\n\n        this[name] = effector;\n\n        if (this.modules.every(module => module !== effector)) {\n            this.modules.push(effector);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes that are defined by this library and Web Audio API.\n     * @param {AudioNode} source This argument is `AudioNode` for input of sound.\n     * @param {Array.<Effector>} connects This argument is array for changing the default connection.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    connect(source, connects) {\n        // Customize connection ?\n        if (Array.isArray(connects)) {\n            this.modules = connects;\n        }\n\n        // Start connection\n        // AudioSourceNode (Input)-> node -> ... -> node -> GainNode (Master Volume) -> AnalyserNode  -> AudioDestinationNode (Output)\n        source.disconnect(0);  // Clear connection\n\n        if (this.modules.length > 0) {\n            source.connect(this.modules[0].input);\n        } else {\n            source.connect(this.mastervolume);\n        }\n\n        for (let i = 0, len = this.modules.length; i < len; i++) {\n            // Clear connection\n            this.modules[i].output.disconnect(0);\n\n            if (i < (this.modules.length - 1)) {\n                // Connect to next node\n                this.modules[i].output.connect(this.modules[i + 1].input);\n            } else {\n                this.modules[i].output.connect(this.mastervolume);\n            }\n        }\n\n        this.mastervolume.connect(this.context.destination);\n\n        // for analyser\n        this.mastervolume.connect(this.analyser.input);\n\n        // for recording\n        this.mastervolume.connect(this.recorder.processor);\n        this.recorder.processor.connect(this.context.destination);\n\n        // for session\n        this.mastervolume.connect(this.session.sender);\n        this.session.sender.connect(this.context.destination);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of module that is defined by this library. This method enables to access the instance of module by unified call.\n     * @param {string} module This argument is module's name.\n     * @return {Analyser|Recorder|Session|Effector|Listener|EnvelopeGenerator|Glide|VocalCanceler|NoiseGate} This value is the instance of module.\n     */\n    module(module) {\n        const m = String(module).replace(/-/g, '').toLowerCase();\n\n        switch (m) {\n            case 'analyser'     :\n            case 'recorder'     :\n            case 'session'      :\n            case 'compressor'   :\n            case 'distortion'   :\n            case 'wah'          :\n            case 'equalizer'    :\n            case 'filter'       :\n            case 'autopanner'   :\n            case 'tremolo'      :\n            case 'ringmodulator':\n            case 'phaser'       :\n            case 'flanger'      :\n            case 'chorus'       :\n            case 'delay'        :\n            case 'reverb'       :\n            case 'panner'       :\n            case 'listener'     :\n                return this[m];\n            case 'envelopegenerator':\n            case 'eg'               :\n                // OscillatorModule, OneshotModule, NoiseModule\n                return this.envelopegenerator;\n            case 'glide':\n                if (m in this) {\n                    return this[m];  // OscillatorModule\n                }\n\n                // fall through\n            case 'vocalcanceler':\n                if (m in this) {\n                    return this[m];  // AudioModule, MediaModule\n                }\n\n                // fall through\n            case 'noisegate':\n                if (m in this) {\n                    return this[m];  // StreamModule\n                }\n\n                // fall through\n            default:\n                return this[m];  // Installed effector\n        }\n    }\n\n    /**\n     * This method starts effectors.\n     * @param {number} startTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    on(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.start(s);\n        this.flanger.start(s);\n        this.phaser.start(s);\n        this.autopanner.start(s);\n        this.tremolo.start(s);\n        this.ringmodulator.start(s);\n        this.wah.start(s);\n        this.filter.start(s);\n\n        return this;\n    }\n\n    /**\n     * This method stops effectors.\n     * @param {number} stopTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    off(stopTime) {\n        let s = parseFloat(stopTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.stop(s);\n        this.flanger.stop(s);\n        this.phaser.stop(s);\n        this.autopanner.stop(s);\n        this.tremolo.stop(s);\n        this.ringmodulator.stop(s);\n        this.wah.stop(s);\n        // this.filter.stop(s);\n\n        return this;\n    }\n\n    /**\n     * This method gets effector's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {};\n\n        for (const module in this) {\n            if (Object.prototype.toString.call(this[module]) === '[object Function]') {\n                continue;\n            }\n\n            const m = module.toLowerCase();\n\n            if (m === 'mastervolume') {\n                params[m] = this[module].gain.value;  // AudioParam\n            } else if ((Object.prototype.toString.call(this[module]) === '[object Object]') && ('params' in this[module])) {\n                params[m] = this[module].params();\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * This method gets effector's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for the instance of `OscillatorNode`.\n * @constructor\n */\nexport class Oscillator {\n    // 1 Octave = 1200 cent\n    static OCTAVE = 1200;\n\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {boolean} state This argument is initial state.\n     */\n    constructor(context, state) {\n        this.isActive = state;\n\n        this.context = context;\n\n        this.source = context.createOscillator();\n\n        // for legacy browsers\n        this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n        this.source.start           = this.source.start           || this.source.noteOn;\n        this.source.stop            = this.source.stop            || this.source.noteOff;\n\n        this.volume = context.createGain();\n\n        // in order to not call in duplicate `start` or `stop`  method in the instance of `OscillatorNode`\n        this.isStop = true;\n\n        this.octave  = 0;\n        this.fine    = 0;\n        this.customs = {\n            'real' : new Float32Array([0, 1]),\n            'imag' : new Float32Array([0, 1])\n        };\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|Oscillator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.source.type;\n                    }\n\n                    if (Object.prototype.toString.call(value) !== '[object Object]') {\n                        v = String(value).toLowerCase();\n\n                        if (v in Oscillator.WAVE_TYPES) {\n                            this.source.type = (typeof this.source.type === 'string') ? v : Oscillator.WAVE_TYPES[v];\n                        }\n                    } else {\n                        // Custom wave\n                        if (('real' in value) && ('imag' in value)) {\n                            let reals = null;\n                            let imags = null;\n\n                            if (value.real instanceof Float32Array) {\n                                reals = value.real;\n                            } else if (Array.isArray(value.real)) {\n                                reals = new Float32Array(value.real);\n                            }\n\n                            if (value.imag instanceof Float32Array) {\n                                imags = value.imag;\n                            } else if (Array.isArray(value.imag)) {\n                                imags = new Float32Array(value.imag);\n                            }\n\n                            if ((reals instanceof Float32Array) && (imags instanceof Float32Array)) {\n                                const MAX_SIZE = 4096;  // This size is defined by specification\n\n                                if (reals.length > MAX_SIZE) {reals = reals.subarray(0, MAX_SIZE);}\n                                if (imags.length > MAX_SIZE) {imags = imags.subarray(0, MAX_SIZE);}\n\n                                // The 1st value is fixed by 0 (This is is defined by specification)\n                                if (reals[0] !== 0) {reals[0] = 0;}\n                                if (imags[0] !== 0) {imags[0] = 0;}\n\n                                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                                this.source.setPeriodicWave(periodicWave);\n                                this.customs.real = reals;\n                                this.customs.imag = imags;\n                            }\n                        }\n                    }\n\n                    break;\n                case 'octave':\n                    if (value === undefined) {\n                        return this.octave;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -4800 / Oscillator.OCTAVE;\n                    max =  4800 / Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.octave = v;\n                        this.source.detune.value = this.fine + (v * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'fine':\n                    if (value === undefined) {\n                        return this.fine;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -Oscillator.OCTAVE;\n                    max =  Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.fine = v;\n                        this.source.detune.value = v + (this.octave * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'volume':\n                case 'gain'  :\n                    if (value === undefined) {\n                        return this.volume.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.volume.gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    ready(output) {\n        if (this.isActive) {\n            // for saving value\n            const params = {\n                'type'      : this.source.type,\n                'frequency' : this.source.frequency.value,\n                'detune'    : this.source.detune.value\n            };\n\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.source.disconnect(0);\n            }\n\n            this.source = this.context.createOscillator();\n\n            // for legacy browsers\n            this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n            this.source.start           = this.source.start           || this.source.noteOn;\n            this.source.stop            = this.source.stop            || this.source.noteOff;\n\n            if (params.type === 'custom') {\n                // Custom wave\n                const reals        = this.customs.real;\n                const imags        = this.customs.imag;\n                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                this.source.setPeriodicWave(periodicWave);\n            } else {\n                this.source.type = params.type;\n            }\n\n            this.source.frequency.value = params.frequency;\n            this.source.detune.value    = params.detune;\n\n            this.volume.connect(output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts sound.\n     * @param {number} startTime This argument is the start time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive) {\n            this.source.start(startTime);\n            this.isStop = false;\n        } else {\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.isStop = true;\n            }\n\n            this.source.disconnect(0);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops sound.\n     * @param {number} stopTime This argument is the stop time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        if (!this.isStop) {\n            this.source.stop(stopTime);\n            this.source.disconnect(0);\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Oscillator} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `OscillatorNode`.\n     * @return {OscillatorNode}\n     */\n    get() {\n        return this.source;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Oscillator]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Glide.\n * @constructor\n */\nexport class Glide {\n    static LINEAR      = 'linear';\n    static EXPONENTIAL = 'exponential';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.frequencies = {\n            'start' : -1,  // Abnormal value for the 1st sound\n            'end'   : 0\n        };\n\n        this.time = 0;             // Glide time\n        this.type = Glide.LINEAR;  // either 'linear' or 'exponential'\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Glide} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'time':\n                    if (value === undefined) {\n                        return this.time;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.time = v;\n                    }\n\n                    break;\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Glide.LINEAR) || (v === Glide.EXPONENTIAL)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets frequencies for Glide.\n     * @param {number} frequency This argument is the frequency at which glide ends.\n     * @return {Glide} This is returned for method chain.\n     */\n    ready(frequency) {\n        this.frequencies.end = frequency;\n\n        const diff = (this.frequencies.start === -1) ? 0 : (this.frequencies.end - this.frequencies.start);\n\n        if ((this.frequencies.start === -1) || (this.time === 0) || (diff === 0)) {\n            // The 1st sound or Glide OFF or The same sound\n            this.frequencies.start = this.frequencies.end;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts Glide.\n     * @param {OscillatorNode} oscillator This argument is the instance of `OscillatorNode`.\n     * @param {number} startTime This argument is the start time of Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    start(oscillator, startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        const t0 = s;\n        const t1 = t0 + this.time;\n\n        // Start Glide\n        oscillator.frequency.cancelScheduledValues(t0);\n        oscillator.frequency.setValueAtTime(this.frequencies.start, t0);\n        oscillator.frequency[`${this.type}RampToValueAtTime`](this.frequencies.end, t1);\n\n        return this;\n    }\n\n    /**\n     * This method stops Glide. Moreover, This method prepares for next Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    stop() {\n        // Stop Glide or on the way of Glide\n        this.frequencies.start = this.frequencies.end;\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Glide]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { Oscillator } from './Oscillator';\nimport { Glide } from './Glide';\n\n/**\n * This subclass defines properties for creating sound.\n * Actually, properties for creating sound is defined in private class (`Oscillator`).\n * Therefore, this class manages these private classes for creating sound.\n * @constructor\n * @extends {SoundModule}\n */\nexport class OscillatorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        /** @type {Array.<Oscillator>} */\n        this.sources = [];\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n\n        this.glide = new Glide(context);\n    }\n\n    /**\n     * This method creates the instances of `Oscillator`.\n     * @param {Array.<boolean>|boolean} states This argument is initial state in the instance of `Oscillator`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    setup(states) {\n        // Clear\n        this.sources.length = 0;\n\n        if (!Array.isArray(states)) {\n            states = [states];\n        }\n\n        for (let i = 0, len = states.length ; i < len; i++) {\n            this.sources[i] = new Oscillator(this.context, Boolean(states[i]));\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OscillatorModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            return (r === undefined) ? this : r;\n        }\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(true);\n\n        return this;\n    }\n\n    /**\n     * This method starts some sounds that are active at the same time.\n     * @param {Array.<number>}|number} frequencies This argument each oscillator frequency. The default value is 0 Hz.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    start(frequencies, connects, processCallback) {\n        const startTime = this.context.currentTime + this.times.start;\n\n        // Validate the 1st argument\n        if (!Array.isArray(frequencies)) {\n            frequencies = [frequencies];\n        }\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            const f = parseFloat(frequencies[i]);\n            frequencies[i] = (f >= 0) ? f : 0;\n        }\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // ScriptProcessorNode (Mix oscillators) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor, connects);\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            if (i >= this.sources.length) {\n                break;\n            }\n\n            const oscillator = this.sources[i];\n            const frequency  = frequencies[i];\n\n            // GainNode (Volume) -> ScriptProcessorNode (Mix oscillators)\n            oscillator.ready(this.processor);\n\n            // OscillatorNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume)\n            this.envelopegenerator.ready(i, oscillator.source, oscillator.volume);\n\n            this.glide.ready(frequency).start(oscillator.source, startTime);\n\n            oscillator.start(startTime);\n        }\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                const inputLs  = event.inputBuffer.getChannelData(0);\n                const inputRs  = event.inputBuffer.getChannelData(1);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                // Stop ?\n                if (this.envelopegenerator.isStop()) {\n                    // Stop\n                    const stopTime = this.context.currentTime;\n\n                    for (const source of this.sources) {\n                        source.stop(stopTime);\n                    }\n\n                    this.off(stopTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops active sounds.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.glide.stop();\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `Oscillator` that is used in `OscillatorModule`.\n     * @param {number} index This argument is required in the case of designating `Oscillator`.\n     * @return {Array.<Oscillator>|Oscillator}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /**\n     * This method returns the number of oscillators.\n     * @return {number} This is returned as the number of oscillators.\n     */\n    length() {\n        return this.sources.length;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oscillator = {\n            'glide' : {\n                'type' : this.glide.param('type'),\n                'time' : this.glide.param('time')\n            }\n        };\n\n        for (let i = 0, len = this.sources.length; i < len; i++) {\n            const source = this.sources[i];\n\n            params.oscillator[`oscillator${i}`] = {\n                'state'  : source.state(),\n                'gain'   : source.param('gain'),\n                'type'   : source.param('type'),\n                'octave' : source.param('octave'),\n                'fine'   : source.param('fine')\n            };\n        }\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\n\n/**\n * This subclass defines properties for playing the one-shot audio.\n * @constructor\n * @extends {SoundModule}\n */\nexport class OneshotModule extends SoundModule {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.sources   = [];  /** @type {Array.<AudioBufferSourceNode>} */\n        this.resources = [];  /** @type {Array.<string>} */\n        this.buffers   = [];  /** @type {Array.<AudioBuffer>} */\n        this.volumes   = [];  /** @type {Array.<GainNode>} */\n        this.isStops   = [];  /** @type {Array.<boolean>} in order to not call in duplicate `start` or `stop` method in the instance of `AudioBufferSourceNode` */\n\n        // for audio sources\n        this.settings = [];  /** @type {Array.<object>} */\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        this.transpose = 1.0;\n\n        this.isStop = true;\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax.\n     * @param {Array.<string>|Array.<AudioBuffer>} resources This argument is either URLs or the instances of `AudioBuffer` for audio resources.\n     * @param {Array.<object>} settings This argument is the properties of each audio sources.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    setup(resources, settings, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('resources' in properties) {\n                resources = properties.resources;\n            }\n\n            if ('settings' in properties) {\n                settings = properties.settings;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(resources)) {\n            resources = [resources];\n        }\n\n        this.resources = resources;\n\n        if (!Array.isArray(settings)) {\n            settings = [settings];\n        }\n\n        this.buffers.length = resources.length;\n\n        for (let i = 0, len = settings.length; i < len; i++) {\n            if ('buffer' in settings[i]) {\n               const buffer = parseInt(settings[i].buffer, 10);\n\n                if ((buffer >= 0) && (buffer < this.buffers.length)) {\n                    settings[i].buffer = buffer;\n                } else {\n                    return this;\n                }\n            } else {\n                return this;\n            }\n\n            settings[i].rate   = (('rate' in settings[i]) && (settings[i].rate >= 0)) ? parseFloat(settings[i].rate) : 1;\n            settings[i].loop   = ('loop' in settings[i]) ? Boolean(settings[i].loop) : false;\n            settings[i].start  = (('start' in settings[i]) && (settings[i].start >= 0)) ? parseFloat(settings[i].start) : 0;\n            settings[i].end    = (('end' in settings[i]) && (settings[i].end >= 0)) ? parseFloat(settings[i].end) : 0;\n            settings[i].volume = (('volume' in settings[i]) && (settings[i].volume >=0) && (settings[i].volume <= 1)) ? parseFloat(settings[i].volume) : 1;\n\n            this.isStops[i] = true;\n            this.volumes[i] = this.context.createGain();\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        this.settings = settings;\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = error => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(error, OneshotModule.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogress = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, OneshotModule.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            // Success\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.buffers[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (const buffer of this.buffers) {\n                            if (buffer === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event, this.buffers);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, OneshotModule.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = this.resources.length; i < len; i++) {\n            if (typeof this.resources[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(this.resources[i], i);\n            } else if (this.resources[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.buffers[i] = this.resources[i];\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OneshotModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'transpose':\n                    if (value === undefined) {\n                        return this.transpose;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.transpose = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(false);\n\n        return this;\n    }\n\n    /**\n     * This method starts one-shot audio with the designated playback rate and volume.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    start(index, connects, processCallback) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex  = this.settings[selectedIndex].buffer;\n        const playbackRate = this.settings[selectedIndex].rate;\n        const loop         = this.settings[selectedIndex].loop;\n        const loopStart    = this.settings[selectedIndex].start;\n        const loopEnd      = this.settings[selectedIndex].end;\n        const volume       = this.settings[selectedIndex].volume;\n\n        if (!(this.buffers[bufferIndex] instanceof AudioBuffer)) {\n            // `setup` method has not been invoked\n            return this;\n        }\n\n        // the instance of `AudioBufferSourceNode` already exists ?\n        if (this.sources[selectedIndex] instanceof AudioBufferSourceNode) {\n            this.sources[selectedIndex].stop(this.context.currentTime);\n            this.sources[selectedIndex].disconnect(0);\n            this.sources[selectedIndex] = null;\n        }\n\n        const source = this.context.createBufferSource();\n\n        // for legacy browsers\n        source.start = source.start || source.noteGrainOn;\n        source.stop  = source.stop  || source.noteOff;\n\n        source.buffer = this.buffers[bufferIndex];\n\n        // Set properties\n        source.playbackRate.value = playbackRate * this.transpose;\n        source.loop               = loop;\n        source.loopStart          = loopStart;\n        source.loopEnd            = loopEnd;\n\n        this.volumes[selectedIndex].gain.value = volume;\n\n        this.envelopegenerator.clear(false);\n\n        // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n        this.envelopegenerator.ready(selectedIndex, source, this.volumes[selectedIndex]);\n        this.volumes[selectedIndex].connect(this.processor);\n        this.connect(this.processor, connects);\n\n        const startTime = this.context.currentTime + this.times.start;\n\n        source.start(startTime);\n\n        this.sources[selectedIndex] = source;\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.isStops[selectedIndex] = false;\n\n        // in the case of scheduling stop time\n        if (this.times.stop > 0) {\n            window.setTimeout(() => {\n                this.stop(selectedIndex);\n            }, (this.times.stop * 1000));\n        }\n\n        // Call on stopping audio\n        source.onended = () => {\n            this.isStops[selectedIndex] = true;\n        };\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                this.isStop = this.isStops.every(element => element);\n\n                if (this.isStop) {\n                    // Stop\n\n                    this.off(this.context.currentTime);\n\n                    this.envelopegenerator.clear(false);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the designated one-shot audio.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    stop(index) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex= this.settings[selectedIndex].buffer;\n\n        if (!((this.buffers[bufferIndex] instanceof AudioBuffer) && (this.sources[selectedIndex] instanceof AudioBufferSourceNode))) {\n            return this;\n        }\n\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBuffer` that is used in `OneshotModule`.\n     * @param {number} index This argument is required in the case of designating `AudioBuffer`.\n     * @return {Array.<AudioBuffer>|AudioBuffer}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.buffers.length)) ? this.buffers[i] : this.buffers;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oneshot = {\n            'transpose' : this.transpose\n        };\n\n        return params;\n    }\n\n    /**\n     * This method resets settings.\n     * @param {number} index This argument is in order to select target setting.\n     * @param {string} key This argument is in order to select parameter.\n     * @param {number|boolean} value This argument is new value.\n     * @return {OneshotModule} This is returned for method chain.\n     */\n    reset(index, key, value) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (String(key).toLowerCase() in this.settings[selectedIndex]) {\n            this.settings[selectedIndex][key.toLowerCase()] = value;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OneshotModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule }  from '../SoundModule';\n\nexport class NoiseModule extends SoundModule {\n    static WHITE_NOISE    = 'whitenoise';\n    static PINK_NOISE     = 'pinknoise';\n    static BROWNIAN_NOISE = 'browniannoise';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.type = NoiseModule.WHITE_NOISE;\n\n        this.envelopegenerator.setGenerator(0);\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|NoiseModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = '';\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === NoiseModule.WHITE_NOISE) || (v === NoiseModule.PINK_NOISE) || (v === NoiseModule.BROWNIAN_NOISE)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(connects) {\n        const startTime = this.context.currentTime;\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // GainNode (Envelope Generator) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.envelopegenerator.getGenerator(0), connects);\n\n        // ScriptProcessorNode (Input) -> GainNode (Envelope Generator)\n        this.envelopegenerator.ready(0, this.processor);\n\n        this.envelopegenerator.start(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.on(startTime);\n\n        const bufferSize = this.processor.bufferSize;\n\n        let lastOut = 0;\n\n        this.processor.onaudioprocess = event => {\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            if (this.envelopegenerator.isStop()) {\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n            } else {\n                switch (this.type) {\n                    case NoiseModule.WHITE_NOISE:\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = 2 * (Math.random() - 0.5);\n                            outputRs[i] = 2 * (Math.random() - 0.5);\n                        }\n\n                        break;\n                    case NoiseModule.PINK_NOISE:\n                        // ref: https://noisehack.com/generate-noise-web-audio-api/\n                        let b0 = 0;\n                        let b1 = 0;\n                        let b2 = 0;\n                        let b3 = 0;\n                        let b4 = 0;\n                        let b5 = 0;\n                        let b6 = 0;\n\n                        for (let i = 0; i < bufferSize; i++) {\n                            const white = (Math.random() * 2) - 1;\n\n                            b0 = (0.99886 * b0) + (white * 0.0555179);\n                            b1 = (0.99332 * b1) + (white * 0.0750759);\n                            b2 = (0.96900 * b2) + (white * 0.1538520);\n                            b3 = (0.86650 * b3) + (white * 0.3104856);\n                            b4 = (0.55000 * b4) + (white * 0.5329522);\n                            b5 = (-0.7616 * b5) - (white * 0.0168980);\n\n                            outputLs[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + (white * 0.5362);\n                            outputRs[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + (white * 0.5362);\n\n                            outputLs[i] *= 0.11;\n                            outputRs[i] *= 0.11;\n\n                            b6 = white * 0.115926;\n                        }\n\n                        break;\n                    case NoiseModule.BROWNIAN_NOISE:\n                        // ref: https://noisehack.com/generate-noise-web-audio-api/\n                        for (let i = 0; i < bufferSize; i++) {\n                            const white = (Math.random() * 2) - 1;\n\n                            outputLs[i] = (lastOut + (0.02 * white)) / 1.02;\n                            outputRs[i] = (lastOut + (0.02 * white)) / 1.02;\n\n                            lastOut = (lastOut + (0.02 * white)) / 1.02;\n\n                            outputLs[i] *= 3.5;\n                            outputRs[i] *= 3.5;\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n            }\n        };\n\n        return this;\n    }\n\n    /** @override */\n    stop() {\n        const stopTime = this.context.currentTime;\n\n        this.envelopegenerator.stop(stopTime);\n        this.off(stopTime);\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[NoiseModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Vocal Canceler.\n * @constructor\n */\nexport class VocalCanceler {\n    constructor() {\n        this.depth = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|VocalCanceler} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method removes vocal part in the played audio.\n     * @param {number} dataL This argument is gain level for Left channel.\n     * @param {number} dataR This argument is gain level for Right channel.\n     * @return {number} This is returned as audio data except vocal part.\n     */\n    start(dataL, dataR) {\n        return dataL - (this.depth * dataR);\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule VocalCanceler]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { VocalCanceler } from './VocalCanceler';\n\n/**\n * This subclass defines properties for playing the single audio.\n * This class creates audio player that has higher features than `HTMLAudioElment`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {SoundModule}\n */\nexport class AudioModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.source = context.createBufferSource();  // for the instance of `AudioBufferSourceNode`\n        this.buffer = null;                          // for the instance of `AudioBuffer`\n\n        this.currentTime = 0;\n\n        this.paused = true;\n\n        this.callbacks = {\n            'decode' : () => {},\n            'ready'  : () => {},\n            'start'  : () => {},\n            'stop'   : () => {},\n            'update' : () => {},\n            'ended'  : () => {},\n            'error'  : () => {}\n        };\n\n        this.vocalcanceler = new VocalCanceler();\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    setup(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = 0;\n            let min = 0;\n            let max = 0;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return this.source.playbackRate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1024;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.source.playbackRate.value = v;\n                    }\n\n                    break;\n                case 'loop'   :\n                case 'looping':\n                    if (value === undefined) {\n                        return this.source.loop;\n                    }\n\n                    this.source.loop = Boolean(value);\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    if (this.buffer instanceof AudioBuffer) {\n                        v   = parseFloat(value);\n                        max = this.buffer.duration;\n                        min = 0;\n\n                        if ((v >= min) && (v <= max)) {\n                            if (this.paused) {\n                                this.currentTime = v;\n                            } else {\n                                this.stop();\n                                this.start(v);\n                            }\n                        }\n                    } else {\n                        this.currentTime = 0;\n                    }\n\n                    break;\n                case 'duration':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.duration : 0;  // Getter only\n                case 'samplerate':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.sampleRate : this.sampleRate;  // Getter only\n                case 'channels':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.numberOfChannels : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n     * @param {ArrayBuffer} arrayBuffer This argument is the instance of `ArrayBuffer`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    ready(arrayBuffer) {\n        if (arrayBuffer instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.buffer = buffer;\n\n                this.analyser.start('timeOverviewL', buffer);\n                this.analyser.start('timeOverviewR', buffer);\n\n                this.callbacks.ready(buffer);\n            };\n\n            this.context.decodeAudioData(arrayBuffer, successCallback, this.callbacks.error);\n\n            this.callbacks.decode(arrayBuffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts audio from the designated time.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.buffer instanceof AudioBuffer) && this.paused) {\n            const startTime = this.context.currentTime;\n\n            const pos = parseFloat(position);\n\n            this.currentTime = ((pos >= 0) && (pos <= this.buffer.duration)) ? pos : 0;\n\n            const playbackRate = this.source.playbackRate.value;\n            const loop         = this.source.loop;\n\n            this.source = this.context.createBufferSource();\n\n            // for legacy browsers\n            this.source.start = this.source.start || this.source.noteGrainOn;\n            this.source.stop  = this.source.stop  || this.source.noteOff;\n\n            this.source.buffer             = this.buffer;\n            this.source.playbackRate.value = playbackRate;\n            this.source.loop               = loop;\n\n            // AudioBufferSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            this.source.start(startTime, pos, (this.buffer.duration - pos));\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            this.paused = false;\n\n            this.on(startTime);\n\n            this.callbacks.start(this.source, this.currentTime);\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (this.currentTime < Math.floor(this.source.buffer.duration)) {\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n\n                            this.currentTime += ((1 * this.source.playbackRate.value) / this.source.buffer.sampleRate);\n\n                            this.callbacks.update(this.source, this.currentTime);\n                        }\n\n                        this.analyser.timeOverviewL.update(this.currentTime);\n                        this.analyser.timeOverviewR.update(this.currentTime);\n                    } else {\n                        if (this.source.loop) {\n                            this.currentTime = 0;\n                        } else {\n                            this.end();\n                        }\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops audio.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.buffer instanceof AudioBuffer) && !this.paused) {\n            const stopTime = this.context.currentTime;\n\n            this.source.stop(stopTime);\n\n            this.off(stopTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Clear\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            this.paused = true;\n            this.callbacks.stop(this.source, this.currentTime);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBufferSourceNode`.\n     * @return {AudioBufferSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops audio according to audio state.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    toggle(position, connects, processCallback) {\n        if (this.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method rewinds audio.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    end() {\n        this.stop();\n        this.currentTime = 0;\n        this.callbacks.ended(this.source, this.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBuffer` exists.\n     * @return {boolean} If the instance of `AudioBuffer` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isBuffer() {\n        return this.buffer instanceof AudioBuffer;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBufferSourceNode` exists.\n     * @return {boolean} If the instance of `AudioBufferSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSource() {\n        return (this.source instanceof AudioBufferSourceNode) && (this.source.buffer instanceof AudioBuffer);\n    }\n\n    /**\n     * This method determines whether the audio is paused.\n     * @return {boolean} If the audio is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        return this.paused;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.audio = {\n            'playbackrate'  : this.isSource() ? this.source.playbackRate.value : 1,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule]';\n    }\n}\n","'use strict';\n\nimport { AudioModule }  from '../AudioModule';\n\n/**\n * This class defines properties for processing sound data from `HTMLMediaElement`.\n * Namely, this class creates audio player that has higher features from `HTMLMediaElement`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {AudioModule}\n */\nexport class MediaModule extends AudioModule {\n    static AUDIO = 'audio';\n    static VIDEO = 'video';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.source = null;  // for the instance of `MediaElementAudioSourceNode`\n        this.media  = null;  // for the instance of `HTMLMediaElement`\n        this.ext    = '';    // 'wav', 'ogg', 'mp3, 'webm', 'ogv', 'mp4' ...etc\n\n        this.playbackRate = 1;\n        this.controls     = false;\n        this.loop         = false;\n        this.muted        = false;\n        this.autoplay     = false;\n\n        // The keys are the event interfaces that are defined by `HTMLMediaElement`.\n        // For example, `loadstart`, `loadedmetadata`, `loadeddata`, `canplay`, `canplaythrough`, `timeupdate`, `ended` ...etc\n        this.listeners = {};\n    }\n\n    /**\n     * This method gets `HTMLMediaElement` and selects media format. In addition, this method adds event listeners that are defined by `HTMLMediaElement`.\n     * @param {HTMLAudioElement|HTMLVideoElement} media This argument is either `HTMLAudioElement` or `HTMLVideoElement`.\n     * @param {Array.<string>|string} formats This argument is usable media format. For example, 'wav', 'ogg', 'webm', 'mp4' ...etc.\n     * @param {object} listeners This argument is event handlers that are defined by `HTMLMediaElement`.\n     * @param {boolean} autoplay This argument is in order to determine autoplay. The default value is `false`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    setup(media, formats, listeners, autoplay) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('media' in properties) {\n                media = properties.media;\n            }\n\n            if ('formats' in properties) {\n                formats = properties.formats;\n            }\n\n            if ('listeners' in properties) {\n                listeners = properties.listeners;\n            }\n\n            if ('autoplay' in properties) {\n                autoplay = properties.autoplay;\n            }\n        }\n\n        let type = '';\n\n        if (media instanceof HTMLAudioElement) {\n            type = MediaModule.AUDIO;\n        } else if (media instanceof HTMLVideoElement) {\n            type = MediaModule.VIDEO;\n        } else {\n            return this;\n        }\n\n        this.media = media;\n\n        if (!Array.isArray(formats)) {\n            formats = [formats];\n        }\n\n        for (const format of formats) {\n            const f = `${type}/${String(format).toLowerCase()}`;\n\n            if (/^(?:maybe|probably)/.test(this.media.canPlayType(f))) {\n                this.ext = format;\n                break;\n            }\n        }\n\n        if (Object.prototype.toString.call(listeners) === '[object Object]') {\n            for (const k in listeners) {\n                this.listeners[k.toLowerCase()] = (Object.prototype.toString.call(listeners[k]) === '[object Function]') ? listeners[k] : () => {};\n            }\n        }\n\n        this.autoplay = Boolean(autoplay);\n\n        // in the case of autoplay, `loadstart` event not fire\n        if (this.autoplay && !(this.source instanceof MediaElementAudioSourceNode)) {\n            this.source = this.context.createMediaElementSource(this.media);\n        }\n\n        if (this.autoplay) {\n            this.stop(() => this.start(this.media.currentTime), () => {});\n        }\n\n        this.media.addEventListener('loadstart', event => {\n            // To create the instance of `MediaElementAudioSourceNode` again causes error to occur\n            if (!(this.source instanceof MediaElementAudioSourceNode)) {\n                this.source = this.context.createMediaElementSource(this.media);\n            }\n\n            if ('loadstart' in this.listeners) {\n                this.listeners.loadstart(event);\n            }\n        }, false);\n\n        this.media.addEventListener('ended', event => {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            if ('ended' in this.listeners) {\n                this.listeners.ended(event);\n            }\n        }, false);\n\n        for (const k in this.listeners) {\n            this.media.addEventListener(k, event => {\n                this.listeners[(event.type).toLowerCase()](event);\n            }, false);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|MediaModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let r;\n\n            if (k === 'mastervolume') {\n                r = super.param(k, value);\n            }\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.playbackRate : this.playbackRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.5;  // for Chrome\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLMediaElement) {\n                            this.media.playbackRate = v;\n                        }\n\n                        this.playbackRate = v;\n                    }\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.currentTime : 0;\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        v   = parseFloat(value);\n                        min = 0;\n                        max = this.media.duration;\n\n                        if ((v >= min) && (v <= max)) {\n                            this.media.currentTime = v;\n                        }\n                    }\n\n                    break;\n                case 'loop'    :\n                case 'muted'   :\n                case 'controls':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media[k] : this[k];\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        this.media[k] = Boolean(value);\n                    }\n\n                    this[k] = Boolean(value);\n\n                    break;\n                case 'width' :\n                case 'height':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLVideoElement) ? this.media[k] : 0;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLVideoElement) {\n                            this.media[k] = v;\n                        }\n                    }\n\n                    break;\n                case 'duration':\n                    return this.media.duration;  // Getter only\n                case 'channels':\n                    return (this.source instanceof MediaElementAudioSourceNode) ? this.source.channelCount : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method prepares for playing the media anytime after loading the media resource.\n     * @param {string} source This argument is path name or `Data URL` or `Object URL` for the media resource.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    ready(source) {\n        const src = String(source);\n\n        try {\n            // `Data URL` or `Object URL` ?\n            if ((src.indexOf('data:') !== -1) || (src.indexOf('blob:') !== -1) || (this.ext === '')) {\n                this.media.src = src;  // `Data URL` or `Object URL` or Full path\n            } else {\n                this.media.src = `${src}.${this.ext}`;  // Path\n            }\n        } catch (error) {\n            throw new Error('The designated resource cannot be loaded.');\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts media from the designated time.\n     * @param {number} position This argument is the time that media is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.source instanceof MediaElementAudioSourceNode) && this.media.paused) {\n            // MediaElementAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            const promise = this.media.play();\n\n            promise.then(() => {\n                const pos = parseFloat(position);\n\n                this.media.currentTime  = ((pos >= 0) && (pos <= this.media.duration)) ? pos : 0;\n                this.media.playbackRate = this.playbackRate;\n                this.media.controls     = this.controls;\n                this.media.loop         = this.loop;\n                this.media.muted        = this.muted;\n\n                this.on(this.context.currentTime);\n\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                const bufferSize = this.processor.bufferSize;\n\n                if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                    this.processor.onaudioprocess = processCallback;\n                } else {\n                    this.processor.onaudioprocess = event => {\n                        const inputLs  = event.inputBuffer.getChannelData(0);\n                        const inputRs  = event.inputBuffer.getChannelData(1);\n                        const outputLs = event.outputBuffer.getChannelData(0);\n                        const outputRs = event.outputBuffer.getChannelData(1);\n\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n                        }\n                    };\n                }\n            }).catch(() => {\n                this.stop(() => {\n                    if (this.autoplay) {\n                        this.media.muted  = this.muted = true;\n                        this.media.volume = 0;\n                    }\n\n                    this.start(position, connects, processCallback);\n                }, () => {\n                });\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops media.\n     * @param {function} successCallback This argument is invoked when `HTMLMediaElement#play` is successful.\n     * @param {function} errorCallback This argument is invoked when `HTMLMediaElement#play` is failure.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    stop(successCallback, errorCallback) {\n        if ((this.source instanceof MediaElementAudioSourceNode) && !this.media.paused) {\n            // ref: https://developers.google.com/web/updates/2017/06/play-request-was-interrupted\n            this.media.play()\n                .then(() => {\n                    this.media.pause();\n\n                    this.off(this.context.currentTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n\n                    if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                        successCallback();\n                    }\n\n                    return Promise.resolve();\n                })\n                .catch(error => {\n                    if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                        errorCallback(error);\n                    }\n\n                    return Promise.reject(error);\n                });\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaElementAudioSourceNode`.\n     * @return {MediaElementAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops media according to media state.\n     * @param {number} position This argument is time that media is started at.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    toggle(position, connects, processCallback) {\n        if (this.media.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `HTMLMediaElement` exists.\n     * @return {boolean} If the instance of `HTMLMediaElement` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isMedia() {\n        return this.media instanceof HTMLMediaElement;\n    }\n\n    /**\n     * This method determines whether the instance of `MediaElementAudioSourceNode` exists.\n     * @return {boolean} If the instance of `MediaElementAudioSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isSource() {\n        return this.source instanceof MediaElementAudioSourceNode;\n    }\n\n    /**\n     * This method determines whether the media is paused.\n     * @return {boolean} If the media is paused or does not exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isPaused() {\n        return (this.media instanceof HTMLMediaElement) ? this.media.paused : true;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.media = {\n            'playbackrate'  : this.playbackRate,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        delete params.audio;\n\n        return params;\n    }\n\n    /**\n     * This method requests Picture In Picture (PIP).\n     * @return {Promise} This is returned as `Promise`.\n     */\n    requestPictureInPicture() {\n        if (!(this.media instanceof HTMLVideoElement)) {\n            return Promise.reject();\n        }\n\n        if (!('pictureInPictureEnabled' in document)) {\n            return Promise.reject();\n        }\n\n        if (!document.pictureInPictureEnabled) {\n            return Promise.reject();\n        }\n\n        if (this.media.disablePictureInPicture) {\n            return Promise.reject();\n        }\n\n        if (this.media.readyState === 0) {\n            return Promise.reject();\n        }\n\n        if (this.media === document.pictureInPictureElement) {\n            return Promise.reject();\n        }\n\n        return this.media.requestPictureInPicture();\n    }\n\n    /**\n     * This method exits from Picture In Picture (PIP).\n     * @return {Promise} This is returned as `Promise`.\n     */\n    exitPictureInPicture() {\n        if (!(this.media instanceof HTMLVideoElement)) {\n            return Promise.reject();\n        }\n\n        if (!('pictureInPictureEnabled' in document)) {\n            return Promise.reject();\n        }\n\n        if (!document.pictureInPictureEnabled) {\n            return Promise.reject();\n        }\n\n        if (this.media.disablePictureInPicture) {\n            return Promise.reject();\n        }\n\n        if (this.media.readyState === 0) {\n            return Promise.reject();\n        }\n\n        if (this.media !== document.pictureInPictureElement) {\n            return Promise.reject();\n        }\n\n        return document.exitPictureInPicture();\n    }\n\n    /** @override */\n    toString() {\n        return '[MediaModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Noise Gate.\n * @constructor\n */\nexport class NoiseGate {\n    constructor() {\n        this.level = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|NoiseGate} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'level':\n                    if (value === undefined) {\n                        return this.level;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.level = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method detects background noise and removes this.\n     * @param {number} data This argument is amplitude (between -1 and 1).\n     * @return {number} This is returned as 0 or the raw data.\n     */\n    start(data) {\n        const d = Math.abs(parseFloat(data));\n\n        // data : The amplitude is equal to argument.\n        // 0    : Because signal is detected as background noise, the amplitude is 0.\n        return (d > this.level) ? data : 0;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule NoiseGate]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { NoiseGate }  from './NoiseGate';\n\n/**\n * This class defines properties that processes sound data from WebRTC in Web Audio API.\n * @constructor\n * @extends {SoundModule}\n */\nexport class StreamModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        // for the instance of `MediaStreamAudioSourceNode`\n        this.source = null;\n\n        // for `navigator.mediaDevices.getUserMedia`\n        this.constraints = {\n            'audio' : true,\n            'video' : false\n        };\n\n        this.callbacks = {\n            'stream' : () => {},\n            'error'  : () => {}\n        };\n\n        this.output = true;\n\n        this.isStop = true;\n\n        this.noisegate = new NoiseGate();\n    }\n\n    /**\n     * This method sets up for using WebRTC.\n     * @param {object} constraints This argument is the 1st argument for `getUserMedia`.\n     * @param {function} streamCallback This argument is invoked on streaming.\n     * @param {function} errorCallback This argument is invoked when error occurs on streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    setup(constraints, streamCallback, errorCallback) {\n        if (Object.prototype.toString.call(constraints) === '[object Object]') {\n            this.constraints = constraints;\n        }\n\n        if (Object.prototype.toString.call(streamCallback) === '[object Function]') {\n            this.callbacks.stream = streamCallback;\n        }\n\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            this.callbacks.error = errorCallback;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|StreamModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            switch (k) {\n                case 'output':\n                    if (value === undefined) {\n                        return this.output;\n                    }\n\n                    this.output = Boolean(value);\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    ready() {\n        return this;\n    }\n\n    /**\n     * This method starts streaming.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    start(connects, processCallback) {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new Error('Cannot use WebRTC.');\n        }\n\n        const bufferSize = this.processor.bufferSize;\n\n        let isAnalyser = false;\n\n        const start = (stream, connects, processCallback) => {\n            this.source = this.context.createMediaStreamSource(stream);\n\n            // MediaStreamAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            if (!this.output) {\n                this.mastervolume.disconnect(0);\n\n                // for analyser\n                this.mastervolume.connect(this.analyser.input);\n\n                // for recording\n                this.mastervolume.connect(this.recorder.processor);\n                this.recorder.processor.connect(this.context.destination);\n\n                // for session\n                this.mastervolume.connect(this.session.sender);\n                this.session.sender.connect(this.context.destination);\n            }\n\n            this.on(this.context.currentTime);\n\n            if (!isAnalyser) {\n                this.analyser.start('time');\n                this.analyser.start('fft');\n                isAnalyser = true;\n            }\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.noisegate.start(inputLs[i]);\n                        outputRs[i] = this.noisegate.start(inputRs[i]);\n                    }\n                };\n            }\n        };\n\n        this.isStop = false;\n\n        navigator.mediaDevices.getUserMedia(this.constraints).then(stream => {\n            if (this.isStop) {\n                return;\n            }\n\n            start(stream, connects, processCallback);\n            this.callbacks.stream(stream);\n        }).catch(error => {\n            this.callbacks.error(error);\n        });\n\n        return this;\n    }\n\n    /**\n     * This method stops streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        this.source = null;\n\n        this.off(this.context.currentTime, true);\n\n        this.analyser.stop('time');\n        this.analyser.stop('fft');\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        this.isStop = true;\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaStreamAudioSourceNode`.\n     * @return {MediaStreamAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops streaming according to current state.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     */\n    toggle(connects, processCallback) {\n        if (this.isStreaming()) {\n            this.stop();\n        } else {\n            this.start(connects, processCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether streaming is active.\n     * @return {boolean} If streaming is active, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStreaming() {\n        return !this.isStop;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.stream = {\n            'output'    : this.output,\n            'noisegate' : {\n                'level' : this.noisegate.param('level')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule]';\n    }\n}\n","'use strict';\n\nimport { SoundModule } from '../SoundModule';\nimport { OscillatorModule } from '../OscillatorModule';\nimport { OneshotModule } from '../OneshotModule';\nimport { AudioModule } from '../AudioModule';\nimport { MediaModule } from '../MediaModule';\nimport { StreamModule } from '../StreamModule';\n\n/**\n * This class defines properties for mixing sound sources that is defined in this library.\n * @constructor\n * @extends {SoundModule}\n */\nexport class MixerModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        /** @type {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} */\n        this.sources = [];\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method mixes sound source.\n     * @param {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} sources This argument is the array of sound source that is defined by this library.\n     * @return {MixerModule} This is returned for method chain.\n     */\n    mix(sources) {\n        if (!Array.isArray(sources)) {\n            sources = [sources];\n        }\n\n        this.sources = sources;\n\n        for (const source of this.sources) {\n            if (!((source instanceof OscillatorModule) || (source instanceof OneshotModule) || (source instanceof AudioModule) || (source instanceof MediaModule) || (source instanceof StreamModule))) {\n                return this;\n            }\n\n            const stopTime = this.context.currentTime;\n\n            this.off(stopTime, false);\n\n            source.analyser.stop('time');\n            source.analyser.stop('fft');\n            source.isAnalyser = false;\n\n            source.recorder.stop();\n            source.session.close();\n\n            // ScriptProcessorNode (each sound source) -> ScriptProcessorNode (Mix sound sources)\n            source.processor.disconnect(0);\n            source.processor.connect(this.processor);\n        }\n\n        // (... ->) ScriptProcessorNode (Mix sound sources) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor);\n\n        const startTime = this.context.currentTime;\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.processor.onaudioprocess = event => {\n            const inputLs  = event.inputBuffer.getChannelData(0);\n            const inputRs  = event.inputBuffer.getChannelData(1);\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            // Stop ?\n            let isStop = false;\n\n            for (const source of sources) {\n                if ((source instanceof OscillatorModule) && source.envelopegenerator.isStop()) {\n                    isStop = true;\n                } else if ((source instanceof OneshotModule) && source.isStop) {\n                    isStop = true;\n                } else if ((source instanceof AudioModule) && source.paused) {\n                    isStop = true;\n                } else if ((source instanceof MediaModule) && source.media.paused) {\n                    isStop = true;\n                } else if ((source instanceof StreamModule) && source.isStop) {\n                    isStop = true;\n                }\n            }\n\n            if (isStop) {\n                const stopTime = this.context.currentTime;\n\n                this.on(stopTime, true);\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n\n                // Stop `onaudioprocess` event\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n            } else {\n                outputLs.set(inputLs);\n                outputRs.set(inputRs);\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of sound source that is mixed in this class.\n     * @param {number} index This argument is required in the case of designating sound source.\n     * @return {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>|OscillatorModule|OneshotModule|AudioModule|MediaModule|StreamModule}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /** @override */\n    toString() {\n        return '[MixerModule]';\n    }\n}\n","'use strict';\n\n/**\n * This class defines properties for using Web MIDI API.\n * @constructor\n */\nexport class MIDI {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.midiAccess = null;  // for the instance of `MIDIAccess`\n        this.inputs     = [];    // for the instances of `MIDIInput`\n        this.outputs    = [];    // for the instances of `MIDIOutput`\n    }\n\n    /**\n     * This method invokes `requestMIDIAccess` and gets objects for using Web MIDI API.\n     * @param {boolean} sysex This argument is in order to select whether using system exclusive message.\n     * @param {function} successCallback This argument is invoked when `requestMIDIAccess` succeeds.\n     * @param {function} errorCallback This argument is invoked when `requestMIDIAccess` fails.\n     * @return {MIDI} This is returned for method chain.\n     */\n    setup(sysex, successCallback, errorCallback) {\n        if (!navigator.requestMIDIAccess) {\n            throw new Error('Cannot use Web MIDI API.');\n        }\n\n        navigator.requestMIDIAccess({ sysex : Boolean(sysex) }).then(midiAccess => {\n            this.midiAccess = midiAccess;\n\n            if (Object.prototype.toString.call(midiAccess) === '[object Function]') {\n                // Legacy Chrome\n                this.inputs  = midiAccess.inputs();\n                this.outputs = midiAccess.outputs();\n            } else {\n                // Chrome 39 and later\n                const inputIterator  = midiAccess.inputs.values();\n                const outputIterator = midiAccess.outputs.values();\n\n                for (let i = inputIterator.next(); !i.done; i = inputIterator.next()) {\n                    this.inputs.push(i.value);\n                }\n\n                for (let o = outputIterator.next(); !o.done; o = outputIterator.next()) {\n                    this.outputs.push(o.value);\n                }\n            }\n\n            if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                successCallback(this.midiAccess, this.inputs, this.outputs);\n            }\n        }).catch(error => {\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(error);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MIDIAccess`.\n     * @return {MIDIAccess}\n     */\n    get() {\n        return this.midiAccess;\n    }\n\n    /** @override */\n    toString() {\n        return '[MIDI]';\n    }\n}\n","'use strict';\n\nimport { OscillatorModule } from '../OscillatorModule';\nimport { OneshotModule } from '../OneshotModule';\n\n/**\n * This class defines properties for playing the MML (Music Macro Language).\n * @constructor\n */\nexport class MML {\n    static ONE_MINUTES       = 60;  // sec\n    static EQUAL_TEMPERAMENT = 12;\n    static QUARTER_NOTE      = 4;\n    static REGEXP_MML        = /\\s*(?:T\\d+)\\s*|\\s*(?:O\\d+)\\s*|\\s*(?:(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*\\s*/gi;\n    static REGEXP_TEMPO      = /T\\d+/i;\n    static REGEXP_OCTAVE     = /O\\d+/i;\n    static REGEXP_NOTE       = /(?:(?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*/i;\n    static REGEXP_CHORD      = /((?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*/i;\n    static REGEXP_DURATION   = /(?:[CDEFGABR][#+-]?)+((?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*)/i;\n    static REST              = 'R';\n    static ERROR_STRING      = 'MML';\n    static ERROR_TEMPO       = 'TEMPO';\n    static ERROR_OCTAVE      = 'OCTAVE';\n    static ERROR_NOTE        = 'NOTE';\n\n    /**\n     * This class (static) method computes index by octave and pitch name.\n     * @param {number} octave This argument is octave.\n     * @param {string} pitchname This argument is pitch name.\n     * @return {number|string} This is returned as index that is computed by octave and pitch name.\n     */\n    static computeIndex = (octave, pitchname) => {\n        let index = 0;\n\n        switch (pitchname) {\n            case 'C':\n                index = 3;\n                break;\n            case 'D':\n                index = 5;\n                break;\n            case 'E':\n                index = 7;\n                break;\n            case 'F':\n                index = 8;\n                break;\n            case 'G':\n                index = 10;\n                break;\n            case 'A':\n                index = 12;\n                break;\n            case 'B':\n                index = 14;\n                break;\n            case MML.REST:\n                return MML.REST;\n            default :\n                break;\n        }\n\n        const computedIndex = (MML.EQUAL_TEMPERAMENT * (octave - 1)) + index;\n\n        return (computedIndex >= 0) ? computedIndex : -1;\n    };\n\n    /**\n     * This class (static) method computes frequency from the index that corresponds to the 12 equal temperament.\n     * @param {number} index This argument is the index that corresponds to the 12 equal temperament.\n     *     For example, This value is between 0 and 88 in the case of piano.\n     * @return {number} This is returned as frequency.\n     */\n    static computeFrequency = index => {\n        // The 12 equal temperament\n        //\n        // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n        //\n        // A * 1.059463 -> A# (half up)\n\n        const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n        const MIN_A           = 27.5;\n\n        return (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : -1;\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        // for the array of `OscillatorNode` or `OscillatorModule` or `OneshotModule`\n        this.source = null;\n\n        this.sequences = [];  /** @type {Array.<Array.<object>>} */\n        this.timerids  = [];  /** @type {Array.<number>} */\n        this.prev      = [];  /** @type {Array.<object>} */\n\n        this.offset = 0;\n\n        this.callbacks = {\n            'start' : () => {},\n            'stop'  : () => {},\n            'ended' : () => {},\n            'error' : () => {}\n        };\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {MML} This is returned for method chain.\n     */\n    setup(key, value) {\n        if ((arguments.length > 0) && (Object.prototype.toString.call(arguments[0]) === '[object Object]')) {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else if (arguments.length > 1) {\n            const k = String(key).toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method parses MML string.\n     * @param {Array.<OscillatorNode>|OscillatorModule|OneshotModule} source This argument is in order to select sound source.\n     * @param {Array.<string>} mmls This argument is MML strings.\n     * @param {number} offset This argument is in order to correct the index of one-shot audio.\n     * @return {Array.<Array.<object>>} This is returned as array that contains object for playing the MML.\n     */\n    ready(source, mmls, offset) {\n        this.offset = parseInt(offset, 10);\n\n        if (this.source !== null) {\n            this.stop();  // Stop the previous MML\n        }\n\n        // Clear\n        this.sequences.length = 0;\n        this.timerids.length  = 0;\n        this.prev.length      = 0;\n\n        if (Array.isArray(source)) {\n            for (const s of source) {\n                if (!(s instanceof OscillatorNode)) {\n                    return this;\n                }\n            }\n\n            this.source = source;\n        } else if (source instanceof OscillatorNode) {\n            this.source = [source];\n        } else if ((source instanceof OscillatorModule) || (source instanceof OneshotModule)) {\n            this.source = source;\n        } else {\n            return this;\n        }\n\n        if (!Array.isArray(mmls)) {\n            mmls = [mmls];\n        }\n\n        while (mmls.length > 0) {\n            const mml = String(mmls.shift());\n\n            /** @type {Array.<object>}*/\n            const sequences = [];\n\n            const notes = mml.match(MML.REGEXP_MML);\n\n            if (notes === null) {\n                this.callbacks.error(MML.ERROR_STRING, '');\n                return;\n            }\n\n            let indexes     = [];\n            let frequencies = [];\n\n            let start    = 0;\n            let duration = 0;\n            let stop     = 0;\n\n            let currentTime = 0;\n            let timeOf4note = null;\n            let octave      = null;\n\n            while (notes.length > 0) {\n                const note = notes.shift().trim();\n\n                if (MML.REGEXP_TEMPO.test(note)) {\n                    const bpm = parseInt(note.slice(1), 10);\n\n                    if (bpm > 0) {\n                        timeOf4note = MML.ONE_MINUTES / bpm;\n                    } else {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_OCTAVE.test(note)) {\n                    octave = parseInt(note.slice(1), 10);\n\n                    if (octave < 0) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_NOTE.test(note)) {\n                    if (timeOf4note === null) {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n\n                    if (octave === null) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n\n                    const chord = note.match(MML.REGEXP_CHORD)[1];\n\n                    indexes = [];\n\n                    for (let i = 0, len = chord.length; i < len; i++) {\n                        const pitchname = chord.charAt(i);\n\n                        let index = MML.computeIndex(octave, pitchname.toUpperCase());\n\n                        // Half up or Half down (Sharp or Flat) ?\n                        switch (chord.charAt(i + 1)) {\n                            case '#':\n                            case '+':\n                                // Half up (Sharp)\n                                index++;\n                                i++;\n                                break;\n                            case '-':\n                                // Half down (Flat)\n                                index--;\n                                i++;\n                                break;\n                            default:\n                                // Normal (Natural)\n                                break;\n                        }\n\n                        // in the case of chord\n                        if (index >= indexes[0]) {\n                            index -= MML.EQUAL_TEMPERAMENT;\n                        }\n\n                        // Validation\n                        if (index < 0) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        indexes.push(index);\n                    }\n\n                    frequencies = [];\n\n                    for (const index of indexes) {\n                        const frequency = (index !== MML.REST) ? MML.computeFrequency(index) : 0;\n\n                        // Validation\n                        if (frequency === -1) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        frequencies.push(frequency);\n                    }\n\n                    const durations = note.split('&');  // Tie\n\n                    while (durations.length > 0) {\n                        const d = durations.shift().match(MML.REGEXP_DURATION)[1];\n\n                        switch (parseInt(d, 10)) {\n                            case   1:\n                            case   2:\n                            case   4:\n                            case   8:\n                            case  16:\n                            case  32:\n                            case  64:\n                            case 128:\n                            case 256:\n                                const numOf4note = MML.QUARTER_NOTE / parseInt(d, 10);\n\n                                // a dotted note ?\n                                duration += (d.indexOf('.') !== -1) ? ((1.5 * numOf4note) * timeOf4note) : (numOf4note * timeOf4note);\n                                break;\n                            case   6:\n                                // Triplet of half note\n                                duration += (2 * timeOf4note) / 3;\n                                break;\n                            case  12:\n                                // Triplet of quarter note\n                                duration += timeOf4note / 3;\n                                break;\n                            case  18:\n                                // Nonuplet of half note\n                                duration += (2 * timeOf4note) / 9;\n                                break;\n                            case  24:\n                                // Triplet of 8th note\n                                duration += (0.5 * timeOf4note) / 3;\n                                break;\n                            case  36:\n                                // Nonuplet of quarter note\n                                duration += timeOf4note / 9;\n                                break;\n                            case  48:\n                                // Triplet of 16th note\n                                duration += (0.25 * timeOf4note) / 3;\n                                break;\n                            case  72:\n                                // Nonuplet of 8th note\n                                duration += (0.5 * timeOf4note) / 9;\n                                break;\n                            case  96:\n                                // Triplet of 32th note\n                                duration += (0.125 * timeOf4note) / 3;\n                                break;\n                            case 144:\n                                // Nonuplet of 16th note\n                                duration += (0.25 * timeOf4note) / 9;\n                                break;\n                            case 192:\n                                // Triplet of 64th note\n                                duration += (0.0625 * timeOf4note) / 3;\n                                break;\n                            default:\n                                this.callbacks.error(MML.ERROR_NOTE, note);\n                                break;\n                        }\n                    }\n\n                    start = currentTime;\n                    stop  = start + duration;\n\n                    currentTime += duration;\n\n                    sequences.push({\n                        'indexes'     : indexes,\n                        'frequencies' : frequencies,\n                        'start'       : start,\n                        'duration'    : duration,\n                        'stop'        : stop\n                    });\n\n                    duration = 0;\n                }\n            }\n\n            if (sequences.length > 0) {\n                // `start` method gets element by `pop` for performance\n                sequences.reverse();\n\n                this.sequences.push(sequences);\n                this.timerids.push(null);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts the designated MML part. Moreover, this method schedules next sound.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>|Array.<AudioNode>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    start(part, connects, processCallback) {\n        const p = parseInt(part, 10);\n\n        if ((p >= 0) && (p < this.sequences.length)) {\n            if (!Array.isArray(this.sequences[p])) {\n                return this;\n            }\n\n            // End ?\n            if (this.sequences[p].length === 0) {\n                this.stop(processCallback);\n                this.callbacks.ended();\n\n                return this;\n            }\n\n            const sequence = this.sequences[p].pop();\n\n            if (Array.isArray(this.source)) {\n                for (let i = 0, len = this.source.length; i < len; i++) {\n                    let source = this.source[i];\n\n                    const type   = source.type;\n                    const detune = source.detune.value;\n\n                    source = this.context.createOscillator();\n\n                    // for legacy browsers\n                    source.start = source.start || source.noteOn;\n                    source.stop  = source.stop  || source.noteOff;\n\n                    source.type            = type;\n                    source.frequency.value = sequence.frequencies[i];\n                    source.detune.value    = detune;\n\n                    if (Array.isArray(connects)) {\n                        // OscillatorNode (Input) -> AudioNode -> ... -> AudioNode -> AudioDestinationNode (Output)\n                        source.connect(connects[0]);\n\n                        for (let j = 0, num = connects.length; j < num; j++) {\n                            const node = connects[j];\n\n                            if (j < (num - 1)) {\n                                const next = connects[j + 1];\n\n                                if (!((node instanceof AudioNode) && (next instanceof AudioNode))) {\n                                    return this;\n                                }\n\n                                node.connect(next);\n                            } else {\n                                node.connect(this.context.destination);\n                            }\n                        }\n                    } else {\n                        // OscillatorNode (Input) -> AudioDestinationNode (Output)\n                        source.connect(this.context.destination);\n                    }\n\n                    source.start(this.context.currentTime);\n                    source.stop(this.context.currentTime + sequence.duration);\n\n                    this.source[i] = source;\n                }\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OscillatorModule) {\n                this.source.start(sequence.frequencies, connects, processCallback);\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OneshotModule) {\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    if (sequence.indexes[i] !== MML.REST) {\n                        this.source.start((sequence.indexes[i] + this.offset), connects, processCallback);\n                    }\n\n                    this.callbacks.start(sequence, i, this.offset);\n                }\n            }\n\n            this.timerids[p] = window.setTimeout(() => {\n                if (Array.isArray(this.source)) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.start(sequence, i);\n                    }\n                } else if (this.source instanceof OscillatorModule) {\n                    this.source.stop();\n\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.stop(sequence, i);\n                    }\n                } else if (this.source instanceof OneshotModule) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        if (sequence.indexes[i] !== MML.REST) {\n                            this.source.stop((sequence.indexes[i] + this.offset), processCallback);\n                        }\n\n                        this.callbacks.stop(sequence, i, this.offset);\n                    }\n                }\n\n                // for `MML#stop`\n                this.prev = sequence;\n\n                // Start next sound by recursive call\n                this.start(p, connects, processCallback);\n            }, (sequence.duration * 1000));\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the all of MML parts.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const sequence = this.prev;\n\n        if (sequence.length === 0) {\n            return this;\n        }\n\n        if (Array.isArray(this.source)) {\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OscillatorModule) {\n            this.source.stop();\n\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OneshotModule) {\n            for (const index of sequence.indexes) {\n                if (index !== MML.REST) {\n                    this.source.stop((index + this.offset), processCallback);\n                }\n\n                this.callbacks.stop(sequence, index, this.offset);\n            }\n        }\n\n        for (let i = 0, len = this.timerids.length; i < len; i++) {\n            window.clearTimeout(this.timerids[i]);\n            this.timerids[i] = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the array that contains object for playing the MML.\n     * @param {number} index This argument is required in the case of designating sequence.\n     * @return {Array.<Array.<object>>|Array.<object>}\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sequences.length)) ? this.sequences[i] : this.sequences;\n    }\n\n    /**\n     * This method starts or stops MML according to state.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    toggle(part, connects, processCallback) {\n        if (this.isPaused()) {\n            this.start(part, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the array that is used to play the MML exists.\n     * @return {boolean} If the array exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSequences() {\n        return Array.isArray(this.sequences[0]);\n    }\n\n    /**\n     * This method determines whether the MML is paused.\n     * @return {boolean} If the MML is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        for (const timerid of this.timerids) {\n            if ((timerid === null) || (timerid === undefined)) {\n                // Next timer\n            } else {\n                // Playing the MML\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * This method converts MML to ABC Notation.\n     * @param {string} mml This argument is MML string.\n     * @param {number} X This argument is file number in ABC Notation.\n     * @param {string} T This argument is title in ABC Notation.\n     * @param {string} M This argument is beat in ABC Notation.\n     * @param {string} L This argument is note duration in ABC Notation.\n     * @param {string} K This argument is tone in ABC Notation.\n     * @return {string} This is returned as ABC Notation.\n     */\n    toABC(mml, X, T, M, L, K) {\n        let abc = '';\n\n        abc += `X:${X ? X : 1}\\n`;\n        abc += `T:${T ? T : ''}\\n`;\n        abc += `M:${M ? M : '4/4'}\\n`;\n        abc += `L:${L ? L : '1/256'}\\n`;\n        abc += `K:${K ? K : ''}\\n`;\n\n        const notes = mml.match(MML.REGEXP_MML);\n\n        if (notes === null) {\n            return abc;\n        }\n\n        let octave        = null;\n        let totalDuration = 0;\n\n        while (notes.length > 0) {\n            const note = notes.shift().trim();\n\n            if (MML.REGEXP_TEMPO.test(note)) {\n                const Q = parseInt(note.slice(1), 10);\n\n                if (Q > 0) {\n                    abc += `Q:1/4=${Q}\\n`;\n                } else {\n                    return abc;\n                }\n            } else if (MML.REGEXP_OCTAVE.test(note)) {\n                octave = parseInt(note.slice(1), 10);\n\n                if (octave < 0) {\n                    return abc;\n                }\n            } else if (MML.REGEXP_NOTE.test(note)) {\n                if (octave === null) {\n                    return abc;\n                }\n\n                let splittedNotes = null;\n\n                if (note.indexOf('&') === -1) {\n                    splittedNotes = [note];\n                } else {\n                    splittedNotes = note.split('&');\n                }\n\n                let chord = '';\n\n                while (splittedNotes.length > 0) {\n                    const splittedNote = splittedNotes.shift();\n\n                    const duration = parseInt(splittedNote.replace(/^.+?(\\d+)\\.*$/, '$1'), 10);\n\n                    let n = '';\n                    let d = 0;\n\n                    switch (duration) {\n                        case 1:\n                            n = splittedNote.replace('1', '256');\n                            break;\n                        case 2:\n                            n = splittedNote.replace('2', '128');\n                            break;\n                        case 4:\n                            n = splittedNote.replace('4', '64');\n                            break;\n                        case 8:\n                            n = splittedNote.replace('8', '32');\n                            break;\n                        case 16:\n                            n = splittedNote.replace('16', '16');\n                            break;\n                        case 32:\n                            n = splittedNote.replace('32', '8');\n                            break;\n                        case 64:\n                            n = splittedNote.replace('64', '4');\n                            break;\n                        case 128:\n                            n = splittedNote.replace('128', '2');\n                            break;\n                        case 256:\n                            n = splittedNote.replace('256', '1');\n                            break;\n                        // Tuplet\n                        case 6:\n                            n = `(3${splittedNote.replace('6', '128')}`;\n                            d = 128 / 3;\n                            break;\n                        case 12:\n                            n = `(3${splittedNote.replace('12', '64')}`;\n                            d = 64 / 3;\n                            break;\n                        case 18:\n                            n = `(9${splittedNote.replace('18', '128')}`;\n                            d = 128 / 9;\n                            break;\n                        case 24:\n                            n = `(3${splittedNote.replace('24', '32')}`;\n                            d = 32 / 3;\n                            break;\n                        case 36:\n                            n = `(9${splittedNote.replace('36', '64')}`;\n                            d = 64 / 9;\n                            break;\n                        case 48:\n                            n = `(3${splittedNote.replace('48', '16')}`;\n                            d = 16 / 3;\n                            break;\n                        case 72:\n                            n = `(9${splittedNote.replace('72', '32')}`;\n                            d = 32 / 9;\n                            break;\n                        case 96:\n                            n = `(3${splittedNote.replace('96', '8')}`;\n                            d = 8 / 3;\n                            break;\n                        case 144:\n                            n = `(9${splittedNote.replace('144', '16')}`;\n                            d = 16 / 9;\n                            break;\n                        case 192:\n                            n = `(3${splittedNote.replace('192', '4')}`;\n                            d = 4 / 3;\n                            break;\n                        default:\n                            return abc;\n                    }\n\n                    if (n.indexOf('.') !== -1) {\n                        n = n.replace(/^(.+?)\\d+\\.+$/, `$1${1.5 * parseInt(n.replace(/^.+?(\\d+)\\.+$/, '$1'), 10)}`);\n                    }\n\n                    if (n.indexOf('(') === -1) {\n                        totalDuration += parseInt(n.replace(/^.+?(\\d+)\\.*$/i, '$1'), 10);\n                    } else {\n                        totalDuration += d;\n                    }\n\n                    if (totalDuration >= 256) {\n                        n += ' | ';\n                        totalDuration = 0;\n                    }\n\n                    if (/R/i.test(n)) {\n                        abc += `${n} `;\n                        continue;\n                    }\n\n                    let o = '';\n\n                    switch (octave) {\n                        case 0:\n                            o = ',,,,';\n                            break;\n                        case 1:\n                            o = ',,,';\n                            break;\n                        case 2:\n                            o = ',,';\n                            break;\n                        case 3:\n                            o = ',';\n                            break;\n                        case 5:\n                            o = '\\'';\n                            break;\n                        case 6:\n                            o = '\\'\\'';\n                            break;\n                        case 7:\n                            o = '\\'\\'\\'';\n                            break;\n                        case 4 :\n                        default:\n                            break;\n                    }\n\n                    const matches = n.match(/^(\\(\\d+)?((?:[CDEFGAB][#+-]?)+)(.*)$/i);\n\n                    if (matches === null) {\n                        return abc;\n                    }\n\n                    const tuplet      = matches[1] ? matches[1] : '';\n                    const chordLength = matches[2].length;\n                    const restNote    = matches[3] ? matches[3] : '';\n\n                    let start = 0;\n\n                    if (tuplet.length > 0) {\n                        n = n.replace(/^(?:\\(\\d+)?((?:[CDEFGAB][#+-]?)+)(.*)$/i, '$1$2');\n                    }\n\n                    if (chordLength === 1) {\n                        chord += `${tuplet}${n.slice(0, 1)}${o}${restNote}`;\n                    } else if ((chordLength === 2) && /[#+-]/.test(n.charAt(1))) {\n                        chord += `${tuplet}${n.slice(1, 2)}${n.slice(0, 1)}${o}${restNote}`;\n                    } else {\n                        while (start < chordLength) {\n                            if (start === 0) {\n                                chord += `${tuplet}[`;\n                            }\n\n                            if (/[#+-]/.test(n.charAt(start + 1))) {\n                                chord += `${n.slice((start + 1), (start + 2))}${n.slice(start, (start + 1))}${o}`;\n                                start += 2;\n                            } else {\n                                chord += `${n.slice(start, (start + 1))}${o}`;\n                                start++;\n                            }\n\n                            if (start === chordLength) {\n                                chord += `]${restNote}`;\n                            }\n                        }\n                    }\n\n                    if (splittedNotes.length > 0) {\n                        chord += '&';\n                    } else {\n                        abc += `${chord} `;\n                    }\n                }\n            }\n        }\n\n        return abc.replace(/R/ig, 'z')\n                  .replace(/[#+]/g, '^')\n                  .replace(/-/g, '_')\n                  .replace(/&/g, '-')\n                  .replace(/\\s{2}/g, ' ');\n    }\n\n    /** @override */\n    toString() {\n        return '[MML]';\n    }\n}\n","'use strict';\n\n/**\n * This class (static) method gets audio data as `ArrayBuffer` by Ajax.\n * @param {string} url This argument is URL for audio resource.\n * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when error occurred.\n * @param {function} progressCallback This argument is invoked during receiving audio data.\n */\nexport function ajax(url, timeout, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('url' in properties) {\n            url = properties.url;\n        }\n\n        if ('timeout' in properties) {\n            timeout = properties.timeout;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    // for errorCallback\n    const ERROR_AJAX         = 'error';\n    const ERROR_AJAX_TIMEOUT = 'timeout';\n\n    const xhr = new XMLHttpRequest();\n\n    const t = parseInt(timeout, 10);\n\n    xhr.timeout = (t > 0) ? t : 60000;\n\n    xhr.ontimeout = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX_TIMEOUT);\n        }\n    };\n\n    xhr.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    xhr.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX);\n        }\n    };\n\n    xhr.onload = event => {\n        if (xhr.status === 200) {\n            const arrayBuffer = xhr.response;\n\n            if ((arrayBuffer instanceof ArrayBuffer) && (Object.prototype.toString.call(successCallback) === '[object Function]')) {\n                successCallback(event, arrayBuffer);\n            }\n        }\n    };\n\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n    xhr.send(null);\n}\n\n/**\n * This class (static) method calculates minutes and seconds from the designated time in seconds.\n * @param {number} time This argument is the time in seconds.\n * @return {object} This is returned as associative array that contains `minutes`, `seconds` and `milliseconds` keys.\n */\nexport function convertTime(time) {\n    const t = parseFloat(time);\n\n    if (t >= 0) {\n        const m  = Math.floor(t / 60);\n        const s  = Math.floor(t % 60);\n        const ms = t - parseInt(t, 10);\n\n        return {\n            'minutes'      : m,\n            'seconds'      : s,\n            'milliseconds' : ms\n        };\n    }\n}\n\n/**\n * This class (static) method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n * @param {AudioContext} context This argument is the instance of `AudioContext` for `decodeAudioData` method.\n * @param {ArrayBuffer} arrayBuffer This argument is converted to the instance of `AudioBuffer`.\n * @param {function} successCallback This argument is invoked when `decodeAudioData` method is successful.\n       The 1st argument in this callback function is the instance of `AudioBuffer`.\n * @param {function} errorCallback This argument is invoked when `decodeAudioData` method failed.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function decode(context, arrayBuffer, successCallback, errorCallback) {\n    if (!(context instanceof AudioContext)) {\n        return;\n    }\n\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n        return;\n    }\n\n    if (Object.prototype.toString.call(successCallback) !== '[object Function]') {\n        successCallback = () => {};\n    }\n\n    if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n        errorCallback = () => {};\n    }\n\n    return context.decodeAudioData(arrayBuffer, successCallback, errorCallback);\n}\n\n/**\n * This class (static) method shows `Element` in original size from full screen.\n */\nexport function exitFullscreen() {\n    if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen();\n    } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n    } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n    } else if (document.cancelFullScreen) {\n        document.cancelFullScreen();\n    } else if (document.exitFullscreen) {\n        document.exitFullscreen();\n    } else {\n        throw new Error('Cannot exit from full screen.');\n    }\n}\n\n/**\n * This class (static) method gets the instance of `File` (extends `Blob`).\n * @param {Event} event This argument is the instance of Event by Drag & Drop or `<input type=\"file\">`.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'ObjectURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n * @return {File|ObjectURL} This is returned as the instance of `File` (extends `Blob`) or Object URL.\n */\nexport function file(event, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('event' in properties) {\n            event = properties.event;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(event instanceof Event)) {\n        return;\n    }\n\n    // for the instance of `File` (extends `Blob`)\n    let file = null;\n\n    if (event.type === 'drop') {\n        // Drag & Drop\n        event.stopPropagation();\n        event.preventDefault();\n\n        file = /* ('items' in event.dataTransfer) ? event.dataTransfer.items[0].getAsFile() : */event.dataTransfer.files[0];\n    } else if ((event.type === 'change') && ('files' in event.target)) {\n        // `<input type=\"file\">`\n        file = event.target.files[0];\n    } else {\n        return;\n    }\n\n    if (!(file instanceof File)) {\n        throw new Error('Please upload file.');\n    } else if ((/text/i.test(type)) && (file.type.indexOf('text') === -1)) {\n        throw new Error('Please upload text file.');\n    } else if ((/arraybuffer|dataurl/i.test(type)) && !/audio|video/.test(file.type)) {\n        throw new Error('Please upload audio or video file.');\n    } else {\n        if (/objecturl/i.test(type)) {\n            window.URL = window.URL || window.webkitURL || window.mozURL;\n            return window.URL.createObjectURL(file);\n        }\n\n        read({\n            'file'     : file,\n            'type'     : type,\n            'success'  : successCallback,\n            'error'    : errorCallback,\n            'progress' : progressCallback\n        });\n\n        return file;\n    }\n}\n\n/**\n * This class (static) method shows the designated `Element` in full screen.\n * @param {Element} element This argument is the instance of `Element` that is the target of full screen.\n */\nexport function fullscreen(element) {\n    if (!(element instanceof Element)) {\n        return;\n    }\n\n    if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n    } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n    } else if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else {\n        throw new Error('Cannot change to full screen.');\n    }\n}\n\n/**\n * This class (static) method reads file of audio or text.\n * @param {Blob} file This argument is the instance of `Blob`. This is entity of file.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n */\nexport function read(file, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('file' in properties) {\n            file = properties.file;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(file instanceof Blob)) {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(null, 'FILE_IS_NOT_BLOB');\n        }\n\n        return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    reader.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            let error = '';\n\n            switch (reader.error.code) {\n                case reader.error.NOT_FOUND_ERR:\n                    error = 'NOT_FOUND_ERR';\n                    break;\n                case reader.error.SECURITY_ERR:\n                    error = 'SECURITY_ERR';\n                    break;\n                case reader.error.ABORT_ERR:\n                    error = 'ABORT_ERR';\n                    break;\n                case reader.error.NOT_READABLE_ERR:\n                    error = 'NOT_READABLE_ERR';\n                    break;\n                case reader.error.ENCODING_ERR:\n                    error = 'ENCODING_ERR';\n                    break;\n                default:\n                    error = 'ERR';\n                    break;\n            }\n\n            errorCallback(event, error);\n        }\n    };\n\n    reader.onload = event => {\n        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n            let result = reader.result;\n\n            // Escape `<script>` in the case of text\n            if ((typeof result === 'string') && (result.indexOf('data:') === -1) && (result.indexOf('blob:') === -1)) {\n                result = result.replace(/<(\\/?script.*?)>/gi, '&lt;$1&gt;');\n            }\n\n            successCallback(event, result);\n        }\n    };\n\n    if (/arraybuffer/i.test(type)) {\n        reader.readAsArrayBuffer(file);\n    } else if (/dataurl/i.test(type)) {\n        reader.readAsDataURL(file);\n    } else if (/text/i.test(type)) {\n        reader.readAsText(file, 'UTF-8');\n    }\n}\n\n/**\n * This class (static) method calculates frequency from the index that corresponds to the 12 equal temperament.\n * @param {Array.<number>} indexes This argument is array of index that corresponds to the 12 equal temperament.\n *     For example, This value is between 0 and 88 in the case of piano.\n * @return {Array.<number>} This is returned as array that contains frequencies.\n */\nexport function toFrequencies(indexes) {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n\n    const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n    const MIN_A           = 27.5;\n\n    if (!Array.isArray(indexes)) {\n        indexes = [indexes];\n    }\n\n    const frequencies = new Array(indexes.length);\n\n    for (let i = 0, len = indexes.length; i < len; i++) {\n        const index = parseInt(indexes[i], 10);\n\n        frequencies[i] = (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : 0;\n    }\n\n    return frequencies;\n}\n\n/**\n * This class (static) method creates text file.\n * @param {string} text This argument is string.\n * @return {string} This is returned as text file.\n */\nexport function toTextFile(text) {\n    /**\n     * This function converts string to ASCII string.\n     * @param {string} string This argument is string.\n     * @return {string} This is returned as string that is converted to ASCII string.\n     */\n    const toAscii = string => {\n        let converted = '';\n\n        for (let i = 0, len = string.length; i < len; i++) {\n            const charCode = string.charCodeAt(i);\n\n            if (charCode > 0xFF) {\n                converted += `&#${charCode};`;\n            } else {\n                converted += string.charAt(i);\n            }\n        }\n\n        return converted;\n    };\n\n    const base64  = window.btoa(toAscii(String(text)));\n    const dataURL = `data:text/plain;base64,${base64}`;\n\n    return dataURL;\n}\n","'use strict';\n\nimport { SoundModule } from './SoundModule';\nimport { OscillatorModule } from './OscillatorModule';\nimport { OneshotModule } from './OneshotModule';\nimport { NoiseModule } from './NoiseModule';\nimport { AudioModule } from './AudioModule';\nimport { MediaModule } from './MediaModule';\nimport { StreamModule } from './StreamModule';\nimport { MixerModule } from './MixerModule';\nimport { MIDI } from './MIDI';\nimport { MML } from './MML';\nimport { Effector } from './SoundModule/Effectors/Effector';\nimport {\n    ajax,\n    convertTime,\n    decode,\n    exitFullscreen,\n    file,\n    fullscreen,\n    read,\n    toFrequencies,\n    toTextFile\n} from './XSound';\n\nconst global = (typeof window !== 'undefined') ? window : {};\n\nglobal.AudioContext = global.AudioContext || global.webkitAudioContext;\n\nlet XSound;\n\nconst IS_XSOUND = Boolean(global.AudioContext);\n\nif (IS_XSOUND) {\n    const audiocontext = new AudioContext();\n\n    // for legacy browsers\n    audiocontext.createScriptProcessor = audiocontext.createScriptProcessor || audiocontext.createJavaScriptNode;\n    audiocontext.createGain            = audiocontext.createGain            || audiocontext.createGainNode;\n    audiocontext.createDelay           = audiocontext.createDelay           || audiocontext.createDelayNode;\n    audiocontext.createPeriodicWave    = audiocontext.createPeriodicWave    || audiocontext.createWaveTable;\n\n    const sources = {\n        'oscillator' : new OscillatorModule(audiocontext),\n        'oneshot'    : new OneshotModule(audiocontext),\n        'noise'      : new NoiseModule(audiocontext),\n        'audio'      : new AudioModule(audiocontext),\n        'media'      : new MediaModule(audiocontext),\n        'stream'     : new StreamModule(audiocontext),\n        'mixer'      : new MixerModule(audiocontext),\n        'midi'       : new MIDI(audiocontext),\n        'mml'        : new MML(audiocontext)\n    };\n\n    /**\n     * This function is global object for getting the instance of `OscillatorModule` or `OneshotModule` or `NoiseModule` or `AudioModule` or `MediaModule` or `StreamModule` or `MixerModule` or `MIDI` or `MML` or `Oscillator`.\n     * @param {string} source This argument is one of 'oscillator', 'oneshot', 'noise', 'audio', 'media', 'stream', 'mixer', 'midi', 'mml'.\n     * @param {number} index This argument is in order to select one of some oscillators.\n     * @return {OscillatorModule|OneshotModule|NoiseModule|AudioModule|MediaModule|StreamModule|MixerModule|MIDI|MML|Oscillator}\n     */\n    XSound = (source, index) => {\n        const s = String(source).replace(/-/g, '').toLowerCase();\n\n        switch (s) {\n            case 'oscillator':\n                if (index === undefined) {\n                    return sources.oscillator;\n                }\n\n                const i = parseInt(index, 10);\n\n                if ((i >= 0) && (i < sources.oscillator.length())) {\n                    return sources.oscillator.get(i);\n                }\n\n                return null;\n            case 'oneshot':\n            case 'noise'  :\n            case 'audio'  :\n            case 'media'  :\n            case 'stream' :\n            case 'mixer'  :\n            case 'midi'   :\n            case 'mml'    :\n                return sources[s];\n            default :\n                return null;\n        }\n    };\n\n    /**\n     * Class (Static) properties\n     */\n    XSound.IS_XSOUND         = IS_XSOUND;\n    XSound.SAMPLE_RATE       = audiocontext.sampleRate;\n    XSound.NUMBER_OF_INPUTS  = SoundModule.NUMBER_OF_INPUTS;\n    XSound.NUMBER_OF_OUTPUTS = SoundModule.NUMBER_OF_OUTPUTS;\n    XSound.ajax              = ajax;\n    XSound.convertTime       = convertTime;\n    XSound.decode            = decode;\n    XSound.exitFullscreen    = exitFullscreen;\n    XSound.file              = file;\n    XSound.fullscreen        = fullscreen;\n    XSound.read              = read;\n    XSound.toFrequencies     = toFrequencies;\n    XSound.toTextFile        = toTextFile;\n\n    XSound.Effector = Effector;\n\n    /**\n     * This class (static) method changes state ('running') of `AudioContext`.\n     * The initial state is 'suspended' by Autoplay Policy Change.\n     * Therefore, this method must be invoked by user gestures.\n     * @return {Promise} This is returned as `Promise`.\n     */\n    XSound.setup = () => {\n        if (audiocontext.state !== 'running') {\n            return audiocontext.resume();\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * This class (static) method returns function as closure that is getter of cloned module.\n     * @return {function} This is returned as closure that is getter of cloned module.\n     */\n    XSound.clone = () => {\n        const clones = {\n            'oscillator' : new OscillatorModule(audiocontext),\n            'oneshot'    : new OneshotModule(audiocontext),\n            'noise'      : new NoiseModule(audiocontext),\n            'audio'      : new AudioModule(audiocontext),\n            'media'      : new MediaModule(audiocontext),\n            'stream'     : new StreamModule(audiocontext),\n            'mixer'      : new MixerModule(audiocontext),\n            'midi'       : new MIDI(audiocontext),\n            'mml'        : new MML(audiocontext)\n        };\n\n        const C = (source, index) => {\n            const s = String(source).replace(/-/g, '').toLowerCase();\n\n            switch (s) {\n                case 'oscillator':\n                    if (index === undefined) {\n                        return clones.oscillator;\n                    }\n\n                    const i = parseInt(index, 10);\n\n                    if ((i >= 0) && (i < clones.oscillator.length())) {\n                        return clones.oscillator.get(i);\n                    }\n\n                    return null;\n                case 'oneshot':\n                case 'noise'  :\n                case 'audio'  :\n                case 'media'  :\n                case 'stream' :\n                case 'mixer'  :\n                case 'midi'   :\n                case 'mml'    :\n                    return clones[s];\n                default :\n                    return null;\n            }\n        };\n\n        C.free  = sourceList => {\n            if (!Array.isArray(sourceList)) {\n                sourceList = [sourceList];\n            }\n\n            for (const source of sourceList) {\n                // Already deleted ?\n                if (source === null) {\n                    continue;\n                }\n\n                for (const key in clones) {\n                    if (source === clones[key]) {\n                        clones[key] = null;\n                    }\n                }\n            }\n        };\n\n        // Closure\n        return C;\n    };\n\n    /**\n     * This class (static) method releases memory of unnecessary instances.\n     * @param {Array.<SoundModule|MIDI|MML>} sourceList This argument is the array that contains the instances of `SoundModule` or `MIDI` or `MML`.\n     */\n    XSound.free = sourceList => {\n        if (!Array.isArray(sourceList)) {\n            sourceList = [sourceList];\n        }\n\n        for (const source of sourceList) {\n            // Already deleted ?\n            if (source === null) {\n                continue;\n            }\n\n            for (const key in sources) {\n                if (source === sources[key]) {\n                    sources[key] = null;\n                }\n            }\n        }\n    };\n\n    /**\n     * This class (static) method removes one of the global objects or both of the global objects.\n     * @param {boolean} deep This argument is in order to select whether removing both of global objects.\n     *     If this value is `true`, both of global objects are removed.\n     * @return {XSound}\n     */\n    XSound.noConflict = deep => {\n        if (window.X === XSound) {\n            window.X = undefined;\n        }\n\n        // both of global objects are removed ?\n        if (deep && (window.XSound === XSound)) {\n            window.XSound = undefined;\n        }\n\n        return XSound;\n    };\n\n    /**\n     * This class (static) method gets the instance of `AudioContext`.\n     * @return {AudioContext}\n     */\n    XSound.get = () => {\n        return audiocontext;\n    };\n\n    /**\n     * This class (static) method gets `currentTime` property in the instance of `AudioContext`.\n     * @return {number}\n     */\n    XSound.getCurrentTime = () => {\n        return audiocontext.currentTime;\n    };\n\n    /** @override */\n    XSound.toString = () => {\n        return '[XSound]';\n    };\n\n    // for Chrome 70+\n    const userAgent = navigator.userAgent.toLowerCase();\n\n    if ((userAgent.indexOf('chrome') !== -1) && (userAgent.indexOf('edge') === -1)) {\n        const setup = () => {\n            XSound.setup().then(() => {}).catch(() => {});\n\n            document.removeEventListener('click',      setup, true);\n            document.removeEventListener('mousedown',  setup, true);\n            document.removeEventListener('mouseup',    setup, true);\n            document.removeEventListener('touchstart', setup, true);\n            document.removeEventListener('touchend',   setup, true);\n        };\n\n        document.addEventListener('click',      setup, true);\n        document.addEventListener('mousedown',  setup, true);\n        document.addEventListener('mouseup',    setup, true);\n        document.addEventListener('touchstart', setup, true);\n        document.addEventListener('touchend',   setup, true);\n    }\n\n} else {\n    XSound = () => null;\n\n    XSound.IS_XSOUND = IS_XSOUND;\n}\n\n// for `<script>`\nglobal.XSound = XSound;\nglobal.X      = XSound;  // Alias of `XSound`\n\n// for ESModules and SSR (Server Side Rendering)\nif (typeof exports !== 'undefined') {\n    exports.XSound = XSound;\n    exports.X      = XSound;  // Alias of `XSound`\n}\n"],"sourceRoot":""}