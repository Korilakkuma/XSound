{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/SoundModule/Analyser/Visualizer.js","webpack:///./src/SoundModule/Analyser/TimeOverview.js","webpack:///./src/SoundModule/Analyser/Time.js","webpack:///./src/SoundModule/Analyser/FFT.js","webpack:///./src/SoundModule/Analyser/index.js","webpack:///./src/SoundModule/Recorder.js","webpack:///./src/SoundModule/Session.js","webpack:///./src/SoundModule/Effector.js","webpack:///./src/SoundModule/Compressor.js","webpack:///./src/SoundModule/Distortion.js","webpack:///./src/SoundModule/Wah.js","webpack:///./src/SoundModule/Equalizer.js","webpack:///./src/SoundModule/Filter.js","webpack:///./src/SoundModule/Autopanner.js","webpack:///./src/SoundModule/AutopannerFallback.js","webpack:///./src/SoundModule/Tremolo.js","webpack:///./src/SoundModule/Ringmodulator.js","webpack:///./src/SoundModule/Phaser.js","webpack:///./src/SoundModule/Flanger.js","webpack:///./src/SoundModule/Chorus.js","webpack:///./src/SoundModule/Delay.js","webpack:///./src/SoundModule/Reverb.js","webpack:///./src/SoundModule/Panner.js","webpack:///./src/SoundModule/Listener.js","webpack:///./src/SoundModule/EnvelopeGenerator.js","webpack:///./src/SoundModule/index.js","webpack:///./src/OscillatorModule/Oscillator.js","webpack:///./src/OscillatorModule/Glide.js","webpack:///./src/OscillatorModule/index.js","webpack:///./src/OneshotModule/index.js","webpack:///./src/NoiseModule/index.js","webpack:///./src/AudioModule/VocalCanceler.js","webpack:///./src/AudioModule/index.js","webpack:///./src/MediaModule/index.js","webpack:///./src/StreamModule/NoiseGate.js","webpack:///./src/StreamModule/index.js","webpack:///./src/MixerModule/index.js","webpack:///./src/MIDI/index.js","webpack:///./src/MML/index.js","webpack:///./src/XSound/index.js","webpack:///./src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","configurable","writable","Visualizer","constructor","sampleRate","this","isActive","graphics","canvas","context","svg","interval","timerid","styles","shape","grad","offset","color","wave","grid","text","font","family","size","style","weight","width","cap","join","top","right","bottom","left","setup","element","HTMLCanvasElement","CANVAS","getContext","SVGElement","SVG","param","k","String","replace","toLowerCase","v","parseFloat","Array","isArray","isError","grads","isNaN","toString","prop","test","parseInt","start","data","minDecibels","maxDecibels","drawOnCanvas","drawBySVG","toDataURL","outerHTML","state","Boolean","drawTimeDomainFloat32ArrayOnCanvas","innerWidth","innerHeight","middle","nPlotInterval","CanvasRenderingContext2D","Float32Array","w","h","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","len","length","x","Math","floor","y","moveTo","lineTo","stroke","fillStyle","upside","gradient","createLinearGradient","gradients","addColorStop","fillRect","drawTimeDomainFloat32ArrayBySVG","linearGradientId","path","document","createElementNS","XMLNS","setAttribute","defs","createSVGLinearGradient","g","appendChild","rect","linearGradient","stop","createFontString","TimeOverview_TimeOverview","super","savedImage","currentTime","plotInterval","textInterval","arguments","height","nTextInterval","clearRect","fillText","measureText","texts","trim","getImageData","getAttribute","innerHTML","SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW","textContent","classList","add","update","time","ImageData","putImageData","querySelector","drag","callback","drawNode","move","end","navigator","userAgent","isDown","addEventListener","event","draw","getOffsetX","preventDefault","window","offsetX","offsetLeft","parentNode","pageX","touches","Time_Time","type","UINT","FLOAT","SVG_LINEAR_GRADIENT_ID_TIME","FFT_FFT","min","max","mindB","maxdB","range","drawnSize","fsDivN","abs","f","slice","SVG_LINEAR_GRADIENT_ID_FFT","Analyser_Analyser","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","setTimeout","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","clearTimeout","analyser","createAnalyser","input","createGain","connect","timeOverviewL","timeOverviewR","fft","fftSize","smoothingTimeConstant","frequencyBinCount","domain","buffer","AudioBuffer","numberOfChannels","set","getChannelData","Uint8Array","getByteTimeDomainData","getFloatTimeDomainData","getByteFrequencyData","getFloatFrequencyData","toUpperCase","Recorder","bufferSize","numberOfInputs","numberOfOutputs","processor","createScriptProcessor","mixedLs","mixedRs","numberOfTracks","trackLs","trackRs","activeTrack","paused","gainL","gainR","ready","track","isTrack","onaudioprocess","inputLs","inputBuffer","inputRs","recordedLs","recordedRs","push","disconnect","getActiveTrack","mixTrack","channel","tracks","mixes","values","sum","num","currentBuffer","index","numberOfMaxBuffers","currentTrack","mix","clear","qbit","soundLs","soundRs","CHANNEL","QBIT","SIZE","CHUNK_SIZE","RIFF_CHUNK","RATE","BPS","DATA_SIZE","sounds","binary","pow","Int16Array","URL","webkitURL","mozURL","createObjectURL","waves","blob","Blob","fromCharCode","btoa","Session","sender","receiver","websocket","tls","host","port","openCallback","closeCallback","errorCallback","properties","open","close","error","scheme","charAt","WebSocket","binaryType","onopen","onclose","onerror","onmessage","ArrayBuffer","total","byteLength","BYTES_PER_ELEMENT","bufferLs","bufferRs","outputLs","outputBuffer","outputRs","destination","isConnected","bufferedAmount","send","readyState","OPEN","stateCallback","waitCallback","intervalid","setInterval","clearInterval","Effector","output","lfo","createOscillator","depth","rate","frequency","noteOn","noteOff","isStop","startTime","stopTime","releaseTime","params","toJSON","JSON","stringify","Compressor_Compressor","compressor","createDynamicsCompressor","threshold","knee","ratio","attack","release","Distortion_Distortion","distortion","createWaveShaper","drive","createBiquadFilter","tone","CLEAN","numberOfSamples","gain","BANDPASS","Q","SQRT1_2","LOWPASS","curve","createCurve","AMOUNTS","CRUNCH","OVERDRIVE","DISTORTION","FUZZ","samples","amount","curves","Wah_Wah","lowpass","depthRate","cutoff","resonance","Equalizer_Equalizer","bass","treble","presence","LOWSHELF","PEAKING","HIGHSHELF","Filter_Filter","filter","setTargetAtTime","setTargetValueAtTime","maxFrequency","decay","sustain","FILTER_TYPES","t0","t1","t2","t2Value","minFrequnecy","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","t3","t4","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass","Autopanner_Autopanner","panner","createStereoPanner","pan","AutopannerFallback_AutopannerFallback","amplitudeL","amplitudeR","splitter","createChannelSplitter","merger","createChannelMerger","lfoSplitter","inputs","Tremolo_Tremolo","amplitude","WAVE_TYPES","sine","square","sawtooth","triangle","Ringmodulator_Ringmodulator","Phaser_Phaser","numberOfStages","filters","MAXIMUM_STAGES","ALLPASS","feedback","stage","Flanger_Flanger","delay","createDelay","delayTime","Chorus_Chorus","Delay_Delay","MAX_DELAY_TIME","dry","wet","Reverb_Reverb","rirs","convolver","createConvolver","impulse","successCallback","decodeAudioData","preset","timeout","progressCallback","success","progress","load","url","xhr","XMLHttpRequest","ontimeout","ERROR_AJAX_TIMEOUT","onprogresss","abort","ERROR_AJAX","onload","status","arrayBuffer","response","decodeSuccessCallback","audioBuffer","decodeErrorCallback","ERROR_DECODE","responseType","F","Panner_Panner","createPanner","positions","z","orientations","refDistance","maxDistance","rolloffFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","panningModel","HRTF","distanceModel","INVERSE_DISTANCE","setPosition","setOrientation","PANNING_MODELS","DISTANCE_MODELS","equalpower","linear","inverse","exponential","Listener","listener","fronts","ups","EnvelopeGenerator","generators","activeIndexes","activeCounter","AudioNode","activeIndex","getGenerator","setGenerator","counter","MIN_GAIN","isDisconnect","generator","I","SoundModule_SoundModule","mastervolume","NUMBER_OF_INPUTS","NUMBER_OF_OUTPUTS","recorder","session","wah","equalizer","autopanner","tremolo","ringmodulator","phaser","flanger","chorus","reverb","envelopegenerator","resize","getBufferSize","source","connects","on","off","_","Oscillator","setPeriodicWave","setWaveTable","volume","octave","fine","customs","real","imag","reals","imags","MAX_SIZE","subarray","periodicWave","createPeriodicWave","OCTAVE","detune","q","Glide","frequencies","LINEAR","EXPONENTIAL","diff","oscillator","OscillatorModule_OscillatorModule","sources","times","isAnalyser","glide","states","st","sp","processCallback","G","OneshotModule_OneshotModule","resources","buffers","volumes","isStops","settings","transpose","loop","onprogress","selectedIndex","bufferIndex","playbackRate","loopStart","loopEnd","AudioBufferSourceNode","createBufferSource","noteGrainOn","onended","every","oneshot","reset","U","NoiseModule_NoiseModule","WHITE_NOISE","PINK_NOISE","BROWNIAN_NOISE","lastOut","random","b0","b1","b2","b3","b4","b5","b6","white","VocalCanceler","dataL","dataR","AudioModule_AudioModule","callbacks","decode","ended","vocalcanceler","duration","position","pos","toggle","isBuffer","isSource","isPaused","audio","playbackrate","W","MediaModule_MediaModule","media","ext","controls","muted","autoplay","listeners","formats","HTMLAudioElement","AUDIO","HTMLVideoElement","VIDEO","format","canPlayType","MediaElementAudioSourceNode","createMediaElementSource","loadstart","pause","HTMLMediaElement","channelCount","src","indexOf","Error","play","then","catch","isMedia","NoiseGate","level","StreamModule_StreamModule","constraints","video","stream","noisegate","streamCallback","mediaDevices","getUserMedia","createMediaStreamSource","isStreaming","MixerModule_MixerModule","MIDI","midiAccess","outputs","sysex","requestMIDIAccess","inputIterator","outputIterator","next","done","K","MML_MML","sequences","timerids","prev","mmls","OscillatorNode","notes","shift","match","REGEXP_MML","ERROR_STRING","indexes","timeOf4note","note","REGEXP_TEMPO","bpm","ERROR_TEMPO","ONE_MINUTES","REGEXP_OCTAVE","ERROR_OCTAVE","REGEXP_NOTE","chord","REGEXP_CHORD","pitchname","computeIndex","EQUAL_TEMPERAMENT","ERROR_NOTE","REST","computeFrequency","durations","split","REGEXP_DURATION","numOf4note","QUARTER_NOTE","reverse","part","sequence","pop","j","node","isSequences","mml","toAscii","read","file","reader","FileReader","code","NOT_FOUND_ERR","SECURITY_ERR","ABORT_ERR","NOT_READABLE_ERR","ENCODING_ERR","result","readAsArrayBuffer","readAsDataURL","readAsText","computedIndex","FREQUENCY_RATIO","string","converted","charCode","charCodeAt","AudioContext","webkitAudioContext","IS_XSOUND","audiocontext","createJavaScriptNode","createGainNode","createDelayNode","createWaveTable","noise","mixer","midi","XSound","SAMPLE_RATE","Event","stopPropagation","dataTransfer","files","target","File","ajax","toFrequencies","convertTime","minutes","seconds","milliseconds","fullscreen","Element","webkitRequestFullscreen","ALLOW_KEYBOARD_INPUT","mozRequestFullScreen","msRequestFullscreen","requestFullscreen","exitFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","cancelFullScreen","resume","Promise","reject","clone","clones","C","free","sourceList","noConflict","deep","X","getCurrentTime","removeEventListener"],"mappings":"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","file":"xsound.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","'use strict';\n\n/**\n * This private class defines the properties that subclasses (`TimeOverview`, `Time`, `FFT`) require.\n * @constructor\n */\nexport default class Visualizer {\n    static CANVAS = 'canvas';\n    static SVG    = 'svg';\n\n    static XMLNS = 'http://www.w3.org/2000/svg';\n    static XLINK = 'http://www.w3.org/1999/xlink';\n\n    static SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW = 'svg-linear-gradient-time-overview';\n    static SVG_LINEAR_GRADIENT_ID_TIME          = 'svg-linear-gradient-time';\n    static SVG_LINEAR_GRADIENT_ID_FFT           = 'svg-linear-gradient-fft';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        this.sampleRate = sampleRate;\n\n        this.isActive = false;\n\n        // either 'canvas' or 'svg'\n        this.graphics = '';\n\n        // in the case of using Canvas\n        this.canvas  = null;\n        this.context = null;\n\n        // in the case of using SVG\n        this.svg = null;\n\n        // for timer\n        this.interval = 1000;\n        this.timerid  = null;\n\n        this.styles = {\n            'shape'  : 'line',\n            'grad'   : [\n                {\n                    'offset' : 0,\n                    'color'  : 'rgba(0, 128, 255, 1.0)'\n                },\n                {\n                    'offset' : 1,\n                    'color'  : 'rgba(0, 0, 255, 1.0)'\n                }\n            ],\n            'wave'   : 'rgba(0, 0, 255, 1.0)',\n            'grid'   : 'rgba(255, 0, 0, 1.0)',\n            'text'   : 'rgba(255, 255, 255, 1.0)',\n            'font'   : {\n                'family' : 'Arial',\n                'size'   : '13px',\n                'style'  : 'normal',\n                'weight' : 'normal'\n            },\n            'width'  : 1.5,\n            'cap'    : 'round',\n            'join'   : 'miter',\n            'top'    : 15,\n            'right'  : 30,\n            'bottom' : 15,\n            'left'   : 30\n        };\n    }\n\n    /**\n     * This method sets up for using Canvas or SVG.\n     * @param {HTMLCanvasElement|SVGElement} element This argument is either `HTMLCanvasElement` or `SVGElement`.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    setup(element) {\n        if (element instanceof HTMLCanvasElement) {\n            this.graphics = Visualizer.CANVAS;\n            this.canvas   = element;\n            this.context  = this.canvas.getContext('2d');\n        } else if (element instanceof SVGElement) {\n            this.graphics = Visualizer.SVG;\n            this.svg      = element;\n\n            // this.svg.setAttribute('xmlns',       Visualizer.XMLNS);\n            // this.svg.setAttribute('xmlns:xlink', Visualizer.XLINK);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {string|number|Array.<object>} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {string|number|Array.<object>} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v = null;\n\n        switch (k) {\n            case 'interval':\n                if (value === undefined) {\n                    return this.interval;\n                }\n\n                if (String(value).toLowerCase() === 'auto') {\n                    this.interval = 'auto';\n                } else {\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.interval = v;\n                    }\n                }\n\n                break;\n            case 'shape':\n                if (value === undefined) {\n                    return this.styles.shape;\n                }\n\n                v = String(value).toLowerCase();\n\n                if ((v === 'line') || (v === 'rect')) {\n                    this.styles.shape = (this.styles.wave !== 'gradient') ? v : 'rect';\n                }\n\n                break;\n            case 'grad':\n                if (value === undefined) {\n                    return this.styles.grad;\n                }\n\n                if (!Array.isArray(value)) {\n                    value = [value];\n                }\n\n                let isError = false;\n\n                for (const grads of value) {\n                    if (('offset' in grads) && ('color' in grads)) {\n                        const offset = parseFloat(grads.offset);\n\n                        if (isNaN(offset) || (offset < 0) || (offset > 1)) {\n                            isError = true;\n                            break;\n                        }\n                    } else {\n                        isError = true;\n                        break;\n                    }\n                }\n\n                if (!isError) {\n                    this.styles.grad = value;\n                }\n\n                break;\n            case 'font':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (Object.prototype.toString.call(value) === '[object Object]') {\n                    for (const prop in value) {\n                        if (/family|size|style|weight/i.test(prop)) {\n                            this.styles.font[prop] = String(value[prop]);\n                        }\n                    }\n                }\n\n                break;\n            case 'wave':\n            case 'grid':\n            case 'text':\n            case 'cap' :\n            case 'join':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (typeof value === 'string') {\n                    if ((k === 'wave') && (value === 'gradient')) {\n                        this.styles.shape = 'rect';\n                    }\n\n                    this.styles[k] = value.toLowerCase();\n                }\n\n                break;\n            case 'width' :\n            case 'top'   :\n            case 'right' :\n            case 'bottom':\n            case 'left'  :\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                v = (k === 'width') ? parseFloat(value) : parseInt(value, 10);\n\n                if (v >= 0) {\n                    this.styles[k] = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method draws sound wave to Canvas or SVG. This method conceals difference of API for drawing.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is parameter for spectrum. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is parameter for spectrum. The default value is -30 dB.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    start(data, minDecibels, maxDecibels) {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                this.drawOnCanvas(data, minDecibels, maxDecibels);\n                break;\n            case Visualizer.SVG:\n                this.drawBySVG(data, minDecibels, maxDecibels);\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates string for `Data URL` or `HTML` for the drawn figure.\n     * @return {string|Visualizer} This is returned as `Data URL` or `HTML` string. If `setup` method has not been invoked, this is returned for method chain.\n     */\n    create() {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                return this.canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            case Visualizer.SVG:\n                return this.svg.outerHTML;\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Visualizer} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to Canvas.\n     * @param {CanvasRenderingContext2D} context This argument is the instance of `CanvasRenderingContext2D`.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     */\n    drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval) {\n        if (!(context instanceof CanvasRenderingContext2D)) {\n            return this;\n        }\n\n        if (!(data instanceof Float32Array)) {\n            return this;\n        }\n\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        // Begin drawing\n        switch (this.styles.shape) {\n            case 'line':\n                // Set style\n                context.strokeStyle = this.styles.wave;\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            context.moveTo((x + (this.styles.width / 2)),  y);\n                        } else {\n                            context.lineTo(x, y);\n                        }\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case 'rect':\n                // Set style\n                if (this.styles.wave !== 'gradient') {\n                    context.fillStyle = this.styles.wave;\n                }\n\n                // Draw wave\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = -1 * Math.floor(data[i] * (h / 2));\n\n                        // Set style\n                        if (this.styles.wave === 'gradient') {\n                            const upside   = (innerHeight / 2) + this.styles.top;\n                            const gradient = context.createLinearGradient(0, upside, 0, (upside + y));\n\n                            for (const gradients of this.styles.grad) {\n                                gradient.addColorStop(gradients.offset, gradients.color);\n                            }\n\n                            context.fillStyle = gradient;\n                        }\n\n                        context.fillRect(x, m, this.styles.width, y);\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to SVG.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGPathElement|SVGGElement} This is returned as `SVGElement`.\n     */\n    drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, linearGradientId) {\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        switch (this.styles.shape) {\n            case 'line':\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            d += `M${x + (this.styles.width / 2)} ${y}`;\n                        } else {\n                            d += ` L${x} ${y}`;\n                        }\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          this.styles.wave);\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                return path;\n            case 'rect':\n                let defs = null;\n\n                if (this.styles.wave === 'gradient') {\n                    defs = this.createSVGLinearGradient(linearGradientId);\n                }\n\n                // Draw wave\n                const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                if (defs !== null) {\n                    g.appendChild(defs);\n                }\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor(data[i] * (innerHeight / 2));\n\n                        rect.setAttribute('x',     x);\n                        rect.setAttribute('y',     m);\n                        rect.setAttribute('width', this.styles.width);\n\n                        if (y < 0) {\n                            rect.setAttribute('height', -y);\n                        } else {\n                            rect.setAttribute('height',    y);\n                            rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${m})`);\n                        }\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${linearGradientId})`);\n\n                        g.appendChild(rect);\n                    }\n                }\n\n                return g;\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * This method creates elements for SVG linear gradient.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGDefsElement} This is returned as the instance of `SVGDefsElement`.\n     */\n    createSVGLinearGradient(linearGradientId) {\n        const defs           = document.createElementNS(Visualizer.XMLNS, 'defs');\n        const linearGradient = document.createElementNS(Visualizer.XMLNS, 'linearGradient');\n\n        linearGradient.setAttribute('id', String(linearGradientId));\n        linearGradient.setAttribute('x1', '0%');\n        linearGradient.setAttribute('y1', '0%');\n        linearGradient.setAttribute('x2', '0%');\n        linearGradient.setAttribute('y2', '100%');\n\n        for (const gradients of this.styles.grad) {\n            const stop = document.createElementNS(Visualizer.XMLNS, 'stop');\n\n            stop.setAttribute('offset',     gradients.offset);\n            stop.setAttribute('stop-color', gradients.color);\n\n            linearGradient.appendChild(stop);\n        }\n\n        defs.appendChild(linearGradient);\n\n        return defs;\n    }\n\n    /**\n     * This method creates string for font.\n     * @return {string} This is returned as string for font.\n     */\n    createFontString() {\n        const { size, style, weight, family } = this.styles.font;\n\n        return `${size} ${style} ${weight} \"${family}\"`;\n    }\n\n    /** @abstract */\n    drawOnCanvas() {\n    }\n\n    /** @abstract */\n    drawBySVG() {\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Visualizer]';\n    }\n}\n","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing audio wave in overview of time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport default class TimeOverview extends Visualizer {\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = null;\n        this.length     = 0;\n\n        this.currentTime  = 'rgba(0, 0, 0, 0.5)';  // This style is used for the rectangle that displays current time of audio\n        this.plotInterval = 0.0625;                // Draw wave at intervals of this value [sec]\n        this.textInterval = 60;                    // Draw text at intervals of this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    this.currentTime = String(value).toLowerCase();\n\n                    break;\n                case 'plotinterval':\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this[k.replace('interval', 'Interval')];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k.replace('interval', 'Interval')] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to Canvas.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval);\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) / 60)} min`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = context.getImageData(0, 0, width, height);\n        this.length     = data.length;\n\n        // This rectangle displays current time of audio\n        context.fillStyle = this.currentTime;\n        context.fillRect(this.styles.left, this.styles.top, 1, innerHeight);\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to SVG.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW));\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = Math.floor((i / this.sampleRate) / 60) + ' min';\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        // This rectangle displays current time of audio\n        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n        rect.classList.add('svg-current-time');\n\n        rect.setAttribute('x',      this.styles.left);\n        rect.setAttribute('y',      (this.styles.top + 1));\n        // rect.setAttribute('width',  1);\n        rect.setAttribute('height', (innerHeight - 1));\n\n        rect.setAttribute('stroke', 'none');\n        rect.setAttribute('fill',   this.currentTime);\n\n        svg.appendChild(rect);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = svg;\n        this.length     = data.length;\n\n        return this;\n    }\n\n    /**\n     * This method draws current time of audio on Canvas or SVG.\n     * @param {number} time This argument is current time of audio.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    update(time) {\n        const t = parseFloat(time);\n\n        if (isNaN(t) || (t < 0)) {\n            return this;\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                if (this.savedImage instanceof ImageData) {\n                    const context = this.context;\n\n                    const { width, height } = this.canvas;\n\n                    const innerWidth  = width  - (this.styles.left + this.styles.right);\n                    const innerHeight = height - (this.styles.top  + this.styles.bottom);\n                    const x           = Math.floor(((t * this.sampleRate) / this.length) * innerWidth);\n\n                    context.clearRect(0, 0, width, height);\n                    context.putImageData(this.savedImage, 0, 0);\n\n                    context.fillStyle = this.currentTime;\n                    context.fillRect(this.styles.left, (this.styles.top + 1), x, (innerHeight - 1));\n                }\n\n                break;\n            case Visualizer.SVG:\n                const rect = this.svg.querySelector('.svg-current-time');\n\n                if (rect instanceof SVGElement) {\n                    const width      = parseInt(this.svg.getAttribute('width'), 10);\n                    const innerWidth = width  - (this.styles.left + this.styles.right);\n                    const x          = Math.floor(((t * this.sampleRate) / this.length) * innerWidth);\n\n                    rect.setAttribute('width', x);\n                    // rect.setAttribute('transform', `translate(${x} 0)`);\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method registers event listener for setting current time by drag.\n     * @param {function} callback This argument is invoked when current time is changed.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    drag(callback) {\n        let drawNode = null;\n\n        let start = '';\n        let move  = '';\n        let end   = '';\n\n        // Touch Panel ?\n        if (/iPhone|iPad|iPod|Android/.test(navigator.userAgent)) {\n            start = 'touchstart';\n            move  = 'touchmove';\n            end   = 'touchend';\n        } else {\n            start = 'mousedown';\n            move  = 'mousemove';\n            end   = 'mouseup';\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                drawNode = this.canvas;\n                break;\n            case Visualizer.SVG:\n                drawNode = this.svg;\n                break;\n            default:\n                return this;\n        }\n\n        let isDown = false;\n\n        drawNode.addEventListener(start, event => {\n            this.draw(this.getOffsetX(event), callback);\n            isDown = true;\n        }, true);\n\n        drawNode.addEventListener(move, event => {\n            if (isDown) {\n                event.preventDefault();  // for Touch Panel\n                this.draw(this.getOffsetX(event), callback);\n            }\n        }, true);\n\n        window.addEventListener(end, () => {\n            if (isDown) {\n                isDown = false;\n            }\n        }, true);\n\n        return this;\n    }\n\n    /**\n     * This method draws the rectangle for current time of audio.\n     * @param {number} offsetX This argument is X coordinate on Canvas or SVG.\n     * @param {function} callback This argument is invoked when the rectangle is drawn.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    draw(offsetX, callback) {\n        let offsetLeft = 0;\n        let width      = 0;\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                offsetLeft = this.canvas.offsetLeft;\n                width      = this.canvas.width;\n                break;\n            case Visualizer.SVG:\n                offsetLeft = this.svg.parentNode.offsetLeft;\n                width      = parseInt(this.svg.getAttribute('width'), 10);\n                break;\n            default:\n                break;\n        }\n\n        let x = offsetX - (offsetLeft + this.styles.left);\n\n        width -= (this.styles.left + this.styles.right);\n\n        // Exceed ?\n        if (x < 0)     {x = 0;}\n        if (x > width) {x = width;}\n\n        const plot = (x / width) * this.length;\n        const time = plot / this.sampleRate;\n\n        this.update(time);\n\n        if (Object.prototype.toString.call(callback) === '[object Function]') {\n            callback(time);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method returns X coordinate from `Event` object.\n     * @param {Event} event This argument is the instance of `Event`.\n     * @return {number} This is returned as X coordinate.\n     */\n    getOffsetX(event) {\n        if (event.pageX) {\n            return event.pageX;\n        }\n\n        if (event.touches[0]) {\n            return event.touches[0].pageX;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser TimeOverview]';\n    }\n}\n","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport default class Time extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = Time.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.textInterval = 0.005;      // Draw text at intervals this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Time.UINT) || (v === Time.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle);\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        // Draw wave\n                        context.beginPath();\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((0.5 - (data[i] / 255)) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = (innerHeight / 2) + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, middle, this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Begin drawing\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, null, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME));\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_TIME);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor(((data[i] / 255) - 0.5) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     middle);\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${middle})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_TIME})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Time]';\n    }\n}\n","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in frequency domain (spectrum).\n * @constructor\n * @extends {Visualizer}\n */\nexport default class FFT extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = FFT.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.size         = 256;       // Range for drawing\n        this.textInterval = 1000;      // Draw text at intervals of this value [Hz]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === FFT.UINT) || (v === FFT.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'size':\n                    if (value === undefined) {\n                        return this.size;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = 1024;  // `AnalyserNode#fftSize` max 2048 -> half 1024\n\n                    if ((v > min) && (v <= max)) {\n                        this.size = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data, minDecibels, maxDecibels) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (Sampling rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Set style\n                context.strokeStyle = (this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)';  // line only\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = (Math.abs(data[i] - maxdB) * (innerHeight / range)) + this.styles.top;  // [dB] * [px / dB] = [px]\n\n                    if (i === 0) {\n                        context.moveTo((x + (this.styles.width / 2)), y);\n                    } else {\n                        context.lineTo(x, y);\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        context.beginPath();\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = -1 * Math.floor((data[i] / 255) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = innerHeight + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, (innerHeight + this.styles.top), this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i} dB`;\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data, minDecibels, maxDecibels) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (sample rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = Math.floor(-1 * (data[i] - maxdB) * (innerHeight / range)) + this.styles.top;\n\n                    if (i === 0) {\n                        d += `M${x + (this.styles.width / 2)} ${y}`;\n                    } else {\n                        d += ` L${x} ${y}`;\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          ((this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)'));  // line only\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                svg.appendChild(path);\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        // Draw wave\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_FFT);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            let rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((data[i] / 255) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     (this.styles.top + innerHeight));\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${this.styles.top + innerHeight})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_FFT})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i}dB`;\n                        const x = this.styles.left;\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = this.styles.left;\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser FFT]';\n    }\n}\n","'use strict';\n\nimport TimeOverview from './TimeOverview';\nimport Time from './Time';\nimport FFT from './FFT';\n\n/**\n * This private class manages 3 private classes (`TimeOverview`, `Time`, `FFT`) for drawing sound wave.\n * @constructor\n */\nexport default class Analyser {\n    /**\n     * @param {AudioContext} context This argument is This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        window.requestAnimationFrame = window.requestAnimationFrame       ||\n                                       window.webkitRequestAnimationFrame ||\n                                       window.mozRequestAnimationFrame    ||\n                                       (callback => window.setTimeout(callback, (1000 / 60)));\n\n        window.cancelAnimationFrame = window.cancelAnimationFrame       ||\n                                      window.webkitCancelAnimationFrame ||\n                                      window.mozCancelAnimationFrame    ||\n                                      window.clearTimeout;\n\n        this.analyser = context.createAnalyser();\n        this.input    = context.createGain();\n\n        // GainNode (Input) -> AnalyserNode\n        this.input.connect(this.analyser);\n\n        this.timeOverviewL = new TimeOverview(context.sampleRate);\n        this.timeOverviewR = new TimeOverview(context.sampleRate);\n        this.time          = new Time(context.sampleRate);\n        this.fft           = new FFT(context.sampleRate);\n\n        // Set default value\n        this.analyser.fftSize               = 2048;\n        this.analyser.minDecibels           = -100;\n        this.analyser.maxDecibels           = -30;\n        this.analyser.smoothingTimeConstant = 0.8;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Analyser} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'fftsize':\n                    if (value === undefined) {\n                        return this.analyser.fftSize;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case   32:\n                        case   64:\n                        case  128:\n                        case  256:\n                        case  512:\n                        case 1024:\n                        case 2048:\n                            this.analyser.fftSize = v;\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequencybincount':\n                    return this.analyser.frequencyBinCount;  // Getter only\n                case 'mindecibels':\n                    if (value === undefined) {\n                        return this.analyser.minDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    max = -30;\n\n                    if (v < max) {\n                        this.analyser.minDecibels = v;\n                    }\n\n                    break;\n                case 'maxdecibels':\n                    if (value === undefined) {\n                        return this.analyser.maxDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -100;\n\n                    if (v > min) {\n                        this.analyser.maxDecibels = v;\n                    }\n\n                    break;\n                case 'smoothingtimeconstant':\n                    if (value === undefined) {\n                        return this.analyser.smoothingTimeConstant;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.analyser.smoothingTimeConstant = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates data for drawing and executes drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @param {AudioBuffer} buffer This argument is the instance of `AudioBuffer`. The data for drawing audio wave in overview of time domain is gotten from this argument.\n     * @return {Analyser} This is returned for method chain.\n     */\n    start(domain, buffer) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        let data = null;\n\n        switch (d) {\n            case 'timeoverviewl':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 0) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(0));\n                        this.timeOverviewL.start(data);\n                    }\n                }\n\n                break;\n            case 'timeoverviewr':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 1) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(1));\n                        this.timeOverviewR.start(data);\n                    }\n                }\n\n                break;\n            case 'time':\n                if (this.time.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.fftSize);\n                    this.analyser.getByteTimeDomainData(data);\n                    this.time.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.fftSize);\n                    this.analyser.getFloatTimeDomainData(data);\n                    this.time.start(data);\n                }\n\n                if (this.time.param('interval') === 'auto') {\n                    this.time.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.time.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.time.param('interval'));\n                }\n\n                break;\n            case 'fft':\n                if (this.fft.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.frequencyBinCount);\n                    this.analyser.getByteFrequencyData(data);\n                    this.fft.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.frequencyBinCount);\n                    this.analyser.getFloatFrequencyData(data);\n                    this.fft.start(data, this.analyser.minDecibels, this.analyser.maxDecibels);\n                }\n\n                if (this.fft.param('interval') === 'auto') {\n                    this.fft.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.fft.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.fft.param('interval'));\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {Analyser} This is returned for method chain.\n     */\n    stop(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                break;\n            case 'time':\n                if (this.time.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.time.timerid);\n                } else {\n                    window.clearTimeout(this.time.timerid);\n                }\n\n                this.time.timerid = null;\n\n                break;\n            case 'fft':\n                if (this.fft.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.fft.timerid);\n                } else {\n                    window.clearTimeout(this.fft.timerid);\n                }\n\n                this.fft.timerid = null;\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects domain for drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {TimeOverview|Time|FFT|Analyser} This value is the instance of selected class.\n     */\n    domain(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                return this[`timeOverview${d.slice(-1).toUpperCase()}`];\n            case 'time':\n            case 'fft' :\n                return this[d];\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method gets the instance of `AnalyserNode`.\n     * @return {AnalyserNode}\n     */\n    get() {\n        return this.analyser;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for multi track recording.\n * @constructor\n */\nexport default class Recorder {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs) {\n        this.sampleRate = context.sampleRate;\n\n        this.context   = context;\n        this.processor = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.mixedLs = null;  /** @type {Float32Array} */\n        this.mixedRs = null;  /** @type {Float32Array} */\n\n        this.numberOfTracks = 0;\n        this.trackLs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n        this.trackRs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n\n        this.activeTrack = -1;    // There is not any active track in the case of -1\n        this.paused      = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n\n        this.gainL = 1;  // Gain of Left  channel\n        this.gainR = 1;  // Gain of Right channel\n    }\n\n    /**\n     * This method sets the max number of tracks.\n     * @param {number} numberOfTracks This argument is the max number of tracks. The default value is 1.\n     * @return {Recorder} This is returned for method chain.\n     */\n    setup(numberOfTracks) {\n        const n = parseInt(numberOfTracks, 10);\n\n        if (n > 0) {\n            this.numberOfTracks = n;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            for (let i = 0; i < n; i++) {this.trackLs[i] = [];}  // n x array\n            for (let i = 0; i < n; i++) {this.trackRs[i] = [];}  // n x array\n        } else {\n            this.numberOfTracks = 1;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            this.trackLs[0] = [];  // 1 * array\n            this.trackRs[0] = [];  // 1 * array\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Recorder} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'gainl':\n                case 'gainr':\n                    if (value === undefined) {\n                        return this[`gain${k.slice(-1).toUpperCase()}`];\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[`gain${k.slice(-1).toUpperCase()}`] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects active track.\n     * @param {number} track This argument is in order to select active track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    ready(track) {\n        if (this.isTrack(track)) {\n            this.activeTrack = track;\n        } else {\n            this.activeTrack = -1;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts recording. If there is not any active track, this method stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    start() {\n        if ((this.activeTrack !== -1) && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                if (this.activeTrack !== -1) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const recordedLs = new Float32Array(bufferSize);\n                    const recordedRs = new Float32Array(bufferSize);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        recordedLs[i] = this.gainL * inputLs[i];\n                        recordedRs[i] = this.gainR * inputRs[i];\n                    }\n\n                    this.trackLs[this.activeTrack].push(recordedLs);\n                    this.trackRs[this.activeTrack].push(recordedRs);\n                } else {\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method turns off the all of tracks, and stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    stop() {\n        this.activeTrack = -1;  // Flag becomes inactive\n        this.paused      = true;\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the designated track number is valid.\n     * @param {number} track This argument is track number for validation.\n     * @return {boolean} If the designated track is valid range, this value is `true`. Otherwise, this value is `false`.\n     */\n    isTrack(track) {\n        const t = parseInt(track, 10);\n\n        return (t >= 0) && (t < this.numberOfTracks);\n    }\n\n    /**\n     * This method determines whether active track exists.\n     * @return {number} This is returned as active track.\n     */\n    getActiveTrack() {\n        return this.activeTrack;\n    }\n\n    /**\n     * This method synthesizes recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @return {Float32Array} This is returned as array for synthesized sound.\n     */\n    mixTrack(channel) {\n        const tracks      = this[`track${channel}s`];\n        const mixes       = { 'values' : null, 'sum' : 0, 'num' : 0 };\n        const bufferSize  = this.processor.bufferSize;\n        let currentBuffer = 0;\n        let index         = 0;\n\n        // Calculate sound data size\n        let numberOfMaxBuffers = 0;\n\n        // Search the max number of Float32Arrays each track\n        for (const track of tracks) {\n            if (numberOfMaxBuffers < track.length) {\n                numberOfMaxBuffers = track.length;\n            }\n        }\n\n        mixes.values = new Float32Array(numberOfMaxBuffers * bufferSize);\n\n        while (true) {\n            for (let currentTrack = 0, len = tracks.length; currentTrack < len; currentTrack++) {\n                if (tracks[currentTrack][currentBuffer] instanceof Float32Array) {\n                    mixes.sum += tracks[currentTrack][currentBuffer][index];\n                    mixes.num++;\n                }\n            }\n\n            if (mixes.num > 0) {\n                const offset = currentBuffer * bufferSize;\n\n                // Average\n                mixes.values[offset + index] = mixes.sum / mixes.num;\n\n                // Clear\n                mixes.sum = 0;\n                mixes.num = 0;\n\n                // Next data\n                if (index < (bufferSize - 1)) {\n                    // Next element in Float32Array\n                    index++;\n                } else {\n                    // Next Float32Array\n                    currentBuffer++;\n                    index = 0;\n                }\n            } else {\n                return mixes.values;\n            }\n        }\n    }\n\n    /**\n     * This method synthesizes the all of recorded sounds in track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    mix() {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        this.mixedLs = this.mixTrack('L');\n        this.mixedRs = this.mixTrack('R');\n\n        return this;\n    }\n\n    /**\n     * This method clears recorded sound of the designated track.\n     * @param {number|string} track This argument is track for clearing.\n     * @return {Recorder} This is returned for method chain.\n     */\n    clear(track) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        if (String(track).toLowerCase() === 'all') {\n            for (const track of this.trackLs) {track.length = 0;}\n            for (const track of this.trackRs) {track.length = 0;}\n        } else {\n            if (this.isTrack(track)) {\n                this.trackLs[track].length = 0;\n                this.trackRs[track].length = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates WAVE file as Object URL or Data URL.\n     * @param {string|number} track This argument is the target track.\n     * @param {number} numberOfChannels This argument is in order to select stereo or monaural of WAVE file. The default value is 2.\n     * @param {number} qbit This argument is quantization bit of PCM. The default value is 16 (bit).\n     * @return {string} This is returned as Object URL or Data URL for WAVE file.\n     */\n    create(track, numberOfChannels, qbit) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        /** @type {Float32Array} */\n        let soundLs = null;\n\n        /** @type {Float32Array} */\n        let soundRs = null;\n\n        if (String(track).toLowerCase() === 'all') {\n            this.mix();\n\n            soundLs = this.mixedLs;\n            soundRs = this.mixedRs;\n        } else {\n            if (this.isTrack(track)) {\n                soundLs = this.trackLs[track - 1];\n                soundRs = this.trackRs[track - 1];\n            }\n        }\n\n        // Sound data exists ?\n        if ((soundLs.length === 0) && (soundRs.length === 0)) {\n            return '';\n        }\n\n        // PCM parameters\n        const CHANNEL = (numberOfChannels === 1) ? 1 : 2;\n        const QBIT    = (qbit === 8) ? 8 : 16;\n        const SIZE    = (CHANNEL === 1) ? Math.min(soundLs.length, soundRs.length) : (2 * Math.min(soundLs.length, soundRs.length));\n\n        // Parameters for WAVE file\n        const FMT_CHUNK  = 28;\n        const DATA_CHUNK =  8 + (SIZE * (QBIT / 8));\n        const CHUNK_SIZE = 36 + (SIZE * (QBIT / 8));\n        const RIFF_CHUNK =  8 + (FMT_CHUNK + DATA_CHUNK);\n        const RATE       = this.sampleRate;\n        const BPS        = RATE * CHANNEL * (QBIT / 8);\n        const DATA_SIZE  = SIZE * (QBIT / 8);\n\n        /** @type {Uint8Array|Int16Array} */\n        let sounds = null;\n\n        switch (QBIT) {\n            case 8:\n                sounds = new Uint8Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 8 bit unsigned integer (-1 -> 0, 0 -> 128, 1 -> 255)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = ((soundLs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Left channel\n                    } else {\n                        binary = ((soundRs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (Math.pow(2, 8) - 1)) {binary = (Math.pow(2, 8) - 1);}\n                    if (binary < (Math.pow(2, 0) - 1)) {binary = (Math.pow(2, 0) - 1);}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            case 16:\n                sounds = new Int16Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 16 bit integer (-1 -> -32768, 0 -> 0, 1 -> 32767)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = soundLs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Left channel\n                    } else {\n                        binary = soundRs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (+Math.pow(2, 15) - 1)) {binary =  Math.pow(2, 15) - 1;}\n                    if (binary < (-Math.pow(2, 15) - 1)) {binary = -Math.pow(2, 15) - 1;}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        // Create WAVE file (Object URL or Data URL)\n        window.URL = window.URL || window.webkitURL || window.mozURL;\n\n        if (window.URL && window.URL.createObjectURL) {\n            // Object URL\n\n            const waves = [];\n\n            waves[0] = 0x52;  // 'R'\n            waves[1] = 0x49;  // 'I'\n            waves[2] = 0x46;  // 'F'\n            waves[3] = 0x46;  // 'F'\n\n            waves[4] = (CHUNK_SIZE >>  0) & 0xFF;\n            waves[5] = (CHUNK_SIZE >>  8) & 0xFF;\n            waves[6] = (CHUNK_SIZE >> 16) & 0xFF;\n            waves[7] = (CHUNK_SIZE >> 24) & 0xFF;\n\n            waves[8]  = 0x57;  // 'W'\n            waves[9]  = 0x41;  // 'A'\n            waves[10] = 0x56;  // 'V'\n            waves[11] = 0x45;  // 'E'\n\n            // fmt chunk\n            waves[12] = 0x66;  // 'f'\n            waves[13] = 0x6D;  // 'm'\n            waves[14] = 0x74;  // 't'\n            waves[15] = 0x20;  // ' '\n\n            waves[16] = 16;\n            waves[17] =  0;\n            waves[18] =  0;\n            waves[19] =  0;\n\n            waves[20] = 1;\n            waves[21] = 0;\n\n            // fmt chunk -> Channels (Monaural or Stereo)\n            waves[22] = CHANNEL;\n            waves[23] = 0;\n\n            // fmt chunk -> Sample rate\n            waves[24] = (RATE >>  0) & 0xFF;\n            waves[25] = (RATE >>  8) & 0xFF;\n            waves[26] = (RATE >> 16) & 0xFF;\n            waves[27] = (RATE >> 24) & 0xFF;\n\n            // fmt chunk -> Byte per second\n            waves[28] = (BPS >>  0) & 0xFF;\n            waves[29] = (BPS >>  8) & 0xFF;\n            waves[30] = (BPS >> 16) & 0xFF;\n            waves[31] = (BPS >> 24) & 0xFF;\n\n            // fmt chunk -> Block size\n            waves[32] = CHANNEL * (QBIT / 8);\n            waves[33] = 0;\n\n            // fmt chunk -> Byte per Sample\n            waves[34] = QBIT;\n            waves[35] = 0;\n\n            // data chunk\n            waves[36] = 0x64;  // 'd'\n            waves[37] = 0x61;  // 'a'\n            waves[38] = 0x74;  // 't\n            waves[39] = 0x61;  // 'a'\n\n            waves[40] = (DATA_SIZE >>  0) & 0xFF;\n            waves[41] = (DATA_SIZE >>  8) & 0xFF;\n            waves[42] = (DATA_SIZE >> 16) & 0xFF;\n            waves[43] = (DATA_SIZE >> 24) & 0xFF;\n\n            for (let i = 0; i < SIZE; i++) {\n                switch (QBIT) {\n                    case  8:\n                        waves[(RIFF_CHUNK - DATA_SIZE) + i] = sounds[i];\n                        break;\n                    case 16:\n                        // The byte order in WAVE file is little endian\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 0] = ((sounds[i] >> 0) & 0xFF);\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 1] = ((sounds[i] >> 8) & 0xFF);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            const blob      = new Blob([new Uint8Array(waves)], { 'type' : 'audio/wav' });\n            const objectURL = window.URL.createObjectURL(blob);\n\n            return objectURL;\n        }\n\n        // Data URL\n\n        let wave = '';\n\n        wave += 'RIFF';\n        wave += String.fromCharCode(((CHUNK_SIZE >> 0) & 0xFF), ((CHUNK_SIZE >> 8) & 0xFF), ((CHUNK_SIZE >> 16) & 0xFF), ((CHUNK_SIZE >> 24) & 0xFF));\n        wave += 'WAVE';\n\n        // fmt chunk\n        wave += `fmt ${String.fromCharCode(16, 0, 0, 0)}`;\n        wave += String.fromCharCode(1, 0);\n\n        // fmt chunk -> Channels (Monaural or Stereo)\n        wave += String.fromCharCode(CHANNEL, 0);\n\n        // fmt chunk -> Sample rate\n        wave += String.fromCharCode(((RATE >> 0) & 0xFF), ((RATE >> 8) & 0xFF), ((RATE >> 16) & 0xFF), ((RATE >> 24) & 0xFF));\n\n        // fmt chunk -> Byte per second\n        wave += String.fromCharCode(((BPS >> 0) & 0xFF), ((BPS >> 8) & 0xFF), ((BPS >> 16) & 0xFF), ((BPS >> 24) & 0xFF));\n\n        // fmt chunk -> Block size\n        wave += String.fromCharCode((CHANNEL * (QBIT / 8)), 0);\n\n        // fmt chunk -> Byte per Sample\n        wave += String.fromCharCode(QBIT, 0);\n\n        // data chunk\n        wave += 'data';\n        wave += String.fromCharCode(((DATA_SIZE >> 0) & 0xFF), ((DATA_SIZE >> 8) & 0xFF), ((DATA_SIZE >> 16) & 0xFF), ((DATA_SIZE >> 24) & 0xFF));\n\n        for (let i = 0; i < SIZE; i++) {\n            switch (QBIT) {\n                case  8:\n                    wave += String.fromCharCode(sounds[i]);\n                    break;\n                case 16:\n                    // The byte order in WAVE file is little endian\n                    wave += String.fromCharCode(((sounds[i] >> 0) & 0xFF), ((sounds[i] >> 8) & 0xFF));\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        const base64  = window.btoa(wave);\n        const dataURL = `data:audio/wav;base64,${base64}`;\n\n        return dataURL;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Recorder]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for sound session on network.\n * @constructor\n */\nexport default class Session {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     * @param {Analyser} analyser This argument is the instance of `Analyser`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs, analyser) {\n        this.isActive = false;\n\n        this.context  = context;\n        this.analyser = analyser;  // the instance of `Analyser`\n\n        this.sender   = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n        this.receiver = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.websocket = null;  // for the instance of `WebSocket`\n        this.paused    = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n    }\n\n    /**\n     * This method creates the instance of `WebSocket` and registers event handlers.\n     * @param {boolean} tls This argument is in order to select protocol (either `wss` or `ws`).\n     * @param {string} host This argument is server's hostname.\n     * @param {number} port This argument is port number for connection.\n     * @param {string} path This argument is file that is executed in server side.\n     * @param {function} openCallback This argument is invoked as `onopen` event handler in the instance of `WebSocket`.\n     * @param {function} closeCallback This argument is invoked as `onclose` event handler in the instance of `WebSocket`.\n     * @param {function} errorCallback This argument is invoked as `onerror` event handler in the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    setup(tls, host, port, path, openCallback, closeCallback, errorCallback) {\n        /*\n        if (!navigator.onLine) {\n            // Clear\n            this.isActive = false;\n            this.paused   = true;\n            this.connect();\n            this.websocket = null;\n\n            throw new Error('Now Offline.');\n        }\n        */\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('tls' in properties) {\n                tls = properties.tls;\n            }\n\n            if ('host' in properties) {\n                host = properties.host;\n            }\n\n            if ('port' in properties) {\n                port = properties.port;\n            }\n\n            if ('path' in properties) {\n                path = properties.path;\n            }\n\n            if ('open' in properties) {\n                openCallback = properties.open;\n            }\n\n            if ('close' in properties) {\n                closeCallback = properties.close;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n        }\n\n        const scheme = tls ? 'wss://' : 'ws://';\n\n        if (path.charAt(0) !== '/') {\n            path = `/${path}`;\n        }\n\n        const p = parseInt(port, 10);\n\n        if (isNaN(p) || (p < 0) || (p > 65535)) {\n            return this;\n        }\n\n        this.websocket = new WebSocket(`${scheme}${host}:${p}${path}`);\n        this.websocket.binaryType = 'arraybuffer';\n\n        this.websocket.onopen = event => {\n            if (Object.prototype.toString.call(openCallback) === '[object Function]') {\n                openCallback(event);\n            }\n        };\n\n        this.websocket.onclose = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(closeCallback) === '[object Function]') {\n                closeCallback(event);\n            }\n        };\n\n        this.websocket.onerror = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(event);\n            }\n        };\n\n        this.websocket.onmessage = event => {\n            if (!this.isActive) {\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n\n                return;\n            }\n\n            if (event.data instanceof ArrayBuffer) {\n                const total  = event.data.byteLength / Float32Array.BYTES_PER_ELEMENT;\n                const length = Math.floor(total / 2);\n                const offset = length * Float32Array.BYTES_PER_ELEMENT;\n\n                const bufferLs = new Float32Array(event.data,      0, length);  // Get Left  channel data\n                const bufferRs = new Float32Array(event.data, offset, length);  // Get Right channel data\n\n                // Start drawing sound wave\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                this.receiver.onaudioprocess = event => {\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (bufferLs instanceof Float32Array) {outputLs.set(bufferLs);}\n                    if (bufferRs instanceof Float32Array) {outputRs.set(bufferRs);}\n\n                    // bufferLs = null;\n                    // bufferRs = null;\n\n                    if (!this.isActive || (this.websocket === null)) {\n                        this.analyser.stop('time');\n                        this.analyser.stop('fft');\n                    }\n                };\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes according to state.\n     * @return {Session} This is returned for method chain.\n     */\n    connect() {\n        // Clear connection\n        this.receiver.disconnect(0);\n        this.sender.disconnect(0);\n\n        this.receiver.onaudioprocess = null;\n        this.sender.onaudioprocess   = null;\n\n        if (this.isActive) {\n            // ScriptProcessorNode (Input) -> Analyser\n            this.receiver.connect(this.analyser.input);\n\n            // ScriptProcessorNode (Input) -> AudioDestinationNode (Output)\n            this.receiver.connect(this.context.destination);\n        } else {\n            this.paused = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sends sound data to server.\n     * @return {Session} This is returned for method chain.\n     */\n    start() {\n        if (this.isActive && this.isConnected() && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.sender.bufferSize;\n\n            this.sender.onaudioprocess = event => {\n                if (this.isActive && this.isConnected()) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const buffer = new Float32Array(2 * bufferSize);\n                    const offset = parseInt((buffer.length / 2), 10);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        buffer[i]          = inputLs[i];\n                        buffer[offset + i] = inputRs[i];\n                    }\n\n                    if (this.websocket.bufferedAmount === 0) {\n                        this.websocket.send(buffer);\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method closes connection to server and destroys the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    close() {\n        if (this.websocket instanceof WebSocket) {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n            this.websocket.close();\n\n            this.websocket = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether there is the connection to server.\n     * @return {boolean} If the connection to server exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isConnected() {\n        return (this.websocket instanceof WebSocket) && (this.websocket.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @param {function} stateCallback This argument is invoked when `bufferedAmount` equals to 0.\n     * @param {function} waitCallback This argument is invoked until `bufferedAmount` equals to 0.\n     * @return {Session} This is returned for method chain.\n     */\n    state(state, stateCallback, waitCallback) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (Object.prototype.toString.call(waitCallback) === '[object Function]') {\n            waitCallback();\n        }\n\n        const intervalid = window.setInterval(() => {\n            if ((this.websocket instanceof WebSocket) && (this.websocket.bufferedAmount !== 0)) {\n                return;\n            }\n\n            if (String(state).toLowerCase() === 'toggle') {\n                this.isActive = !this.isActive;\n            } else {\n                this.isActive = Boolean(state);\n            }\n\n            this.connect();\n\n            if (Object.prototype.toString.call(stateCallback) === '[object Function]') {\n                stateCallback();\n            }\n\n            window.clearInterval(intervalid);\n        }, 10);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `WebSocket`.\n     * @return {WebSocket}\n     */\n    get() {\n        return this.websocket;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Session]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines common properties for effector classes.\n * @constructor\n */\nexport default class Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.isActive = true;\n\n        this.context = context;\n\n        // for connecting external node\n        this.input  = context.createGain();\n        this.output = context.createGain();\n\n        // for LFO (Low Frequency Oscillator)\n        // LFO changes parameter cyclically\n        this.lfo       = context.createOscillator();\n        this.depth     = context.createGain();\n        this.rate      = this.lfo.frequency;\n        this.processor = context.createScriptProcessor(bufferSize, 1, 2);\n\n        // for legacy browsers\n        this.lfo.start = this.lfo.start || this.lfo.noteOn;\n        this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n        this.values = {};\n\n        this.isStop = true;\n    }\n\n    /**\n     * This abstract method gets or sets parameter.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Effector} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @abstract\n     */\n    param() {\n    }\n\n    /**\n     * This abstract method connects nodes according to state.\n     * @abstract\n     */\n    connect() {\n    }\n\n    /**\n     * This method starts LFO. Namely, this method starts effector.\n     * @param {number} startTime This argument is in order to schedule parameter.\n     * @return {Effector} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops LFO, and creates the instance of `OscillatorNode` again.\n     * @param {number} stopTime This argument is in order to schedule parameter.\n     * @param {number} releaseTime This argument is in order to schedule parameter when it is necessary to consider release time.\n     * @return {Effector} This is returned for method chain.\n     */\n    stop(stopTime, releaseTime) {\n        if (this.isActive && !this.isStop) {\n            let s = parseFloat(stopTime);\n            let r = parseFloat(releaseTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            if (isNaN(r) || (r < 0)) {\n                r = 0;\n            }\n\n            // for saving value\n            const type = this.lfo.type;\n            const rate = this.lfo.frequency.value;\n\n            // Destroy the instance of `OscillatorNode`\n            this.lfo.stop(s + r);\n\n            // Create the instance of `OscillatorNode` again\n            this.lfo = this.context.createOscillator();\n\n           // for legacy browsers\n            this.lfo.start = this.lfo.start || this.lfo.noteOn;\n            this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n            // Set the saved value\n            this.lfo.type            = type;\n            this.lfo.frequency.value = rate;\n\n            this.rate = this.lfo.frequency;\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Effector} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        // Start LFO\n        this.start(this.context.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     * @abstract\n     */\n    params() {\n        return {};\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     * @abstract\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Effector]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Compressor extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.compressor = context.createDynamicsCompressor();\n\n        // Set default value\n        this.compressor.threshold.value = -24;\n        this.compressor.knee.value      = 30;\n        this.compressor.ratio.value     = 12;\n        this.compressor.attack.value    = 0.003;\n        this.compressor.release.value   = 0.25;\n\n        // `Compressor` is connected by default\n        this.state(true);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.compressor) {\n                if (value === undefined) {\n                    return this.compressor[k].value;\n                }\n\n                const v = parseFloat(value);\n\n                const minValues = {\n                    'threshold' : -100,\n                    'knee'      : 0,\n                    'ratio'     : 1,\n                    'attack'    : 0,\n                    'release'   : 0\n                };\n\n                const maxValues = {\n                    'threshold' : 0,\n                    'knee'      : 40,\n                    'ratio'     : 20,\n                    'attack'    : 1,\n                    'release'   : 1\n                };\n\n                const min = minValues[k];\n                const max = maxValues[k];\n\n                if ((v >= min) && (v <= max)) {\n                    this.compressor[k].value = v;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.compressor.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n            // GainNode (Input) -> DynamicsCompressorNode -> GainNode (Output)\n            this.input.connect(this.compressor);\n            this.compressor.connect(this.output);\n        } else {\n            // Effect OFF\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'threshold' : this.compressor.threshold.value,\n            'knee'      : this.compressor.knee.value,\n            'ratio'     : this.compressor.ratio.value,\n            'attack'    : this.compressor.attack.value,\n            'release'   : this.compressor.release.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Compressor]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Distortion extends Effector {\n    static CLEAN      = 'clean';\n    static CRUNCH     = 'crunch';\n    static OVERDRIVE  = 'overdrive';\n    static DISTORTION = 'distortion';\n    static FUZZ       = 'fuzz';\n\n    static AMOUNTS = {\n        'CLEAN'      : 0.0,\n        'CRUNCH'     : 0.5,\n        'OVERDRIVE'  : 0.7,\n        'DISTORTION' : 0.8,\n        'FUZZ'       : 0.9\n    };\n\n    /**\n     * This class (static) method creates the instance of `Float32Array` for distortion.\n     * @param {number} amount This argument is the depth of distortion.\n     * @param {number} numberOfSamples This argument is the size of `Float32Array`.\n     * @return {Float32Array|null} This is `curve` property in `WaveShaperNode`.\n     */\n    static createCurve = (amount, numberOfSamples) => {\n        if ((amount > 0) && (amount < 1)) {\n            const curves = new Float32Array(numberOfSamples);\n\n            const k = (2 * amount) / (1 - amount);\n\n            for (let i = 0; i < numberOfSamples; i++) {\n                // LINEAR INTERPOLATION: x := (c - a) * (z - y) / (b - a) + y\n                // a = 0, b = 2048, z = 1, y = -1, c = i\n                const x = (((i - 0) * (1 - (-1))) / (numberOfSamples - 0)) + (-1);\n                curves[i] = ((1 + k) * x) / (1 + k * Math.abs(x));\n            }\n\n            return curves;\n        }\n\n        return null;  // Clean sound (default value)\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.distortion = context.createWaveShaper();\n        this.drive      = context.createGain();\n        this.color      = context.createBiquadFilter();\n        this.tone       = context.createBiquadFilter();\n\n        // Distortion type\n        this.type = Distortion.CLEAN;\n\n        // for creating curve\n        this.numberOfSamples = 4096;\n\n        // Initialize parameters\n        this.drive.gain.value      = 1;\n        this.color.type            = (typeof this.color.type === 'string') ? 'bandpass' : (this.color.BANDPASS || 2);\n        this.color.frequency.value = 350;\n        this.color.Q.value         = Math.SQRT1_2;\n        this.color.gain.value      = 0;  // Not used\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n\n        // `Distortion` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else  {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'curve':\n                    if (value === undefined) {\n                        return this.distortion.curve;\n                    }\n\n                    let curve = null;\n\n                    switch (String(value).toLowerCase()) {\n                        case Distortion.CLEAN:\n                            this.type = Distortion.CLEAN;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CLEAN, this.numberOfSamples);\n                            break;\n                        case Distortion.CRUNCH:\n                            this.type = Distortion.CRUNCH;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CRUNCH, this.numberOfSamples);\n                            break;\n                        case Distortion.OVERDRIVE:\n                            this.type = Distortion.OVERDRIVE;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.OVERDRIVE, this.numberOfSamples);\n                            break;\n                        case Distortion.DISTORTION:\n                            this.type = Distortion.DISTORTION;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.DISTORTION, this.numberOfSamples);\n                            break;\n                        case Distortion.FUZZ:\n                            this.type = Distortion.FUZZ;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.FUZZ, this.numberOfSamples);\n                            break;\n                        default:\n                            if (value instanceof Float32Array) {\n                                curve = value;\n                            }\n\n                            break;\n                    }\n\n                    this.distortion.curve = curve;\n\n                    break;\n                case 'samples':\n                    if (value === undefined) {\n                        return this.numberOfSamples;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    if (v >= 0) {\n                        this.numberOfSamples = v;\n                        this.param('curve', this.type);\n                    }\n\n                    break;\n                case 'drive':\n                    if (value === undefined) {\n                        return this.drive.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.drive.gain.value = v;\n                    }\n\n                    break;\n                case 'color':\n                case 'tone' :\n                    if (value === undefined) {\n                        return this[k].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.distortion.disconnect(0);\n        this.drive.disconnect(0);\n        this.color.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Color) -> WaveShaperNode (Distortion) -> GainNode (Drive) -> BiquadFilterNode (Tone) -> GainNode (Output)\n            this.input.connect(this.color);\n            this.color.connect(this.distortion);\n            this.distortion.connect(this.drive);\n            this.drive.connect(this.tone);\n            this.tone.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'   : this.isActive,\n            'curve'   : this.type,\n            'samples' : this.numberOfSamples,\n            'drive'   : this.drive.gain.value,\n            'color'   : this.color.frequency.value,\n            'tone'    : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Distortion]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Wah extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.lowpass = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.lowpass.type            = (typeof this.lowpass.type === 'string') ? 'lowpass' : (this.lowpass.LOWPASS || 0);\n        this.lowpass.frequency.value = 350;\n        this.lowpass.Q.value         = 1;\n        this.lowpass.gain.value      = 0;  // Not used\n\n        this.depth.gain.value  = 0;\n        this.rate.value        = 0;\n        this.depthRate         = 0;\n\n        // `Wah` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.lowpass.frequency);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.lowpass.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.frequency.value = v;\n                        this.depth.gain.value        = this.lowpass.frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.lowpass.frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.lowpass.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.Q.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.lowpass.frequency);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.lowpass.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Low-Pass Filter) -> GainNode (Output)\n            this.input.connect(this.lowpass);\n            this.lowpass.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'cutoff'    : this.lowpass.frequency.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'resonance' : this.lowpass.Q.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Wah]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Equalizer extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     **/\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.bass     = context.createBiquadFilter();\n        this.middle   = context.createBiquadFilter();\n        this.treble   = context.createBiquadFilter();\n        this.presence = context.createBiquadFilter();\n\n        // Set filter type\n        this.bass.type     = (typeof this.bass.type     === 'string') ? 'lowshelf'  : (this.bass.LOWSHELF      || 3);\n        this.middle.type   = (typeof this.middle.type   === 'string') ? 'peaking'   : (this.middle.PEAKING     || 5);\n        this.treble.type   = (typeof this.treble.type   === 'string') ? 'peaking'   : (this.treble.PEAKING     || 5);\n        this.presence.type = (typeof this.presence.type === 'string') ? 'highshelf' : (this.presence.HIGHSHELF || 4);\n\n        // Set cutoff frequency\n        this.bass.frequency.value     =  500;  // 500 Hz\n        this.middle.frequency.value   = 1000;  // 1 kHz\n        this.treble.frequency.value   = 2000;  // 2 kHz\n        this.presence.frequency.value = 4000;  // 4 kHz\n\n        // Set Q\n        // this.bass.Q.value     = Math.SQRT1_2;  // Not used\n        this.middle.Q.value   = Math.SQRT1_2;\n        this.treble.Q.value   = Math.SQRT1_2;\n        // this.presence.Q.value = Math.SQRT1_2;  // Not used\n\n        // Set Gain\n        this.bass.gain.value     = 0;\n        this.middle.gain.value   = 0;\n        this.treble.gain.value   = 0;\n        this.presence.gain.value = 0;\n\n        // `Equalizer` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'bass'    :\n                case 'middle'  :\n                case 'treble'  :\n                case 'presence':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.bass.disconnect(0);\n        this.middle.disconnect(0);\n        this.treble.disconnect(0);\n        this.presence.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Bass) -> BiquadFilterNode (Middle) -> BiquadFilterNode (Treble) -> BiquadFilterNode (Presence) -> GainNode (Output)\n            this.input.connect(this.bass);\n            this.bass.connect(this.middle);\n            this.middle.connect(this.treble);\n            this.treble.connect(this.presence);\n            this.presence.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'bass'     : this.bass.gain.value,\n            'middle'   : this.middle.gain.value,\n            'treble'   : this.treble.gain.value,\n            'presence' : this.presence.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Equalizer]';\n    }\n}\n\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Filter extends Effector {\n    // for legacy browsers\n    static FILTER_TYPES = {\n        'lowpass'   : 0,\n        'highpass'  : 1,\n        'bandpass'  : 2,\n        'lowshelf'  : 3,\n        'highshelf' : 4,\n        'peaking'   : 5,\n        'notch'     : 6,\n        'allpass'   : 7\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.filter = context.createBiquadFilter();\n\n        // for legacy browsers\n        this.filter.frequency.setTargetAtTime = this.filter.frequency.setTargetAtTime || this.filter.frequency.setTargetValueAtTime;\n\n        // Initialize parameters\n        this.filter.type            = (typeof this.filter.type === 'string') ? 'lowpass' : (this.filter.LOWPASS || 0);\n        this.filter.frequency.value = 350;\n        this.filter.Q.value         = 1;\n        this.filter.gain.value      = 0;\n\n        this.maxFrequency = this.filter.frequency.value;\n        this.range        = 0.1;  // 10% -> between `this.maxFrequency * 0.1` and `this.maxFrequency`\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 1.0;\n        this.release = 1.0;\n\n        // `Filter` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.filter.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Filter.FILTER_TYPES) {\n                        this.filter.type = (typeof this.filter.type === 'string') ? v : Filter.FILTER_TYPES[v];\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filter.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.maxFrequency           = v;\n                        this.filter.frequency.value = v;\n                    }\n\n                    break;\n                case 'gain':\n                    if (value === undefined) {\n                        return this.filter.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.gain.value = v;\n                    }\n\n                    break;\n                case 'q':\n                    if (value === undefined) {\n                        return this.filter.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.Q.value = v;\n                    }\n\n                    break;\n                case 'range':\n                    if (value === undefined) {\n                        return this.range;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.range= v;\n                    }\n\n                    break;\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.filter.disconnect(0);\n\n        if (this.isActive) {\n            // Effector ON\n\n            // GainNode (Input) -> BiquadFilterNode -> GainNode (Output)\n            this.input.connect(this.filter);\n            this.filter.connect(this.output);\n        } else {\n            // Effector OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            const t0      = s;\n            const t1      = t0 + this.attack;\n            const t2      = this.decay;\n            const t2Value = this.sustain * this.maxFrequency;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t0);\n            this.filter.frequency.setValueAtTime(minFrequnecy, t0);\n            this.filter.frequency.linearRampToValueAtTime(this.maxFrequency, t1);  // Attack\n            this.filter.frequency.setTargetAtTime(t2Value, t1, t2);  // Decay -> Sustain\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime) {\n        if (this.isActive) {\n            let s = parseFloat(stopTime) - this.release;\n\n           if (isNaN(s) || (s < this.context.currentTime)) {\n               s = this.context.currentTime;\n           }\n\n            const t3 = s;\n            const t4 = this.release;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t3);\n            this.filter.frequency.setValueAtTime(this.filter.frequency.value, t3);\n            this.filter.frequency.setTargetAtTime(minFrequnecy, t3, t4);  // Sustain -> Release\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'type'      : this.filter.type,\n            'frequency' : this.filter.frequency.value,\n            'Q'         : this.filter.Q.value,\n            'gain'      : this.filter.gain.value,\n            'range'     : this.range,\n            'attack'    : this.attack,\n            'decay'     : this.decay,\n            'sustain'   : this.sustain,\n            'release'   : this.release\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Filter]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Autopanner extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createStereoPanner();\n\n        // Initialize parameters\n        this.panner.pan.value = 0;\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Autopanner` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (pan)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.panner.pan);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                       return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                       return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> StereoPannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.panner.pan);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Autopanner]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class AutopannerFallback extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitudeL = context.createGain();\n        this.amplitudeR = context.createGain();\n        this.splitter   = context.createChannelSplitter(2);\n        this.merger     = context.createChannelMerger(2);\n\n        this.amplitudeL.gain.value = 1;  // 1 +- depth\n        this.amplitudeR.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameters\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `AutopannerFallback` is not connected by default\n        this.state(false);\n\n        // LFO\n        this.lfoSplitter = context.createChannelSplitter(2);\n\n        // OscillatorNode (LFO) -> GainNode (Depth) -> ScriptProcessorNode -> ChannelSplitterNode -> AudioParam (gain) (L) / (R)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.processor);\n        this.processor.connect(this.lfoSplitter);\n        this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n        this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitudeL.disconnect(0);\n        this.amplitudeR.disconnect(0);\n        this.splitter.disconnect(0);\n        this.splitter.disconnect(1);\n        this.merger.disconnect(0);\n\n        if (this.isActive) {\n            // GainNode (Input) -> ChannelSplitterNode -> GainNode (L) / (R) -> ChannelMergerNode -> GainNode (Output)\n            this.input.connect(this.splitter);\n            this.splitter.connect(this.amplitudeL, 0, 0);\n            this.splitter.connect(this.amplitudeR, 1, 0);\n            this.amplitudeL.connect(this.merger, 0, 0);\n            this.amplitudeR.connect(this.merger, 0, 1);\n            this.merger.connect(this.output);\n        } else {\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                const inputs   = event.inputBuffer.getChannelData(0);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                if (this.isActive && (this.depth.gain.value !== 0) && (this.rate.value !== 0)) {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] =  inputs[i];\n                        outputRs[i] = -inputs[i];\n                    }\n                } else {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = 0;\n                        outputRs[i] = 0;\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.processor);\n            this.processor.connect(this.lfoSplitter);\n            this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n            this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule AutopannerFallback]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Tremolo extends Effector {\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Tremolo` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'wave':\n                    if (value === undefined) {\n                        return this.lfo.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Tremolo.WAVE_TYPES) {\n                        this.lfo.type = (typeof this.lfo.type === 'string') ? v : Tremolo.WAVE_TYPES[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value,\n            'wave'  : this.lfo.type\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Tremolo]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Ringmodulator extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 0;  // 0 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 1;\n        this.rate.value       = 0;\n\n        // `Ringmodulator` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Ringmodulator]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Phaser extends Effector {\n    static MAXIMUM_STAGES = 24;  // The maximum number of All-Pass Filters\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.numberOfStages = 12;  // The default number of All-Pass Filters\n        this.filters        = new Array(Phaser.MAXIMUM_STAGES);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i]                 = context.createBiquadFilter();\n            this.filters[i].type            = (typeof this.filters[i].type === 'string') ? 'allpass' : (this.filters[i].ALLPASS || 7);\n            this.filters[i].frequency.value = 350;\n            this.filters[i].Q.value         = 1;\n            this.filters[i].gain.value      = 0;  // Not used\n        }\n\n        this.mix      = context.createGain();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.depth.gain.value    = 0;\n        this.rate.value          = 0;\n        this.mix.gain.value      = 0;\n        this.feedback.gain.value = 0;\n        this.depthRate           = 0;\n\n        // `Phaser` is not connected by default\n        this.state(false);\n\n        // LFO\n        // GainNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.depth.connect(this.filters[i].frequency);\n        }\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'stage':\n                    if (value === undefined) {\n                        return this.numberOfStages;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case  0:\n                        case  2:\n                        case  4:\n                        case  8:\n                        case 12:\n                        case 24:\n                            this.numberOfStages = v;\n                            this.connect();\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filters[0].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[i].frequency.value = v;\n                        }\n\n                        this.depth.gain.value = this.filters[0].frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.filters[0].Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[0].Q.value = v;\n                        }\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.filters[0].frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i].disconnect(0);\n        }\n\n        this.mix.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive && (this.numberOfStages > 0)) {\n            // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.filters[0]);\n\n            for (let i = 0; i < this.numberOfStages; i++) {\n                if (i < (this.numberOfStages - 1)) {\n                    this.filters[i].connect(this.filters[i + 1]);\n                } else {\n                    this.filters[i].connect(this.mix);\n                    this.mix.connect(this.output);\n\n                    // Feedback\n                    // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Feedback) -> BiquadFilterNode (All-Pass Filter x N) ...\n                    this.filters[i].connect(this.feedback);\n                    this.feedback.connect(this.filters[0]);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n           // Connect nodes again\n           this.lfo.connect(this.depth);\n\n           for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n               this.depth.connect(this.filters[i].frequency);\n           }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'stage'     : this.numberOfStages,\n            'frequency' : this.filters[0].frequency.value,\n            'resonance' : this.filters[0].Q.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'mix'       : this.mix.gain.value,\n            'feedback'  : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Phaser]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Flanger extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Flanger` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (delayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Flanger]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Chorus extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Chorus` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (elayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Chorus]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Delay extends Effector {\n    static MAX_DELAY_TIME = 5;  // Max delay time is 5000 [ms]\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay(Delay.MAX_DELAY_TIME);\n        this.dry      = context.createGain();\n        this.wet      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.dry.gain.value        = 1;\n        this.wet.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n\n        // `Delay` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = Delay.MAX_DELAY_TIME;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                    }\n\n                    break;\n                case 'dry'     :\n                case 'wet'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Wet) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.wet);\n            this.wet.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'dry'      : this.dry.gain.value,\n            'wet'      : this.wet.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Delay]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Reverb extends Effector {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.rirs      = [];\n        this.convolver = context.createConvolver();\n        this.dry       = context.createGain();\n        this.wet       = context.createGain();\n        this.tone      = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.dry.gain.value       = 1;\n        this.wet.gain.value       = 0;\n        this.tone.type            = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value = 350;\n        this.tone.Q.value         = Math.SQRT1_2;\n        this.tone.gain.value      = 0;  // Not used\n\n        // `Reverb` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.convolver.buffer;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = this.rirs.length - 1;\n\n                    if (value === null) {\n                        this.convolver.buffer = null;\n\n                        // If `buffer` in `ConvolverNode` is `null` after setting the instance of `AudioBuffer`, `Reverb` is not OFF.\n                        // Therefore, `Reverb` is OFF by disconnecting nodes.\n                        this.input.disconnect(0);\n                        this.input.connect(this.output);\n                    } else if ((v >= min) && (v <= max)) {\n                        this.convolver.buffer = this.rirs[v];\n                        this.connect();\n                    }\n\n                    break;\n                case 'dry':\n                case 'wet':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                case 'rirs':\n                    return this.rirs;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.convolver.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> ConvolverNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.convolver);\n            this.convolver.connect(this.wet);\n            this.wet.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets instance of `AudioBuffer` to `ConvolverNode`.\n     * @param {AudioBuffer|ArrayBuffer} impulse This argument is in order to convolve impulse response.\n     *     This argument is the instance of `AudioBuffer` or `ArrayBuffer` for impulse response.\n     * @param {function} errorCallback This argument is in order to be invoked when error occurs.\n     * @return {Reverb} This is returned for method chain.\n     * @override\n     */\n    start(impulse, errorCallback) {\n        if ((impulse instanceof AudioBuffer) || (impulse === null)) {\n            this.convolver.buffer = impulse;\n            this.rirs.push(impulse);  // Add to preset\n        } else if (impulse instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.convolver.buffer = buffer;\n                this.rirs.push(buffer);  // Add to preset\n            };\n\n            if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n                errorCallback = () => {};\n            }\n\n            this.context.decodeAudioData(impulse, successCallback, errorCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax for Revreb presets.\n     * @param {Array.<string>|Array.<AudioBuffer>} rirs This argument is either URLs or the instances of `AudioBuffer` for impulse response.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked when the creating the instances of `AudioBuffer` was completed.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {Reverb} This is returned for method chain.\n     */\n    preset(rirs, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('rirs' in properties) {\n                rirs = properties.rirs;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(rirs)) {\n            rirs = [rirs];\n        }\n\n        this.rirs = new Array(rirs.length);\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogresss = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.rirs[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (let i = 0, len = this.rirs.length; i < len; i++) {\n                            if (this.rirs[i] === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, Reverb.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = rirs.length; i < len; i++) {\n            if (typeof rirs[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(rirs[i], i);\n            } else if (rirs[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.rirs[i] = rirs[i];\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'dry'   : this.dry.gain.value,\n            'wet'   : this.wet.gain.value,\n            'tone'  : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Reverb]';\n    }\n}\n","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Panner extends Effector {\n    static PANNING_MODELS = {\n        'equalpower' : 0,\n        'HRTF'       : 1\n    };\n\n    static DISTANCE_MODELS = {\n        'linear'      : 0,\n        'inverse'     : 1,\n        'exponential' : 2\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createPanner();\n\n        this.positions    = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.orientations = { 'x' : 1, 'y' : 0, 'z' : 0 };\n\n        this.panner.refDistance   = 1;\n        this.panner.maxDistance   = 10000;\n        this.panner.rolloffFactor = 1;\n\n        this.panner.coneInnerAngle = 360;\n        this.panner.coneOuterAngle = 360;\n        this.panner.coneOuterGain  = 0;\n\n        this.panner.panningModel  = (typeof this.panner.panningModel  === 'string') ? 'HRTF'    : (this.panner.HRTF || 1);\n        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? 'inverse' : (this.panner.INVERSE_DISTANCE || 1);\n\n        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n\n        // `Panner` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'ox':\n                case 'oy':\n                case 'oz':\n                    if (value === undefined) {\n                        return this.orientations[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.orientations[k.charAt(1)] = v;\n                        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n                    }\n\n                    break;\n                case 'refdistance':\n                    if (value === undefined) {\n                        return this.panner.refDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.panner.refDistance = v;\n                    }\n\n                    break;\n                case 'maxdistance':\n                    if (value === undefined) {\n                        return this.panner.maxDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.panner.maxDistance = v;\n                    }\n\n                    break;\n                case 'rollofffactor':\n                    if (value === undefined) {\n                        return this.panner.rolloffFactor;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.rolloffFactor = v;\n                    }\n\n                    break;\n                case 'coneinnerangle':\n                    if (value === undefined) {\n                        return this.panner.coneInnerAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneInnerAngle = v;\n                    }\n\n                    break;\n                case 'coneouterangle':\n                    if (value === undefined) {\n                        return this.panner.coneOuterAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterAngle = v;\n                    }\n\n                    break;\n                case 'coneoutergain':\n                    if (value === undefined) {\n                        return this.panner.coneOuterGain;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterGain = v;\n                    }\n\n                    break;\n                case 'panningmodel':\n                    if (value === undefined) {\n                        return this.panner.panningModel;\n                    }\n\n                    v = /HRTF/i.test(value) ? String(value).toUpperCase() : String(value).toLowerCase();\n\n                    if (v in Panner.PANNING_MODELS) {\n                        this.panner.panningModel = (typeof this.panner.panningModel === 'string') ? v : Panner.PANNING_MODELS[v];\n                    }\n\n                    break;\n                case 'distancemodel':\n                    if (value === undefined) {\n                        return this.panner.distanceModel;\n                    }\n\n                    v = String(value).replace(/-/g, '').toLowerCase();\n\n                    if (v in Panner.DISTANCE_MODELS) {\n                        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? v : Panner.DISTANCE_MODELS[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> PannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'          : this.isActive,\n            'positions'      : this.positions,\n            'orientations'   : this.orientations,\n            'refDistance'    : this.panner.refDistance,\n            'maxDistance'    : this.panner.maxDistance,\n            'rolloffFactor'  : this.panner.rolloffFactor,\n            'coneInnerAngle' : this.panner.coneInnerAngle,\n            'coneOuterAngle' : this.panner.coneOuterAngle,\n            'coneOuterGain'  : this.panner.coneOuterGain,\n            'panningModel'   : this.panner.panningModel,\n            'distanceModel'  : this.panner.distanceModel\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Panner]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines property for audio listener.\n * These properties relate to properties of `PannerNode`.\n * @constructor\n */\nexport default class Listener {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        // the instance of `AudioListener`\n        this.listener = context.listener;\n\n        // Set default value\n        this.positions = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.fronts    = { 'x' : 0, 'y' : 0, 'z' : -1 };\n        this.ups       = { 'x' : 0, 'y' : 1, 'z' : 0 };\n\n        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Listener} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'fx':\n                case 'fy':\n                case 'fz':\n                    if (value === undefined) {\n                        return this.fronts[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.fronts[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                case 'ux':\n                case 'uy':\n                case 'uz':\n                    if (value === undefined) {\n                        return this.ups[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.ups[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'positions' : this.positions,\n            'fronts'    : this.fronts,\n            'ups'       : this.ups\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Listener]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Envelope Generator.\n * @constructor\n */\nexport default class EnvelopeGenerator {\n    static MIN_GAIN = 1e-3;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        /** @type {Array.<GainNode>} */\n        this.generators = [];\n\n        // for `GainNode`\n        this.activeIndexes = [];\n        this.activeCounter = 0;\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 0.5;\n        this.release = 1.0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|EnvelopeGenerator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects the instance of `AudioNode`.\n     * @param {number} index This argument is in order to select the instance of `GainNode` that is Envelope Generator.\n     * @param {AudioNode} input This argument is the instance of `AudioNode` as input.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    ready(index, input, output) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        if ((input instanceof AudioNode) && (output instanceof AudioNode)) {\n            input.connect(this.generators[i]);\n            this.generators[i].connect(output);\n        } else if (input instanceof AudioNode) {\n            input.connect(this.generators[i]);\n        } else if (output instanceof AudioNode) {\n            this.generators[i].connect(output);\n        }\n\n        this.activeIndexes[i] = i;\n        this.activeCounter++;\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack -> Decay -> Sustain).\n     * @param {number} startTime This argument is the start time of Attack.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    start(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Attack -> Decay -> Sustain\n        const t0      = s;\n        const t1      = t0 + this.attack;\n        const t2      = this.decay;\n        const t2Value = this.sustain;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // Start from `gain.value = 0`\n            this.generators[activeIndex].gain.cancelScheduledValues(t0);\n            this.generators[activeIndex].gain.setValueAtTime(0, t0);\n\n            // Attack : `gain.value` increases linearly until assigned time (t1)\n            this.generators[activeIndex].gain.linearRampToValueAtTime(1, t1);\n\n            // Decay -> Sustain : `gain.value` gradually decreases to value of Sustain during of Decay time (t2) from assigned time (t1)\n            this.generators[activeIndex].gain.setTargetAtTime(t2Value, t1, t2);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack or Decay or Sustain -> Release).\n     * @param {number} stopTime This argument is the start time of Release.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        let s = parseFloat(stopTime) - this.release;\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Sustain -> Release\n        const t3 = s;\n        const t4 = this.release;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // in the case of mouseup on the way of Decay\n            this.generators[activeIndex].gain.cancelScheduledValues(t3);\n            this.generators[activeIndex].gain.setValueAtTime(this.generators[activeIndex].gain.value, t3);\n\n            // Release : `gain.value` gradually decreases to 0 during of Release time (t4) from assigned time (t3)\n            this.generators[activeIndex].gain.setTargetAtTime(0, t3, t4);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {GainNode} This is returned as the instance of `GainNode` for Envelope Generator.\n     */\n    getGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        return this.generators[i];\n    }\n\n    /**\n     * This method sets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    setGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        this.generators[i] = this.context.createGain();\n\n        // for legacy browsers\n        this.generators[i].gain.setTargetAtTime = this.generators[i].gain.setTargetAtTime || this.generators[i].gain.setTargetValueAtTime;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the all of gain schedulings have ended.\n     * @return {boolean} If the all of gain schedulings have ended, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStop() {\n        let counter = 0;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            if (this.generators[activeIndex].gain.value > EnvelopeGenerator.MIN_GAIN) {\n                return false;\n            }\n\n            counter++;\n\n            // the all of schedulings are stopped ?\n            if (counter === this.activeCounter) {\n                return true;\n            }\n        }\n    }\n\n    /**\n     * This method clears variables for managing the instance of `GainNode`.\n     * @param {boolean} isDisconnect This argument is in order to determine whether disconnect `AudioNode`.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    clear(isDisconnect) {\n        this.activeIndexes.length = 0;\n        this.activeCounter = 0;\n\n        for (const generator of this.generators) {\n            generator.gain.cancelScheduledValues(this.context.currentTime);\n            generator.gain.value = 1;\n\n            if (isDisconnect) {\n                generator.disconnect(0);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'attack'  : this.attack,\n            'decay'   : this.decay,\n            'sustain' : this.sustain,\n            'release' : this.release\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule EnvelopeGenerator]';\n    }\n}\n","'use strict';\n\nimport Analyser from './Analyser';\nimport Recorder from './Recorder';\nimport Session from './Session';\nimport Compressor from './Compressor';\nimport Distortion from './Distortion';\nimport Wah from './Wah';\nimport Equalizer from './Equalizer';\nimport Filter from './Filter';\nimport Autopanner from './Autopanner';\nimport AutopannerFallback from './AutopannerFallback';\nimport Tremolo from './Tremolo';\nimport Ringmodulator from './Ringmodulator';\nimport Phaser from './Phaser';\nimport Flanger from './Flanger';\nimport Chorus from './Chorus';\nimport Delay from './Delay';\nimport Reverb from './Reverb';\nimport Panner from './Panner';\nimport Listener from './Listener';\nimport EnvelopeGenerator from './EnvelopeGenerator';\n\n/**\n * This class is superclass that is the top in this library.\n * This library's users do not create the instance of `SoundModule`.\n * This class is used for inherit in subclass (`OscillatorModule`, `OneshotModule`, `AudioModule`, `MediaModule`, `StreamModule`, `MixerModule`).\n * Therefore, this class defines the common properties for each sound sources.\n * @constructor\n */\nexport default class SoundModule {\n    static NUMBER_OF_INPUTS  = 2;\n    static NUMBER_OF_OUTPUTS = 2;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 256, 512, 1024, 2048, 4096, 8192, 16384.\n     *     However, the opportunity for designating buffer size is not so much.\n     *     The reason why is that the constructor of `SoundModule` selects buffer size automaticly.\n     *     This buffer size can be changed explicitly by calling `resize` method.\n     */\n    constructor(context, bufferSize) {\n        this.context    = context;\n        this.sampleRate = context.sampleRate;\n\n        const userAgent = navigator.userAgent;\n\n        if (bufferSize !== undefined) {\n            switch (parseInt(bufferSize, 10)) {\n                case   256:\n                case   512:\n                case  1024:\n                case  2048:\n                case  4096:\n                case  8192:\n                case 16384:\n                    this.bufferSize = parseInt(bufferSize, 10);\n                    break;\n                default:\n                    return;\n            }\n        } else if (/(Win(dows )?NT 6\\.2)/.test(userAgent)) {\n            this.bufferSize = 1024;  // Windows 8\n        } else if (/(Win(dows )?NT 6\\.1)/.test(userAgent)) {\n            this.bufferSize = 1024;  // Windows 7\n        } else if (/(Win(dows )?NT 6\\.0)/.test(userAgent)) {\n            this.bufferSize = 2048;  // Windows Vista\n        } else if (/Win(dows )?(NT 5\\.1|XP)/.test(userAgent)) {\n            this.bufferSize = 4096;  // Windows XP\n        } else if (/Mac|PPC/.test(userAgent)) {\n            this.bufferSize = 1024;  // Mac OS X\n        } else if (/Linux/.test(userAgent)) {\n            this.bufferSize = 8192;  // Linux\n        } else if (/iPhone|iPad|iPod/.test(userAgent)) {\n            this.bufferSize = 2048;  // iOS\n        } else {\n            this.bufferSize = 16384;  // Otherwise\n        }\n\n        this.mastervolume = context.createGain();\n        this.processor    = context.createScriptProcessor(this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n\n        this.analyser          = new Analyser(context);\n        this.recorder          = new Recorder(context, this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        this.session           = new Session(context, this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS, this.analyser);\n        this.compressor        = new Compressor(context, this.bufferSize);\n        this.distortion        = new Distortion(context, this.bufferSize);\n        this.wah               = new Wah(context, this.bufferSize);\n        this.equalizer         = new Equalizer(context, this.bufferSize);\n        this.filter            = new Filter(context, this.bufferSize);\n        this.autopanner        = context.createStereoPanner ? new Autopanner(context, this.bufferSize) : new AutopannerFallback(context, this.bufferSize);\n        this.tremolo           = new Tremolo(context, this.bufferSize);\n        this.ringmodulator     = new Ringmodulator(context, this.bufferSize);\n        this.phaser            = new Phaser(context, this.bufferSize);\n        this.flanger           = new Flanger(context, this.bufferSize);\n        this.chorus            = new Chorus(context, this.bufferSize);\n        this.delay             = new Delay(context, this.bufferSize);\n        this.reverb            = new Reverb(context, this.bufferSize);\n        this.panner            = new Panner(context, this.bufferSize);\n        this.listener          = new Listener(context);\n        this.envelopegenerator = new EnvelopeGenerator(context);  // for `OscillatorModule`, `OneshotModule`\n\n        // The default order for connection\n        this.modules = [\n            this.compressor,\n            this.distortion,\n            this.wah,\n            this.equalizer,\n            this.filter,\n            this.autopanner,\n            this.tremolo,\n            this.ringmodulator,\n            this.phaser,\n            this.flanger,\n            this.chorus,\n            this.delay,\n            this.reverb,\n            this.panner\n        ];\n    }\n\n    /** @abstract */\n    setup() {\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string} key This argument is property name.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v   = null;\n        let min = null;\n        let max = null;\n\n        switch (k) {\n            case 'mastervolume':\n                if (value === undefined) {\n                    return this.mastervolume.gain.value;\n                }\n\n                v   = parseFloat(value);\n                min = 0;\n                max = 1;\n\n                if ((v >= min) && (v <= max)) {\n                    this.mastervolume.gain.value = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @abstract */\n    ready() {\n    }\n\n    /** @abstract */\n    start() {\n    }\n\n    /** @abstract */\n    stop() {\n    }\n\n    /** @abstract */\n    get() {\n    }\n\n    /**\n     * This method changes buffer size for `ScriptProcessorNode`.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 256, 512, 1024, 2048, 4096, 8192, 16384.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    resize(bufferSize) {\n        this.processor = this.context.createScriptProcessor(bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        return this;\n    }\n\n    /**\n     * This method gets buffer size for `ScriptProcessorNode`.\n     * @return {number} This is returned as buffer size for `ScriptProcessorNode`.\n     */\n    getBufferSize() {\n        return this.processor.bufferSize;\n    }\n\n    /**\n     * This method connects nodes that are defined by this library and Web Audio API.\n     * @param {AudioNode} source This argument is `AudioNode` for input of sound.\n     * @param {Array.<Effector>} connects This argument is array for changing the default connection.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    connect(source, connects) {\n        // Customize connection ?\n        if (Array.isArray(connects)) {\n            this.modules = connects;\n        }\n\n        // Start connection\n        // AudioSourceNode (Input)-> node -> ... -> node -> GainNode (Master Volume) -> AnalyserNode  -> AudioDestinationNode (Output)\n        source.disconnect(0);  // Clear connection\n\n        if (this.modules.length > 0) {\n            source.connect(this.modules[0].input);\n        } else {\n            source.connect(this.mastervolume);\n        }\n\n        for (let i = 0, len = this.modules.length; i < len; i++) {\n            // Clear connection\n            this.modules[i].output.disconnect(0);\n\n            if (i < (this.modules.length - 1)) {\n                // Connect to next node\n                this.modules[i].output.connect(this.modules[i + 1].input);\n            } else {\n                this.modules[i].output.connect(this.mastervolume);\n            }\n        }\n\n        this.mastervolume.connect(this.context.destination);\n\n        // for analyser\n        this.mastervolume.connect(this.analyser.input);\n\n        // for recording\n        this.mastervolume.connect(this.recorder.processor);\n        this.recorder.processor.connect(this.context.destination);\n\n        // for session\n        this.mastervolume.connect(this.session.sender);\n        this.session.sender.connect(this.context.destination);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of module that is defined by this library. This method enables to access the instance of module by unified call.\n     * @param {string} module This argument is module's name.\n     * @return {Analyser|Recorder|Session|Effector|Listener|EnvelopeGenerator|Glide|VocalCanceler|NoiseGate} This value is the instance of module.\n     */\n    module(module) {\n        const m = String(module).replace(/-/g, '').toLowerCase();\n\n        switch (m) {\n            case 'analyser'     :\n            case 'recorder'     :\n            case 'session'      :\n            case 'compressor'   :\n            case 'distortion'   :\n            case 'wah'          :\n            case 'equalizer'    :\n            case 'filter'       :\n            case 'autopanner'   :\n            case 'tremolo'      :\n            case 'ringmodulator':\n            case 'phaser'       :\n            case 'flanger'      :\n            case 'chorus'       :\n            case 'delay'        :\n            case 'reverb'       :\n            case 'panner'       :\n            case 'listener'     :\n                return this[m];\n            case 'envelopegenerator':\n            case 'eg'               :\n                // OscillatorModule, OneshotModule, NoiseModule\n                return this.envelopegenerator;\n            case 'glide':\n                if (m in this) {\n                    return this[m];  // OscillatorModule\n                }\n\n                // fall through\n            case 'vocalcanceler':\n                if (m in this) {\n                    return this[m];  // AudioModule, MediaModule\n                }\n\n                // fall through\n            case 'noisegate':\n                if (m in this) {\n                    return this[m];  // StreamModule\n                }\n\n                // fall through\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method starts effectors.\n     * @param {number} startTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    on(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.start(s);\n        this.flanger.start(s);\n        this.phaser.start(s);\n        this.autopanner.start(s);\n        this.tremolo.start(s);\n        this.ringmodulator.start(s);\n        this.wah.start(s);\n        this.filter.start(s);\n\n        return this;\n    }\n\n    /**\n     * This method stops effectors.\n     * @param {number} stopTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    off(stopTime) {\n        let s = parseFloat(stopTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.stop(s);\n        this.flanger.stop(s);\n        this.phaser.stop(s);\n        this.autopanner.stop(s);\n        this.tremolo.stop(s);\n        this.ringmodulator.stop(s);\n        this.wah.stop(s);\n        // this.filter.stop(s);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {};\n\n        for (const module in this) {\n            if (Object.prototype.toString.call(this[module]) === '[object Function]') {\n                continue;\n            }\n\n            const m = module.toLowerCase();\n\n            if (m === 'mastervolume') {\n                params[m] = this[module].gain.value;  // AudioParam\n            } else if ((Object.prototype.toString.call(this[module]) === '[object Object]') && ('params' in this[module])) {\n                params[m] = this[module].params();\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for the instance of `OscillatorNode`.\n * @constructor\n */\nexport default class Oscillator {\n    // 1 Octave = 1200 cent\n    static OCTAVE = 1200;\n\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {boolean} state This argument is initial state.\n     */\n    constructor(context, state) {\n        this.isActive = state;\n\n        this.context = context;\n\n        this.source = context.createOscillator();\n\n        // for legacy browsers\n        this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n        this.source.start           = this.source.start           || this.source.noteOn;\n        this.source.stop            = this.source.stop            || this.source.noteOff;\n\n        this.volume = context.createGain();\n\n        // in order to not call in duplicate `start` or `stop`  method in the instance of `OscillatorNode`\n        this.isStop = true;\n\n        this.octave  = 0;\n        this.fine    = 0;\n        this.customs = {\n            'real' : new Float32Array([0, 1]),\n            'imag' : new Float32Array([0, 1])\n        };\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|Oscillator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.source.type;\n                    }\n\n                    if (Object.prototype.toString.call(value) !== '[object Object]') {\n                        v = String(value).toLowerCase();\n\n                        if (v in Oscillator.WAVE_TYPES) {\n                            this.source.type = (typeof this.source.type === 'string') ? v : Oscillator.WAVE_TYPES[v];\n                        }\n                    } else {\n                        // Custom wave\n                        if (('real' in value) && ('imag' in value)) {\n                            let reals = null;\n                            let imags = null;\n\n                            if (value.real instanceof Float32Array) {\n                                reals = value.real;\n                            } else if (Array.isArray(value.real)) {\n                                reals = new Float32Array(value.real);\n                            }\n\n                            if (value.imag instanceof Float32Array) {\n                                imags = value.imag;\n                            } else if (Array.isArray(value.imag)) {\n                                imags = new Float32Array(value.imag);\n                            }\n\n                            if ((reals instanceof Float32Array) && (imags instanceof Float32Array)) {\n                                const MAX_SIZE = 4096;  // This size is defined by specification\n\n                                if (reals.length > MAX_SIZE) {reals = reals.subarray(0, MAX_SIZE);}\n                                if (imags.length > MAX_SIZE) {imags = imags.subarray(0, MAX_SIZE);}\n\n                                // The 1st value is fixed by 0 (This is is defined by specification)\n                                if (reals[0] !== 0) {reals[0] = 0;}\n                                if (imags[0] !== 0) {imags[0] = 0;}\n\n                                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                                this.source.setPeriodicWave(periodicWave);\n                                this.customs.real = reals;\n                                this.customs.imag = imags;\n                            }\n                        }\n                    }\n\n                    break;\n                case 'octave':\n                    if (value === undefined) {\n                        return this.octave;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -4800 / Oscillator.OCTAVE;\n                    max =  4800 / Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.octave = v;\n                        this.source.detune.value = this.fine + (v * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'fine':\n                    if (value === undefined) {\n                        return this.fine;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -Oscillator.OCTAVE;\n                    max =  Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.fine = v;\n                        this.source.detune.value = v + (this.octave * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'volume':\n                case 'gain'  :\n                    if (value === undefined) {\n                        return this.volume.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.volume.gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    ready(output) {\n        if (this.isActive) {\n            // for saving value\n            const params = {\n                'type'      : this.source.type,\n                'frequency' : this.source.frequency.value,\n                'detune'    : this.source.detune.value\n            };\n\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.source.disconnect(0);\n            }\n\n            this.source = this.context.createOscillator();\n\n            // for legacy browsers\n            this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n            this.source.start           = this.source.start           || this.source.noteOn;\n            this.source.stop            = this.source.stop            || this.source.noteOff;\n\n            if (params.type === 'custom') {\n                // Custom wave\n                const reals        = this.customs.real;\n                const imags        = this.customs.imag;\n                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                this.source.setPeriodicWave(periodicWave);\n            } else {\n                this.source.type = params.type;\n            }\n\n            this.source.frequency.value = params.frequency;\n            this.source.detune.value    = params.detune;\n\n            this.volume.connect(output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts sound.\n     * @param {number} startTime This argument is the start time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive) {\n            this.source.start(startTime);\n            this.isStop = false;\n        } else {\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.isStop = true;\n            }\n\n            this.source.disconnect(0);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops sound.\n     * @param {number} stopTime This argument is the stop time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        if (!this.isStop) {\n            this.source.stop(stopTime);\n            this.source.disconnect(0);\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Oscillator} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `OscillatorNode`.\n     * @return {OscillatorNode}\n     */\n    get() {\n        return this.source;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Oscillator]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Glide.\n * @constructor\n */\nexport default class Glide {\n    static LINEAR      = 'linear';\n    static EXPONENTIAL = 'exponential';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.frequencies = {\n            'start' : -1,  // Abnormal value for the 1st sound\n            'end'   : 0\n        };\n\n        this.time = 0;             // Glide time\n        this.type = Glide.LINEAR;  // either 'linear' or 'exponential'\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Glide} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'time':\n                    if (value === undefined) {\n                        return this.time;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.time = v;\n                    }\n\n                    break;\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Glide.LINEAR) || (v === Glide.EXPONENTIAL)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets frequencies for Glide.\n     * @param {number} frequency This argument is the frequency at which glide ends.\n     * @return {Glide} This is returned for method chain.\n     */\n    ready(frequency) {\n        this.frequencies.end = frequency;\n\n        const diff = (this.frequencies.start === -1) ? 0 : (this.frequencies.end - this.frequencies.start);\n\n        if ((this.frequencies.start === -1) || (this.time === 0) || (diff === 0)) {\n            // The 1st sound or Glide OFF or The same sound\n            this.frequencies.start = this.frequencies.end;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts Glide.\n     * @param {OscillatorNode} oscillator This argument is the instance of `OscillatorNode`.\n     * @param {number} startTime This argument is the start time of Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    start(oscillator, startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        const t0 = s;\n        const t1 = t0 + this.time;\n\n        // Start Glide\n        oscillator.frequency.cancelScheduledValues(t0);\n        oscillator.frequency.setValueAtTime(this.frequencies.start, t0);\n        oscillator.frequency[`${this.type}RampToValueAtTime`](this.frequencies.end, t1);\n\n        return this;\n    }\n\n    /**\n     * This method stops Glide. Moreover, This method prepares for next Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    stop() {\n        // Stop Glide or on the way of Glide\n        this.frequencies.start = this.frequencies.end;\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Glide]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport Oscillator from './Oscillator';\nimport Glide from './Glide';\n\n/**\n * This subclass defines properties for creating sound.\n * Actually, properties for creating sound is defined in private class (`Oscillator`).\n * Therefore, this class manages these private classes for creating sound.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class OscillatorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        /** @type {Array.<Oscillator>} */\n        this.sources = [];\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n\n        this.glide = new Glide(context);\n    }\n\n    /**\n     * This method creates the instances of `Oscillator`.\n     * @param {Array.<boolean>|boolean} states This argument is initial state in the instance of `Oscillator`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    setup(states) {\n        // Clear\n        this.sources.length = 0;\n\n        if (!Array.isArray(states)) {\n            states = [states];\n        }\n\n        for (let i = 0, len = states.length ; i < len; i++) {\n            this.sources[i] = new Oscillator(this.context, Boolean(states[i]));\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OscillatorModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            return (r === undefined) ? this : r;\n        }\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(true);\n\n        return this;\n    }\n\n    /**\n     * This method starts some sounds that are active at the same time.\n     * @param {Array.<number>}|number} frequencies This argument each oscillator frequency. The default value is 0 Hz.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    start(frequencies, connects, processCallback) {\n        const startTime = this.context.currentTime + this.times.start;\n\n        // Validate the 1st argument\n        if (!Array.isArray(frequencies)) {\n            frequencies = [frequencies];\n        }\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            const f = parseFloat(frequencies[i]);\n            frequencies[i] = (f >= 0) ? f : 0;\n        }\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // ScriptProcessorNode (Mix oscillators) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor, connects);\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            if (i >= this.sources.length) {\n                break;\n            }\n\n            const oscillator = this.sources[i];\n            const frequency  = frequencies[i];\n\n            // GainNode (Volume) -> ScriptProcessorNode (Mix oscillators)\n            oscillator.ready(this.processor);\n\n            // OscillatorNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume)\n            this.envelopegenerator.ready(i, oscillator.source, oscillator.volume);\n\n            this.glide.ready(frequency).start(oscillator.source, startTime);\n\n            oscillator.start(startTime);\n        }\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                const inputLs  = event.inputBuffer.getChannelData(0);\n                const inputRs  = event.inputBuffer.getChannelData(1);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                // Stop ?\n                if (this.envelopegenerator.isStop()) {\n                    // Stop\n                    const stopTime = this.context.currentTime;\n\n                    for (const source of this.sources) {\n                        source.stop(stopTime);\n                    }\n\n                    this.off(stopTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops active sounds.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.glide.stop();\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `Oscillator` that is used in `OscillatorModule`.\n     * @param {number} index This argument is required in the case of designating `Oscillator`.\n     * @return {Array.<Oscillator>|Oscillator}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /**\n     * This method returns the number of oscillators.\n     * @return {number} This is returned as the number of oscillators.\n     */\n    length() {\n        return this.sources.length;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oscillator = {\n            'glide' : {\n                'type' : this.glide.param('type'),\n                'time' : this.glide.param('time')\n            }\n        };\n\n        for (let i = 0, len = this.sources.length; i < len; i++) {\n            const source = this.sources[i];\n\n            params.oscillator[`oscillator${i}`] = {\n                'state'  : source.state(),\n                'gain'   : source.param('gain'),\n                'type'   : source.param('type'),\n                'octave' : source.param('octave'),\n                'fine'   : source.param('fine')\n            };\n        }\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\n\n/**\n * This subclass defines properties for playing the one-shot audio.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class OneshotModule extends SoundModule {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.sources   = [];  /** @type {Array.<AudioBufferSourceNode>} */\n        this.resources = [];  /** @type {Array.<string>} */\n        this.buffers   = [];  /** @type {Array.<AudioBuffer>} */\n        this.volumes   = [];  /** @type {Array.<GainNode>} */\n        this.isStops   = [];  /** @type {Array.<boolean>} in order to not call in duplicate `start` or `stop` method in the instance of `AudioBufferSourceNode` */\n\n        // for audio sources\n        this.settings = [];  /** @type {Array.<object>} */\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        this.transpose = 1.0;\n\n        this.isStop = true;\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax.\n     * @param {Array.<string>|Array.<AudioBuffer>} resources This argument is either URLs or the instances of `AudioBuffer` for audio resources.\n     * @param {Array.<object>} settings This argument is the properties of each audio sources.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    setup(resources, settings, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('resources' in properties) {\n                resources = properties.resources;\n            }\n\n            if ('settings' in properties) {\n                settings = properties.settings;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(resources)) {\n            resources = [resources];\n        }\n\n        this.resources = resources;\n\n        if (!Array.isArray(settings)) {\n            settings = [settings];\n        }\n\n        this.buffers.length = resources.length;\n\n        for (let i = 0, len = settings.length; i < len; i++) {\n            if ('buffer' in settings[i]) {\n               const buffer = parseInt(settings[i].buffer, 10);\n\n                if ((buffer >= 0) && (buffer < this.buffers.length)) {\n                    settings[i].buffer = buffer;\n                } else {\n                    return this;\n                }\n            } else {\n                return this;\n            }\n\n            settings[i].rate   = (('rate' in settings[i]) && (settings[i].rate >= 0)) ? parseFloat(settings[i].rate) : 1;\n            settings[i].loop   = ('loop' in settings[i]) ? Boolean(settings[i].loop) : false;\n            settings[i].start  = (('start' in settings[i]) && (settings[i].start >= 0)) ? parseFloat(settings[i].start) : 0;\n            settings[i].end    = (('end' in settings[i]) && (settings[i].end >= 0)) ? parseFloat(settings[i].end) : 0;\n            settings[i].volume = (('volume' in settings[i]) && (settings[i].volume >=0) && (settings[i].volume <= 1)) ? parseFloat(settings[i].volume) : 1;\n\n            this.isStops[i] = true;\n            this.volumes[i] = this.context.createGain();\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        this.settings = settings;\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = error => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(error, OneshotModule.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogress = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, OneshotModule.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            // Success\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.buffers[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (const buffer of this.buffers) {\n                            if (buffer === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event, this.buffers);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, OneshotModule.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = this.resources.length; i < len; i++) {\n            if (typeof this.resources[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(this.resources[i], i);\n            } else if (this.resources[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.buffers[i] = this.resources[i];\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OneshotModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'transpose':\n                    if (value === undefined) {\n                        return this.transpose;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.transpose = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(false);\n\n        return this;\n    }\n\n    /**\n     * This method starts one-shot audio with the designated playback rate and volume.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    start(index, connects, processCallback) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex  = this.settings[selectedIndex].buffer;\n        const playbackRate = this.settings[selectedIndex].rate;\n        const loop         = this.settings[selectedIndex].loop;\n        const loopStart    = this.settings[selectedIndex].start;\n        const loopEnd      = this.settings[selectedIndex].end;\n        const volume       = this.settings[selectedIndex].volume;\n\n        if (!(this.buffers[bufferIndex] instanceof AudioBuffer)) {\n            // `setup` method has not been invoked\n            return this;\n        }\n\n        // the instance of `AudioBufferSourceNode` already exists ?\n        if (this.sources[selectedIndex] instanceof AudioBufferSourceNode) {\n            this.sources[selectedIndex].stop(this.context.currentTime);\n            this.sources[selectedIndex].disconnect(0);\n            this.sources[selectedIndex] = null;\n        }\n\n        const source = this.context.createBufferSource();\n\n        // for legacy browsers\n        source.start = source.start || source.noteGrainOn;\n        source.stop  = source.stop  || source.noteOff;\n\n        source.buffer = this.buffers[bufferIndex];\n\n        // Set properties\n        source.playbackRate.value = playbackRate * this.transpose;\n        source.loop               = loop;\n        source.loopStart          = loopStart;\n        source.loopEnd            = loopEnd;\n\n        this.volumes[selectedIndex].gain.value = volume;\n\n        this.envelopegenerator.clear(false);\n\n        // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n        this.envelopegenerator.ready(selectedIndex, source, this.volumes[selectedIndex]);\n        this.volumes[selectedIndex].connect(this.processor);\n        this.connect(this.processor, connects);\n\n        const startTime = this.context.currentTime + this.times.start;\n\n        source.start(startTime);\n\n        this.sources[selectedIndex] = source;\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.isStops[selectedIndex] = false;\n\n        // in the case of scheduling stop time\n        if (this.times.stop > 0) {\n            window.setTimeout(() => {\n                this.stop(selectedIndex);\n            }, (this.times.stop * 1000));\n        }\n\n        // Call on stopping audio\n        source.onended = () => {\n            this.isStops[selectedIndex] = true;\n        };\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                this.isStop = this.isStops.every(element => element);\n\n                if (this.isStop) {\n                    // Stop\n\n                    this.off(this.context.currentTime);\n\n                    this.envelopegenerator.clear(false);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the designated one-shot audio.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    stop(index) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex= this.settings[selectedIndex].buffer;\n\n        if (!((this.buffers[bufferIndex] instanceof AudioBuffer) && (this.sources[selectedIndex] instanceof AudioBufferSourceNode))) {\n            return this;\n        }\n\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBuffer` that is used in `OneshotModule`.\n     * @param {number} index This argument is required in the case of designating `AudioBuffer`.\n     * @return {Array.<AudioBuffer>|AudioBuffer}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.buffers.length)) ? this.buffers[i] : this.buffers;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oneshot = {\n            'transpose' : this.transpose\n        };\n\n        return params;\n    }\n\n    /**\n     * This method resets settings.\n     * @param {number} index This argument is in order to select target setting.\n     * @param {string} key This argument is in order to select parameter.\n     * @param {number|boolean} value This argument is new value.\n     * @return {OneshotModule} This is returned for method chain.\n     */\n    reset(index, key, value) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (String(key).toLowerCase() in this.settings[selectedIndex]) {\n            this.settings[selectedIndex][key.toLowerCase()] = value;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OneshotModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\n\nexport default class NoiseModule extends SoundModule {\n    static WHITE_NOISE    = 'whitenoise';\n    static PINK_NOISE     = 'pinknoise';\n    static BROWNIAN_NOISE = 'browniannoise';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.type = NoiseModule.WHITE_NOISE;\n\n        this.envelopegenerator.setGenerator(0);\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|NoiseModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = '';\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === NoiseModule.WHITE_NOISE) || (v === NoiseModule.PINK_NOISE) || (v === NoiseModule.BROWNIAN_NOISE)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(connects) {\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // GainNode (Envelope Generator) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.envelopegenerator.getGenerator(0), connects);\n\n        // ScriptProcessorNode (Input) -> GainNode (Envelope Generator)\n        this.envelopegenerator.ready(0, this.processor);\n\n        this.envelopegenerator.start(this.context.currentTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        const bufferSize = this.processor.bufferSize;\n\n        let lastOut = 0;\n\n        this.processor.onaudioprocess = event => {\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            if (this.envelopegenerator.isStop()) {\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n            } else {\n                switch (this.type) {\n                    case NoiseModule.WHITE_NOISE:\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = 2 * (Math.random() - 0.5);\n                            outputRs[i] = 2 * (Math.random() - 0.5);\n                        }\n\n                        break;\n                    case NoiseModule.PINK_NOISE:\n                        // ref: https://noisehack.com/generate-noise-web-audio-api/\n                        let b0 = 0;\n                        let b1 = 0;\n                        let b2 = 0;\n                        let b3 = 0;\n                        let b4 = 0;\n                        let b5 = 0;\n                        let b6 = 0;\n\n                        for (let i = 0; i < bufferSize; i++) {\n                            const white = (Math.random() * 2) - 1;\n\n                            b0 = (0.99886 * b0) + (white * 0.0555179);\n                            b1 = (0.99332 * b1) + (white * 0.0750759);\n                            b2 = (0.96900 * b2) + (white * 0.1538520);\n                            b3 = (0.86650 * b3) + (white * 0.3104856);\n                            b4 = (0.55000 * b4) + (white * 0.5329522);\n                            b5 = (-0.7616 * b5) - (white * 0.0168980);\n\n                            outputLs[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + (white * 0.5362);\n                            outputRs[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + (white * 0.5362);\n\n                            outputLs[i] *= 0.11;\n                            outputRs[i] *= 0.11;\n\n                            b6 = white * 0.115926;\n                        }\n\n                        break;\n                    case NoiseModule.BROWNIAN_NOISE:\n                        // ref: https://noisehack.com/generate-noise-web-audio-api/\n                        for (let i = 0; i < bufferSize; i++) {\n                            const white = (Math.random() * 2) - 1;\n\n                            outputLs[i] = (lastOut + (0.02 * white)) / 1.02;\n                            outputRs[i] = (lastOut + (0.02 * white)) / 1.02;\n\n                            lastOut = (lastOut + (0.02 * white)) / 1.02;\n\n                            outputLs[i] *= 3.5;\n                            outputRs[i] *= 3.5;\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n            }\n        };\n\n        return this;\n    }\n\n    /** @override */\n    stop() {\n        this.envelopegenerator.stop(this.context.currentTime);\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[NoiseModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Vocal Canceler.\n * @constructor\n */\nexport default class VocalCanceler {\n    constructor() {\n        this.depth = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|VocalCanceler} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method removes vocal part in the played audio.\n     * @param {number} dataL This argument is gain level for Left channel.\n     * @param {number} dataR This argument is gain level for Right channel.\n     * @return {number} This is returned as audio data except vocal part.\n     */\n    start(dataL, dataR) {\n        return dataL - (this.depth * dataR);\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule VocalCanceler]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport VocalCanceler from './VocalCanceler';\n\n/**\n * This subclass defines properties for playing the single audio.\n * This class creates audio player that has higher features than `HTMLAudioElment`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class AudioModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.source = context.createBufferSource();  // for the instance of `AudioBufferSourceNode`\n        this.buffer = null;                          // for the instance of `AudioBuffer`\n\n        this.currentTime = 0;\n\n        this.paused = true;\n\n        this.callbacks = {\n            'decode' : () => {},\n            'ready'  : () => {},\n            'start'  : () => {},\n            'stop'   : () => {},\n            'update' : () => {},\n            'ended'  : () => {},\n            'error'  : () => {}\n        };\n\n        this.vocalcanceler = new VocalCanceler();\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    setup(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = 0;\n            let min = 0;\n            let max = 0;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return this.source.playbackRate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1024;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.source.playbackRate.value = v;\n                    }\n\n                    break;\n                case 'loop'   :\n                case 'looping':\n                    if (value === undefined) {\n                        return this.source.loop;\n                    }\n\n                    this.source.loop = Boolean(value);\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    if (this.buffer instanceof AudioBuffer) {\n                        v   = parseFloat(value);\n                        max = this.buffer.duration;\n                        min = 0;\n\n                        if ((v >= min) && (v <= max)) {\n                            if (this.paused) {\n                                this.currentTime = v;\n                            } else {\n                                this.stop();\n                                this.start(v);\n                            }\n                        }\n                    } else {\n                        this.currentTime = 0;\n                    }\n\n                    break;\n                case 'duration':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.duration : 0;  // Getter only\n                case 'samplerate':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.sampleRate : this.sampleRate;  // Getter only\n                case 'channels':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.numberOfChannels : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n     * @param {ArrayBuffer} arrayBuffer This argument is the instance of `ArrayBuffer`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    ready(arrayBuffer) {\n        if (arrayBuffer instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.buffer = buffer;\n\n                this.analyser.start('timeOverviewL', buffer);\n                this.analyser.start('timeOverviewR', buffer);\n\n                this.callbacks.ready(buffer);\n            };\n\n            this.context.decodeAudioData(arrayBuffer, successCallback, this.callbacks.error);\n\n            this.callbacks.decode(arrayBuffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts audio from the designated time.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.buffer instanceof AudioBuffer) && this.paused) {\n            const startTime = this.context.currentTime;\n\n            const pos = parseFloat(position);\n\n            this.currentTime = ((pos >= 0) && (pos <= this.buffer.duration)) ? pos : 0;\n\n            const playbackRate = this.source.playbackRate.value;\n            const loop         = this.source.loop;\n\n            this.source = this.context.createBufferSource();\n\n            // for legacy browsers\n            this.source.start = this.source.start || this.source.noteGrainOn;\n            this.source.stop  = this.source.stop  || this.source.noteOff;\n\n            this.source.buffer             = this.buffer;\n            this.source.playbackRate.value = playbackRate;\n            this.source.loop               = loop;\n\n            // AudioBufferSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            this.source.start(startTime, pos, (this.buffer.duration - pos));\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            this.paused = false;\n\n            this.on(startTime);\n\n            this.callbacks.start(this.source, this.currentTime);\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (this.currentTime < Math.floor(this.source.buffer.duration)) {\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n\n                            this.currentTime += ((1 * this.source.playbackRate.value) / this.source.buffer.sampleRate);\n\n                            const index = Math.floor(this.currentTime * this.source.buffer.sampleRate);\n                            const n100msec = 0.100 * this.source.buffer.sampleRate;\n\n                            // Invoke callback every 100 msec\n                            if ((index % n100msec) === 0) {\n                                this.callbacks.update(this.source, this.currentTime);\n                            }\n                        }\n\n                        this.analyser.timeOverviewL.update(this.currentTime);\n                        this.analyser.timeOverviewR.update(this.currentTime);\n                    } else {\n                        if (this.source.loop) {\n                            this.currentTime = 0;\n                        } else {\n                            this.end();\n                        }\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops audio.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.buffer instanceof AudioBuffer) && !this.paused) {\n            const stopTime = this.context.currentTime;\n\n            this.source.stop(stopTime);\n\n            this.off(stopTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Clear\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            this.paused = true;\n            this.callbacks.stop(this.source, this.currentTime);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBufferSourceNode`.\n     * @return {AudioBufferSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops audio according to audio state.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    toggle(position, connects, processCallback) {\n        if (this.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method rewinds audio.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    end() {\n        this.stop();\n        this.currentTime = 0;\n        this.callbacks.ended(this.source, this.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBuffer` exists.\n     * @return {boolean} If the instance of `AudioBuffer` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isBuffer() {\n        return this.buffer instanceof AudioBuffer;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBufferSourceNode` exists.\n     * @return {boolean} If the instance of `AudioBufferSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSource() {\n        return (this.source instanceof AudioBufferSourceNode) && (this.source.buffer instanceof AudioBuffer);\n    }\n\n    /**\n     * This method determines whether the audio is paused.\n     * @return {boolean} If the audio is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        return this.paused;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.audio = {\n            'playbackrate'  : this.isSource() ? this.source.playbackRate.value : 1,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule]';\n    }\n}\n","'use strict';\n\nimport AudioModule from '../AudioModule';\n\n/**\n * This class defines properties for processing sound data from `HTMLMediaElement`.\n * Namely, this class creates audio player that has higher features from `HTMLMediaElement`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {AudioModule}\n */\nexport default class MediaModule extends AudioModule {\n    static AUDIO = 'audio';\n    static VIDEO = 'video';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.source = null;  // for the instance of `MediaElementAudioSourceNode`\n        this.media  = null;  // for the instance of `HTMLMediaElement`\n        this.ext    = '';    // 'wav', 'ogg', 'mp3, 'webm', 'ogv', 'mp4' ...etc\n\n        this.playbackRate = 1;\n        this.controls     = false;\n        this.loop         = false;\n        this.muted        = false;\n        this.autoplay     = false;\n\n        // The keys are the event interfaces that are defined by `HTMLMediaElement`.\n        // For example, `loadstart`, `loadedmetadata`, `loadeddata`, `canplay`, `canplaythrough`, `timeupdate`, `ended` ...etc\n        this.listeners = {};\n    }\n\n    /**\n     * This method gets `HTMLMediaElement` and selects media format. In addition, this method adds event listeners that are defined by `HTMLMediaElement`.\n     * @param {HTMLAudioElement|HTMLVideoElement} media This argument is either `HTMLAudioElement` or `HTMLVideoElement`.\n     * @param {Array.<string>|string} formats This argument is usable media format. For example, 'wav', 'ogg', 'webm', 'mp4' ...etc.\n     * @param {object} listeners This argument is event handlers that are defined by `HTMLMediaElement`.\n     * @param {boolean} autoplay This argument is in order to determine autoplay. The default value is `false`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    setup(media, formats, listeners, autoplay) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('media' in properties) {\n                media = properties.media;\n            }\n\n            if ('formats' in properties) {\n                formats = properties.formats;\n            }\n\n            if ('listeners' in properties) {\n                listeners = properties.listeners;\n            }\n\n            if ('autoplay' in properties) {\n                autoplay = properties.autoplay;\n            }\n        }\n\n        let type = '';\n\n        if (media instanceof HTMLAudioElement) {\n            type = MediaModule.AUDIO;\n        } else if (media instanceof HTMLVideoElement) {\n            type = MediaModule.VIDEO;\n        } else {\n            return this;\n        }\n\n        this.media = media;\n\n        if (!Array.isArray(formats)) {\n            formats = [formats];\n        }\n\n        for (const format of formats) {\n            const f = `${type}/${String(format).toLowerCase()}`;\n\n            if (/^(?:maybe|probably)/.test(this.media.canPlayType(f))) {\n                this.ext = format;\n                break;\n            }\n        }\n\n        if (Object.prototype.toString.call(listeners) === '[object Object]') {\n            for (const k in listeners) {\n                this.listeners[k.toLowerCase()] = (Object.prototype.toString.call(listeners[k]) === '[object Function]') ? listeners[k] : () => {};\n            }\n        }\n\n        this.autoplay = Boolean(autoplay);\n\n        // in the case of autoplay, `loadstart` event not fire\n        if (this.autoplay && !(this.source instanceof MediaElementAudioSourceNode)) {\n            this.source = this.context.createMediaElementSource(this.media);\n        }\n\n        this.media.addEventListener('loadstart', event => {\n            // To create the instance of `MediaElementAudioSourceNode` again causes error to occur\n            if (!(this.source instanceof MediaElementAudioSourceNode)) {\n                this.source = this.context.createMediaElementSource(this.media);\n            }\n\n            if ('loadstart' in this.listeners) {\n                this.listeners.loadstart(event);\n            }\n        }, false);\n\n        this.media.addEventListener('ended', event => {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            if ('ended' in this.listeners) {\n                this.listeners.ended(event);\n            }\n        }, false);\n\n        for (const k in this.listeners) {\n            this.media.addEventListener(k, event => {\n                this.listeners[(event.type).toLowerCase()](event);\n            }, false);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|MediaModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let r;\n\n            if (k === 'mastervolume') {\n                r = super.param(k, value);\n            }\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.playbackRate : this.playbackRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.5;  // for Chrome\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLMediaElement) {\n                            this.media.playbackRate = v;\n                        }\n\n                        this.playbackRate = v;\n                    }\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.currentTime : 0;\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        v   = parseFloat(value);\n                        min = 0;\n                        max = this.media.duration;\n\n                        if ((v >= min) && (v <= max)) {\n                            this.media.currentTime = v;\n                        }\n                    }\n\n                    break;\n                case 'loop'    :\n                case 'muted'   :\n                case 'controls':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media[k] : this[k];\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        this.media[k] = Boolean(value);\n                    }\n\n                    this[k] = Boolean(value);\n\n                    break;\n                case 'width' :\n                case 'height':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLVideoElement) ? this.media[k] : 0;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLVideoElement) {\n                            this.media[k] = v;\n                        }\n                    }\n\n                    break;\n                case 'duration':\n                    return this.media.duration;  // Getter only\n                case 'channels':\n                    return (this.source instanceof MediaElementAudioSourceNode) ? this.source.channelCount : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method prepares for playing the media anytime after loading the media resource.\n     * @param {string} source This argument is path name or `Data URL` or `Object URL` for the media resource.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    ready(source) {\n        const src = String(source);\n\n        try {\n            // `Data URL` or `Object URL` ?\n            if ((src.indexOf('data:') !== -1) || (src.indexOf('blob:') !== -1) || (this.ext === '')) {\n                this.media.src = src;  // `Data URL` or `Object URL` or Full path\n            } else {\n                this.media.src = `${src}.${this.ext}`;  // Path\n            }\n        } catch (error) {\n            throw new Error('The designated resource cannot be loaded.');\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts media from the designated time.\n     * @param {number} position This argument is the time that media is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.source instanceof MediaElementAudioSourceNode) && this.media.paused) {\n            // MediaElementAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            const promise = this.media.play();\n\n            promise.then(() => {\n                const pos = parseFloat(position);\n\n                this.media.currentTime  = ((pos >= 0) && (pos <= this.media.duration)) ? pos : 0;\n                this.media.playbackRate = this.playbackRate;\n                this.media.controls     = this.controls;\n                this.media.loop         = this.loop;\n                this.media.muted        = this.muted;\n\n                this.on(this.context.currentTime);\n\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                const bufferSize = this.processor.bufferSize;\n\n                if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                    this.processor.onaudioprocess = processCallback;\n                } else {\n                    this.processor.onaudioprocess = event => {\n                        const inputLs  = event.inputBuffer.getChannelData(0);\n                        const inputRs  = event.inputBuffer.getChannelData(1);\n                        const outputLs = event.outputBuffer.getChannelData(0);\n                        const outputRs = event.outputBuffer.getChannelData(1);\n\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n                        }\n                    };\n                }\n            }).catch(() => {\n                this.stop();\n\n                if (this.autoplay) {\n                    this.media.muted  = this.muted = true;\n                    this.media.volume = 0;\n                }\n\n                this.start(position, connects, processCallback);\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops media.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.source instanceof MediaElementAudioSourceNode) && !this.media.paused) {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaElementAudioSourceNode`.\n     * @return {MediaElementAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops media according to media state.\n     * @param {number} position This argument is time that media is started at.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    toggle(position, connects, processCallback) {\n        if (this.media.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `HTMLMediaElement` exists.\n     * @return {boolean} If the instance of `HTMLMediaElement` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isMedia() {\n        return this.media instanceof HTMLMediaElement;\n    }\n\n    /**\n     * This method determines whether the instance of `MediaElementAudioSourceNode` exists.\n     * @return {boolean} If the instance of `MediaElementAudioSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isSource() {\n        return this.source instanceof MediaElementAudioSourceNode;\n    }\n\n    /**\n     * This method determines whether the media is paused.\n     * @return {boolean} If the media is paused or does not exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isPaused() {\n        return (this.media instanceof HTMLMediaElement) ? this.media.paused : true;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.media = {\n            'playbackrate'  : this.playbackRate,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        delete params.audio;\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[MediaModule]';\n    }\n}\n","'use strict';\n\n/**\n * This private class defines properties for Noise Gate.\n * @constructor\n */\nexport default class NoiseGate {\n    constructor() {\n        this.level = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|NoiseGate} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'level':\n                    if (value === undefined) {\n                        return this.level;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.level = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method detects background noise and removes this.\n     * @param {number} data This argument is amplitude (between -1 and 1).\n     * @return {number} This is returned as 0 or the raw data.\n     */\n    start(data) {\n        const d = Math.abs(parseFloat(data));\n\n        // data : The amplitude is equal to argument.\n        // 0    : Because signal is detected as background noise, the amplitude is 0.\n        return (d > this.level) ? data : 0;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule NoiseGate]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport NoiseGate from './NoiseGate';\n\n/**\n * This class defines properties that processes sound data from WebRTC in Web Audio API.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class StreamModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        // for the instance of `MediaStreamAudioSourceNode`\n        this.source = null;\n\n        // for `navigator.mediaDevices.getUserMedia`\n        this.constraints = {\n            'audio' : true,\n            'video' : false\n        };\n\n        this.callbacks = {\n            'stream' : () => {},\n            'error'  : () => {}\n        };\n\n        this.output = true;\n\n        this.isStop = true;\n\n        this.noisegate = new NoiseGate();\n    }\n\n    /**\n     * This method sets up for using WebRTC.\n     * @param {object} constraints This argument is the 1st argument for `getUserMedia`.\n     * @param {function} streamCallback This argument is invoked on streaming.\n     * @param {function} errorCallback This argument is invoked when error occurs on streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    setup(constraints, streamCallback, errorCallback) {\n        if (Object.prototype.toString.call(constraints) === '[object Object]') {\n            this.constraints = constraints;\n        }\n\n        if (Object.prototype.toString.call(streamCallback) === '[object Function]') {\n            this.callbacks.stream = streamCallback;\n        }\n\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            this.callbacks.error = errorCallback;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|StreamModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            switch (k) {\n                case 'output':\n                    if (value === undefined) {\n                        return this.output;\n                    }\n\n                    this.output = Boolean(value);\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    ready() {\n        return this;\n    }\n\n    /**\n     * This method starts streaming.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    start(connects, processCallback) {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new Error('Cannot use WebRTC.');\n        }\n\n        const bufferSize = this.processor.bufferSize;\n\n        let isAnalyser = false;\n\n        const start = (stream, connects, processCallback) => {\n            this.source = this.context.createMediaStreamSource(stream);\n\n            // MediaStreamAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            if (!this.output) {\n                this.mastervolume.disconnect(0);\n\n                // for analyser\n                this.mastervolume.connect(this.analyser.input);\n\n                // for recording\n                this.mastervolume.connect(this.recorder.processor);\n                this.recorder.processor.connect(this.context.destination);\n\n                // for session\n                this.mastervolume.connect(this.session.sender);\n                this.session.sender.connect(this.context.destination);\n            }\n\n            this.on(this.context.currentTime);\n\n            if (!isAnalyser) {\n                this.analyser.start('time');\n                this.analyser.start('fft');\n                isAnalyser = true;\n            }\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.noisegate.start(inputLs[i]);\n                        outputRs[i] = this.noisegate.start(inputRs[i]);\n                    }\n                };\n            }\n        };\n\n        this.isStop = false;\n\n        navigator.mediaDevices.getUserMedia(this.constraints).then(stream => {\n            if (this.isStop) {\n                return;\n            }\n\n            start(stream, connects, processCallback);\n            this.callbacks.stream(stream);\n        }).catch(error => {\n            this.callbacks.error(error);\n        });\n\n        return this;\n    }\n\n    /**\n     * This method stops streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        this.source = null;\n\n        this.off(this.context.currentTime, true);\n\n        this.analyser.stop('time');\n        this.analyser.stop('fft');\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        this.isStop = true;\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaStreamAudioSourceNode`.\n     * @return {MediaStreamAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops streaming according to current state.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     */\n    toggle(connects, processCallback) {\n        if (this.isStreaming()) {\n            this.stop();\n        } else {\n            this.start(connects, processCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether streaming is active.\n     * @return {boolean} If streaming is active, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStreaming() {\n        return !this.isStop;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.stream = {\n            'output'    : this.output,\n            'noisegate' : {\n                'level' : this.noisegate.param('level')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule]';\n    }\n}\n","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport OscillatorModule from '../OscillatorModule';\nimport OneshotModule from '../OneshotModule';\nimport AudioModule from '../AudioModule';\nimport MediaModule from '../MediaModule';\nimport StreamModule from '../StreamModule';\n\n/**\n * This class defines properties for mixing sound sources that is defined in this library.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class MixerModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        /** @type {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} */\n        this.sources = [];\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method mixes sound source.\n     * @param {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} sources This argument is the array of sound source that is defined by this library.\n     * @return {MixerModule} This is returned for method chain.\n     */\n    mix(sources) {\n        if (!Array.isArray(sources)) {\n            sources = [sources];\n        }\n\n        this.sources = sources;\n\n        for (const source of this.sources) {\n            if (!((source instanceof OscillatorModule) || (source instanceof OneshotModule) || (source instanceof AudioModule) || (source instanceof MediaModule) || (source instanceof StreamModule))) {\n                return this;\n            }\n\n            const stopTime = this.context.currentTime;\n\n            this.off(stopTime, false);\n\n            source.analyser.stop('time');\n            source.analyser.stop('fft');\n            source.isAnalyser = false;\n\n            source.recorder.stop();\n            source.session.close();\n\n            // ScriptProcessorNode (each sound source) -> ScriptProcessorNode (Mix sound sources)\n            source.processor.disconnect(0);\n            source.processor.connect(this.processor);\n        }\n\n        // (... ->) ScriptProcessorNode (Mix sound sources) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor);\n\n        const startTime = this.context.currentTime;\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.processor.onaudioprocess = event => {\n            const inputLs  = event.inputBuffer.getChannelData(0);\n            const inputRs  = event.inputBuffer.getChannelData(1);\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            // Stop ?\n            let isStop = false;\n\n            for (const source of sources) {\n                if ((source instanceof OscillatorModule) && source.envelopegenerator.isStop()) {\n                    isStop = true;\n                } else if ((source instanceof OneshotModule) && source.isStop) {\n                    isStop = true;\n                } else if ((source instanceof AudioModule) && source.paused) {\n                    isStop = true;\n                } else if ((source instanceof MediaModule) && source.media.paused) {\n                    isStop = true;\n                } else if ((source instanceof StreamModule) && source.isStop) {\n                    isStop = true;\n                }\n            }\n\n            if (isStop) {\n                const stopTime = this.context.currentTime;\n\n                this.on(stopTime, true);\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n\n                // Stop `onaudioprocess` event\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n            } else {\n                outputLs.set(inputLs);\n                outputRs.set(inputRs);\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of sound source that is mixed in this class.\n     * @param {number} index This argument is required in the case of designating sound source.\n     * @return {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>|OscillatorModule|OneshotModule|AudioModule|MediaModule|StreamModule}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /** @override */\n    toString() {\n        return '[MixerModule]';\n    }\n}\n","'use strict';\n\n/**\n * This class defines properties for using Web MIDI API.\n * @constructor\n */\nexport default class MIDI {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.midiAccess = null;  // for the instance of `MIDIAccess`\n        this.inputs     = [];    // for the instances of `MIDIInput`\n        this.outputs    = [];    // for the instances of `MIDIOutput`\n    }\n\n    /**\n     * This method invokes `requestMIDIAccess` and gets objects for using Web MIDI API.\n     * @param {boolean} sysex This argument is in order to select whether using system exclusive message.\n     * @param {function} successCallback This argument is invoked when `requestMIDIAccess` succeeds.\n     * @param {function} errorCallback This argument is invoked when `requestMIDIAccess` fails.\n     * @return {MIDI} This is returned for method chain.\n     */\n    setup(sysex, successCallback, errorCallback) {\n        if (!navigator.requestMIDIAccess) {\n            throw new Error('Cannot use Web MIDI API.');\n        }\n\n        navigator.requestMIDIAccess({ sysex : Boolean(sysex) }).then(midiAccess => {\n            this.midiAccess = midiAccess;\n\n            if (Object.prototype.toString.call(midiAccess) === '[object Function]') {\n                // Legacy Chrome\n                this.inputs  = midiAccess.inputs();\n                this.outputs = midiAccess.outputs();\n            } else {\n                // Chrome 39 and later\n                const inputIterator  = midiAccess.inputs.values();\n                const outputIterator = midiAccess.outputs.values();\n\n                for (let i = inputIterator.next(); !i.done; i = inputIterator.next()) {\n                    this.inputs.push(i.value);\n                }\n\n                for (let o = outputIterator.next(); !o.done; o = outputIterator.next()) {\n                    this.outputs.push(o.value);\n                }\n            }\n\n            if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                successCallback(this.midiAccess, this.inputs, this.outputs);\n            }\n        }).catch(error => {\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(error);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MIDIAccess`.\n     * @return {MIDIAccess}\n     */\n    get() {\n        return this.midiAccess;\n    }\n\n    /** @override */\n    toString() {\n        return '[MIDI]';\n    }\n}\n","'use strict';\n\nimport OscillatorModule from '../OscillatorModule';\nimport OneshotModule from '../OneshotModule';\n\n/**\n * This class defines properties for playing the MML (Music Macro Language).\n * @constructor\n */\nexport default class MML {\n    static ONE_MINUTES       = 60;  // sec\n    static EQUAL_TEMPERAMENT = 12;\n    static QUARTER_NOTE      = 4;\n    static REGEXP_MML        = /\\s*(?:T\\d+)\\s*|\\s*(?:O\\d+)\\s*|\\s*(?:(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*\\s*/gi;\n    static REGEXP_TEMPO      = /T\\d+/i;\n    static REGEXP_OCTAVE     = /O\\d+/i;\n    static REGEXP_NOTE       = /(?:(?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*/i;\n    static REGEXP_CHORD      = /((?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*/i;\n    static REGEXP_DURATION   = /(?:[CDEFGABR][#+-]?)+((?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*)/i;\n    static REST              = 'R';\n    static ERROR_STRING      = 'MML';\n    static ERROR_TEMPO       = 'TEMPO';\n    static ERROR_OCTAVE      = 'OCTAVE';\n    static ERROR_NOTE        = 'NOTE';\n\n    /**\n     * This class (static) method computes index by octave and pitch name.\n     * @param {number} octave This argument is octave.\n     * @param {string} pitchname This argument is pitch name.\n     * @return {number|string} This is returned as index that is computed by octave and pitch name.\n     */\n    static computeIndex = (octave, pitchname) => {\n        let index = 0;\n\n        switch (pitchname) {\n            case 'C':\n                index = 3;\n                break;\n            case 'D':\n                index = 5;\n                break;\n            case 'E':\n                index = 7;\n                break;\n            case 'F':\n                index = 8;\n                break;\n            case 'G':\n                index = 10;\n                break;\n            case 'A':\n                index = 12;\n                break;\n            case 'B':\n                index = 14;\n                break;\n            case MML.REST:\n                return MML.REST;\n            default :\n                break;\n        }\n\n        const computedIndex = (MML.EQUAL_TEMPERAMENT * (octave - 1)) + index;\n\n        return (computedIndex >= 0) ? computedIndex : -1;\n    };\n\n    /**\n     * This class (static) method computes frequency from the index that corresponds to the 12 equal temperament.\n     * @param {number} index This argument is the index that corresponds to the 12 equal temperament.\n     *     For example, This value is between 0 and 88 in the case of piano.\n     * @return {number} This is returned as frequency.\n     */\n    static computeFrequency = index => {\n        // The 12 equal temperament\n        //\n        // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n        //\n        // A * 1.059463 -> A# (half up)\n\n        const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n        const MIN_A           = 27.5;\n\n        return (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : -1;\n    };\n\n    /**\n     * This class (static) method converts string to ASCII string.\n     * @param {string} string This argument is string.\n     * @return {string} This is returned as string that is converted to ASCII string.\n     */\n    static toAscii = string => {\n        let converted = '';\n\n        for (let i = 0, len = string.length; i < len; i++) {\n            const charCode = string.charCodeAt(i);\n\n            if (charCode > 0xFF) {\n                converted += `&#${charCode};`;\n            } else {\n                converted += string.charAt(i);\n            }\n        }\n\n        return converted;\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        // for the array of `OscillatorNode` or `OscillatorModule` or `OneshotModule`\n        this.source = null;\n\n        this.sequences = [];  /** @type {Array.<Array.<object>>} */\n        this.timerids  = [];  /** @type {Array.<number>} */\n        this.prev      = [];  /** @type {Array.<object>} */\n\n        this.callbacks = {\n            'start' : () => {},\n            'stop'  : () => {},\n            'ended' : () => {},\n            'error' : () => {}\n        };\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {MML} This is returned for method chain.\n     */\n    setup(key, value) {\n        if ((arguments.length > 0) && (Object.prototype.toString.call(arguments[0]) === '[object Object]')) {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else if (arguments.length > 1) {\n            const k = String(key).toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method parses MML string.\n     * @param {Array.<OscillatorNode>|OscillatorModule|OneshotModule} source This argument is in order to select sound source.\n     * @param {Array.<string>} mmls This argument is MML strings.\n     * @return {Array.<Array.<object>>} This is returned as array that contains object for playing the MML.\n     */\n    ready(source, mmls) {\n        if (this.source !== null) {\n            this.stop();  // Stop the previous MML\n        }\n\n        // Clear\n        this.sequences.length = 0;\n        this.timerids.length  = 0;\n        this.prev.length      = 0;\n\n        if (Array.isArray(source)) {\n            for (const s of source) {\n                if (!(s instanceof OscillatorNode)) {\n                    return this;\n                }\n            }\n\n            this.source = source;\n        } else if (source instanceof OscillatorNode) {\n            this.source = [source];\n        } else if ((source instanceof OscillatorModule) || (source instanceof OneshotModule)) {\n            this.source = source;\n        } else {\n            return this;\n        }\n\n        if (!Array.isArray(mmls)) {\n            mmls = [mmls];\n        }\n\n        while (mmls.length > 0) {\n            const mml = String(mmls.shift());\n\n            /** @type {Array.<object>}*/\n            const sequences = [];\n\n            const notes = mml.match(MML.REGEXP_MML);\n\n            if (notes === null) {\n                this.callbacks.error(MML.ERROR_STRING, '');\n                return;\n            }\n\n            let indexes     = [];\n            let frequencies = [];\n\n            let start    = 0;\n            let duration = 0;\n            let stop     = 0;\n\n            let currentTime = 0;\n            let timeOf4note = null;\n            let octave      = null;\n\n            while (notes.length > 0) {\n                const note = notes.shift().trim();\n\n                if (MML.REGEXP_TEMPO.test(note)) {\n                    const bpm = parseInt(note.slice(1), 10);\n\n                    if (bpm > 0) {\n                        timeOf4note = MML.ONE_MINUTES / bpm;\n                    } else {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_OCTAVE.test(note)) {\n                    octave = parseInt(note.slice(1), 10);\n\n                    if (octave < 0) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_NOTE.test(note)) {\n                    if (timeOf4note === null) {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n\n                    if (octave === null) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n\n                    const chord = note.match(MML.REGEXP_CHORD)[1];\n\n                    indexes = [];\n\n                    for (let i = 0, len = chord.length; i < len; i++) {\n                        const pitchname = chord.charAt(i);\n\n                        let index = MML.computeIndex(octave, pitchname.toUpperCase());\n\n                        // Half up or Half down (Sharp or Flat) ?\n                        switch (chord.charAt(i + 1)) {\n                            case '#':\n                            case '+':\n                                // Half up (Sharp)\n                                index++;\n                                i++;\n                                break;\n                            case '-':\n                                // Half down (Flat)\n                                index--;\n                                i++;\n                                break;\n                            default:\n                                // Normal (Natural)\n                                break;\n                        }\n\n                        // in the case of chord\n                        if (index >= indexes[0]) {\n                            index -= MML.EQUAL_TEMPERAMENT;\n                        }\n\n                        // Validation\n                        if (index < 0) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        indexes.push(index);\n                    }\n\n                    frequencies = [];\n\n                    for (const index of indexes) {\n                        const frequency = (index !== MML.REST) ? MML.computeFrequency(index) : 0;\n\n                        // Validation\n                        if (frequency === -1) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        frequencies.push(frequency);\n                    }\n\n                    const durations = note.split('&');  // Tie\n\n                    while (durations.length > 0) {\n                        const d = durations.shift().match(MML.REGEXP_DURATION)[1];\n\n                        switch (parseInt(d, 10)) {\n                            case   1:\n                            case   2:\n                            case   4:\n                            case   8:\n                            case  16:\n                            case  32:\n                            case  64:\n                            case 128:\n                            case 256:\n                                const numOf4note = MML.QUARTER_NOTE / parseInt(d, 10);\n\n                                // a dotted note ?\n                                duration += (d.indexOf('.') !== -1) ? ((1.5 * numOf4note) * timeOf4note) : (numOf4note * timeOf4note);\n                                break;\n                            case   6:\n                                // Triplet of half note\n                                duration += (2 * timeOf4note) / 3;\n                                break;\n                            case  12:\n                                // Triplet of quarter note\n                                duration += timeOf4note / 3;\n                                break;\n                            case  18:\n                                // Nonuplet of half note\n                                duration += (2 * timeOf4note) / 9;\n                                break;\n                            case  24:\n                                // Triplet of 8th note\n                                duration += (0.5 * timeOf4note) / 3;\n                                break;\n                            case  36:\n                                // Nonuplet of quarter note\n                                duration += timeOf4note / 9;\n                                break;\n                            case  48:\n                                // Triplet of 16th note\n                                duration += (0.25 * timeOf4note) / 3;\n                                break;\n                            case  72:\n                                // Nonuplet of 8th note\n                                duration += (0.5 * timeOf4note) / 9;\n                                break;\n                            case  96:\n                                // Triplet of 32th note\n                                duration += (0.125 * timeOf4note) / 3;\n                                break;\n                            case 144:\n                                // Nonuplet of 16th note\n                                duration += (0.25 * timeOf4note) / 9;\n                                break;\n                            case 192:\n                                // Triplet of 64th note\n                                duration += (0.0625 * timeOf4note) / 3;\n                                break;\n                            default:\n                                this.callbacks.error(MML.ERROR_NOTE, note);\n                                break;\n                        }\n                    }\n\n                    start = currentTime;\n                    stop  = start + duration;\n\n                    currentTime += duration;\n\n                    sequences.push({\n                        'indexes'     : indexes,\n                        'frequencies' : frequencies,\n                        'start'       : start,\n                        'duration'    : duration,\n                        'stop'        : stop\n                    });\n\n                    duration = 0;\n                }\n            }\n\n            if (sequences.length > 0) {\n                // `start` method gets element by `pop` for performance\n                sequences.reverse();\n\n                this.sequences.push(sequences);\n                this.timerids.push(null);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts the designated MML part. Moreover, this method schedules next sound.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>|Array.<AudioNode>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    start(part, connects, processCallback) {\n        const p = parseInt(part, 10);\n\n        if ((p >= 0) && (p < this.sequences.length)) {\n            if (!Array.isArray(this.sequences[p])) {\n                return this;\n            }\n\n            // End ?\n            if (this.sequences[p].length === 0) {\n                this.stop(processCallback);\n                this.callbacks.ended();\n\n                return this;\n            }\n\n            const sequence = this.sequences[p].pop();\n\n            if (Array.isArray(this.source)) {\n                for (let i = 0, len = this.source.length; i < len; i++) {\n                    let source = this.source[i];\n\n                    const type   = source.type;\n                    const detune = source.detune.value;\n\n                    source = this.context.createOscillator();\n\n                    // for legacy browsers\n                    source.start = source.start || source.noteOn;\n                    source.stop  = source.stop  || source.noteOff;\n\n                    source.type            = type;\n                    source.frequency.value = sequence.frequencies[i];\n                    source.detune.value    = detune;\n\n                    if (Array.isArray(connects)) {\n                        // OscillatorNode (Input) -> AudioNode -> ... -> AudioNode -> AudioDestinationNode (Output)\n                        source.connect(connects[0]);\n\n                        for (let j = 0, num = connects.length; j < num; j++) {\n                            const node = connects[j];\n\n                            if (j < (num - 1)) {\n                                const next = connects[j + 1];\n\n                                if (!((node instanceof AudioNode) && (next instanceof AudioNode))) {\n                                    return this;\n                                }\n\n                                node.connect(next);\n                            } else {\n                                node.connect(this.context.destination);\n                            }\n                        }\n                    } else {\n                        // OscillatorNode (Input) -> AudioDestinationNode (Output)\n                        source.connect(this.context.destination);\n                    }\n\n                    source.start(this.context.currentTime);\n                    source.stop(this.context.currentTime + sequence.duration);\n\n                    this.source[i] = source;\n                }\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OscillatorModule) {\n                this.source.start(sequence.frequencies, connects, processCallback);\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OneshotModule) {\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    if (sequence.indexes[i] !== MML.REST) {\n                        this.source.start(sequence.indexes[i], connects, processCallback);\n                    }\n\n                    this.callbacks.start(sequence, i);\n                }\n            }\n\n            this.timerids[p] = window.setTimeout(() => {\n                if (Array.isArray(this.source)) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.start(sequence, i);\n                    }\n                } else if (this.source instanceof OscillatorModule) {\n                    this.source.stop();\n\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.stop(sequence, i);\n                    }\n                } else if (this.source instanceof OneshotModule) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        if (sequence.indexes[i] !== MML.REST) {\n                            this.source.stop(sequence.indexes[i], processCallback);\n                        }\n\n                        this.callbacks.stop(sequence, i);\n                    }\n                }\n\n                // for `MML#stop`\n                this.prev = sequence;\n\n                // Start next sound by recursive call\n                this.start(p, connects, processCallback);\n            }, (sequence.duration * 1000));\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the all of MML parts.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const sequence = this.prev;\n\n        if (sequence.length === 0) {\n            return this;\n        }\n\n        if (Array.isArray(this.source)) {\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OscillatorModule) {\n            this.source.stop();\n\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OneshotModule) {\n            for (const index of sequence.indexes) {\n                if (index !== MML.REST) {\n                    this.source.stop(index, processCallback);\n                }\n\n                this.callbacks.stop(sequence, index);\n            }\n        }\n\n        for (let i = 0, len = this.timerids.length; i < len; i++) {\n            window.clearTimeout(this.timerids[i]);\n            this.timerids[i] = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the array that contains object for playing the MML.\n     * @param {number} index This argument is required in the case of designating sequence.\n     * @return {Array.<Array.<object>>|Array.<object>}\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sequences.length)) ? this.sequences[i] : this.sequences;\n    }\n\n    /**\n     * This method starts or stops MML according to state.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    toggle(part, connects, processCallback) {\n        if (this.isPaused()) {\n            this.start(part, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the array that is used to play the MML exists.\n     * @return {boolean} If the array exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSequences() {\n        return Array.isArray(this.sequences[0]);\n    }\n\n    /**\n     * This method determines whether the MML is paused.\n     * @return {boolean} If the MML is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        for (const timerid of this.timerids) {\n            if ((timerid === null) || (timerid === undefined)) {\n                // Next timer\n            } else {\n                // Playing the MML\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * This method creates text file for MML.\n     * @param {string} mml This argument is MML string.\n     * @return {string} This is returned as text file that MML is written.\n     */\n    create(mml) {\n        const base64  = window.btoa(MML.toAscii(String(mml)));\n        const dataURL = `data:text/plain;base64,${base64}`;\n\n        return dataURL;\n    }\n\n    /** @override */\n    toString() {\n        return '[MML]';\n    }\n}\n","'use strict';\n\n/**\n * This class (static) method reads file of audio or text.\n * @param {Blob} file This argument is the instance of `Blob`. This is entity of file.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n */\nexport function read(file, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('file' in properties) {\n            file = properties.file;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(file instanceof Blob)) {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(null, 'FILE_IS_NOT_BLOB');\n        }\n\n        return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    reader.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            let error = '';\n\n            switch (reader.error.code) {\n                case reader.error.NOT_FOUND_ERR:\n                    error = 'NOT_FOUND_ERR';\n                    break;\n                case reader.error.SECURITY_ERR:\n                    error = 'SECURITY_ERR';\n                    break;\n                case reader.error.ABORT_ERR:\n                    error = 'ABORT_ERR';\n                    break;\n                case reader.error.NOT_READABLE_ERR:\n                    error = 'NOT_READABLE_ERR';\n                    break;\n                case reader.error.ENCODING_ERR:\n                    error = 'ENCODING_ERR';\n                    break;\n                default:\n                    error = 'ERR';\n                    break;\n            }\n\n            errorCallback(event, error);\n        }\n    };\n\n    reader.onload = event => {\n        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n            let result = reader.result;\n\n            // Escape `<script>` in the case of text\n            if ((typeof result === 'string') && (result.indexOf('data:') === -1) && (result.indexOf('blob:') === -1)) {\n                result = result.replace(/<(\\/?script.*?)>/gi, '&lt;$1&gt;');\n            }\n\n            successCallback(event, result);\n        }\n    };\n\n    if (/arraybuffer/i.test(type)) {\n        reader.readAsArrayBuffer(file);\n    } else if (/dataurl/i.test(type)) {\n        reader.readAsDataURL(file);\n    } else if (/text/i.test(type)) {\n        reader.readAsText(file, 'UTF-8');\n    }\n}\n\n/**\n * This class (static) method gets the instance of `File` (extends `Blob`).\n * @param {Event} event This argument is the instance of Event by Drag & Drop or `<input type=\"file\">`.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'ObjectURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n * @return {File|ObjectURL} This is returned as the instance of `File` (extends `Blob`) or Object URL.\n */\nexport function file(event, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('event' in properties) {\n            event = properties.event;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(event instanceof Event)) {\n        return;\n    }\n\n    // for the instance of `File` (extends `Blob`)\n    let file = null;\n\n    if (event.type === 'drop') {\n        // Drag & Drop\n        event.stopPropagation();\n        event.preventDefault();\n\n        file = /* ('items' in event.dataTransfer) ? event.dataTransfer.items[0].getAsFile() : */event.dataTransfer.files[0];\n    } else if ((event.type === 'change') && ('files' in event.target)) {\n        // `<input type=\"file\">`\n        file = event.target.files[0];\n    } else {\n        return;\n    }\n\n    if (!(file instanceof File)) {\n        throw new Error('Please upload file.');\n    } else if ((/text/i.test(type)) && (file.type.indexOf('text') === -1)) {\n        throw new Error('Please upload text file.');\n    } else if ((/arraybuffer|dataurl/i.test(type)) && !/audio|video/.test(file.type)) {\n        throw new Error('Please upload audio or video file.');\n    } else {\n        if (/objecturl/i.test(type)) {\n            window.URL = window.URL || window.webkitURL || window.mozURL;\n            return window.URL.createObjectURL(file);\n        }\n\n        read({\n            'file'     : file,\n            'type'     : type,\n            'success'  : successCallback,\n            'error'    : errorCallback,\n            'progress' : progressCallback\n        });\n\n        return file;\n    }\n}\n\n/**\n * This class (static) method gets audio data as `ArrayBuffer` by Ajax.\n * @param {string} url This argument is URL for audio resource.\n * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when error occurred.\n * @param {function} progressCallback This argument is invoked during receiving audio data.\n */\nexport function ajax(url, timeout, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('url' in properties) {\n            url = properties.url;\n        }\n\n        if ('timeout' in properties) {\n            timeout = properties.timeout;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    // for errorCallback\n    const ERROR_AJAX         = 'error';\n    const ERROR_AJAX_TIMEOUT = 'timeout';\n\n    const xhr = new XMLHttpRequest();\n\n    const t = parseInt(timeout, 10);\n\n    xhr.timeout = (t > 0) ? t : 60000;\n\n    xhr.ontimeout = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX_TIMEOUT);\n        }\n    };\n\n    xhr.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    xhr.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX);\n        }\n    };\n\n    xhr.onload = event => {\n        if (xhr.status === 200) {\n            const arrayBuffer = xhr.response;\n\n            if ((arrayBuffer instanceof ArrayBuffer) && (Object.prototype.toString.call(successCallback) === '[object Function]')) {\n                successCallback(event, arrayBuffer);\n            }\n        }\n    };\n\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n    xhr.send(null);\n}\n\n/**\n * This class (static) method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n * @param {AudioContext} context This argument is the instance of `AudioContext` for `decodeAudioData` method.\n * @param {ArrayBuffer} arrayBuffer This argument is converted to the instance of `AudioBuffer`.\n * @param {function} successCallback This argument is invoked when `decodeAudioData` method is successful.\n       The 1st argument in this callback function is the instance of `AudioBuffer`.\n * @param {function} errorCallback This argument is invoked when `decodeAudioData` method failed.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function decode(context, arrayBuffer, successCallback, errorCallback) {\n    if (!(context instanceof AudioContext)) {\n        return;\n    }\n\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n        return;\n    }\n\n    if (Object.prototype.toString.call(successCallback) !== '[object Function]') {\n        successCallback = () => {};\n    }\n\n    if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n        errorCallback = () => {};\n    }\n\n    return context.decodeAudioData(arrayBuffer, successCallback, errorCallback);\n}\n\n/**\n * This class (static) method calculates frequency from the index that corresponds to the 12 equal temperament.\n * @param {Array.<number>} indexes This argument is array of index that corresponds to the 12 equal temperament.\n *     For example, This value is between 0 and 88 in the case of piano.\n * @return {Array.<number>} This is returned as array that contains frequencies.\n */\nexport function toFrequencies(indexes) {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n\n    const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n    const MIN_A           = 27.5;\n\n    if (!Array.isArray(indexes)) {\n        indexes = [indexes];\n    }\n\n    const frequencies = new Array(indexes.length);\n\n    for (let i = 0, len = indexes.length; i < len; i++) {\n        const index = parseInt(indexes[i], 10);\n\n        frequencies[i] = (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : 0;\n    }\n\n    return frequencies;\n}\n\n/**\n * This class (static) method calculates minutes and seconds from the designated time in seconds.\n * @param {number} time This argument is the time in seconds.\n * @return {object} This is returned as associative array that contains `minutes`, `seconds` and `milliseconds` keys.\n */\nexport function convertTime(time) {\n    const t = parseFloat(time);\n\n    if (t >= 0) {\n        const m  = Math.floor(t / 60);\n        const s  = Math.floor(t % 60);\n        const ms = t - parseInt(t, 10);\n\n        return {\n            'minutes'      : m,\n            'seconds'      : s,\n            'milliseconds' : ms\n        };\n    }\n}\n\n/**\n * This class (static) method shows the designated `Element` in full screen.\n * @param {Element} element This argument is the instance of `Element` that is the target of full screen.\n */\nexport function fullscreen(element) {\n    if (!(element instanceof Element)) {\n        return;\n    }\n\n    if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n    } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n    } else if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else {\n        throw new Error('Cannot change to full screen.');\n    }\n}\n\n/**\n * This class (static) method shows `Element` in original size from full screen.\n */\nexport function exitFullscreen() {\n    if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen();\n    } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n    } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n    } else if (document.cancelFullScreen) {\n        document.cancelFullScreen();\n    } else if (document.exitFullscreen) {\n        document.exitFullscreen();\n    } else {\n        throw new Error('Cannot exit from full screen.');\n    }\n}\n","'use strict';\n\nimport SoundModule from './SoundModule';\nimport OscillatorModule from './OscillatorModule';\nimport OneshotModule from './OneshotModule';\nimport NoiseModule from './NoiseModule';\nimport AudioModule from './AudioModule';\nimport MediaModule from './MediaModule';\nimport StreamModule from './StreamModule';\nimport MixerModule from './MixerModule';\nimport MIDI from './MIDI';\nimport MML from './MML';\nimport { read, file, ajax, decode, toFrequencies, convertTime, fullscreen, exitFullscreen } from './XSound';\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nconst IS_XSOUND = Boolean(window.AudioContext);\n\nif (IS_XSOUND) {\n    const audiocontext = new AudioContext();\n\n    // for legacy browsers\n    audiocontext.createScriptProcessor = audiocontext.createScriptProcessor || audiocontext.createJavaScriptNode;\n    audiocontext.createGain            = audiocontext.createGain            || audiocontext.createGainNode;\n    audiocontext.createDelay           = audiocontext.createDelay           || audiocontext.createDelayNode;\n    audiocontext.createPeriodicWave    = audiocontext.createPeriodicWave    || audiocontext.createWaveTable;\n\n    const sources = {\n        'oscillator' : new OscillatorModule(audiocontext),\n        'oneshot'    : new OneshotModule(audiocontext),\n        'noise'      : new NoiseModule(audiocontext),\n        'audio'      : new AudioModule(audiocontext),\n        'media'      : new MediaModule(audiocontext),\n        'stream'     : new StreamModule(audiocontext),\n        'mixer'      : new MixerModule(audiocontext),\n        'midi'       : new MIDI(audiocontext),\n        'mml'        : new MML(audiocontext)\n    };\n\n    /**\n     * This function is global object for getting the instance of `OscillatorModule` or `OneshotModule` or `NoiseModule` or `AudioModule` or `MediaModule` or `StreamModule` or `MixerModule` or `MIDI` or `MML` or `Oscillator`.\n     * @param {string} source This argument is one of 'oscillator', 'oneshot', 'noise', 'audio', 'media', 'stream', 'mixer', 'midi', 'mml'.\n     * @param {number} index This argument is in order to select one of some oscillators.\n     * @return {OscillatorModule|OneshotModule|NoiseModule|AudioModule|MediaModule|StreamModule|MixerModule|MIDI|MML|Oscillator}\n     */\n    const XSound = (source, index) => {\n        const s = String(source).replace(/-/g, '').toLowerCase();\n\n        switch (s) {\n            case 'oscillator':\n                if (index === undefined) {\n                    return sources.oscillator;\n                }\n\n                const i = parseInt(index, 10);\n\n                if ((i >= 0) && (i < sources.oscillator.length())) {\n                    return sources.oscillator.get(i);\n                }\n\n                return null;\n            case 'oneshot':\n            case 'noise'  :\n            case 'audio'  :\n            case 'media'  :\n            case 'stream' :\n            case 'mixer'  :\n            case 'midi'   :\n            case 'mml'    :\n                return sources[s];\n            default :\n                return null;\n        }\n    };\n\n    /**\n     * Class (Static) properties\n     */\n    XSound.IS_XSOUND         = IS_XSOUND;\n    XSound.SAMPLE_RATE       = audiocontext.sampleRate;\n    XSound.NUMBER_OF_INPUTS  = SoundModule.NUMBER_OF_INPUTS;\n    XSound.NUMBER_OF_OUTPUTS = SoundModule.NUMBER_OF_OUTPUTS;\n    XSound.read              = read;\n    XSound.file              = file;\n    XSound.ajax              = ajax;\n    XSound.decode            = decode;\n    XSound.toFrequencies     = toFrequencies;\n    XSound.convertTime       = convertTime;\n    XSound.fullscreen        = fullscreen;\n    XSound.exitFullscreen    = exitFullscreen;\n\n    /**\n     * This class (static) method changes state ('running') of `AudioContext`.\n     * The initial state is 'suspended' by Autoplay Policy Change.\n     * Therefore, this method must be invoked by user gestures.\n     * @return {Promise} This is returned as `Promise`.\n     */\n    XSound.setup = () => {\n        if (audiocontext.state !== 'running') {\n            return audiocontext.resume();\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * This class (static) method returns function as closure that is getter of cloned module.\n     * @return {function} This is returned as closure that is getter of cloned module.\n     */\n    XSound.clone = () => {\n        const clones = {\n            'oscillator' : new OscillatorModule(audiocontext),\n            'oneshot'    : new OneshotModule(audiocontext),\n            'noise'      : new NoiseModule(audiocontext),\n            'audio'      : new AudioModule(audiocontext),\n            'media'      : new MediaModule(audiocontext),\n            'stream'     : new StreamModule(audiocontext),\n            'mixer'      : new MixerModule(audiocontext),\n            'midi'       : new MIDI(audiocontext),\n            'mml'        : new MML(audiocontext)\n        };\n\n        const C = (source, index) => {\n            const s = String(source).replace(/-/g, '').toLowerCase();\n\n            switch (s) {\n                case 'oscillator':\n                    if (index === undefined) {\n                        return clones.oscillator;\n                    }\n\n                    const i = parseInt(index, 10);\n\n                    if ((i >= 0) && (i < clones.oscillator.length())) {\n                        return clones.oscillator.get(i);\n                    }\n\n                    return null;\n                case 'oneshot':\n                case 'noise'  :\n                case 'audio'  :\n                case 'media'  :\n                case 'stream' :\n                case 'mixer'  :\n                case 'midi'   :\n                case 'mml'    :\n                    return clones[s];\n                default :\n                    return null;\n            }\n        };\n\n        C.free  = sourceList => {\n            if (!Array.isArray(sourceList)) {\n                sourceList = [sourceList];\n            }\n\n            for (const source of sourceList) {\n                // Already deleted ?\n                if (source === null) {\n                    continue;\n                }\n\n                for (const key in clones) {\n                    if (source === clones[key]) {\n                        clones[key] = null;\n                    }\n                }\n            }\n        };\n\n        // Closure\n        return C;\n    };\n\n    /**\n     * This class (static) method releases memory of unnecessary instances.\n     * @param {Array.<SoundModule|MIDI|MML>} sourceList This argument is the array that contains the instances of `SoundModule` or `MIDI` or `MML`.\n     */\n    XSound.free = sourceList => {\n        if (!Array.isArray(sourceList)) {\n            sourceList = [sourceList];\n        }\n\n        for (const source of sourceList) {\n            // Already deleted ?\n            if (source === null) {\n                continue;\n            }\n\n            for (const key in sources) {\n                if (source === sources[key]) {\n                    sources[key] = null;\n                }\n            }\n        }\n    };\n\n    /**\n     * This class (static) method removes one of the global objects or both of the global objects.\n     * @param {boolean} deep This argument is in order to select whether removing both of global objects.\n     *     If this value is `true`, both of global objects are removed.\n     * @return {XSound}\n     */\n    XSound.noConflict = deep => {\n        if (window.X === XSound) {\n            window.X = undefined;\n        }\n\n        // both of global objects are removed ?\n        if (deep && (window.XSound === XSound)) {\n            window.XSound = undefined;\n        }\n\n        return XSound;\n    };\n\n    /**\n     * This class (static) method gets the instance of `AudioContext`.\n     * @return {AudioContext}\n     */\n    XSound.get = () => {\n        return audiocontext;\n    };\n\n    /**\n     * This class (static) method gets `currentTime` property in the instance of `AudioContext`.\n     * @return {number}\n     */\n    XSound.getCurrentTime = () => {\n        return audiocontext.currentTime;\n    };\n\n    /** @override */\n    XSound.toString = () => {\n        return '[XSound]';\n    };\n\n    // for Chrome 70+\n    const userAgent = navigator.userAgent.toLowerCase();\n\n    if ((userAgent.indexOf('chrome') !== -1) && (userAgent.indexOf('edge') === -1)) {\n        const setup = () => {\n            XSound.setup().then(() => {}).catch(() => {});\n\n            document.removeEventListener('click',      setup, true);\n            document.removeEventListener('mousedown',  setup, true);\n            document.removeEventListener('mouseup',    setup, true);\n            document.removeEventListener('touchstart', setup, true);\n            document.removeEventListener('touchend',   setup, true);\n        };\n\n        document.addEventListener('click',      setup, true);\n        document.addEventListener('mousedown',  setup, true);\n        document.addEventListener('mouseup',    setup, true);\n        document.addEventListener('touchstart', setup, true);\n        document.addEventListener('touchend',   setup, true);\n    }\n\n    // Export\n    window.XSound = XSound;\n    window.X      = XSound;  // Alias of XSound\n} else {\n    const XSound = () => null;\n\n    XSound.IS_XSOUND = IS_XSOUND;\n\n    // Export\n    window.XSound = XSound;\n    window.X      = XSound;  // Alias of XSound\n}\n"],"sourceRoot":""}