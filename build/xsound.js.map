{"version":3,"sources":["webpack:///webpack/bootstrap 375a5cbed659a996e341","webpack:///./src/SoundModule/Effector.js","webpack:///./src/SoundModule/index.js","webpack:///./src/SoundModule/Analyser/Visualizer.js","webpack:///./src/OscillatorModule/index.js","webpack:///./src/OneshotModule/index.js","webpack:///./src/AudioModule/index.js","webpack:///./src/MediaModule/index.js","webpack:///./src/StreamModule/index.js","webpack:///./src/main.js","webpack:///./src/SoundModule/Analyser/index.js","webpack:///./src/SoundModule/Analyser/TimeOverview.js","webpack:///./src/SoundModule/Analyser/Time.js","webpack:///./src/SoundModule/Analyser/FFT.js","webpack:///./src/SoundModule/Recorder.js","webpack:///./src/SoundModule/Session.js","webpack:///./src/SoundModule/Compressor.js","webpack:///./src/SoundModule/Distortion.js","webpack:///./src/SoundModule/Wah.js","webpack:///./src/SoundModule/Equalizer.js","webpack:///./src/SoundModule/Filter.js","webpack:///./src/SoundModule/Autopanner.js","webpack:///./src/SoundModule/AutopannerFallback.js","webpack:///./src/SoundModule/Tremolo.js","webpack:///./src/SoundModule/Ringmodulator.js","webpack:///./src/SoundModule/Phaser.js","webpack:///./src/SoundModule/Flanger.js","webpack:///./src/SoundModule/Chorus.js","webpack:///./src/SoundModule/Delay.js","webpack:///./src/SoundModule/Reverb.js","webpack:///./src/SoundModule/Panner.js","webpack:///./src/SoundModule/Listener.js","webpack:///./src/SoundModule/EnvelopeGenerator.js","webpack:///./src/OscillatorModule/Oscillator.js","webpack:///./src/OscillatorModule/Glide.js","webpack:///./src/AudioModule/VocalCanceler.js","webpack:///./src/StreamModule/NoiseGate.js","webpack:///./src/MixerModule/index.js","webpack:///./src/MIDI/index.js","webpack:///./src/MML/index.js","webpack:///./src/XSound/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Effector","context","bufferSize","_classCallCheck","this","isActive","input","createGain","output","lfo","createOscillator","depth","rate","frequency","processor","createScriptProcessor","start","noteOn","stop","noteOff","values","isStop","startTime","parseFloat","isNaN","currentTime","stopTime","releaseTime","r","type","value","state","undefined","String","toLowerCase","Boolean","connect","JSON","stringify","params","SoundModule","sampleRate","userAgent","navigator","parseInt","test","mastervolume","NUMBER_OF_INPUTS","NUMBER_OF_OUTPUTS","analyser","_Analyser2","default","recorder","_Recorder2","session","_Session2","compressor","_Compressor2","distortion","_Distortion2","wah","_Wah2","equalizer","_Equalizer2","filter","_Filter2","autopanner","createStereoPanner","_Autopanner2","_AutopannerFallback2","tremolo","_Tremolo2","ringmodulator","_Ringmodulator2","phaser","_Phaser2","flanger","_Flanger2","chorus","_Chorus2","delay","_Delay2","reverb","_Reverb2","panner","_Panner2","listener","_Listener2","envelopegenerator","_EnvelopeGenerator2","key","v","replace","gain","source","connects","Array","isArray","disconnect","length","len","destination","sender","toString","Visualizer","graphics","canvas","svg","interval","timerid","styles","shape","grad","offset","color","wave","grid","text","font","family","size","style","weight","width","cap","join","top","right","bottom","left","element","HTMLCanvasElement","CANVAS","getContext","SVGElement","SVG","setAttribute","XMLNS","XLINK","k","isError","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","grads","err","return","prop","data","minDecibels","maxDecibels","drawOnCanvas","drawBySVG","toDataURL","outerHTML","innerWidth","innerHeight","middle","nPlotInterval","CanvasRenderingContext2D","Float32Array","w","h","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","x","Math","floor","y","moveTo","lineTo","stroke","fillStyle","upside","gradient","createLinearGradient","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","gradients","addColorStop","fillRect","linearGradientId","path","document","createElementNS","defs","createSVGLinearGradient","g","appendChild","rect","linearGradient","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_styles$font","SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW","SVG_LINEAR_GRADIENT_ID_TIME","SVG_LINEAR_GRADIENT_ID_FFT","OscillatorModule","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","sources","times","isAnalyser","glide","_Glide2","states","_Oscillator2","setGenerator","arguments","param","st","sp","clear","frequencies","processCallback","_this2","f","onaudioprocess","oscillator","ready","volume","on","event","inputLs","inputBuffer","getChannelData","inputRs","outputLs","outputBuffer","outputRs","off","set","index","time","octave","fine","_SoundModule2","OneshotModule","resources","buffers","volumes","isStops","settings","transpose","timeout","successCallback","errorCallback","progressCallback","properties","success","error","progress","buffer","loop","end","t","load","url","xhr","XMLHttpRequest","ontimeout","ERROR_AJAX_TIMEOUT","onprogress","abort","onerror","ERROR_AJAX","onload","status","arrayBuffer","response","ArrayBuffer","decodeAudioData","audioBuffer","ERROR_DECODE","open","responseType","send","AudioBuffer","_this3","selectedIndex","bufferIndex","playbackRate","loopStart","loopEnd","AudioBufferSourceNode","createBufferSource","noteGrainOn","window","setTimeout","onended","every","oneshot","AudioModule","paused","callbacks","decode","update","ended","vocalcanceler","_VocalCanceler2","setup","max","duration","numberOfChannels","position","pos","timeOverviewL","timeOverviewR","audio","playbackrate","isSource","_AudioModule2","MediaModule","media","ext","controls","muted","autoplay","listeners","formats","HTMLAudioElement","AUDIO","HTMLVideoElement","VIDEO","format","canPlayType","Error","MediaElementAudioSourceNode","createMediaElementSource","addEventListener","loadstart","pause","min","HTMLMediaElement","channelCount","src","indexOf","play","StreamModule","constraints","video","stream","noisegate","_NoiseGate2","streamCallback","mediaDevices","getUserMedia","createMediaStreamSource","then","catch","isStreaming","level","_XSound2","AudioContext","webkitAudioContext","IS_XSOUND","audiocontext","createJavaScriptNode","createGainNode","createDelay","createDelayNode","createPeriodicWave","createWaveTable","_OscillatorModule2","_OneshotModule2","_MediaModule2","_StreamModule2","mixer","_MixerModule2","midi","_MIDI2","mml","_MML2","XSound","SAMPLE_RATE","read","file","ajax","toFrequencies","convertTime","fullscreen","exitFullscreen","clone","clones","C","free","sourceList","noConflict","deep","X","getCurrentTime","Analyser","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","callback","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","clearTimeout","createAnalyser","_TimeOverview2","_Time2","fft","_FFT2","fftSize","smoothingTimeConstant","frequencyBinCount","domain","Uint8Array","getByteTimeDomainData","getFloatTimeDomainData","getByteFrequencyData","getFloatFrequencyData","slice","toUpperCase","_Visualizer2","TimeOverview","savedImage","plotInterval","textInterval","_canvas","height","nTextInterval","clearRect","drawTimeDomainFloat32ArrayOnCanvas","createFontString","fillText","measureText","trim","getImageData","getAttribute","innerHTML","drawTimeDomainFloat32ArrayBySVG","_Visualizer3","textContent","classList","add","ImageData","_canvas2","putImageData","querySelector","drawNode","move","isDown","draw","getOffsetX","preventDefault","offsetX","offsetLeft","parentNode","pageX","touches","Time","UINT","FLOAT","FFT","mindB","maxdB","range","drawnSize","fsDivN","abs","Recorder","numberOfInputs","numberOfOutputs","mixedLs","mixedRs","numberOfTracks","trackLs","trackRs","activeTrack","gainL","gainR","track","isTrack","recordedLs","recordedRs","push","channel","tracks","mixes","sum","num","currentBuffer","numberOfMaxBuffers","currentTrack","mixTrack","qbit","soundLs","soundRs","mix","CHANNEL","QBIT","SIZE","CHUNK_SIZE","RIFF_CHUNK","RATE","BPS","DATA_SIZE","sounds","binary","pow","Int16Array","URL","webkitURL","mozURL","createObjectURL","waves","blob","Blob","fromCharCode","dataURL","btoa","Session","receiver","websocket","tls","host","port","openCallback","closeCallback","close","scheme","charAt","WebSocket","binaryType","onopen","onclose","onmessage","total","byteLength","BYTES_PER_ELEMENT","bufferLs","bufferRs","isConnected","bufferedAmount","readyState","OPEN","stateCallback","waitCallback","intervalid","setInterval","clearInterval","_Effector2","Compressor","createDynamicsCompressor","threshold","knee","ratio","attack","release","Distortion","createWaveShaper","drive","createBiquadFilter","tone","CLEAN","numberOfSamples","BANDPASS","Q","SQRT1_2","LOWPASS","curve","createCurve","AMOUNTS","CRUNCH","OVERDRIVE","DISTORTION","FUZZ","samples","amount","curves","Wah","lowpass","depthRate","_get","cutoff","resonance","Equalizer","bass","treble","presence","LOWSHELF","PEAKING","HIGHSHELF","Filter","setTargetAtTime","setTargetValueAtTime","maxFrequency","decay","sustain","FILTER_TYPES","t0","t1","t2","t2Value","minFrequnecy","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","t3","t4","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass","Autopanner","pan","AutopannerFallback","amplitudeL","amplitudeR","splitter","createChannelSplitter","merger","createChannelMerger","lfoSplitter","inputs","Tremolo","amplitude","WAVE_TYPES","sine","square","sawtooth","triangle","Ringmodulator","Phaser","numberOfStages","filters","MAXIMUM_STAGES","ALLPASS","feedback","stage","Flanger","delayTime","Chorus","Delay","MAX_DELAY_TIME","dry","wet","Reverb","rirs","convolver","createConvolver","impulse","onprogresss","Panner","createPanner","positions","z","orientations","refDistance","maxDistance","rolloffFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","panningModel","HRTF","distanceModel","INVERSE_DISTANCE","setPosition","setOrientation","PANNING_MODELS","DISTANCE_MODELS","equalpower","linear","inverse","exponential","Listener","fronts","ups","EnvelopeGenerator","generators","activeIndexes","activeCounter","activeIndex","counter","MIN_GAIN","isDisconnect","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","generator","Oscillator","setPeriodicWave","setWaveTable","customs","real","imag","reals","imags","subarray","periodicWave","OCTAVE","detune","Glide","LINEAR","EXPONENTIAL","diff","VocalCanceler","dataL","dataR","NoiseGate","MixerModule","MIDI","midiAccess","outputs","sysex","requestMIDIAccess","inputIterator","outputIterator","MML","sequences","timerids","prev","mmls","OscillatorNode","notes","shift","match","REGEXP_MML","ERROR_STRING","indexes","timeOf4note","note","REGEXP_TEMPO","bpm","ERROR_TEMPO","ONE_MINUTES","REGEXP_OCTAVE","ERROR_OCTAVE","REGEXP_NOTE","chord","REGEXP_CHORD","pitchname","computeIndex","EQUAL_TEMPERAMENT","ERROR_NOTE","REST","computeFrequency","durations","split","REGEXP_DURATION","numOf4note","QUARTER_NOTE","reverse","part","sequence","pop","j","node","AudioNode","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","isPaused","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","toAscii","computedIndex","FREQUENCY_RATIO","string","converted","charCode","charCodeAt","reader","FileReader","code","NOT_FOUND_ERR","SECURITY_ERR","ABORT_ERR","NOT_READABLE_ERR","ENCODING_ERR","result","readAsArrayBuffer","readAsDataURL","readAsText","Event","stopPropagation","dataTransfer","files","target","File","ms","minutes","seconds","milliseconds","Element","webkitRequestFullscreen","ALLOW_KEYBOARD_INPUT","mozRequestFullScreen","msRequestFullscreen","requestFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","cancelFullScreen"],"mappings":"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","file":"xsound.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 375a5cbed659a996e341","'use strict';\n\n/**\n * This private class defines common properties for effector classes.\n * @constructor\n */\nexport default class Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        this.isActive = true;\n\n        this.context = context;\n\n        // for connecting external node\n        this.input  = context.createGain();\n        this.output = context.createGain();\n\n        // for LFO (Low Frequency Oscillator)\n        // LFO changes parameter cyclically\n        this.lfo       = context.createOscillator();\n        this.depth     = context.createGain();\n        this.rate      = this.lfo.frequency;\n        this.processor = context.createScriptProcessor(bufferSize, 1, 2);\n\n        // for legacy browsers\n        this.lfo.start = this.lfo.start || this.lfo.noteOn;\n        this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n        this.values = {};\n\n        this.isStop = true;\n    }\n\n    /**\n     * This abstract method gets or sets parameter.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Effector} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @abstract\n     */\n    param() {\n    }\n\n    /**\n     * This abstract method connects nodes according to state.\n     * @abstract\n     */\n    connect() {\n    }\n\n    /**\n     * This method starts LFO. Namely, this method starts effector.\n     * @param {number} startTime This argument is in order to schedule parameter.\n     * @return {Effector} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops LFO, and creates the instance of `OscillatorNode` again.\n     * @param {number} stopTime This argument is in order to schedule parameter.\n     * @param {number} releaseTime This argument is in order to schedule parameter when it is necessary to consider release time.\n     * @return {Effector} This is returned for method chain.\n     */\n    stop(stopTime, releaseTime) {\n        if (this.isActive && !this.isStop) {\n            let s = parseFloat(stopTime);\n            let r = parseFloat(releaseTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            if (isNaN(r) || (r < 0)) {\n                r = 0;\n            }\n\n            // for saving value\n            const type = this.lfo.type;\n            const rate = this.lfo.frequency.value;\n\n            // Destroy the instance of `OscillatorNode`\n            this.lfo.stop(s + r);\n\n            // Create the instance of `OscillatorNode` again\n            this.lfo = this.context.createOscillator();\n\n           // for legacy browsers\n            this.lfo.start = this.lfo.start || this.lfo.noteOn;\n            this.lfo.stop  = this.lfo.stop  || this.lfo.noteOff;\n\n            // Set the saved value\n            this.lfo.type            = type;\n            this.lfo.frequency.value = rate;\n\n            this.rate = this.lfo.frequency;\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Effector} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        // Start LFO\n        this.start(this.context.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     * @abstract\n     */\n    params() {\n        return {};\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     * @abstract\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Effector]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Effector.js","'use strict';\n\nimport Analyser from './Analyser';\nimport Recorder from './Recorder';\nimport Session from './Session';\nimport Compressor from './Compressor';\nimport Distortion from './Distortion';\nimport Wah from './Wah';\nimport Equalizer from './Equalizer';\nimport Filter from './Filter';\nimport Autopanner from './Autopanner';\nimport AutopannerFallback from './AutopannerFallback';\nimport Tremolo from './Tremolo';\nimport Ringmodulator from './Ringmodulator';\nimport Phaser from './Phaser';\nimport Flanger from './Flanger';\nimport Chorus from './Chorus';\nimport Delay from './Delay';\nimport Reverb from './Reverb';\nimport Panner from './Panner';\nimport Listener from './Listener';\nimport EnvelopeGenerator from './EnvelopeGenerator';\n\n/**\n * This class is superclass that is the top in this library.\n * This library's users do not create the instance of `SoundModule`.\n * This class is used for inherit in subclass (`OscillatorModule`, `OneshotModule`, `AudioModule`, `MediaModule`, `StreamModule`, `MixerModule`).\n * Therefore, this class defines the common properties for each sound sources.\n * @constructor\n */\nexport default class SoundModule {\n    static NUMBER_OF_INPUTS  = 2;\n    static NUMBER_OF_OUTPUTS = 2;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 256, 512, 1024, 2048, 4096, 8192, 16384.\n     *     However, the opportunity for designating buffer size is not so much.\n     *     The reason why is that the constructor of `SoundModule` selects buffer size automaticly.\n     *     This buffer size can be changed explicitly by calling `resize` method.\n     */\n    constructor(context, bufferSize) {\n        this.context    = context;\n        this.sampleRate = context.sampleRate;\n\n        const userAgent = navigator.userAgent;\n\n        if (bufferSize !== undefined) {\n            switch (parseInt(bufferSize, 10)) {\n                case   256:\n                case   512:\n                case  1024:\n                case  2048:\n                case  4096:\n                case  8192:\n                case 16384:\n                    this.bufferSize = parseInt(bufferSize, 10);\n                    break;\n                default:\n                    return;\n            }\n        } else if (/(Win(dows )?NT 6\\.2)/.test(userAgent)) {\n            this.bufferSize = 1024;  // Windows 8\n        } else if (/(Win(dows )?NT 6\\.1)/.test(userAgent)) {\n            this.bufferSize = 1024;  // Windows 7\n        } else if (/(Win(dows )?NT 6\\.0)/.test(userAgent)) {\n            this.bufferSize = 2048;  // Windows Vista\n        } else if (/Win(dows )?(NT 5\\.1|XP)/.test(userAgent)) {\n            this.bufferSize = 4096;  // Windows XP\n        } else if (/Mac|PPC/.test(userAgent)) {\n            this.bufferSize = 1024;  // Mac OS X\n        } else if (/Linux/.test(userAgent)) {\n            this.bufferSize = 8192;  // Linux\n        } else if (/iPhone|iPad|iPod/.test(userAgent)) {\n            this.bufferSize = 2048;  // iOS\n        } else {\n            this.bufferSize = 16384;  // Otherwise\n        }\n\n        this.mastervolume = context.createGain();\n        this.processor    = context.createScriptProcessor(this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n\n        this.analyser          = new Analyser(context);\n        this.recorder          = new Recorder(context, this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        this.session           = new Session(context, this.bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS, this.analyser);\n        this.compressor        = new Compressor(context, this.bufferSize);\n        this.distortion        = new Distortion(context, this.bufferSize);\n        this.wah               = new Wah(context, this.bufferSize);\n        this.equalizer         = new Equalizer(context, this.bufferSize);\n        this.filter            = new Filter(context, this.bufferSize);\n        this.autopanner        = context.createStereoPanner ? new Autopanner(context, this.bufferSize) : new AutopannerFallback(context, this.bufferSize);\n        this.tremolo           = new Tremolo(context, this.bufferSize);\n        this.ringmodulator     = new Ringmodulator(context, this.bufferSize);\n        this.phaser            = new Phaser(context, this.bufferSize);\n        this.flanger           = new Flanger(context, this.bufferSize);\n        this.chorus            = new Chorus(context, this.bufferSize);\n        this.delay             = new Delay(context, this.bufferSize);\n        this.reverb            = new Reverb(context, this.bufferSize);\n        this.panner            = new Panner(context, this.bufferSize);\n        this.listener          = new Listener(context);\n        this.envelopegenerator = new EnvelopeGenerator(context);  // for `OscillatorModule`, `OneshotModule`\n\n        // The default order for connection\n        this.modules = [\n            this.compressor,\n            this.distortion,\n            this.wah,\n            this.equalizer,\n            this.filter,\n            this.autopanner,\n            this.tremolo,\n            this.ringmodulator,\n            this.phaser,\n            this.flanger,\n            this.chorus,\n            this.delay,\n            this.reverb,\n            this.panner\n        ];\n    }\n\n    /** @abstract */\n    setup() {\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string} key This argument is property name.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v   = null;\n        let min = null;\n        let max = null;\n\n        switch (k) {\n            case 'mastervolume':\n                if (value === undefined) {\n                    return this.mastervolume.gain.value;\n                }\n\n                v   = parseFloat(value);\n                min = 0;\n                max = 1;\n\n                if ((v >= min) && (v <= max)) {\n                    this.mastervolume.gain.value = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @abstract */\n    ready() {\n    }\n\n    /** @abstract */\n    start() {\n    }\n\n    /** @abstract */\n    stop() {\n    }\n\n    /** @abstract */\n    get() {\n    }\n\n    /**\n     * This method changes buffer size for `ScriptProcessorNode`.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     *     This value is one of 256, 512, 1024, 2048, 4096, 8192, 16384.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    resize(bufferSize) {\n        this.processor = this.context.createScriptProcessor(bufferSize, SoundModule.NUMBER_OF_INPUTS, SoundModule.NUMBER_OF_OUTPUTS);\n        return this;\n    }\n\n    /**\n     * This method gets buffer size for `ScriptProcessorNode`.\n     * @return {number} This is returned as buffer size for `ScriptProcessorNode`.\n     */\n    getBufferSize() {\n        return this.processor.bufferSize;\n    }\n\n    /**\n     * This method connects nodes that are defined by this library and Web Audio API.\n     * @param {AudioNode} source This argument is `AudioNode` for input of sound.\n     * @param {Array.<Effector>} connects This argument is array for changing the default connection.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    connect(source, connects) {\n        // Customize connection ?\n        if (Array.isArray(connects)) {\n            this.modules = connects;\n        }\n\n        // Start connection\n        // AudioSourceNode (Input)-> node -> ... -> node -> GainNode (Master Volume) -> AnalyserNode  -> AudioDestinationNode (Output)\n        source.disconnect(0);  // Clear connection\n\n        if (this.modules.length > 0) {\n            source.connect(this.modules[0].input);\n        } else {\n            source.connect(this.mastervolume);\n        }\n\n        for (let i = 0, len = this.modules.length; i < len; i++) {\n            // Clear connection\n            this.modules[i].output.disconnect(0);\n\n            if (i < (this.modules.length - 1)) {\n                // Connect to next node\n                this.modules[i].output.connect(this.modules[i + 1].input);\n            } else {\n                this.modules[i].output.connect(this.mastervolume);\n            }\n        }\n\n        this.mastervolume.connect(this.context.destination);\n\n        // for analyser\n        this.mastervolume.connect(this.analyser.input);\n\n        // for recording\n        this.mastervolume.connect(this.recorder.processor);\n        this.recorder.processor.connect(this.context.destination);\n\n        // for session\n        this.mastervolume.connect(this.session.sender);\n        this.session.sender.connect(this.context.destination);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of module that is defined by this library. This method enables to access the instance of module by unified call.\n     * @param {string} module This argument is module's name.\n     * @return {Analyser|Recorder|Session|Effector|Listener|EnvelopeGenerator|Glide|VocalCanceler|NoiseGate} This value is the instance of module.\n     */\n    module(module) {\n        const m = String(module).replace(/-/g, '').toLowerCase();\n\n        switch (m) {\n            case 'analyser'     :\n            case 'recorder'     :\n            case 'session'      :\n            case 'compressor'   :\n            case 'distortion'   :\n            case 'wah'          :\n            case 'equalizer'    :\n            case 'filter'       :\n            case 'autopanner'   :\n            case 'tremolo'      :\n            case 'ringmodulator':\n            case 'phaser'       :\n            case 'flanger'      :\n            case 'chorus'       :\n            case 'delay'        :\n            case 'reverb'       :\n            case 'panner'       :\n            case 'listener'     :\n                return this[m];\n            case 'envelopegenerator':\n            case 'eg'               :\n                // OscillatorModule, OneshotModule\n                return this.envelopegenerator;\n            case 'glide':\n                if (m in this) {\n                    return this[m];  // OscillatorModule\n                }\n\n                // fall through\n            case 'vocalcanceler':\n                if (m in this) {\n                    return this[m];  // AudioModule, MediaModule\n                }\n\n                // fall through\n            case 'noisegate':\n                if (m in this) {\n                    return this[m];  // StreamModule\n                }\n\n                // fall through\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method starts effectors.\n     * @param {number} startTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    on(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.start(s);\n        this.flanger.start(s);\n        this.phaser.start(s);\n        this.autopanner.start(s);\n        this.tremolo.start(s);\n        this.ringmodulator.start(s);\n        this.wah.start(s);\n        this.filter.start(s);\n\n        return this;\n    }\n\n    /**\n     * This method stops effectors.\n     * @param {number} stopTime This argument is used for scheduling parameter.\n     * @return {SoundModule} This is returned for method chain.\n     */\n    off(stopTime) {\n        let s = parseFloat(stopTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        this.chorus.stop(s);\n        this.flanger.stop(s);\n        this.phaser.stop(s);\n        this.autopanner.stop(s);\n        this.tremolo.stop(s);\n        this.ringmodulator.stop(s);\n        this.wah.stop(s);\n        // this.filter.stop(s);\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {};\n\n        for (const module in this) {\n            if (Object.prototype.toString.call(this[module]) === '[object Function]') {\n                continue;\n            }\n\n            const m = module.toLowerCase();\n\n            if (m === 'mastervolume') {\n                params[m] = this[module].gain.value;  // AudioParam\n            } else if ((Object.prototype.toString.call(this[module]) === '[object Object]') && ('params' in this[module])) {\n                params[m] = this[module].params();\n            }\n        }\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/index.js","'use strict';\n\n/**\n * This private class defines the properties that subclasses (`TimeOverview`, `Time`, `FFT`) require.\n * @constructor\n */\nexport default class Visualizer {\n    static CANVAS = 'canvas';\n    static SVG    = 'svg';\n\n    static XMLNS = 'http://www.w3.org/2000/svg';\n    static XLINK = 'http://www.w3.org/1999/xlink';\n\n    static SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW = 'svg-linear-gradient-time-overview';\n    static SVG_LINEAR_GRADIENT_ID_TIME          = 'svg-linear-gradient-time';\n    static SVG_LINEAR_GRADIENT_ID_FFT           = 'svg-linear-gradient-fft';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        this.sampleRate = sampleRate;\n\n        this.isActive = false;\n\n        // either 'canvas' or 'svg'\n        this.graphics = '';\n\n        // in the case of using Canvas\n        this.canvas  = null;\n        this.context = null;\n\n        // in the case of using SVG\n        this.svg = null;\n\n        // for timer\n        this.interval = 1000;\n        this.timerid  = null;\n\n        this.styles = {\n            'shape'  : 'line',\n            'grad'   : [\n                {\n                    'offset' : 0,\n                    'color'  : 'rgba(0, 128, 255, 1.0)'\n                },\n                {\n                    'offset' : 1,\n                    'color'  : 'rgba(0, 0, 255, 1.0)'\n                }\n            ],\n            'wave'   : 'rgba(0, 0, 255, 1.0)',\n            'grid'   : 'rgba(255, 0, 0, 1.0)',\n            'text'   : 'rgba(255, 255, 255, 1.0)',\n            'font'   : {\n                'family' : 'Arial',\n                'size'   : '13px',\n                'style'  : 'normal',\n                'weight' : 'normal'\n            },\n            'width'  : 1.5,\n            'cap'    : 'round',\n            'join'   : 'miter',\n            'top'    : 15,\n            'right'  : 30,\n            'bottom' : 15,\n            'left'   : 30\n        };\n    }\n\n    /**\n     * This method sets up for using Canvas or SVG.\n     * @param {HTMLCanvasElement|SVGElement} element This argument is either `HTMLCanvasElement` or `SVGElement`.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    setup(element) {\n        if (element instanceof HTMLCanvasElement) {\n            this.graphics = Visualizer.CANVAS;\n            this.canvas   = element;\n            this.context  = this.canvas.getContext('2d');\n        } else if (element instanceof SVGElement) {\n            this.graphics = Visualizer.SVG;\n            this.svg      = element;\n\n            this.svg.setAttribute('xmlns',       Visualizer.XMLNS);\n            this.svg.setAttribute('xmlns:xlink', Visualizer.XLINK);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {string|number|Array.<object>} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {string|number|Array.<object>} This is returned as the value of designated property in the case of getter.\n     */\n    param(key, value) {\n        const k = String(key).replace(/-/g, '').toLowerCase();\n\n        let v = null;\n\n        switch (k) {\n            case 'interval':\n                if (value === undefined) {\n                    return this.interval;\n                }\n\n                if (String(value).toLowerCase() === 'auto') {\n                    this.interval = 'auto';\n                } else {\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.interval = v;\n                    }\n                }\n\n                break;\n            case 'shape':\n                if (value === undefined) {\n                    return this.styles.shape;\n                }\n\n                v = String(value).toLowerCase();\n\n                if ((v === 'line') || (v === 'rect')) {\n                    this.styles.shape = (this.styles.wave !== 'gradient') ? v : 'rect';\n                }\n\n                break;\n            case 'grad':\n                if (value === undefined) {\n                    return this.styles.grad;\n                }\n\n                if (!Array.isArray(value)) {\n                    value = [value];\n                }\n\n                let isError = false;\n\n                for (const grads of value) {\n                    if (('offset' in grads) && ('color' in grads)) {\n                        const offset = parseFloat(grads.offset);\n\n                        if (isNaN(offset) || (offset < 0) || (offset > 1)) {\n                            isError = true;\n                            break;\n                        }\n                    } else {\n                        isError = true;\n                        break;\n                    }\n                }\n\n                if (!isError) {\n                    this.styles.grad = value;\n                }\n\n                break;\n            case 'font':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (Object.prototype.toString.call(value) === '[object Object]') {\n                    for (const prop in value) {\n                        if (/family|size|style|weight/i.test(prop)) {\n                            this.styles.font[prop] = String(value[prop]);\n                        }\n                    }\n                }\n\n                break;\n            case 'wave':\n            case 'grid':\n            case 'text':\n            case 'cap' :\n            case 'join':\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                if (typeof value === 'string') {\n                    if ((k === 'wave') && (value === 'gradient')) {\n                        this.styles.shape = 'rect';\n                    }\n\n                    this.styles[k] = value.toLowerCase();\n                }\n\n                break;\n            case 'width' :\n            case 'top'   :\n            case 'right' :\n            case 'bottom':\n            case 'left'  :\n                if (value === undefined) {\n                    return this.styles[k];\n                }\n\n                v = (k === 'width') ? parseFloat(value) : parseInt(value, 10);\n\n                if (v >= 0) {\n                    this.styles[k] = v;\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * This method draws sound wave to Canvas or SVG. This method conceals difference of API for drawing.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is parameter for spectrum. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is parameter for spectrum. The default value is -30 dB.\n     * @return {Visualizer} This is returned for method chain.\n     */\n    start(data, minDecibels, maxDecibels) {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                this.drawOnCanvas(data, minDecibels, maxDecibels);\n                break;\n            case Visualizer.SVG:\n                this.drawBySVG(data, minDecibels, maxDecibels);\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates string for `Data URL` or `HTML` for the drawn figure.\n     * @return {string|Visualizer} This is returned as `Data URL` or `HTML` string. If `setup` method has not been invoked, this is returned for method chain.\n     */\n    create() {\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                return this.canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            case Visualizer.SVG:\n                return this.svg.outerHTML;\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Visualizer} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to Canvas.\n     * @param {CanvasRenderingContext2D} context This argument is the instance of `CanvasRenderingContext2D`.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     */\n    drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval) {\n        if (!(context instanceof CanvasRenderingContext2D)) {\n            return this;\n        }\n\n        if (!(data instanceof Float32Array)) {\n            return this;\n        }\n\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        // Begin drawing\n        switch (this.styles.shape) {\n            case 'line':\n                // Set style\n                context.strokeStyle = this.styles.wave;\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            context.moveTo((x + (this.styles.width / 2)),  y);\n                        } else {\n                            context.lineTo(x, y);\n                        }\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case 'rect':\n                // Set style\n                if (this.styles.wave !== 'gradient') {\n                    context.fillStyle = this.styles.wave;\n                }\n\n                // Draw wave\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = -1 * Math.floor(data[i] * (h / 2));\n\n                        // Set style\n                        if (this.styles.wave === 'gradient') {\n                            const upside   = (innerHeight / 2) + this.styles.top;\n                            const gradient = context.createLinearGradient(0, upside, 0, (upside + y));\n\n                            for (const gradients of this.styles.grad) {\n                                gradient.addColorStop(gradients.offset, gradients.color);\n                            }\n\n                            context.fillStyle = gradient;\n                        }\n\n                        context.fillRect(x, m, this.styles.width, y);\n                    }\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws time domain data of `Float32Array` to SVG.\n     * @param {Float32Array} data This argument is time domain data.\n     * @param {number} innerWidth This argument is the width of drawing area.\n     * @param {number} innerHeight This argument is the height of drawing area.\n     * @param {number} middle This argument is the middle of drawing area.\n     * @param {number} nPlotInterval This argument is the interval of drawing.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGPathElement|SVGGElement} This is returned as `SVGElement`.\n     */\n    drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, linearGradientId) {\n        let w = parseInt(innerWidth, 10);\n        let h = parseInt(innerHeight, 10);\n        let m = parseInt(middle, 10);\n\n        if (isNaN(w)) {w = 0;}\n        if (isNaN(h)) {h = 0;}\n        if (isNaN(m)) {m = 0;}\n\n        switch (this.styles.shape) {\n            case 'line':\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor((1 - data[i]) * (h / 2)) + this.styles.top;\n\n                        if (i === 0) {\n                            d += `M${x + (this.styles.width / 2)} ${y}`;\n                        } else {\n                            d += ` L${x} ${y}`;\n                        }\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          this.styles.wave);\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                return path;\n            case 'rect':\n                let defs = null;\n\n                if (this.styles.wave === 'gradient') {\n                    defs = this.createSVGLinearGradient(linearGradientId);\n                }\n\n                // Draw wave\n                const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                if (defs !== null) {\n                    g.appendChild(defs);\n                }\n\n                for (let i = 0, len = data.length; i < len; i++) {\n                    if ((nPlotInterval === null) || (nPlotInterval === undefined) || ((i % nPlotInterval) === 0)) {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        const x = Math.floor((i / len) * w) + this.styles.left;\n                        const y = Math.floor(data[i] * (innerHeight / 2));\n\n                        rect.setAttribute('x',     x);\n                        rect.setAttribute('y',     m);\n                        rect.setAttribute('width', this.styles.width);\n\n                        if (y < 0) {\n                            rect.setAttribute('height', -y);\n                        } else {\n                            rect.setAttribute('height',    y);\n                            rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${m})`);\n                        }\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${linearGradientId})`);\n\n                        g.appendChild(rect);\n                    }\n                }\n\n                return g;\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * This method creates elements for SVG linear gradient.\n     * @param {string} linearGradientId This argument is id attribute for `SVGLinearGradientElement`.\n     * @return {SVGDefsElement} This is returned as the instance of `SVGDefsElement`.\n     */\n    createSVGLinearGradient(linearGradientId) {\n        const defs           = document.createElementNS(Visualizer.XMLNS, 'defs');\n        const linearGradient = document.createElementNS(Visualizer.XMLNS, 'linearGradient');\n\n        linearGradient.setAttribute('id', String(linearGradientId));\n        linearGradient.setAttribute('x1', '0%');\n        linearGradient.setAttribute('y1', '0%');\n        linearGradient.setAttribute('x2', '0%');\n        linearGradient.setAttribute('y2', '100%');\n\n        for (const gradients of this.styles.grad) {\n            const stop = document.createElementNS(Visualizer.XMLNS, 'stop');\n\n            stop.setAttribute('offset',     gradients.offset);\n            stop.setAttribute('stop-color', gradients.color);\n\n            linearGradient.appendChild(stop);\n        }\n\n        defs.appendChild(linearGradient);\n\n        return defs;\n    }\n\n    /**\n     * This method creates string for font.\n     * @return {string} This is returned as string for font.\n     */\n    createFontString() {\n        const { size, style, weight, family } = this.styles.font;\n\n        return `${size} ${style} ${weight} \"${family}\"`;\n    }\n\n    /** @abstract */\n    drawOnCanvas() {\n    }\n\n    /** @abstract */\n    drawBySVG() {\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Visualizer]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Analyser/Visualizer.js","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport Oscillator from './Oscillator';\nimport Glide from './Glide';\n\n/**\n * This subclass defines properties for creating sound.\n * Actually, properties for creating sound is defined in private class (`Oscillator`).\n * Therefore, this class manages these private classes for creating sound.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class OscillatorModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        /** @type {Array.<Oscillator>} */\n        this.sources = [];\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n\n        this.glide = new Glide(context);\n    }\n\n    /**\n     * This method creates the instances of `Oscillator`.\n     * @param {Array.<boolean>|boolean} states This argument is initial state in the instance of `Oscillator`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    setup(states) {\n        // Clear\n        this.sources.length = 0;\n\n        if (!Array.isArray(states)) {\n            states = [states];\n        }\n\n        for (let i = 0, len = states.length ; i < len; i++) {\n            this.sources[i] = new Oscillator(this.context, Boolean(states[i]));\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OscillatorModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            return (r === undefined) ? this : r;\n        }\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(true);\n\n        return this;\n    }\n\n    /**\n     * This method starts some sounds that are active at the same time.\n     * @param {Array.<number>}|number} frequencies This argument each oscillator frequency. The default value is 0 Hz.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    start(frequencies, connects, processCallback) {\n        const startTime = this.context.currentTime + this.times.start;\n\n        // Validate the 1st argument\n        if (!Array.isArray(frequencies)) {\n            frequencies = [frequencies];\n        }\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            const f = parseFloat(frequencies[i]);\n            frequencies[i] = (f >= 0) ? f : 0;\n        }\n\n        // Clear previous\n        this.envelopegenerator.clear(true);\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        // ScriptProcessorNode (Mix oscillators) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor, connects);\n\n        for (let i = 0, len = frequencies.length; i < len; i++) {\n            if (i >= this.sources.length) {\n                break;\n            }\n\n            const oscillator = this.sources[i];\n            const frequency  = frequencies[i];\n\n            // GainNode (Volume) -> ScriptProcessorNode (Mix oscillators)\n            oscillator.ready(this.processor);\n\n            // OscillatorNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume)\n            this.envelopegenerator.ready(i, oscillator.source, oscillator.volume);\n\n            this.glide.ready(frequency).start(oscillator.source, startTime);\n\n            oscillator.start(startTime);\n        }\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                const inputLs  = event.inputBuffer.getChannelData(0);\n                const inputRs  = event.inputBuffer.getChannelData(1);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                // Stop ?\n                if (this.envelopegenerator.isStop()) {\n                    // Stop\n                    const stopTime = this.context.currentTime;\n\n                    for (const source of this.sources) {\n                        source.stop(stopTime);\n                    }\n\n                    this.off(stopTime);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops active sounds.\n     * @return {OscillatorModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.glide.stop();\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `Oscillator` that is used in `OscillatorModule`.\n     * @param {number} index This argument is required in the case of designating `Oscillator`.\n     * @return {Array.<Oscillator>|Oscillator}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /**\n     * This method returns the number of oscillators.\n     * @return {number} This is returned as the number of oscillators.\n     */\n    length() {\n        return this.sources.length;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oscillator = {\n            'glide' : {\n                'type' : this.glide.param('type'),\n                'time' : this.glide.param('time')\n            }\n        };\n\n        for (let i = 0, len = this.sources.length; i < len; i++) {\n            const source = this.sources[i];\n\n            params.oscillator[`oscillator${i}`] = {\n                'state'  : source.state(),\n                'gain'   : source.param('gain'),\n                'type'   : source.param('type'),\n                'octave' : source.param('octave'),\n                'fine'   : source.param('fine')\n            };\n        }\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/OscillatorModule/index.js","'use strict';\n\nimport SoundModule from '../SoundModule';\n\n/**\n * This subclass defines properties for playing the one-shot audio.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class OneshotModule extends SoundModule {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.sources   = [];  /** @type {Array.<AudioBufferSourceNode>} */\n        this.resources = [];  /** @type {Array.<string>} */\n        this.buffers   = [];  /** @type {Array.<AudioBuffer>} */\n        this.volumes   = [];  /** @type {Array.<GainNode>} */\n        this.isStops   = [];  /** @type {Array.<boolean>} in order to not call in duplicate `start` or `stop` method in the instance of `AudioBufferSourceNode` */\n\n        // for audio sources\n        this.settings = [];  /** @type {Array.<object>} */\n\n        // for scheduling\n        this.times = {\n            'start' : 0,\n            'stop'  : 0\n        };\n\n        this.transpose = 1.0;\n\n        this.isStop = true;\n\n        // This flag determines whether sound wave is drawn\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax.\n     * @param {Array.<string>|Array.<AudioBuffer>} resources This argument is either URLs or the instances of `AudioBuffer` for audio resources.\n     * @param {Array.<object>} settings This argument is the properties of each audio sources.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    setup(resources, settings, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('resources' in properties) {\n                resources = properties.resources;\n            }\n\n            if ('settings' in properties) {\n                settings = properties.settings;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(resources)) {\n            resources = [resources];\n        }\n\n        this.resources = resources;\n\n        if (!Array.isArray(settings)) {\n            settings = [settings];\n        }\n\n        this.buffers.length = resources.length;\n\n        for (let i = 0, len = settings.length; i < len; i++) {\n            if ('buffer' in settings[i]) {\n               const buffer = parseInt(settings[i].buffer, 10);\n\n                if ((buffer >= 0) && (buffer < this.buffers.length)) {\n                    settings[i].buffer = buffer;\n                } else {\n                    return;\n                }\n            } else {\n                return;\n            }\n\n            settings[i].rate   = (('rate' in settings[i]) && (settings[i].rate >= 0)) ? parseFloat(settings[i].rate) : 1;\n            settings[i].loop   = ('loop' in settings[i]) ? Boolean(settings[i].loop) : false;\n            settings[i].start  = (('start' in settings[i]) && (settings[i].start >= 0)) ? parseFloat(settings[i].start) : 0;\n            settings[i].end    = (('end' in settings[i]) && (settings[i].end >= 0)) ? parseFloat(settings[i].end) : 0;\n            settings[i].volume = (('volume' in settings[i]) && (settings[i].volume >=0) && (settings[i].volume <= 1)) ? parseFloat(settings[i].volume) : 1;\n\n            this.isStops[i] = true;\n            this.volumes[i] = this.context.createGain();\n            this.envelopegenerator.setGenerator(i);\n        }\n\n        this.settings = settings;\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = error => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(error, OneshotModule.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogress = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, OneshotModule.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            // Success\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.buffers[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (const buffer of this.buffers) {\n                            if (buffer === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event, this.buffers);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, OneshotModule.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = this.resources.length; i < len; i++) {\n            if (typeof this.resources[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(this.resources[i], i);\n            } else if (this.resources[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.buffers[i] = this.resources[i];\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|OneshotModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'transpose':\n                    if (value === undefined) {\n                        return this.transpose;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.transpose = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method schedules the time of start and stop.\n     * @param {number} startTime This argument is the start time. The default value is 0.\n     * @param {number} stopTime This argument is the stop time. The default value is 0.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    ready(startTime, stopTime) {\n        const st = parseFloat(startTime);\n        const sp = parseFloat(stopTime);\n\n        this.times.start = (st >=  0) ? st : 0;\n        this.times.stop  = (sp >= st) ? sp : 0;\n\n        this.envelopegenerator.clear(false);\n\n        return this;\n    }\n\n    /**\n     * This method starts one-shot audio with the designated playback rate and volume.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    start(index, connects, processCallback) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex  = this.settings[selectedIndex].buffer;\n        const playbackRate = this.settings[selectedIndex].rate;\n        const loop         = this.settings[selectedIndex].loop;\n        const loopStart    = this.settings[selectedIndex].start;\n        const loopEnd      = this.settings[selectedIndex].end;\n        const volume       = this.settings[selectedIndex].volume;\n\n        if (!(this.buffers[bufferIndex] instanceof AudioBuffer)) {\n            // `setup` method has not been invoked\n            return this;\n        }\n\n        // the instance of `AudioBufferSourceNode` already exists ?\n        if (this.sources[selectedIndex] instanceof AudioBufferSourceNode) {\n            this.sources[selectedIndex].stop(this.context.currentTime);\n            this.sources[selectedIndex].disconnect(0);\n            this.sources[selectedIndex] = null;\n        }\n\n        const source = this.context.createBufferSource();\n\n        // for legacy browsers\n        source.start = source.start || source.noteGrainOn;\n        source.stop  = source.stop  || source.noteOff;\n\n        source.buffer = this.buffers[bufferIndex];\n\n        // Set properties\n        source.playbackRate.value = playbackRate * this.transpose;\n        source.loop               = loop;\n        source.loopStart          = loopStart;\n        source.loopEnd            = loopEnd;\n\n        this.volumes[selectedIndex].gain.value = volume;\n\n        this.envelopegenerator.clear(false);\n\n        // AudioBufferSourceNode (Input) -> GainNode (Envelope Generator) -> GainNode (Volume) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n        this.envelopegenerator.ready(selectedIndex, source, this.volumes[selectedIndex]);\n        this.volumes[selectedIndex].connect(this.processor);\n        this.connect(this.processor, connects);\n\n        const startTime = this.context.currentTime + this.times.start;\n\n        source.start(startTime);\n\n        this.sources[selectedIndex] = source;\n\n        // Attack -> Decay -> Sustain\n        this.envelopegenerator.start(startTime);\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.isStops[selectedIndex] = false;\n\n        // in the case of scheduling stop time\n        if (this.times.stop > 0) {\n            window.setTimeout(() => {\n                this.stop(selectedIndex);\n            }, (this.times.stop * 1000));\n        }\n\n        // Call on stopping audio\n        source.onended = () => {\n            this.isStops[selectedIndex] = true;\n        };\n\n        if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n            this.processor.onaudioprocess = processCallback;\n        } else {\n            this.processor.onaudioprocess = event => {\n                this.isStop = this.isStops.every(element => element);\n\n                if (this.isStop) {\n                    // Stop\n\n                    this.off(this.context.currentTime);\n\n                    this.envelopegenerator.clear(false);\n\n                    this.analyser.stop('time');\n                    this.analyser.stop('fft');\n                    this.isAnalyser = false;\n\n                    // Stop `onaudioprocess` event\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                } else {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    outputLs.set(inputLs);\n                    outputRs.set(inputRs);\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the designated one-shot audio.\n     * @param {number} index This argument is in order to select the instance of `AudioBufferSourceNode`.\n     * @return {OneshotModule} This is returned for method chain.\n     * @override\n     */\n    stop(index) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (isNaN(selectedIndex) || (selectedIndex < 0) || (selectedIndex >= this.settings.length)) {\n            return this;\n        }\n\n        const bufferIndex= this.settings[selectedIndex].buffer;\n\n        if (!((this.buffers[bufferIndex] instanceof AudioBuffer) && (this.sources[selectedIndex] instanceof AudioBufferSourceNode))) {\n            return this;\n        }\n\n        const stopTime = this.context.currentTime + this.times.stop;\n\n        // Attack or Decay or Sustain -> Release\n        this.envelopegenerator.stop(stopTime);\n\n        this.filter.stop(stopTime);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBuffer` that is used in `OneshotModule`.\n     * @param {number} index This argument is required in the case of designating `AudioBuffer`.\n     * @return {Array.<AudioBuffer>|AudioBuffer}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.buffers.length)) ? this.buffers[i] : this.buffers;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.oneshot = {\n            'transpose' : this.transpose\n        };\n\n        return params;\n    }\n\n    /**\n     * This method resets settings.\n     * @param {number} index This argument is in order to select target setting.\n     * @param {string} key This argument is in order to select parameter.\n     * @param {number|boolean} value This argument is new value.\n     * @return {OneshotModule} This is returned for method chain.\n     */\n    reset(index, key, value) {\n        const selectedIndex = parseInt(index, 10);\n\n        if (String(key).toLowerCase() in this.settings[selectedIndex]) {\n            this.settings[selectedIndex][key.toLowerCase()] = value;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OneshotModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/OneshotModule/index.js","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport VocalCanceler from './VocalCanceler';\n\n/**\n * This subclass defines properties for playing the single audio.\n * This class creates audio player that has higher features than `HTMLAudioElment`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class AudioModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.source = context.createBufferSource();  // for the instance of `AudioBufferSourceNode`\n        this.buffer = null;                          // for the instance of `AudioBuffer`\n\n        this.currentTime = 0;\n\n        this.paused = true;\n\n        this.callbacks = {\n            'decode' : () => {},\n            'ready'  : () => {},\n            'start'  : () => {},\n            'stop'   : () => {},\n            'update' : () => {},\n            'ended'  : () => {},\n            'error'  : () => {}\n        };\n\n        this.vocalcanceler = new VocalCanceler();\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    setup(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|AudioModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = 0;\n            let min = 0;\n            let max = 0;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return this.source.playbackRate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1024;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.source.playbackRate.value = v;\n                    }\n\n                    break;\n                case 'loop'   :\n                case 'looping':\n                    if (value === undefined) {\n                        return this.source.loop;\n                    }\n\n                    this.source.loop = Boolean(value);\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    if (this.buffer instanceof AudioBuffer) {\n                        v   = parseFloat(value);\n                        max = this.buffer.duration;\n                        min = 0;\n\n                        if ((v >= min) && (v <= max)) {\n                            if (this.paused) {\n                                this.currentTime = v;\n                            } else {\n                                this.stop();\n                                this.start(v);\n                            }\n                        }\n                    } else {\n                        this.currentTime = 0;\n                    }\n\n                    break;\n                case 'duration':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.duration : 0;  // Getter only\n                case 'samplerate':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.sampleRate : this.sampleRate;  // Getter only\n                case 'channels':\n                    return (this.buffer instanceof AudioBuffer) ? this.buffer.numberOfChannels : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n     * @param {ArrayBuffer} arrayBuffer This argument is the instance of `ArrayBuffer`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    ready(arrayBuffer) {\n        if (arrayBuffer instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.buffer = buffer;\n\n                this.analyser.start('timeOverviewL', buffer);\n                this.analyser.start('timeOverviewR', buffer);\n\n                this.callbacks.ready(buffer);\n            };\n\n            this.context.decodeAudioData(arrayBuffer, successCallback, this.callbacks.error);\n\n            this.callbacks.decode(arrayBuffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts audio from the designated time.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.buffer instanceof AudioBuffer) && this.paused) {\n            const startTime = this.context.currentTime;\n\n            const pos = parseFloat(position);\n\n            this.currentTime = ((pos >= 0) && (pos <= this.buffer.duration)) ? pos : 0;\n\n            const playbackRate = this.source.playbackRate.value;\n            const loop         = this.source.loop;\n\n            this.source = this.context.createBufferSource();\n\n            // for legacy browsers\n            this.source.start = this.source.start || this.source.noteGrainOn;\n            this.source.stop  = this.source.stop  || this.source.noteOff;\n\n            this.source.buffer             = this.buffer;\n            this.source.playbackRate.value = playbackRate;\n            this.source.loop               = loop;\n\n            // AudioBufferSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            this.source.start(startTime, pos, (this.buffer.duration - pos));\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            this.paused = false;\n\n            this.on(startTime);\n\n            this.callbacks.start(this.source, this.currentTime);\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (this.currentTime < Math.floor(this.source.buffer.duration)) {\n                        for (let i = 0; i < bufferSize; i++) {\n                            outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                            outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n\n                            this.currentTime += ((1 * this.source.playbackRate.value) / this.source.buffer.sampleRate);\n\n                            const index = Math.floor(this.currentTime * this.source.buffer.sampleRate);\n                            const n100msec = 0.100 * this.source.buffer.sampleRate;\n\n                            // Invoke callback every 100 msec\n                            if ((index % n100msec) === 0) {\n                                this.callbacks.update(this.source, this.currentTime);\n                            }\n                        }\n\n                        this.analyser.timeOverviewL.update(this.currentTime);\n                        this.analyser.timeOverviewR.update(this.currentTime);\n                    } else {\n                        if (this.source.loop) {\n                            this.currentTime = 0;\n                        } else {\n                            this.end();\n                        }\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops audio.\n     * @return {AudioModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.buffer instanceof AudioBuffer) && !this.paused) {\n            const stopTime = this.context.currentTime;\n\n            this.source.stop(stopTime);\n\n            this.off(stopTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Clear\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            this.paused = true;\n            this.callbacks.stop(this.source, this.currentTime);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `AudioBufferSourceNode`.\n     * @return {AudioBufferSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops audio according to audio state.\n     * @param {number} position This argument is the time that audio is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    toggle(position, connects, processCallback) {\n        if (this.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method rewinds audio.\n     * @return {AudioModule} This is returned for method chain.\n     */\n    end() {\n        this.stop();\n        this.currentTime = 0;\n        this.callbacks.ended(this.source, this.currentTime);\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBuffer` exists.\n     * @return {boolean} If the instance of `AudioBuffer` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isBuffer() {\n        return this.buffer instanceof AudioBuffer;\n    }\n\n    /**\n     * This method determines whether the instance of `AudioBufferSourceNode` exists.\n     * @return {boolean} If the instance of `AudioBufferSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSource() {\n        return (this.source instanceof AudioBufferSourceNode) && (this.source.buffer instanceof AudioBuffer);\n    }\n\n    /**\n     * This method determines whether the audio is paused.\n     * @return {boolean} If the audio is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        return this.paused;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.audio = {\n            'playbackrate'  : this.isSource() ? this.source.playbackRate.value : 1,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/AudioModule/index.js","'use strict';\n\nimport AudioModule from '../AudioModule';\n\n/**\n * This class defines properties for processing sound data from `HTMLMediaElement`.\n * Namely, this class creates audio player that has higher features from `HTMLMediaElement`.\n * But, this class is disadvantage to play the many one shot audios.\n * In the case of that, developer should use `OneshotModule`.\n * @constructor\n * @extends {AudioModule}\n */\nexport default class MediaModule extends AudioModule {\n    static AUDIO = 'audio';\n    static VIDEO = 'video';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        this.source = null;  // for the instance of `MediaElementAudioSourceNode`\n        this.media  = null;  // for the instance of `HTMLMediaElement`\n        this.ext    = '';    // 'wav', 'ogg', 'mp3, 'webm', 'ogv', 'mp4' ...etc\n\n        this.playbackRate = 1;\n        this.controls     = false;\n        this.loop         = false;\n        this.muted        = false;\n        this.autoplay     = false;\n\n        // The keys are the event interfaces that are defined by `HTMLMediaElement`.\n        // For example, `loadstart`, `loadedmetadata`, `loadeddata`, `canplay`, `canplaythrough`, `timeupdate`, `ended` ...etc\n        this.listeners = {};\n    }\n\n    /**\n     * This method gets `HTMLMediaElement` and selects media format. In addition, this method adds event listeners that are defined by `HTMLMediaElement`.\n     * @param {HTMLAudioElement|HTMLVideoElement} media This argument is either `HTMLAudioElement` or `HTMLVideoElement`.\n     * @param {Array.<string>|string} formats This argument is usable media format. For example, 'wav', 'ogg', 'webm', 'mp4' ...etc.\n     * @param {object} listeners This argument is event handlers that are defined by `HTMLMediaElement`.\n     * @param {boolean} autoplay This argument is in order to determine autoplay. The default value is `false`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    setup(media, formats, listeners, autoplay) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('media' in properties) {\n                media = properties.media;\n            }\n\n            if ('formats' in properties) {\n                formats = properties.formats;\n            }\n\n            if ('listeners' in properties) {\n                listeners = properties.listeners;\n            }\n\n            if ('autoplay' in properties) {\n                autoplay = properties.autoplay;\n            }\n        }\n\n        let type = '';\n\n        if (media instanceof HTMLAudioElement) {\n            type = MediaModule.AUDIO;\n        } else if (media instanceof HTMLVideoElement) {\n            type = MediaModule.VIDEO;\n        } else {\n            return this;\n        }\n\n        this.media = media;\n\n        if (!Array.isArray(formats)) {\n            formats = [formats];\n        }\n\n        for (const format of formats) {\n            const f = `${type}/${String(format).toLowerCase()}`;\n\n            if (/^(?:maybe|probably)/.test(this.media.canPlayType(f))) {\n                this.ext = format;\n                break;\n            }\n        }\n\n        if (this.ext === '') {\n            throw new Error('Media format that can be played does not exist.');\n        }\n\n        if (Object.prototype.toString.call(listeners) === '[object Object]') {\n            for (const k in listeners) {\n                this.listeners[k.toLowerCase()] = (Object.prototype.toString.call(listeners[k]) === '[object Function]') ? listeners[k] : () => {};\n            }\n        }\n\n        this.autoplay = Boolean(autoplay);\n\n        // in the case of autoplay, `loadstart` event not fire\n        if (this.autoplay && !(this.source instanceof MediaElementAudioSourceNode)) {\n            this.source = this.context.createMediaElementSource(this.media);\n        }\n\n        this.media.addEventListener('loadstart', event => {\n            // To create the instance of `MediaElementAudioSourceNode` again causes error to occur\n            if (!(this.source instanceof MediaElementAudioSourceNode)) {\n                this.source = this.context.createMediaElementSource(this.media);\n            }\n\n            if ('loadstart' in this.listeners) {\n                this.listeners.loadstart(event);\n            }\n        }, false);\n\n        this.media.addEventListener('ended', event => {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            if ('ended' in this.listeners) {\n                this.listeners.ended(event);\n            }\n        }, false);\n\n        for (const k in this.listeners) {\n            this.media.addEventListener(k, event => {\n                this.listeners[(event.type).toLowerCase()](event);\n            }, false);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|MediaModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let r;\n\n            if (k === 'mastervolume') {\n                r = super.param(k, value);\n            }\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'playbackrate':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.playbackRate : this.playbackRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.5;  // for Chrome\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLMediaElement) {\n                            this.media.playbackRate = v;\n                        }\n\n                        this.playbackRate = v;\n                    }\n\n                    break;\n                case 'currenttime':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media.currentTime : 0;\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        v   = parseFloat(value);\n                        min = 0;\n                        max = this.media.duration;\n\n                        if ((v >= min) && (v <= max)) {\n                            this.media.currentTime = v;\n                        }\n                    }\n\n                    break;\n                case 'loop'    :\n                case 'muted'   :\n                case 'controls':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLMediaElement) ? this.media[k] : this[k];\n                    }\n\n                    if (this.media instanceof HTMLMediaElement) {\n                        this.media[k] = Boolean(value);\n                    }\n\n                    this[k] = Boolean(value);\n\n                    break;\n                case 'width' :\n                case 'height':\n                    if (value === undefined) {\n                        return (this.media instanceof HTMLVideoElement) ? this.media[k] : 0;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n\n                    if (v >= min) {\n                        if (this.media instanceof HTMLVideoElement) {\n                            this.media[k] = v;\n                        }\n                    }\n\n                    break;\n                case 'duration':\n                    return this.media.duration;  // Getter only\n                case 'channels':\n                    return (this.source instanceof MediaElementAudioSourceNode) ? this.source.channelCount : 0;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method prepares for playing the media anytime after loading the media resource.\n     * @param {string} source This argument is path name or `Data URL` or `Object URL` for the media resource.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    ready(source) {\n        const src = String(source);\n\n        try {\n            // `Data URL` or `Object URL` ?\n            if ((src.indexOf('data:') !== -1) || (src.indexOf('blob:') !== -1)) {\n                this.media.src = src;  // `Data URL` or `Object URL`\n            } else {\n                this.media.src = `${src}.${this.ext}`;  // Path\n            }\n        } catch (error) {\n            throw new Error('The designated resource cannot be loaded.');\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts media from the designated time.\n     * @param {number} position This argument is the time that media is started at. The default value is 0.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    start(position, connects, processCallback) {\n        if ((this.source instanceof MediaElementAudioSourceNode) && this.media.paused) {\n            // MediaElementAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            this.media.play();\n\n            const pos = parseFloat(position);\n\n            this.media.currentTime  = ((pos >= 0) && (pos <= this.media.duration)) ? pos : 0;\n            this.media.playbackRate = this.playbackRate;\n            this.media.controls     = this.controls;\n            this.media.loop         = this.loop;\n            this.media.muted        = this.muted;\n\n            this.on(this.context.currentTime);\n\n            this.analyser.start('time');\n            this.analyser.start('fft');\n\n            const bufferSize = this.processor.bufferSize;\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.vocalcanceler.start(inputLs[i], inputRs[i]);\n                        outputRs[i] = this.vocalcanceler.start(inputRs[i], inputLs[i]);\n                    }\n                };\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops media.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        if ((this.source instanceof MediaElementAudioSourceNode) && !this.media.paused) {\n            this.media.pause();\n\n            this.off(this.context.currentTime);\n\n            this.analyser.stop('time');\n            this.analyser.stop('fft');\n\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaElementAudioSourceNode`.\n     * @return {MediaElementAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops media according to media state.\n     * @param {number} position This argument is time that media is started at.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MediaModule} This is returned for method chain.\n     * @override\n     */\n    toggle(position, connects, processCallback) {\n        if (this.media.paused) {\n            this.start(position, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the instance of `HTMLMediaElement` exists.\n     * @return {boolean} If the instance of `HTMLMediaElement` already exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isMedia() {\n        return this.media instanceof HTMLMediaElement;\n    }\n\n    /**\n     * This method determines whether the instance of `MediaElementAudioSourceNode` exists.\n     * @return {boolean} If the instance of `MediaElementAudioSourceNode` already exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isSource() {\n        return this.source instanceof MediaElementAudioSourceNode;\n    }\n\n    /**\n     * This method determines whether the media is paused.\n     * @return {boolean} If the media is paused or does not exists, this value is `true`. Otherwise, this value is `false`.\n     * @override\n     */\n    isPaused() {\n        return (this.media instanceof HTMLMediaElement) ? this.media.paused : true;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.media = {\n            'playbackrate'  : this.playbackRate,\n            'vocalcanceler' : {\n                'depth' : this.vocalcanceler.param('depth')\n            }\n        };\n\n        delete params.audio;\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[MediaModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/MediaModule/index.js","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport NoiseGate from './NoiseGate';\n\n/**\n * This class defines properties that processes sound data from WebRTC in Web Audio API.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class StreamModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        // for the instance of `MediaStreamAudioSourceNode`\n        this.source = null;\n\n        // for `navigator.mediaDevices.getUserMedia`\n        this.constraints = {\n            'audio' : true,\n            'video' : false\n        };\n\n        this.callbacks = {\n            'stream' : () => {},\n            'error'  : () => {}\n        };\n\n        this.output = true;\n\n        this.isStop = true;\n\n        this.noisegate = new NoiseGate();\n    }\n\n    /**\n     * This method sets up for using WebRTC.\n     * @param {object} constraints This argument is the 1st argument for `getUserMedia`.\n     * @param {function} streamCallback This argument is invoked on streaming.\n     * @param {function} errorCallback This argument is invoked when error occurs on streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    setup(constraints, streamCallback, errorCallback) {\n        if (Object.prototype.toString.call(constraints) === '[object Object]') {\n            this.constraints = constraints;\n        }\n\n        if (Object.prototype.toString.call(streamCallback) === '[object Function]') {\n            this.callbacks.stream = streamCallback;\n        }\n\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            this.callbacks.error = errorCallback;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|boolean} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|boolean|StreamModule} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     * @override\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            switch (k) {\n                case 'output':\n                    if (value === undefined) {\n                        return this.output;\n                    }\n\n                    this.output = Boolean(value);\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    ready() {\n        return this;\n    }\n\n    /**\n     * This method starts streaming.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    start(connects, processCallback) {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new Error('Cannot use WebRTC.');\n        }\n\n        const bufferSize = this.processor.bufferSize;\n\n        let isAnalyser = false;\n\n        const start = (stream, connects, processCallback) => {\n            this.source = this.context.createMediaStreamSource(stream);\n\n            // MediaStreamAudioSourceNode (Input) -> ScriptProcessorNode -> ... -> AudioDestinationNode (Output)\n            this.source.connect(this.processor);\n            this.connect(this.processor, connects);\n\n            if (!this.output) {\n                this.mastervolume.disconnect(0);\n\n                // for analyser\n                this.mastervolume.connect(this.analyser.input);\n\n                // for recording\n                this.mastervolume.connect(this.recorder.processor);\n                this.recorder.processor.connect(this.context.destination);\n\n                // for session\n                this.mastervolume.connect(this.session.sender);\n                this.session.sender.connect(this.context.destination);\n            }\n\n            this.on(this.context.currentTime);\n\n            if (!isAnalyser) {\n                this.analyser.start('time');\n                this.analyser.start('fft');\n                isAnalyser = true;\n            }\n\n            if (Object.prototype.toString.call(processCallback) === '[object Function]') {\n                this.processor.onaudioprocess = processCallback;\n            } else {\n                this.processor.onaudioprocess = event => {\n                    const inputLs  = event.inputBuffer.getChannelData(0);\n                    const inputRs  = event.inputBuffer.getChannelData(1);\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = this.noisegate.start(inputLs[i]);\n                        outputRs[i] = this.noisegate.start(inputRs[i]);\n                    }\n                };\n            }\n        };\n\n        this.isStop = false;\n\n        navigator.mediaDevices.getUserMedia(this.constraints).then(stream => {\n            if (this.isStop) {\n                return;\n            }\n\n            start(stream, connects, processCallback);\n            this.callbacks.stream(stream);\n        }).catch(error => {\n            this.callbacks.error(error);\n        });\n\n        return this;\n    }\n\n    /**\n     * This method stops streaming.\n     * @return {StreamModule} This is returned for method chain.\n     * @override\n     */\n    stop() {\n        this.source = null;\n\n        this.off(this.context.currentTime, true);\n\n        this.analyser.stop('time');\n        this.analyser.stop('fft');\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        this.isStop = true;\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MediaStreamAudioSourceNode`.\n     * @return {MediaStreamAudioSourceNode}\n     * @override\n     */\n    get() {\n        return this.source;\n    }\n\n    /**\n     * This method starts or stops streaming according to current state.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {StreamModule} This is returned for method chain.\n     */\n    toggle(connects, processCallback) {\n        if (this.isStreaming()) {\n            this.stop();\n        } else {\n            this.start(connects, processCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether streaming is active.\n     * @return {boolean} If streaming is active, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStreaming() {\n        return !this.isStop;\n    }\n\n    /** @override */\n    params() {\n        const params = super.params();\n\n        params.stream = {\n            'output'    : this.output,\n            'noisegate' : {\n                'level' : this.noisegate.param('level')\n            }\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/StreamModule/index.js","'use strict';\n\nimport SoundModule from './SoundModule';\nimport OscillatorModule from './OscillatorModule';\nimport OneshotModule from './OneshotModule';\nimport AudioModule from './AudioModule';\nimport MediaModule from './MediaModule';\nimport StreamModule from './StreamModule';\nimport MixerModule from './MixerModule';\nimport MIDI from './MIDI';\nimport MML from './MML';\nimport { read, file, ajax, decode, toFrequencies, convertTime, fullscreen, exitFullscreen } from './XSound';\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nconst IS_XSOUND = Boolean(window.AudioContext);\n\nif (IS_XSOUND) {\n    const audiocontext = new AudioContext();\n\n    // for legacy browsers\n    audiocontext.createScriptProcessor = audiocontext.createScriptProcessor || audiocontext.createJavaScriptNode;\n    audiocontext.createGain            = audiocontext.createGain            || audiocontext.createGainNode;\n    audiocontext.createDelay           = audiocontext.createDelay           || audiocontext.createDelayNode;\n    audiocontext.createPeriodicWave    = audiocontext.createPeriodicWave    || audiocontext.createWaveTable;\n\n    const sources = {\n        'oscillator' : new OscillatorModule(audiocontext),\n        'oneshot'    : new OneshotModule(audiocontext),\n        'audio'      : new AudioModule(audiocontext),\n        'media'      : new MediaModule(audiocontext),\n        'stream'     : new StreamModule(audiocontext),\n        'mixer'      : new MixerModule(audiocontext),\n        'midi'       : new MIDI(audiocontext),\n        'mml'        : new MML(audiocontext)\n    };\n\n    /**\n     * This function is global object for getting the instance of `OscillatorModule` or `OneshotModule` or `AudioModule` or `MediaModule` or `StreamModule` or `MixerModule` or `MIDI` or `MML` or `Oscillator`.\n     * @param {string} source This argument is one of 'oscillator', 'oneshot', 'audio', 'media', 'stream', 'mixer', 'midi', 'mml'.\n     * @param {number} index This argument is in order to select one of some oscillators.\n     * @return {OscillatorModule|OneshotModule|AudioModule|MediaModule|StreamModule|MixerModule|MIDI|MML|Oscillator}\n     */\n    const XSound = (source, index) => {\n        const s = String(source).replace(/-/g, '').toLowerCase();\n\n        switch (s) {\n            case 'oscillator':\n                if (index === undefined) {\n                    return sources.oscillator;\n                }\n\n                const i = parseInt(index, 10);\n\n                if ((i >= 0) && (i < sources.oscillator.length())) {\n                    return sources.oscillator.get(i);\n                }\n\n                return null;\n            case 'oneshot':\n            case 'audio'  :\n            case 'media'  :\n            case 'stream' :\n            case 'mixer'  :\n            case 'midi'   :\n            case 'mml'    :\n                return sources[s];\n            default :\n                return null;\n        }\n    };\n\n    /**\n     * Class (Static) properties\n     */\n    XSound.IS_XSOUND         = IS_XSOUND;\n    XSound.SAMPLE_RATE       = audiocontext.sampleRate;\n    XSound.NUMBER_OF_INPUTS  = SoundModule.NUMBER_OF_INPUTS;\n    XSound.NUMBER_OF_OUTPUTS = SoundModule.NUMBER_OF_OUTPUTS;\n    XSound.read              = read;\n    XSound.file              = file;\n    XSound.ajax              = ajax;\n    XSound.decode            = decode;\n    XSound.toFrequencies     = toFrequencies;\n    XSound.convertTime       = convertTime;\n    XSound.fullscreen        = fullscreen;\n    XSound.exitFullscreen    = exitFullscreen;\n\n    /**\n     * This class (static) method returns function as closure that is getter of cloned module.\n     * @return {function} This is returned as closure that is getter of cloned module.\n     */\n    XSound.clone = () => {\n        const clones = {\n            'oscillator' : new OscillatorModule(audiocontext),\n            'oneshot'    : new OneshotModule(audiocontext),\n            'audio'      : new AudioModule(audiocontext),\n            'media'      : new MediaModule(audiocontext),\n            'stream'     : new StreamModule(audiocontext),\n            'mixer'      : new MixerModule(audiocontext),\n            'midi'       : new MIDI(audiocontext),\n            'mml'        : new MML(audiocontext)\n        };\n\n        const C = (source, index) => {\n            const s = String(source).replace(/-/g, '').toLowerCase();\n\n            switch (s) {\n                case 'oscillator':\n                    if (index === undefined) {\n                        return clones.oscillator;\n                    }\n\n                    const i = parseInt(index, 10);\n\n                    if ((i >= 0) && (i < clones.oscillator.length())) {\n                        return clones.oscillator.get(i);\n                    }\n\n                    return null;\n                case 'oneshot':\n                case 'audio'  :\n                case 'media'  :\n                case 'stream' :\n                case 'mixer'  :\n                case 'midi'   :\n                case 'mml'    :\n                    return clones[s];\n                default :\n                    return null;\n            }\n        };\n\n        C.free  = sourceList => {\n            if (!Array.isArray(sourceList)) {\n                sourceList = [sourceList];\n            }\n\n            for (const source of sourceList) {\n                // Already deleted ?\n                if (source === null) {\n                    continue;\n                }\n\n                for (const key in clones) {\n                    if (source === clones[key]) {\n                        clones[key] = null;\n                    }\n                }\n            }\n        };\n\n        // Closure\n        return C;\n    };\n\n    /**\n     * This class (static) method releases memory of unnecessary instances.\n     * @param {Array.<SoundModule|MIDI|MML>} sourceList This argument is the array that contains the instances of `SoundModule` or `MIDI` or `MML`.\n     */\n    XSound.free = sourceList => {\n        if (!Array.isArray(sourceList)) {\n            sourceList = [sourceList];\n        }\n\n        for (const source of sourceList) {\n            // Already deleted ?\n            if (source === null) {\n                continue;\n            }\n\n            for (const key in sources) {\n                if (source === sources[key]) {\n                    sources[key] = null;\n                }\n            }\n        }\n    };\n\n    /**\n     * This class (static) method removes one of the global objects or both of the global objects.\n     * @param {boolean} deep This argument is in order to select whether removing both of global objects.\n     *     If this value is `true`, both of global objects are removed.\n     * @return {XSound}\n     */\n    XSound.noConflict = deep => {\n        if (window.X === XSound) {\n            window.X = undefined;\n        }\n\n        // both of global objects are removed ?\n        if (deep && (window.XSound === XSound)) {\n            window.XSound = undefined;\n        }\n\n        return XSound;\n    };\n\n    /**\n     * This class (static) method gets the instance of `AudioContext`.\n     * @return {AudioContext}\n     */\n    XSound.get = () => {\n        return audiocontext;\n    };\n\n    /**\n     * This class (static) method gets `currentTime` property in the instance of `AudioContext`.\n     * @return {number}\n     */\n    XSound.getCurrentTime = () => {\n        return audiocontext.currentTime;\n    };\n\n    /** @override */\n    XSound.toString = () => {\n        return '[XSound]';\n    };\n\n    // Export\n    window.XSound = XSound;\n    window.X      = XSound;  // Alias of XSound\n} else {\n    const XSound = () => null;\n\n    XSound.IS_XSOUND = IS_XSOUND;\n\n    // Export\n    window.XSound = XSound;\n    window.X      = XSound;  // Alias of XSound\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","'use strict';\n\nimport TimeOverview from './TimeOverview';\nimport Time from './Time';\nimport FFT from './FFT';\n\n/**\n * This private class manages 3 private classes (`TimeOverview`, `Time`, `FFT`) for drawing sound wave.\n * @constructor\n */\nexport default class Analyser {\n    /**\n     * @param {AudioContext} context This argument is This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        window.requestAnimationFrame = window.requestAnimationFrame       ||\n                                       window.webkitRequestAnimationFrame ||\n                                       window.mozRequestAnimationFrame    ||\n                                       (callback => window.setTimeout(callback, (1000 / 60)));\n\n        window.cancelAnimationFrame = window.cancelAnimationFrame       ||\n                                      window.webkitCancelAnimationFrame ||\n                                      window.mozCancelAnimationFrame    ||\n                                      window.clearTimeout;\n\n        this.analyser = context.createAnalyser();\n        this.input    = context.createGain();\n\n        // GainNode (Input) -> AnalyserNode\n        this.input.connect(this.analyser);\n\n        this.timeOverviewL = new TimeOverview(context.sampleRate);\n        this.timeOverviewR = new TimeOverview(context.sampleRate);\n        this.time          = new Time(context.sampleRate);\n        this.fft           = new FFT(context.sampleRate);\n\n        // Set default value\n        this.analyser.fftSize               = 2048;\n        this.analyser.minDecibels           = -100;\n        this.analyser.maxDecibels           = -30;\n        this.analyser.smoothingTimeConstant = 0.8;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Analyser} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'fftsize':\n                    if (value === undefined) {\n                        return this.analyser.fftSize;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case   32:\n                        case   64:\n                        case  128:\n                        case  256:\n                        case  512:\n                        case 1024:\n                        case 2048:\n                            this.analyser.fftSize = v;\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequencybincount':\n                    return this.analyser.frequencyBinCount;  // Getter only\n                case 'mindecibels':\n                    if (value === undefined) {\n                        return this.analyser.minDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    max = -30;\n\n                    if (v < max) {\n                        this.analyser.minDecibels = v;\n                    }\n\n                    break;\n                case 'maxdecibels':\n                    if (value === undefined) {\n                        return this.analyser.maxDecibels;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -100;\n\n                    if (v > min) {\n                        this.analyser.maxDecibels = v;\n                    }\n\n                    break;\n                case 'smoothingtimeconstant':\n                    if (value === undefined) {\n                        return this.analyser.smoothingTimeConstant;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.analyser.smoothingTimeConstant = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates data for drawing and executes drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @param {AudioBuffer} buffer This argument is the instance of `AudioBuffer`. The data for drawing audio wave in overview of time domain is gotten from this argument.\n     * @return {Analyser} This is returned for method chain.\n     */\n    start(domain, buffer) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        let data = null;\n\n        switch (d) {\n            case 'timeoverviewl':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 0) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(0));\n                        this.timeOverviewL.start(data);\n                    }\n                }\n\n                break;\n            case 'timeoverviewr':\n                if (buffer instanceof AudioBuffer) {\n                    if (buffer.numberOfChannels > 1) {\n                        data = new Float32Array(buffer.length);\n                        data.set(buffer.getChannelData(1));\n                        this.timeOverviewR.start(data);\n                    }\n                }\n\n                break;\n            case 'time':\n                if (this.time.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.fftSize);\n                    this.analyser.getByteTimeDomainData(data);\n                    this.time.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.fftSize);\n                    this.analyser.getFloatTimeDomainData(data);\n                    this.time.start(data);\n                }\n\n                if (this.time.param('interval') === 'auto') {\n                    this.time.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.time.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.time.param('interval'));\n                }\n\n                break;\n            case 'fft':\n                if (this.fft.param('type') === 'uint') {\n                    data = new Uint8Array(this.analyser.frequencyBinCount);\n                    this.analyser.getByteFrequencyData(data);\n                    this.fft.start(data);\n                } else {\n                    data = new Float32Array(this.analyser.frequencyBinCount);\n                    this.analyser.getFloatFrequencyData(data);\n                    this.fft.start(data, this.analyser.minDecibels, this.analyser.maxDecibels);\n                }\n\n                if (this.fft.param('interval') === 'auto') {\n                    this.fft.timerid = window.requestAnimationFrame(() => {\n                        this.start(domain);\n                    });\n                } else {\n                    this.fft.timerid = window.setTimeout(() => {\n                        this.start(domain);\n                    }, this.fft.param('interval'));\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {Analyser} This is returned for method chain.\n     */\n    stop(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                break;\n            case 'time':\n                if (this.time.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.time.timerid);\n                } else {\n                    window.clearTimeout(this.time.timerid);\n                }\n\n                this.time.timerid = null;\n\n                break;\n            case 'fft':\n                if (this.fft.param('interval') === 'auto') {\n                    window.cancelAnimationFrame(this.fft.timerid);\n                } else {\n                    window.clearTimeout(this.fft.timerid);\n                }\n\n                this.fft.timerid = null;\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects domain for drawing.\n     * @param {string} domain This argument is one of 'timeOverviewL', 'timeOverviewR', 'time', 'fft'.\n     * @return {TimeOverview|Time|FFT|Analyser} This value is the instance of selected class.\n     */\n    domain(domain) {\n        const d = String(domain).replace(/-/g, '').toLowerCase();\n\n        switch (d) {\n            case 'timeoverviewl':\n            case 'timeoverviewr':\n                return this[`timeOverview${d.slice(-1).toUpperCase()}`];\n            case 'time':\n            case 'fft' :\n                return this[d];\n            default:\n                return this;\n        }\n    }\n\n    /**\n     * This method gets the instance of `AnalyserNode`.\n     * @return {AnalyserNode}\n     */\n    get() {\n        return this.analyser;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Analyser/index.js","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing audio wave in overview of time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport default class TimeOverview extends Visualizer {\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = null;\n        this.length     = 0;\n\n        this.currentTime  = 'rgba(255, 255, 255, 1.0)';  // This style is used for the rectangle that displays current time of audio\n        this.plotInterval = 0.0625;                      // Draw wave at intervals of this value [sec]\n        this.textInterval = 60;                          // Draw text at intervals of this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'currenttime':\n                    if (value === undefined) {\n                        return this.currentTime;\n                    }\n\n                    this.currentTime = String(value).toLowerCase();\n\n                    break;\n                case 'plotinterval':\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this[k.replace('interval', 'Interval')];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k.replace('interval', 'Interval')] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to Canvas.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle, nPlotInterval);\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) / 60)} min`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = context.getImageData(0, 0, width, height);\n        this.length     = data.length;\n\n        // This rectangle displays current time of audio\n        context.fillStyle = this.currentTime;\n        context.fillRect(this.styles.left, this.styles.top, 1, innerHeight);\n\n        return this;\n    }\n\n    /**\n     * This method draws audio wave in overview of time domain to SVG.\n     * @param {Float32Array} data This argument is data for drawing.\n     * @return {TimeOverview} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw wave at intervals of `this.plotInterval`\n        const nPlotInterval = Math.floor(this.plotInterval * this.sampleRate);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, nPlotInterval, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME_OVERVIEW));\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = Math.floor((i / this.sampleRate) / 60) + ' min';\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        // This rectangle displays current time of audio\n        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n        rect.classList.add('svg-current-time');\n\n        rect.setAttribute('x',      this.styles.left);\n        rect.setAttribute('y',      this.styles.top);\n        rect.setAttribute('width',  1);\n        rect.setAttribute('height', innerHeight);\n\n        rect.setAttribute('stroke', 'none');\n        rect.setAttribute('fill',   this.currentTime);\n\n        svg.appendChild(rect);\n\n        // for `TimeOverview#update`, `TimeOverview#drag`\n        this.savedImage = svg;\n        this.length     = data.length;\n\n        return this;\n    }\n\n    /**\n     * This method draws current time of audio on Canvas or SVG.\n     * @param {number} time This argument is current time of audio.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    update(time) {\n        const t = parseFloat(time);\n\n        if (isNaN(t) || (t < 0)) {\n            return this;\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                if (this.savedImage instanceof ImageData) {\n                    const context = this.context;\n\n                    const { width, height } = this.canvas;\n\n                    const innerWidth  = width  - (this.styles.left + this.styles.right);\n                    const innerHeight = height - (this.styles.top  + this.styles.bottom);\n                    const x           = Math.floor(((t * this.sampleRate) / this.length) * innerWidth) + this.styles.left;\n\n                    context.clearRect(0, 0, width, height);\n                    context.putImageData(this.savedImage, 0, 0);\n\n                    context.fillStyle = this.currentTime;\n                    context.fillRect(x, this.styles.top, 1, innerHeight);\n                }\n\n                break;\n            case Visualizer.SVG:\n                const svg = this.svg.querySelector('.svg-current-time');\n\n                if (svg instanceof SVGElement) {\n                    const width      = parseInt(this.svg.getAttribute('width'), 10);\n                    const innerWidth = width  - (this.styles.left + this.styles.right);\n                    const x          = Math.floor(((t * this.sampleRate) / this.length) * innerWidth);\n\n                    svg.setAttribute('transform', `translate(${x} 0)`);\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method registers event listener for setting current time by drag.\n     * @param {function} callback This argument is invoked when current time is changed.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    drag(callback) {\n        let drawNode = null;\n\n        let start = '';\n        let move  = '';\n        let end   = '';\n\n        // Touch Panel ?\n        if (/iPhone|iPad|iPod|Android/.test(navigator.userAgent)) {\n            start = 'touchstart';\n            move  = 'touchmove';\n            end   = 'touchend';\n        } else {\n            start = 'mousedown';\n            move  = 'mousemove';\n            end   = 'mouseup';\n        }\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                drawNode = this.canvas;\n                break;\n            case Visualizer.SVG:\n                drawNode = this.svg;\n                break;\n            default:\n                return this;\n        }\n\n        let isDown = false;\n\n        drawNode.addEventListener(start, event => {\n            this.draw(this.getOffsetX(event), callback);\n            isDown = true;\n        }, true);\n\n        drawNode.addEventListener(move, event => {\n            if (isDown) {\n                event.preventDefault();  // for Touch Panel\n                this.draw(this.getOffsetX(event), callback);\n            }\n        }, true);\n\n        window.addEventListener(end, () => {\n            if (isDown) {\n                isDown = false;\n            }\n        }, true);\n\n        return this;\n    }\n\n    /**\n     * This method draws the rectangle for current time of audio.\n     * @param {number} offsetX This argument is X coordinate on Canvas or SVG.\n     * @param {function} callback This argument is invoked when the rectangle is drawn.\n     * @return {TimeOverview} This is returned for method chain.\n     */\n    draw(offsetX, callback) {\n        let offsetLeft = 0;\n        let width      = 0;\n\n        switch (this.graphics) {\n            case Visualizer.CANVAS:\n                offsetLeft = this.canvas.offsetLeft;\n                width      = this.canvas.width;\n                break;\n            case Visualizer.SVG:\n                offsetLeft = this.svg.parentNode.offsetLeft;\n                width      = parseInt(this.svg.getAttribute('width'), 10);\n                break;\n            default:\n                break;\n        }\n\n        let x = offsetX - (offsetLeft + this.styles.left);\n\n        width -= (this.styles.left + this.styles.right);\n\n        // Exceed ?\n        if (x < 0)     {x = 0;}\n        if (x > width) {x = width;}\n\n        const plot = (x / width) * this.length;\n        const time = plot / this.sampleRate;\n\n        this.update(time);\n\n        if (Object.prototype.toString.call(callback) === '[object Function]') {\n            callback(time);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method returns X coordinate from `Event` object.\n     * @param {Event} event This argument is the instance of `Event`.\n     * @return {number} This is returned as X coordinate.\n     */\n    getOffsetX(event) {\n        if (event.pageX) {\n            return event.pageX;\n        }\n\n        if (event.touches[0]) {\n            return event.touches[0].pageX;\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser TimeOverview]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Analyser/TimeOverview.js","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in time domain.\n * @constructor\n * @extends {Visualizer}\n */\nexport default class Time extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = Time.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.textInterval = 0.005;      // Draw text at intervals this value [sec]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Time.UINT) || (v === Time.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                this.drawTimeDomainFloat32ArrayOnCanvas(context, data, innerWidth, innerHeight, middle);\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        // Draw wave\n                        context.beginPath();\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((0.5 - (data[i] / 255)) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = (innerHeight / 2) + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, middle, this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = Math.floor(this.styles.left - context.measureText(t).width);\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    context.fillStyle = this.styles.grid;\n                    context.fillRect(this.styles.left, y, innerWidth, 1);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    context.fillStyle = this.styles.text;\n                    context.font      = this.createFontString();\n                    context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in time domain to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @return {Time} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n        const middle      = Math.floor(innerHeight / 2) + this.styles.top;\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval * this.sampleRate);\n\n        // Begin drawing\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case Time.FLOAT:\n                svg.appendChild(this.drawTimeDomainFloat32ArrayBySVG(data, innerWidth, innerHeight, middle, null, Visualizer.SVG_LINEAR_GRADIENT_ID_TIME));\n                break;\n            case Time.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_TIME);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0, len = data.length; i < len; i++) {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                            const y = Math.floor(((data[i] / 255) - 0.5) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     middle);\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${middle})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_TIME})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0, len = data.length; i < len; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / len) * innerWidth) + this.styles.left;\n                    const t = `${Math.floor((i / this.sampleRate) * 1000)} ms`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            const texts = ['-1.00', '-0.50', ' 0.00', ' 0.50', ' 1.00'];\n\n            for (const t of texts) {\n                const x = this.styles.left;\n                const y = Math.floor((1 - parseFloat(t.trim())) * (innerHeight / 2)) + this.styles.top;\n\n                // Draw grid\n                if (this.styles.grid !== 'none') {\n                    const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                    rect.setAttribute('x',      x);\n                    rect.setAttribute('y',      y);\n                    rect.setAttribute('width',  innerWidth);\n                    rect.setAttribute('height', 1);\n\n                    rect.setAttribute('stroke', 'none');\n                    rect.setAttribute('fill',   this.styles.grid);\n\n                    svg.appendChild(rect);\n                }\n\n                // Draw text\n                if (this.styles.text !== 'none') {\n                    const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                    text.textContent = t;\n\n                    text.setAttribute('x', x);\n                    text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                    text.setAttribute('text-anchor', 'end');\n                    text.setAttribute('stroke',      'none');\n                    text.setAttribute('fill',        this.styles.text);\n                    text.setAttribute('font-family', this.styles.font.family);\n                    text.setAttribute('font-size',   this.styles.font.size);\n                    text.setAttribute('font-style',  this.styles.font.style);\n                    text.setAttribute('font-weight', this.styles.font.weight);\n\n                    svg.appendChild(text);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser Time]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Analyser/Time.js","'use strict';\n\nimport Visualizer from './Visualizer';\n\n/**\n * This private class defines properties for drawing sound wave in frequency domain (spectrum).\n * @constructor\n * @extends {Visualizer}\n */\nexport default class FFT extends Visualizer {\n    static UINT  = 'uint';\n    static FLOAT = 'float';\n\n    /**\n     * @param {number} sampleRate This argument is sample rate.\n     */\n    constructor(sampleRate) {\n        super(sampleRate);\n\n        this.type         = FFT.UINT;  // unsigned int 8 bit (`Uint8Array`) or float 32 bit (`Float32Array`)\n        this.size         = 256;       // Range for drawing\n        this.textInterval = 1000;      // Draw text at intervals of this value [Hz]\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            const r = super.param(k, value);\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === FFT.UINT) || (v === FFT.FLOAT)) {\n                        this.type = v;\n                    }\n\n                    break;\n                case 'size':\n                    if (value === undefined) {\n                        return this.size;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = 1024;  // `AnalyserNode#fftSize` max 2048 -> half 1024\n\n                    if ((v > min) && (v <= max)) {\n                        this.size = v;\n                    }\n\n                    break;\n                case 'textinterval':\n                    if (value === undefined) {\n                        return this.textInterval;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.textInterval = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to Canvas.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawOnCanvas(data, minDecibels, maxDecibels) {\n        if (!((this.canvas instanceof HTMLCanvasElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const context = this.context;\n\n        const { width, height } = this.canvas;\n\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (Sampling rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        context.clearRect(0, 0, width, height);\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Set style\n                context.strokeStyle = (this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)';  // line only\n                context.lineWidth   = this.styles.width;\n                context.lineCap     = this.styles.cap;\n                context.lineJoin    = this.styles.join;\n\n                // Draw wave\n                context.beginPath();\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = (Math.abs(data[i] - maxdB) * (innerHeight / range)) + this.styles.top;  // [dB] * [px / dB] = [px]\n\n                    if (i === 0) {\n                        context.moveTo((x + (this.styles.width / 2)), y);\n                    } else {\n                        context.lineTo(x, y);\n                    }\n                }\n\n                context.stroke();\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Set style\n                        context.strokeStyle = this.styles.wave;\n                        context.lineWidth   = this.styles.width;\n                        context.lineCap     = this.styles.cap;\n                        context.lineJoin    = this.styles.join;\n\n                        context.beginPath();\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                context.moveTo((x + (this.styles.width / 2)), y);\n                            } else {\n                                context.lineTo(x, y);\n                            }\n                        }\n\n                        context.stroke();\n\n                        break;\n                    case 'rect':\n                       // Set style\n                       if (this.styles.wave !== 'gradient') {\n                           context.fillStyle = this.styles.wave;\n                       }\n\n                        // Draw wave\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = -1 * Math.floor((data[i] / 255) * innerHeight);\n\n                           // Set style\n                           if (this.styles.wave === 'gradient') {\n                                const upside   = innerHeight + this.styles.top;\n                                const gradient = context.createLinearGradient(0 , upside, 0, (upside + y));\n\n                                for (const gradients of this.styles.grad) {\n                                    gradient.addColorStop(gradients.offset, gradients.color);\n                                }\n\n                                context.fillStyle = gradient;\n                            }\n\n                            context.fillRect(x, (innerHeight + this.styles.top), this.styles.width, y);\n                        }\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        context.fillStyle = this.styles.grid;\n                        context.fillRect(x, this.styles.top, 1, innerHeight);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        context.fillStyle = this.styles.text;\n                        context.font      = this.createFontString();\n                        context.fillText(t, (x - (context.measureText(t).width / 2)), (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i} dB`;\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = Math.floor(this.styles.left - context.measureText(t).width);\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            context.fillStyle = this.styles.grid;\n                            context.fillRect(this.styles.left, y, innerWidth, 1);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            context.fillStyle = this.styles.text;\n                            context.font      = this.createFontString();\n                            context.fillText(t, x, (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method draws sound wave in frequency domain (spectrum) to SVG.\n     * @param {Uint8Array|Float32Array} data This argument is data for drawing.\n     * @param {number} minDecibels This argument is in order to determine the range of drawing. The default value is -100 dB.\n     * @param {number} maxDecibels This argument is in order to determine the range of drawing. The default value is -30 dB.\n     * @return {FFT} This is returned for method chain.\n     * @override\n     */\n    drawBySVG(data, minDecibels, maxDecibels) {\n        if (!((this.svg instanceof SVGElement) && this.isActive)) {\n            return this;\n        }\n\n        const mindB = parseFloat(minDecibels);\n        const maxdB = parseFloat(maxDecibels);\n\n        const range = maxdB - mindB;\n\n        const svg = this.svg;\n\n        const width       = parseInt(svg.getAttribute('width'), 10);\n        const height      = parseInt(svg.getAttribute('height'), 10);\n        const innerWidth  = width  - (this.styles.left + this.styles.right);\n        const innerHeight = height - (this.styles.top  + this.styles.bottom);\n\n        const drawnSize = (this.size > data.length) ? data.length : this.size;\n\n        // Frequency resolution (sample rate / FFT size)\n        const fsDivN = this.sampleRate / (2 * data.length);\n\n        // Draw text at intervals of `this.textInterval`\n        const nTextInterval = Math.floor(this.textInterval / fsDivN);\n\n        // Erase previous wave\n        svg.innerHTML = '';\n\n        // Begin drawing\n        switch (this.type) {\n            case FFT.FLOAT:\n                // Draw wave\n                const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                let d = '';\n\n                for (let i = 0; i < drawnSize; i++) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                    const y = Math.floor(-1 * (data[i] - maxdB) * (innerHeight / range)) + this.styles.top;\n\n                    if (i === 0) {\n                        d += `M${x + (this.styles.width / 2)} ${y}`;\n                    } else {\n                        d += ` L${x} ${y}`;\n                    }\n                }\n\n                path.setAttribute('d', d);\n\n                path.setAttribute('stroke',          ((this.styles.wave !== 'gradient') ? this.styles.wave : 'rgba(0, 0, 255, 1.0)'));  // line only\n                path.setAttribute('fill',            'none');\n                path.setAttribute('stroke-width',    this.styles.width);\n                path.setAttribute('stroke-linecap',  this.styles.cap);\n                path.setAttribute('stroke-linejoin', this.styles.join);\n\n                svg.appendChild(path);\n\n                break;\n            case FFT.UINT:\n            default:\n                switch (this.styles.shape) {\n                    case 'line':\n                        // Draw wave\n                        const path = document.createElementNS(Visualizer.XMLNS, 'path');\n\n                        let d = '';\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((1 - (data[i] / 255)) * innerHeight) + this.styles.top;\n\n                            if (i === 0) {\n                                d += `M${x + (this.styles.width / 2)} ${y}`;\n                            } else {\n                                d += ` L${x} ${y}`;\n                            }\n                        }\n\n                        path.setAttribute('d', d);\n\n                        path.setAttribute('stroke',          this.styles.wave);\n                        path.setAttribute('fill',            'none');\n                        path.setAttribute('stroke-width',    this.styles.width);\n                        path.setAttribute('stroke-linecap',  this.styles.cap);\n                        path.setAttribute('stroke-linejoin', this.styles.join);\n\n                        svg.appendChild(path);\n\n                        break;\n                    case 'rect':\n                        // Draw wave\n                        let defs = null;\n\n                        if (this.styles.wave === 'gradient') {\n                            defs = this.createSVGLinearGradient(Visualizer.SVG_LINEAR_GRADIENT_ID_FFT);\n                        }\n\n                        // Draw wave\n                        const g = document.createElementNS(Visualizer.XMLNS, 'g');\n\n                        if (defs !== null) {\n                            g.appendChild(defs);\n                        }\n\n                        for (let i = 0; i < drawnSize; i++) {\n                            let rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n                            const y = Math.floor((data[i] / 255) * innerHeight);\n\n                            rect.setAttribute('x',     x);\n                            rect.setAttribute('y',     (this.styles.top + innerHeight));\n                            rect.setAttribute('width', this.styles.width);\n\n                            if (y < 0) {\n                                rect.setAttribute('height', -y);\n                            } else {\n                                rect.setAttribute('height',    y);\n                                rect.setAttribute('transform', `rotate(180 ${x + (this.styles.width / 2)} ${this.styles.top + innerHeight})`);\n                            }\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   (defs === null) ? this.styles.wave : `url(#${Visualizer.SVG_LINEAR_GRADIENT_ID_FFT})`);\n\n                            g.appendChild(rect);\n                        }\n\n                        svg.appendChild(g);\n\n                        break;\n                    default:\n                        break;\n                }\n\n                break;\n        }\n\n        if ((this.styles.grid !== 'none') || (this.styles.text !== 'none')) {\n            // Draw grid and text (X axis)\n            for (let i = 0; i < drawnSize; i++) {\n                if ((i % nTextInterval) === 0) {\n                    const x = Math.floor((i / drawnSize) * innerWidth) + this.styles.left;\n\n                    const f = Math.floor(this.textInterval * (i / nTextInterval));\n                    const t = (f < 1000) ? `${f} Hz` : `${String(f / 1000).slice(0, 3)} kHz`;\n\n                    // Draw grid\n                    if (this.styles.grid !== 'none') {\n                        const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                        rect.setAttribute('x',      x);\n                        rect.setAttribute('y',      this.styles.top);\n                        rect.setAttribute('width',  1);\n                        rect.setAttribute('height', innerHeight);\n\n                        rect.setAttribute('stroke', 'none');\n                        rect.setAttribute('fill',   this.styles.grid);\n\n                        svg.appendChild(rect);\n                    }\n\n                    // Draw text\n                    if (this.styles.text !== 'none') {\n                        const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                        text.textContent = t;\n\n                        text.setAttribute('x', x);\n                        text.setAttribute('y', (this.styles.top + innerHeight + parseInt(this.styles.font.size, 10)));\n\n                        text.setAttribute('text-anchor', 'middle');\n                        text.setAttribute('stroke',      'none');\n                        text.setAttribute('fill',        this.styles.text);\n                        text.setAttribute('font-family', this.styles.font.family);\n                        text.setAttribute('font-size',   this.styles.font.size);\n                        text.setAttribute('font-style',  this.styles.font.style);\n                        text.setAttribute('font-weight', this.styles.font.weight);\n\n                        svg.appendChild(text);\n                    }\n                }\n            }\n\n            // Draw grid and text (Y axis)\n            switch (this.type) {\n                case FFT.FLOAT:\n                    for (let i = mindB; i <= maxdB; i += 10) {\n                        const t = `${i}dB`;\n                        const x = this.styles.left;\n                        const y = Math.floor(((-1 * (i - maxdB)) / range) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n                case FFT.UINT:\n                default:\n                    const texts = ['0.00', '0.25', '0.50', '0.75', '1.00'];\n\n                    for (const t of texts) {\n                        const x = this.styles.left;\n                        const y = ((1 - parseFloat(t)) * innerHeight) + this.styles.top;\n\n                        // Draw grid\n                        if (this.styles.grid !== 'none') {\n                            const rect = document.createElementNS(Visualizer.XMLNS, 'rect');\n\n                            rect.setAttribute('x',      x);\n                            rect.setAttribute('y',      y);\n                            rect.setAttribute('width',  innerWidth);\n                            rect.setAttribute('height', 1);\n\n                            rect.setAttribute('stroke', 'none');\n                            rect.setAttribute('fill',   this.styles.grid);\n\n                            svg.appendChild(rect);\n                        }\n\n                        // Draw text\n                        if (this.styles.text !== 'none') {\n                            const text = document.createElementNS(Visualizer.XMLNS, 'text');\n\n                            text.textContent = t;\n\n                            text.setAttribute('x', x);\n                            text.setAttribute('y', (y - Math.floor(parseInt(this.styles.font.size, 10) / 4)));\n\n                            text.setAttribute('text-anchor', 'end');\n                            text.setAttribute('stroke',      'none');\n                            text.setAttribute('fill',        this.styles.text);\n                            text.setAttribute('font-family', this.styles.font.family);\n                            text.setAttribute('font-size',   this.styles.font.size);\n                            text.setAttribute('font-style',  this.styles.font.style);\n                            text.setAttribute('font-weight', this.styles.font.weight);\n\n                            svg.appendChild(text);\n                        }\n                    }\n\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Analyser FFT]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Analyser/FFT.js","'use strict';\n\n/**\n * This private class defines properties for multi track recording.\n * @constructor\n */\nexport default class Recorder {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs) {\n        this.sampleRate = context.sampleRate;\n\n        this.context   = context;\n        this.processor = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.mixedLs = null;  /** @type {Float32Array} */\n        this.mixedRs = null;  /** @type {Float32Array} */\n\n        this.numberOfTracks = 0;\n        this.trackLs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n        this.trackRs        = [];  /** @type {Array.<Array.<Float32Array>>} 2 dimensions array */\n\n        this.activeTrack = -1;    // There is not any active track in the case of -1\n        this.paused      = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n\n        this.gainL = 1;  // Gain of Left  channel\n        this.gainR = 1;  // Gain of Right channel\n    }\n\n    /**\n     * This method sets the max number of tracks.\n     * @param {number} numberOfTracks This argument is the max number of tracks. The default value is 1.\n     * @return {Recorder} This is returned for method chain.\n     */\n    setup(numberOfTracks) {\n        const n = parseInt(numberOfTracks, 10);\n\n        if (n > 0) {\n            this.numberOfTracks = n;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            for (let i = 0; i < n; i++) {this.trackLs[i] = [];}  // n x array\n            for (let i = 0; i < n; i++) {this.trackRs[i] = [];}  // n x array\n        } else {\n            this.numberOfTracks = 1;\n\n            this.trackLs = new Array(this.numberOfTracks);\n            this.trackRs = new Array(this.numberOfTracks);\n\n            this.trackLs[0] = [];  // 1 * array\n            this.trackRs[0] = [];  // 1 * array\n        }\n\n        return this;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Recorder} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'gainl':\n                case 'gainr':\n                    if (value === undefined) {\n                        return this[`gain${k.slice(-1).toUpperCase()}`];\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[`gain${k.slice(-1).toUpperCase()}`] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method selects active track.\n     * @param {number} track This argument is in order to select active track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    ready(track) {\n        if (this.isTrack(track)) {\n            this.activeTrack = track;\n        } else {\n            this.activeTrack = -1;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts recording. If there is not any active track, this method stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    start() {\n        if ((this.activeTrack !== -1) && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                if (this.activeTrack !== -1) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const recordedLs = new Float32Array(bufferSize);\n                    const recordedRs = new Float32Array(bufferSize);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        recordedLs[i] = this.gainL * inputLs[i];\n                        recordedRs[i] = this.gainR * inputRs[i];\n                    }\n\n                    this.trackLs[this.activeTrack].push(recordedLs);\n                    this.trackRs[this.activeTrack].push(recordedRs);\n                } else {\n                    this.processor.disconnect(0);\n                    this.processor.onaudioprocess = null;\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method turns off the all of tracks, and stops `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {Recorder} This is returned for method chain.\n     */\n    stop() {\n        this.activeTrack = -1;  // Flag becomes inactive\n        this.paused      = true;\n\n        // Stop `onaudioprocess` event\n        this.processor.disconnect(0);\n        this.processor.onaudioprocess = null;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the designated track number is valid.\n     * @param {number} track This argument is track number for validation.\n     * @return {boolean} If the designated track is valid range, this value is `true`. Otherwise, this value is `false`.\n     */\n    isTrack(track) {\n        const t = parseInt(track, 10);\n\n        return (t >= 0) && (t < this.numberOfTracks);\n    }\n\n    /**\n     * This method determines whether active track exists.\n     * @return {number} This is returned as active track.\n     */\n    getActiveTrack() {\n        return this.activeTrack;\n    }\n\n    /**\n     * This method synthesizes recorded sounds in track.\n     * @param {string} channel This argument is either 'L' or 'R'.\n     * @return {Float32Array} This is returned as array for synthesized sound.\n     */\n    mixTrack(channel) {\n        const tracks      = this[`track${channel}s`];\n        const mixes       = { 'values' : null, 'sum' : 0, 'num' : 0 };\n        const bufferSize  = this.processor.bufferSize;\n        let currentBuffer = 0;\n        let index         = 0;\n\n        // Calculate sound data size\n        let numberOfMaxBuffers = 0;\n\n        // Search the max number of Float32Arrays each track\n        for (const track of tracks) {\n            if (numberOfMaxBuffers < track.length) {\n                numberOfMaxBuffers = track.length;\n            }\n        }\n\n        mixes.values = new Float32Array(numberOfMaxBuffers * bufferSize);\n\n        while (true) {\n            for (let currentTrack = 0, len = tracks.length; currentTrack < len; currentTrack++) {\n                if (tracks[currentTrack][currentBuffer] instanceof Float32Array) {\n                    mixes.sum += tracks[currentTrack][currentBuffer][index];\n                    mixes.num++;\n                }\n            }\n\n            if (mixes.num > 0) {\n                const offset = currentBuffer * bufferSize;\n\n                // Average\n                mixes.values[offset + index] = mixes.sum / mixes.num;\n\n                // Clear\n                mixes.sum = 0;\n                mixes.num = 0;\n\n                // Next data\n                if (index < (bufferSize - 1)) {\n                    // Next element in Float32Array\n                    index++;\n                } else {\n                    // Next Float32Array\n                    currentBuffer++;\n                    index = 0;\n                }\n            } else {\n                return mixes.values;\n            }\n        }\n    }\n\n    /**\n     * This method synthesizes the all of recorded sounds in track.\n     * @return {Recorder} This is returned for method chain.\n     */\n    mix() {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        this.mixedLs = this.mixTrack('L');\n        this.mixedRs = this.mixTrack('R');\n\n        return this;\n    }\n\n    /**\n     * This method clears recorded sound of the designated track.\n     * @param {number|string} track This argument is track for clearing.\n     * @return {Recorder} This is returned for method chain.\n     */\n    clear(track) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        if (String(track).toLowerCase() === 'all') {\n            for (const track of this.trackLs) {track.length = 0;}\n            for (const track of this.trackRs) {track.length = 0;}\n        } else {\n            if (this.isTrack(track)) {\n                this.trackLs[track].length = 0;\n                this.trackRs[track].length = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates WAVE file as Object URL or Data URL.\n     * @param {string|number} track This argument is the target track.\n     * @param {number} numberOfChannels This argument is in order to select stereo or monaural of WAVE file. The default value is 2.\n     * @param {number} qbit This argument is quantization bit of PCM. The default value is 16 (bit).\n     * @return {string} This is returned as Object URL or Data URL for WAVE file.\n     */\n    create(track, numberOfChannels, qbit) {\n        // on the way of recording ?\n        if (this.activeTrack !== -1) {\n            this.stop();\n        }\n\n        /** @type {Float32Array} */\n        let soundLs = null;\n\n        /** @type {Float32Array} */\n        let soundRs = null;\n\n        if (String(track).toLowerCase() === 'all') {\n            this.mix();\n\n            soundLs = this.mixedLs;\n            soundRs = this.mixedRs;\n        } else {\n            if (this.isTrack(track)) {\n                soundLs = this.trackLs[track - 1];\n                soundRs = this.trackRs[track - 1];\n            }\n        }\n\n        // Sound data exists ?\n        if ((soundLs.length === 0) && (soundRs.length === 0)) {\n            return '';\n        }\n\n        // PCM parameters\n        const CHANNEL = (numberOfChannels === 1) ? 1 : 2;\n        const QBIT    = (qbit === 8) ? 8 : 16;\n        const SIZE    = (CHANNEL === 1) ? Math.min(soundLs.length, soundRs.length) : (2 * Math.min(soundLs.length, soundRs.length));\n\n        // Parameters for WAVE file\n        const FMT_CHUNK  = 28;\n        const DATA_CHUNK =  8 + (SIZE * (QBIT / 8));\n        const CHUNK_SIZE = 36 + (SIZE * (QBIT / 8));\n        const RIFF_CHUNK =  8 + (FMT_CHUNK + DATA_CHUNK);\n        const RATE       = this.sampleRate;\n        const BPS        = RATE * CHANNEL * (QBIT / 8);\n        const DATA_SIZE  = SIZE * (QBIT / 8);\n\n        /** @type {Uint8Array|Int16Array} */\n        let sounds = null;\n\n        switch (QBIT) {\n            case 8:\n                sounds = new Uint8Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 8 bit unsigned integer (-1 -> 0, 0 -> 128, 1 -> 255)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = ((soundLs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Left channel\n                    } else {\n                        binary = ((soundRs[Math.floor(i / CHANNEL)] + 1) / 2) * (Math.pow(2, 8) - 1);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (Math.pow(2, 8) - 1)) {binary = (Math.pow(2, 8) - 1);}\n                    if (binary < (Math.pow(2, 0) - 1)) {binary = (Math.pow(2, 0) - 1);}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            case 16:\n                sounds = new Int16Array(SIZE);\n\n                for (let i = 0; i < SIZE; i++) {\n                    // Convert 16 bit integer (-1 -> -32768, 0 -> 0, 1 -> 32767)\n                    let binary = 0;\n\n                    if ((i % CHANNEL) === 0) {\n                        binary = soundLs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Left channel\n                    } else {\n                        binary = soundRs[Math.floor(i / CHANNEL)] * Math.pow(2, 15);  // Right channel\n                    }\n\n                    // for preventing from clipping\n                    if (binary > (+Math.pow(2, 15) - 1)) {binary =  Math.pow(2, 15) - 1;}\n                    if (binary < (-Math.pow(2, 15) - 1)) {binary = -Math.pow(2, 15) - 1;}\n\n                    sounds[i] = binary;\n                }\n\n                break;\n            default:\n                break;\n        }\n\n        // Create WAVE file (Object URL or Data URL)\n        window.URL = window.URL || window.webkitURL || window.mozURL;\n\n        if (window.URL && window.URL.createObjectURL) {\n            // Object URL\n\n            const waves = [];\n\n            waves[0] = 0x52;  // 'R'\n            waves[1] = 0x49;  // 'I'\n            waves[2] = 0x46;  // 'F'\n            waves[3] = 0x46;  // 'F'\n\n            waves[4] = (CHUNK_SIZE >>  0) & 0xFF;\n            waves[5] = (CHUNK_SIZE >>  8) & 0xFF;\n            waves[6] = (CHUNK_SIZE >> 16) & 0xFF;\n            waves[7] = (CHUNK_SIZE >> 24) & 0xFF;\n\n            waves[8]  = 0x57;  // 'W'\n            waves[9]  = 0x41;  // 'A'\n            waves[10] = 0x56;  // 'V'\n            waves[11] = 0x45;  // 'E'\n\n            // fmt chunk\n            waves[12] = 0x66;  // 'f'\n            waves[13] = 0x6D;  // 'm'\n            waves[14] = 0x74;  // 't'\n            waves[15] = 0x20;  // ' '\n\n            waves[16] = 16;\n            waves[17] =  0;\n            waves[18] =  0;\n            waves[19] =  0;\n\n            waves[20] = 1;\n            waves[21] = 0;\n\n            // fmt chunk -> Channels (Monaural or Stereo)\n            waves[22] = CHANNEL;\n            waves[23] = 0;\n\n            // fmt chunk -> Sample rate\n            waves[24] = (RATE >>  0) & 0xFF;\n            waves[25] = (RATE >>  8) & 0xFF;\n            waves[26] = (RATE >> 16) & 0xFF;\n            waves[27] = (RATE >> 24) & 0xFF;\n\n            // fmt chunk -> Byte per second\n            waves[28] = (BPS >>  0) & 0xFF;\n            waves[29] = (BPS >>  8) & 0xFF;\n            waves[30] = (BPS >> 16) & 0xFF;\n            waves[31] = (BPS >> 24) & 0xFF;\n\n            // fmt chunk -> Block size\n            waves[32] = CHANNEL * (QBIT / 8);\n            waves[33] = 0;\n\n            // fmt chunk -> Byte per Sample\n            waves[34] = QBIT;\n            waves[35] = 0;\n\n            // data chunk\n            waves[36] = 0x64;  // 'd'\n            waves[37] = 0x61;  // 'a'\n            waves[38] = 0x74;  // 't\n            waves[39] = 0x61;  // 'a'\n\n            waves[40] = (DATA_SIZE >>  0) & 0xFF;\n            waves[41] = (DATA_SIZE >>  8) & 0xFF;\n            waves[42] = (DATA_SIZE >> 16) & 0xFF;\n            waves[43] = (DATA_SIZE >> 24) & 0xFF;\n\n            for (let i = 0; i < SIZE; i++) {\n                switch (QBIT) {\n                    case  8:\n                        waves[(RIFF_CHUNK - DATA_SIZE) + i] = sounds[i];\n                        break;\n                    case 16:\n                        // The byte order in WAVE file is little endian\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 0] = ((sounds[i] >> 0) & 0xFF);\n                        waves[(RIFF_CHUNK - DATA_SIZE) + (2 * i) + 1] = ((sounds[i] >> 8) & 0xFF);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            const blob      = new Blob([new Uint8Array(waves)], { 'type' : 'audio/wav' });\n            const objectURL = window.URL.createObjectURL(blob);\n\n            return objectURL;\n        }\n\n        // Data URL\n\n        let wave = '';\n\n        wave += 'RIFF';\n        wave += String.fromCharCode(((CHUNK_SIZE >> 0) & 0xFF), ((CHUNK_SIZE >> 8) & 0xFF), ((CHUNK_SIZE >> 16) & 0xFF), ((CHUNK_SIZE >> 24) & 0xFF));\n        wave += 'WAVE';\n\n        // fmt chunk\n        wave += `fmt ${String.fromCharCode(16, 0, 0, 0)}`;\n        wave += String.fromCharCode(1, 0);\n\n        // fmt chunk -> Channels (Monaural or Stereo)\n        wave += String.fromCharCode(CHANNEL, 0);\n\n        // fmt chunk -> Sample rate\n        wave += String.fromCharCode(((RATE >> 0) & 0xFF), ((RATE >> 8) & 0xFF), ((RATE >> 16) & 0xFF), ((RATE >> 24) & 0xFF));\n\n        // fmt chunk -> Byte per second\n        wave += String.fromCharCode(((BPS >> 0) & 0xFF), ((BPS >> 8) & 0xFF), ((BPS >> 16) & 0xFF), ((BPS >> 24) & 0xFF));\n\n        // fmt chunk -> Block size\n        wave += String.fromCharCode((CHANNEL * (QBIT / 8)), 0);\n\n        // fmt chunk -> Byte per Sample\n        wave += String.fromCharCode(QBIT, 0);\n\n        // data chunk\n        wave += 'data';\n        wave += String.fromCharCode(((DATA_SIZE >> 0) & 0xFF), ((DATA_SIZE >> 8) & 0xFF), ((DATA_SIZE >> 16) & 0xFF), ((DATA_SIZE >> 24) & 0xFF));\n\n        for (let i = 0; i < SIZE; i++) {\n            switch (QBIT) {\n                case  8:\n                    wave += String.fromCharCode(sounds[i]);\n                    break;\n                case 16:\n                    // The byte order in WAVE file is little endian\n                    wave += String.fromCharCode(((sounds[i] >> 0) & 0xFF), ((sounds[i] >> 8) & 0xFF));\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        const base64  = window.btoa(wave);\n        const dataURL = `data:audio/wav;base64,${base64}`;\n\n        return dataURL;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Recorder]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Recorder.js","'use strict';\n\n/**\n * This private class defines properties for sound session on network.\n * @constructor\n */\nexport default class Session {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     * @param {number} numberOfInputs This argument is the number of inputs for `ScriptProcessorNode`.\n     * @param {number} numberOfOutputs This argument the number of outputs for `ScriptProcessorNode`.\n     * @param {Analyser} analyser This argument is the instance of `Analyser`.\n     */\n    constructor(context, bufferSize, numberOfInputs, numberOfOutputs, analyser) {\n        this.isActive = false;\n\n        this.context  = context;\n        this.analyser = analyser;  // the instance of `Analyser`\n\n        this.sender   = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n        this.receiver = context.createScriptProcessor(bufferSize, numberOfInputs, numberOfOutputs);\n\n        this.websocket = null;  // for the instance of `WebSocket`\n        this.paused    = true;  // for preventing from the duplicate `onaudioprocess` event (`start` method)\n    }\n\n    /**\n     * This method creates the instance of `WebSocket` and registers event handlers.\n     * @param {boolean} tls This argument is in order to select protocol (either `wss` or `ws`).\n     * @param {string} host This argument is server's hostname.\n     * @param {number} port This argument is port number for connection.\n     * @param {string} path This argument is file that is executed in server side.\n     * @param {function} openCallback This argument is invoked as `onopen` event handler in the instance of `WebSocket`.\n     * @param {function} closeCallback This argument is invoked as `onclose` event handler in the instance of `WebSocket`.\n     * @param {function} errorCallback This argument is invoked as `onerror` event handler in the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    setup(tls, host, port, path, openCallback, closeCallback, errorCallback) {\n        /*\n        if (!navigator.onLine) {\n            // Clear\n            this.isActive = false;\n            this.paused   = true;\n            this.connect();\n            this.websocket = null;\n\n            throw new Error('Now Offline.');\n        }\n        */\n\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('tls' in properties) {\n                tls = properties.tls;\n            }\n\n            if ('host' in properties) {\n                host = properties.host;\n            }\n\n            if ('port' in properties) {\n                port = properties.port;\n            }\n\n            if ('path' in properties) {\n                path = properties.path;\n            }\n\n            if ('open' in properties) {\n                openCallback = properties.open;\n            }\n\n            if ('close' in properties) {\n                closeCallback = properties.close;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n        }\n\n        const scheme = tls ? 'wss://' : 'ws://';\n\n        if (path.charAt(0) !== '/') {\n            path = `/${path}`;\n        }\n\n        const p = parseInt(port, 10);\n\n        if (isNaN(p) || (p < 0) || (p > 65535)) {\n            return this;\n        }\n\n        this.websocket = new WebSocket(`${scheme}${host}:${p}${path}`);\n        this.websocket.binaryType = 'arraybuffer';\n\n        this.websocket.onopen = event => {\n            if (Object.prototype.toString.call(openCallback) === '[object Function]') {\n                openCallback(event);\n            }\n        };\n\n        this.websocket.onclose = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(closeCallback) === '[object Function]') {\n                closeCallback(event);\n            }\n        };\n\n        this.websocket.onerror = event => {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(event);\n            }\n        };\n\n        this.websocket.onmessage = event => {\n            if (!this.isActive) {\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n\n                return;\n            }\n\n            if (event.data instanceof ArrayBuffer) {\n                const total  = event.data.byteLength / Float32Array.BYTES_PER_ELEMENT;\n                const length = Math.floor(total / 2);\n                const offset = length * Float32Array.BYTES_PER_ELEMENT;\n\n                const bufferLs = new Float32Array(event.data,      0, length);  // Get Left  channel data\n                const bufferRs = new Float32Array(event.data, offset, length);  // Get Right channel data\n\n                // Start drawing sound wave\n                this.analyser.start('time');\n                this.analyser.start('fft');\n\n                this.receiver.onaudioprocess = event => {\n                    const outputLs = event.outputBuffer.getChannelData(0);\n                    const outputRs = event.outputBuffer.getChannelData(1);\n\n                    if (bufferLs instanceof Float32Array) {outputLs.set(bufferLs);}\n                    if (bufferRs instanceof Float32Array) {outputRs.set(bufferRs);}\n\n                    // bufferLs = null;\n                    // bufferRs = null;\n\n                    if (!this.isActive || (this.websocket === null)) {\n                        this.analyser.stop('time');\n                        this.analyser.stop('fft');\n                    }\n                };\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes according to state.\n     * @return {Session} This is returned for method chain.\n     */\n    connect() {\n        // Clear connection\n        this.receiver.disconnect(0);\n        this.sender.disconnect(0);\n\n        this.receiver.onaudioprocess = null;\n        this.sender.onaudioprocess   = null;\n\n        if (this.isActive) {\n            // ScriptProcessorNode (Input) -> Analyser\n            this.receiver.connect(this.analyser.input);\n\n            // ScriptProcessorNode (Input) -> AudioDestinationNode (Output)\n            this.receiver.connect(this.context.destination);\n        } else {\n            this.paused = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sends sound data to server.\n     * @return {Session} This is returned for method chain.\n     */\n    start() {\n        if (this.isActive && this.isConnected() && this.paused) {\n            this.paused = false;\n\n            const bufferSize = this.sender.bufferSize;\n\n            this.sender.onaudioprocess = event => {\n                if (this.isActive && this.isConnected()) {\n                    const inputLs = event.inputBuffer.getChannelData(0);\n                    const inputRs = event.inputBuffer.getChannelData(1);\n\n                    const buffer = new Float32Array(2 * bufferSize);\n                    const offset = parseInt((buffer.length / 2), 10);\n\n                    for (let i = 0; i < bufferSize; i++) {\n                        buffer[i]          = inputLs[i];\n                        buffer[offset + i] = inputRs[i];\n                    }\n\n                    if (this.websocket.bufferedAmount === 0) {\n                        this.websocket.send(buffer);\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * This method closes connection to server and destroys the instance of `WebSocket`.\n     * @return {Session} This is returned for method chain.\n     */\n    close() {\n        if (this.websocket instanceof WebSocket) {\n            this.isActive = false;\n            this.paused   = true;\n\n            this.connect();\n            this.websocket.close();\n\n            this.websocket = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether there is the connection to server.\n     * @return {boolean} If the connection to server exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isConnected() {\n        return (this.websocket instanceof WebSocket) && (this.websocket.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @param {function} stateCallback This argument is invoked when `bufferedAmount` equals to 0.\n     * @param {function} waitCallback This argument is invoked until `bufferedAmount` equals to 0.\n     * @return {Session} This is returned for method chain.\n     */\n    state(state, stateCallback, waitCallback) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (Object.prototype.toString.call(waitCallback) === '[object Function]') {\n            waitCallback();\n        }\n\n        const intervalid = window.setInterval(() => {\n            if ((this.websocket instanceof WebSocket) && (this.websocket.bufferedAmount !== 0)) {\n                return;\n            }\n\n            if (String(state).toLowerCase() === 'toggle') {\n                this.isActive = !this.isActive;\n            } else {\n                this.isActive = Boolean(state);\n            }\n\n            this.connect();\n\n            if (Object.prototype.toString.call(stateCallback) === '[object Function]') {\n                stateCallback();\n            }\n\n            window.clearInterval(intervalid);\n        }, 10);\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `WebSocket`.\n     * @return {WebSocket}\n     */\n    get() {\n        return this.websocket;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Session]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Session.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Compressor extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.compressor = context.createDynamicsCompressor();\n\n        // Set default value\n        this.compressor.threshold.value = -24;\n        this.compressor.knee.value      = 30;\n        this.compressor.ratio.value     = 12;\n        this.compressor.attack.value    = 0.003;\n        this.compressor.release.value   = 0.25;\n\n        // `Compressor` is connected by default\n        this.state(true);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            if (k in this.compressor) {\n                if (value === undefined) {\n                    return this.compressor[k].value;\n                }\n\n                const v = parseFloat(value);\n\n                const minValues = {\n                    'threshold' : -100,\n                    'knee'      : 0,\n                    'ratio'     : 1,\n                    'attack'    : 0,\n                    'release'   : 0\n                };\n\n                const maxValues = {\n                    'threshold' : 0,\n                    'knee'      : 40,\n                    'ratio'     : 20,\n                    'attack'    : 1,\n                    'release'   : 1\n                };\n\n                const min = minValues[k];\n                const max = maxValues[k];\n\n                if ((v >= min) && (v <= max)) {\n                    this.compressor[k].value = v;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.compressor.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n            // GainNode (Input) -> DynamicsCompressorNode -> GainNode (Output)\n            this.input.connect(this.compressor);\n            this.compressor.connect(this.output);\n        } else {\n            // Effect OFF\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'threshold' : this.compressor.threshold.value,\n            'knee'      : this.compressor.knee.value,\n            'ratio'     : this.compressor.ratio.value,\n            'attack'    : this.compressor.attack.value,\n            'release'   : this.compressor.release.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Compressor]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Compressor.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Distortion extends Effector {\n    static CLEAN      = 'clean';\n    static CRUNCH     = 'crunch';\n    static OVERDRIVE  = 'overdrive';\n    static DISTORTION = 'distortion';\n    static FUZZ       = 'fuzz';\n\n    static AMOUNTS = {\n        'CLEAN'      : 0.0,\n        'CRUNCH'     : 0.5,\n        'OVERDRIVE'  : 0.7,\n        'DISTORTION' : 0.8,\n        'FUZZ'       : 0.9\n    };\n\n    /**\n     * This class (static) method creates the instance of `Float32Array` for distortion.\n     * @param {number} amount This argument is the depth of distortion.\n     * @param {number} numberOfSamples This argument is the size of `Float32Array`.\n     * @return {Float32Array|null} This is `curve` property in `WaveShaperNode`.\n     */\n    static createCurve = (amount, numberOfSamples) => {\n        if ((amount > 0) && (amount < 1)) {\n            const curves = new Float32Array(numberOfSamples);\n\n            const k = (2 * amount) / (1 - amount);\n\n            for (let i = 0; i < numberOfSamples; i++) {\n                // LINEAR INTERPOLATION: x := (c - a) * (z - y) / (b - a) + y\n                // a = 0, b = 2048, z = 1, y = -1, c = i\n                const x = (((i - 0) * (1 - (-1))) / (numberOfSamples - 0)) + (-1);\n                curves[i] = ((1 + k) * x) / (1 + k * Math.abs(x));\n            }\n\n            return curves;\n        }\n\n        return null;  // Clean sound (default value)\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.distortion = context.createWaveShaper();\n        this.drive      = context.createGain();\n        this.color      = context.createBiquadFilter();\n        this.tone       = context.createBiquadFilter();\n\n        // Distortion type\n        this.type = Distortion.CLEAN;\n\n        // for creating curve\n        this.numberOfSamples = 4096;\n\n        // Initialize parameters\n        this.drive.gain.value      = 1;\n        this.color.type            = (typeof this.color.type === 'string') ? 'bandpass' : (this.color.BANDPASS || 2);\n        this.color.frequency.value = 350;\n        this.color.Q.value         = Math.SQRT1_2;\n        this.color.gain.value      = 0;  // Not used\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n\n        // `Distortion` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else  {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'curve':\n                    if (value === undefined) {\n                        return this.distortion.curve;\n                    }\n\n                    let curve = null;\n\n                    switch (String(value).toLowerCase()) {\n                        case Distortion.CLEAN:\n                            this.type = Distortion.CLEAN;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CLEAN, this.numberOfSamples);\n                            break;\n                        case Distortion.CRUNCH:\n                            this.type = Distortion.CRUNCH;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.CRUNCH, this.numberOfSamples);\n                            break;\n                        case Distortion.OVERDRIVE:\n                            this.type = Distortion.OVERDRIVE;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.OVERDRIVE, this.numberOfSamples);\n                            break;\n                        case Distortion.DISTORTION:\n                            this.type = Distortion.DISTORTION;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.DISTORTION, this.numberOfSamples);\n                            break;\n                        case Distortion.FUZZ:\n                            this.type = Distortion.FUZZ;\n                            curve = Distortion.createCurve(Distortion.AMOUNTS.FUZZ, this.numberOfSamples);\n                            break;\n                        default:\n                            if (value instanceof Float32Array) {\n                                curve = value;\n                            }\n\n                            break;\n                    }\n\n                    this.distortion.curve = curve;\n\n                    break;\n                case 'samples':\n                    if (value === undefined) {\n                        return this.numberOfSamples;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    if (v >= 0) {\n                        this.numberOfSamples = v;\n                        this.param('curve', this.type);\n                    }\n\n                    break;\n                case 'drive':\n                    if (value === undefined) {\n                        return this.drive.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.drive.gain.value = v;\n                    }\n\n                    break;\n                case 'color':\n                case 'tone' :\n                    if (value === undefined) {\n                        return this[k].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.distortion.disconnect(0);\n        this.drive.disconnect(0);\n        this.color.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Color) -> WaveShaperNode (Distortion) -> GainNode (Drive) -> BiquadFilterNode (Tone) -> GainNode (Output)\n            this.input.connect(this.color);\n            this.color.connect(this.distortion);\n            this.distortion.connect(this.drive);\n            this.drive.connect(this.tone);\n            this.tone.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'   : this.isActive,\n            'curve'   : this.type,\n            'samples' : this.numberOfSamples,\n            'drive'   : this.drive.gain.value,\n            'color'   : this.color.frequency.value,\n            'tone'    : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Distortion]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Distortion.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Wah extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.lowpass = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.lowpass.type            = (typeof this.lowpass.type === 'string') ? 'lowpass' : (this.lowpass.LOWPASS || 0);\n        this.lowpass.frequency.value = 350;\n        this.lowpass.Q.value         = 1;\n        this.lowpass.gain.value      = 0;  // Not used\n\n        this.depth.gain.value  = 0;\n        this.rate.value        = 0;\n        this.depthRate         = 0;\n\n        // `Wah` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.lowpass.frequency);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.lowpass.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.frequency.value = v;\n                        this.depth.gain.value        = this.lowpass.frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.lowpass.frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.lowpass.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.lowpass.Q.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.lowpass.frequency);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.lowpass.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Low-Pass Filter) -> GainNode (Output)\n            this.input.connect(this.lowpass);\n            this.lowpass.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'cutoff'    : this.lowpass.frequency.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'resonance' : this.lowpass.Q.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Wah]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Wah.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Equalizer extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     **/\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.bass     = context.createBiquadFilter();\n        this.middle   = context.createBiquadFilter();\n        this.treble   = context.createBiquadFilter();\n        this.presence = context.createBiquadFilter();\n\n        // Set filter type\n        this.bass.type     = (typeof this.bass.type     === 'string') ? 'lowshelf'  : (this.bass.LOWSHELF      || 3);\n        this.middle.type   = (typeof this.middle.type   === 'string') ? 'peaking'   : (this.middle.PEAKING     || 5);\n        this.treble.type   = (typeof this.treble.type   === 'string') ? 'peaking'   : (this.treble.PEAKING     || 5);\n        this.presence.type = (typeof this.presence.type === 'string') ? 'highshelf' : (this.presence.HIGHSHELF || 4);\n\n        // Set cutoff frequency\n        this.bass.frequency.value     =  500;  // 500 Hz\n        this.middle.frequency.value   = 1000;  // 1 kHz\n        this.treble.frequency.value   = 2000;  // 2 kHz\n        this.presence.frequency.value = 4000;  // 4 kHz\n\n        // Set Q\n        // this.bass.Q.value     = Math.SQRT1_2;  // Not used\n        this.middle.Q.value   = Math.SQRT1_2;\n        this.treble.Q.value   = Math.SQRT1_2;\n        // this.presence.Q.value = Math.SQRT1_2;  // Not used\n\n        // Set Gain\n        this.bass.gain.value     = 0;\n        this.middle.gain.value   = 0;\n        this.treble.gain.value   = 0;\n        this.presence.gain.value = 0;\n\n        // `Equalizer` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'bass'    :\n                case 'middle'  :\n                case 'treble'  :\n                case 'presence':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.bass.disconnect(0);\n        this.middle.disconnect(0);\n        this.treble.disconnect(0);\n        this.presence.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> BiquadFilterNode (Bass) -> BiquadFilterNode (Middle) -> BiquadFilterNode (Treble) -> BiquadFilterNode (Presence) -> GainNode (Output)\n            this.input.connect(this.bass);\n            this.bass.connect(this.middle);\n            this.middle.connect(this.treble);\n            this.treble.connect(this.presence);\n            this.presence.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'bass'     : this.bass.gain.value,\n            'middle'   : this.middle.gain.value,\n            'treble'   : this.treble.gain.value,\n            'presence' : this.presence.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Equalizer]';\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Equalizer.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Filter extends Effector {\n    // for legacy browsers\n    static FILTER_TYPES = {\n        'lowpass'   : 0,\n        'highpass'  : 1,\n        'bandpass'  : 2,\n        'lowshelf'  : 3,\n        'highshelf' : 4,\n        'peaking'   : 5,\n        'notch'     : 6,\n        'allpass'   : 7\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.filter = context.createBiquadFilter();\n\n        // for legacy browsers\n        this.filter.frequency.setTargetAtTime = this.filter.frequency.setTargetAtTime || this.filter.frequency.setTargetValueAtTime;\n\n        // Initialize parameters\n        this.filter.type            = (typeof this.filter.type === 'string') ? 'lowpass' : (this.filter.LOWPASS || 0);\n        this.filter.frequency.value = 350;\n        this.filter.Q.value         = 1;\n        this.filter.gain.value      = 0;\n\n        this.maxFrequency = this.filter.frequency.value;\n        this.range        = 0.1;  // 10% -> between `this.maxFrequency * 0.1` and `this.maxFrequency`\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 1.0;\n        this.release = 1.0;\n\n        // `Filter` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.filter.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Filter.FILTER_TYPES) {\n                        this.filter.type = (typeof this.filter.type === 'string') ? v : Filter.FILTER_TYPES[v];\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filter.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.maxFrequency           = v;\n                        this.filter.frequency.value = v;\n                    }\n\n                    break;\n                case 'gain':\n                    if (value === undefined) {\n                        return this.filter.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -40;\n                    max =  40;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.gain.value = v;\n                    }\n\n                    break;\n                case 'q':\n                    if (value === undefined) {\n                        return this.filter.Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.filter.Q.value = v;\n                    }\n\n                    break;\n                case 'range':\n                    if (value === undefined) {\n                        return this.range;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.range= v;\n                    }\n\n                    break;\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.filter.disconnect(0);\n\n        if (this.isActive) {\n            // Effector ON\n\n            // GainNode (Input) -> BiquadFilterNode -> GainNode (Output)\n            this.input.connect(this.filter);\n            this.filter.connect(this.output);\n        } else {\n            // Effector OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            const t0      = s;\n            const t1      = t0 + this.attack;\n            const t2      = this.decay;\n            const t2Value = this.sustain * this.maxFrequency;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t0);\n            this.filter.frequency.setValueAtTime(minFrequnecy, t0);\n            this.filter.frequency.linearRampToValueAtTime(this.maxFrequency, t1);  // Attack\n            this.filter.frequency.setTargetAtTime(t2Value, t1, t2);  // Decay -> Sustain\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime) {\n        if (this.isActive) {\n            let s = parseFloat(stopTime) - this.release;\n\n           if (isNaN(s) || (s < this.context.currentTime)) {\n               s = this.context.currentTime;\n           }\n\n            const t3 = s;\n            const t4 = this.release;\n\n            const minFrequnecy = this.maxFrequency * this.range;\n\n            // Envelope Generator for filter\n            this.filter.frequency.cancelScheduledValues(t3);\n            this.filter.frequency.setValueAtTime(this.filter.frequency.value, t3);\n            this.filter.frequency.setTargetAtTime(minFrequnecy, t3, t4);  // Sustain -> Release\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'type'      : this.filter.type,\n            'frequency' : this.filter.frequency.value,\n            'Q'         : this.filter.Q.value,\n            'gain'      : this.filter.gain.value,\n            'range'     : this.range,\n            'attack'    : this.attack,\n            'decay'     : this.decay,\n            'sustain'   : this.sustain,\n            'release'   : this.release\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Filter]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Filter.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Autopanner extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createStereoPanner();\n\n        // Initialize parameters\n        this.panner.pan.value = 0;\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Autopanner` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (pan)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.panner.pan);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                       return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                       return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> StereoPannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.panner.pan);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Autopanner]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Autopanner.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class AutopannerFallback extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitudeL = context.createGain();\n        this.amplitudeR = context.createGain();\n        this.splitter   = context.createChannelSplitter(2);\n        this.merger     = context.createChannelMerger(2);\n\n        this.amplitudeL.gain.value = 1;  // 1 +- depth\n        this.amplitudeR.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameters\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `AutopannerFallback` is not connected by default\n        this.state(false);\n\n        // LFO\n        this.lfoSplitter = context.createChannelSplitter(2);\n\n        // OscillatorNode (LFO) -> GainNode (Depth) -> ScriptProcessorNode -> ChannelSplitterNode -> AudioParam (gain) (L) / (R)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.processor);\n        this.processor.connect(this.lfoSplitter);\n        this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n        this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitudeL.disconnect(0);\n        this.amplitudeR.disconnect(0);\n        this.splitter.disconnect(0);\n        this.splitter.disconnect(1);\n        this.merger.disconnect(0);\n\n        if (this.isActive) {\n            // GainNode (Input) -> ChannelSplitterNode -> GainNode (L) / (R) -> ChannelMergerNode -> GainNode (Output)\n            this.input.connect(this.splitter);\n            this.splitter.connect(this.amplitudeL, 0, 0);\n            this.splitter.connect(this.amplitudeR, 1, 0);\n            this.amplitudeL.connect(this.merger, 0, 0);\n            this.amplitudeR.connect(this.merger, 0, 1);\n            this.merger.connect(this.output);\n        } else {\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    start(startTime) {\n        if (this.isActive && this.isStop) {\n            let s = parseFloat(startTime);\n\n            if (isNaN(s) || (s < this.context.currentTime)) {\n                s = this.context.currentTime;\n            }\n\n            this.lfo.start(s);\n            this.isStop = false;\n\n            const bufferSize = this.processor.bufferSize;\n\n            this.processor.onaudioprocess = event => {\n                const inputs   = event.inputBuffer.getChannelData(0);\n                const outputLs = event.outputBuffer.getChannelData(0);\n                const outputRs = event.outputBuffer.getChannelData(1);\n\n                if (this.isActive && (this.depth.gain.value !== 0) && (this.rate.value !== 0)) {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] =  inputs[i];\n                        outputRs[i] = -inputs[i];\n                    }\n                } else {\n                    for (let i = 0; i < bufferSize; i++) {\n                        outputLs[i] = 0;\n                        outputRs[i] = 0;\n                    }\n                }\n            };\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        // Effector's state is active ?\n        if (this.isActive) {\n            // Stop `onaudioprocess` event\n            this.processor.disconnect(0);\n            this.processor.onaudioprocess = null;\n\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.processor);\n            this.processor.connect(this.lfoSplitter);\n            this.lfoSplitter.connect(this.amplitudeL.gain, 0);\n            this.lfoSplitter.connect(this.amplitudeR.gain, 1);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule AutopannerFallback]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/AutopannerFallback.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Tremolo extends Effector {\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 1;  // 1 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 0;\n        this.rate.value       = 0;\n\n        // `Tremolo` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'wave':\n                    if (value === undefined) {\n                        return this.lfo.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if (v in Tremolo.WAVE_TYPES) {\n                        this.lfo.type = (typeof this.lfo.type === 'string') ? v : Tremolo.WAVE_TYPES[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value,\n            'wave'  : this.lfo.type\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Tremolo]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Tremolo.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Ringmodulator extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.amplitude = context.createGain();\n\n        this.amplitude.gain.value = 0;  // 0 +- depth\n\n        // Initialize parameter\n        this.depth.gain.value = 1;\n        this.rate.value       = 0;\n\n        // `Ringmodulator` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (gain)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.amplitude.gain);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.amplitude.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode -> GainNode (Output)\n            this.input.connect(this.amplitude);\n            this.amplitude.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.amplitude.gain);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'depth' : this.depth.gain.value,\n            'rate'  : this.rate.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Ringmodulator]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Ringmodulator.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Phaser extends Effector {\n    static MAXIMUM_STAGES = 24;  // The maximum number of All-Pass Filters\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.numberOfStages = 12;  // The default number of All-Pass Filters\n        this.filters        = new Array(Phaser.MAXIMUM_STAGES);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i]                 = context.createBiquadFilter();\n            this.filters[i].type            = (typeof this.filters[i].type === 'string') ? 'allpass' : (this.filters[i].ALLPASS || 7);\n            this.filters[i].frequency.value = 350;\n            this.filters[i].Q.value         = 1;\n            this.filters[i].gain.value      = 0;  // Not used\n        }\n\n        this.mix      = context.createGain();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.depth.gain.value    = 0;\n        this.rate.value          = 0;\n        this.mix.gain.value      = 0;\n        this.feedback.gain.value = 0;\n        this.depthRate           = 0;\n\n        // `Phaser` is not connected by default\n        this.state(false);\n\n        // LFO\n        // GainNode (LFO) -> GainNode (Depth) -> AudioParam (frequency)\n        this.lfo.connect(this.depth);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.depth.connect(this.filters[i].frequency);\n        }\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'stage':\n                    if (value === undefined) {\n                        return this.numberOfStages;\n                    }\n\n                    v = parseInt(value, 10);\n\n                    switch (v) {\n                        case  0:\n                        case  2:\n                        case  4:\n                        case  8:\n                        case 12:\n                        case 24:\n                            this.numberOfStages = v;\n                            this.connect();\n                            break;\n                        default:\n                            break;\n                    }\n\n                    break;\n                case 'frequency':\n                case 'cutoff'   :\n                    if (value === undefined) {\n                        return this.filters[0].frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[i].frequency.value = v;\n                        }\n\n                        this.depth.gain.value = this.filters[0].frequency.value * this.depthRate;\n                    }\n\n                    break;\n                case 'resonance':\n                    if (value === undefined) {\n                        return this.filters[0].Q.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0.0001;\n                    max = 1000;\n\n                    if ((v >= min) && (v <= max)) {\n                        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n                            this.filters[0].Q.value = v;\n                        }\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.filters[0].frequency.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n\n        for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n            this.filters[i].disconnect(0);\n        }\n\n        this.mix.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive && (this.numberOfStages > 0)) {\n            // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.filters[0]);\n\n            for (let i = 0; i < this.numberOfStages; i++) {\n                if (i < (this.numberOfStages - 1)) {\n                    this.filters[i].connect(this.filters[i + 1]);\n                } else {\n                    this.filters[i].connect(this.mix);\n                    this.mix.connect(this.output);\n\n                    // Feedback\n                    // GainNode (Input) -> BiquadFilterNode (All-Pass Filter x N) -> GainNode (Feedback) -> BiquadFilterNode (All-Pass Filter x N) ...\n                    this.filters[i].connect(this.feedback);\n                    this.feedback.connect(this.filters[0]);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n           // Connect nodes again\n           this.lfo.connect(this.depth);\n\n           for (let i = 0; i < Phaser.MAXIMUM_STAGES; i++) {\n               this.depth.connect(this.filters[i].frequency);\n           }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'     : this.isActive,\n            'stage'     : this.numberOfStages,\n            'frequency' : this.filters[0].frequency.value,\n            'resonance' : this.filters[0].Q.value,\n            'depth'     : this.depthRate,\n            'rate'      : this.rate.value,\n            'mix'       : this.mix.gain.value,\n            'feedback'  : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Phaser]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Phaser.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Flanger extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Flanger` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (delayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Flanger]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Flanger.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Chorus extends Effector {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay();\n        this.mix      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.depth.gain.value      = 0;\n        this.rate.value            = 0;\n        this.mix.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n        this.depthRate             = 0;\n\n        // `Chorus` is not connected by default\n        this.state(false);\n\n        // LFO\n        // OscillatorNode (LFO) -> GainNode (Depth) -> AudioParam (elayTime)\n        this.lfo.connect(this.depth);\n        this.depth.connect(this.delay.delayTime);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                        this.depth.gain.value      = this.delay.delayTime.value * this.depthRate;\n                    }\n\n                    break;\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depthRate;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth.gain.value = this.delay.delayTime.value * v;\n                        this.depthRate        = v;\n                    }\n\n                    break;\n                case 'rate':\n                    if (value === undefined) {\n                        return this.rate.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.rate.value = v;\n                    }\n\n                    break;\n                case 'mix'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.mix.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        // GainNode (Input) -> GainNode (Output)\n        this.input.connect(this.output);\n\n        // Effect ON\n        if (this.isActive) {\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.mix);\n            this.mix.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    stop(stopTime, releaseTime) {\n        super.stop(stopTime, releaseTime);\n\n        if (this.isActive) {\n            // Connect nodes again\n            this.lfo.connect(this.depth);\n            this.depth.connect(this.delay.delayTime);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'depth'    : this.depthRate,\n            'rate'     : this.rate.value,\n            'mix'      : this.mix.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Chorus]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Chorus.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Delay extends Effector {\n    static MAX_DELAY_TIME = 5;  // Max delay time is 5000 [ms]\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.delay    = context.createDelay(Delay.MAX_DELAY_TIME);\n        this.dry      = context.createGain();\n        this.wet      = context.createGain();\n        this.tone     = context.createBiquadFilter();\n        this.feedback = context.createGain();\n\n        // Initialize parameters\n        this.delay.delayTime.value = 0;\n        this.dry.gain.value        = 1;\n        this.wet.gain.value        = 0;\n        this.tone.type             = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value  = 350;\n        this.tone.Q.value          = Math.SQRT1_2;\n        this.tone.gain.value       = 0;  // Not used\n        this.feedback.gain.value   = 0;\n\n        // `Delay` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'delaytime':\n                case 'time'     :\n                    if (value === undefined) {\n                        return this.delay.delayTime.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = Delay.MAX_DELAY_TIME;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.delay.delayTime.value = v;\n                    }\n\n                    break;\n                case 'dry'     :\n                case 'wet'     :\n                case 'feedback':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.delay.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n        this.feedback.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> DelayNode -> GainNode (Wet) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.delay);\n            this.delay.connect(this.wet);\n            this.wet.connect(this.output);\n\n            // Feedback\n            // GainNode (Input) -> DelayNode -> GainNode (Feedback) -> DelayNode ...\n            this.delay.connect(this.feedback);\n            this.feedback.connect(this.delay);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'    : this.isActive,\n            'time'     : this.delay.delayTime.value,\n            'dry'      : this.dry.gain.value,\n            'wet'      : this.wet.gain.value,\n            'tone'     : this.tone.frequency.value,\n            'feedback' : this.feedback.gain.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Delay]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Delay.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Reverb extends Effector {\n    static ERROR_AJAX         = 'error';\n    static ERROR_AJAX_TIMEOUT = 'timeout';\n    static ERROR_DECODE       = 'decode';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.rirs      = [];\n        this.convolver = context.createConvolver();\n        this.dry       = context.createGain();\n        this.wet       = context.createGain();\n        this.tone      = context.createBiquadFilter();\n\n        // Initialize parameters\n        this.dry.gain.value       = 1;\n        this.wet.gain.value       = 0;\n        this.tone.type            = (typeof this.tone.type === 'string') ? 'lowpass' : (this.tone.LOWPASS || 0);\n        this.tone.frequency.value = 350;\n        this.tone.Q.value         = Math.SQRT1_2;\n        this.tone.gain.value      = 0;  // Not used\n\n        // `Reverb` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.convolver.buffer;\n                    }\n\n                    v   = parseInt(value, 10);\n                    min = 0;\n                    max = this.rirs.length - 1;\n\n                    if (value === null) {\n                        this.convolver.buffer = null;\n\n                        // If `buffer` in `ConvolverNode` is `null` after setting the instance of `AudioBuffer`, `Reverb` is not OFF.\n                        // Therefore, `Reverb` is OFF by disconnecting nodes.\n                        this.input.disconnect(0);\n                        this.input.connect(this.output);\n                    } else if ((v >= min) && (v <= max)) {\n                        this.convolver.buffer = this.rirs[v];\n                        this.connect();\n                    }\n\n                    break;\n                case 'dry':\n                case 'wet':\n                    if (value === undefined) {\n                        return this[k].gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this[k].gain.value = v;\n                    }\n\n                    break;\n                case 'tone':\n                    if (value === undefined) {\n                        return this.tone.frequency.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 10;\n                    max = this.context.sampleRate / 2;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.tone.frequency.value = v;\n                    }\n\n                    break;\n                case 'rirs':\n                    return this.rirs;  // Getter only\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.convolver.disconnect(0);\n        this.dry.disconnect(0);\n        this.wet.disconnect(0);\n        this.tone.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> GainNode (Dry) -> GainNode (Output)\n            this.input.connect(this.dry);\n            this.dry.connect(this.output);\n\n            // GainNode (Input) -> BiquadFilterNode (Tone) -> ConvolverNode -> GainNode (Mix) -> GainNode (Output)\n            this.input.connect(this.tone);\n            this.tone.connect(this.convolver);\n            this.convolver.connect(this.wet);\n            this.wet.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets instance of `AudioBuffer` to `ConvolverNode`.\n     * @param {AudioBuffer|ArrayBuffer} impulse This argument is in order to convolve impulse response.\n     *     This argument is the instance of `AudioBuffer` or `ArrayBuffer` for impulse response.\n     * @param {function} errorCallback This argument is in order to be invoked when error occurs.\n     * @return {Reverb} This is returned for method chain.\n     * @override\n     */\n    start(impulse, errorCallback) {\n        if ((impulse instanceof AudioBuffer) || (impulse === null)) {\n            this.convolver.buffer = impulse;\n            this.rirs.push(impulse);  // Add to preset\n        } else if (impulse instanceof ArrayBuffer) {\n            const successCallback = buffer => {\n                this.convolver.buffer = buffer;\n                this.rirs.push(buffer);  // Add to preset\n            };\n\n            if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n                errorCallback = () => {};\n            }\n\n            this.context.decodeAudioData(impulse, successCallback, errorCallback);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates the instances of `AudioBuffer` by Ajax for Revreb presets.\n     * @param {Array.<string>|Array.<AudioBuffer>} rirs This argument is either URLs or the instances of `AudioBuffer` for impulse response.\n     * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n     * @param {function} successCallback This argument is invoked when the creating the instances of `AudioBuffer` was completed.\n     * @param {function} errorCallback This argument is invoked when error occurred.\n     * @param {function} progressCallback This argument is invoked during receiving audio data.\n     * @return {Reverb} This is returned for method chain.\n     */\n    preset(rirs, timeout, successCallback, errorCallback, progressCallback) {\n        // The argument is associative array ?\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            const properties = arguments[0];\n\n            if ('rirs' in properties) {\n                rirs = properties.rirs;\n            }\n\n            if ('timeout' in properties) {\n                timeout = properties.timeout;\n            }\n\n            if ('success' in properties) {\n                successCallback = properties.success;\n            }\n\n            if ('error' in properties) {\n                errorCallback = properties.error;\n            }\n\n            if ('progress' in properties) {\n                progressCallback = properties.progress;\n            }\n        }\n\n        if (!Array.isArray(rirs)) {\n            rirs = [rirs];\n        }\n\n        this.rirs = new Array(rirs.length);\n\n        // If the error is at least 1, this method aborts the all of connections.\n        // Therefore, this flag are shared with the all instances of `XMLHttpRequest`.\n        let isError = false;\n\n        const t = parseInt(timeout, 10);\n\n        // Get `ArrayBuffer` by Ajax -> Create the instances of `AudioBuffer`\n        const load = (url, index) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.timeout = (t > 0) ? t : 60000;\n\n            xhr.ontimeout = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX_TIMEOUT);\n                }\n\n                isError = true;\n            };\n\n            xhr.onprogresss = event => {\n                if (isError) {\n                    xhr.abort();\n                } else if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n                    progressCallback(event);\n                }\n            };\n\n            xhr.onerror = event => {\n                if (!isError && (Object.prototype.toString.call(errorCallback) === '[object Function]')) {\n                    errorCallback(event, Reverb.ERROR_AJAX);\n                }\n\n                isError = true;\n            };\n\n            xhr.onload = event => {\n                if (xhr.status === 200) {\n                    const arrayBuffer = xhr.response;\n\n                    if (!(arrayBuffer instanceof ArrayBuffer)) {\n                        return;\n                    }\n\n                    const decodeSuccessCallback = audioBuffer => {\n                        this.rirs[index] = audioBuffer;\n\n                        // The creating the instances of `AudioBuffer` has completed ?\n                        for (let i = 0, len = this.rirs.length; i < len; i++) {\n                            if (this.rirs[i] === undefined) {\n                                return;\n                            }\n                        }\n\n                        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                            successCallback(event);\n                        }\n                    };\n\n                    const decodeErrorCallback = error => {\n                        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                            errorCallback(error, Reverb.ERROR_DECODE);\n                        }\n                    };\n\n                    this.context.decodeAudioData(arrayBuffer, decodeSuccessCallback, decodeErrorCallback);\n                }\n            };\n\n            xhr.open('GET', url, true);\n            xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n            xhr.send(null);\n        };\n\n        for (let i = 0, len = rirs.length; i < len; i++) {\n            if (typeof rirs[i] === 'string') {\n                // Get the instances of `AudioBuffer` from the designated URLs.\n                load(rirs[i], i);\n            } else if (rirs[i] instanceof AudioBuffer) {\n                // Get the instances of `AudioBuffer` directly\n                this.rirs[i] = rirs[i];\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        // Change connection\n        this.connect();\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state' : this.isActive,\n            'dry'   : this.dry.gain.value,\n            'wet'   : this.wet.gain.value,\n            'tone'  : this.tone.frequency.value\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Reverb]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Reverb.js","'use strict';\n\nimport Effector from './Effector';\n\n/**\n * Effector's subclass\n * @constructor\n * @extends {Effector}\n */\nexport default class Panner extends Effector {\n    static PANNING_MODELS = {\n        'equalpower' : 0,\n        'HRTF'       : 1\n    };\n\n    static DISTANCE_MODELS = {\n        'linear'      : 0,\n        'inverse'     : 1,\n        'exponential' : 2\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {number} bufferSize This argument is buffer size for `ScriptProcessorNode`.\n     */\n    constructor(context, bufferSize) {\n        super(context, bufferSize);\n\n        this.panner = context.createPanner();\n\n        this.positions    = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.orientations = { 'x' : 1, 'y' : 0, 'z' : 0 };\n\n        this.panner.refDistance   = 1;\n        this.panner.maxDistance   = 10000;\n        this.panner.rolloffFactor = 1;\n\n        this.panner.coneInnerAngle = 360;\n        this.panner.coneOuterAngle = 360;\n        this.panner.coneOuterGain  = 0;\n\n        this.panner.panningModel  = (typeof this.panner.panningModel  === 'string') ? 'HRTF'    : (this.panner.HRTF || 1);\n        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? 'inverse' : (this.panner.INVERSE_DISTANCE || 1);\n\n        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n\n        // `Panner` is not connected by default\n        this.state(false);\n    }\n\n    /** @override */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.panner.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'ox':\n                case 'oy':\n                case 'oz':\n                    if (value === undefined) {\n                        return this.orientations[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.orientations[k.charAt(1)] = v;\n                        this.panner.setOrientation(this.orientations.x, this.orientations.y, this.orientations.z);\n                    }\n\n                    break;\n                case 'refdistance':\n                    if (value === undefined) {\n                        return this.panner.refDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.panner.refDistance = v;\n                    }\n\n                    break;\n                case 'maxdistance':\n                    if (value === undefined) {\n                        return this.panner.maxDistance;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this.panner.maxDistance = v;\n                    }\n\n                    break;\n                case 'rollofffactor':\n                    if (value === undefined) {\n                        return this.panner.rolloffFactor;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.rolloffFactor = v;\n                    }\n\n                    break;\n                case 'coneinnerangle':\n                    if (value === undefined) {\n                        return this.panner.coneInnerAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneInnerAngle = v;\n                    }\n\n                    break;\n                case 'coneouterangle':\n                    if (value === undefined) {\n                        return this.panner.coneOuterAngle;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterAngle = v;\n                    }\n\n                    break;\n                case 'coneoutergain':\n                    if (value === undefined) {\n                        return this.panner.coneOuterGain;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.panner.coneOuterGain = v;\n                    }\n\n                    break;\n                case 'panningmodel':\n                    if (value === undefined) {\n                        return this.panner.panningModel;\n                    }\n\n                    v = /HRTF/i.test(value) ? String(value).toUpperCase() : String(value).toLowerCase();\n\n                    if (v in Panner.PANNING_MODELS) {\n                        this.panner.panningModel = (typeof this.panner.panningModel === 'string') ? v : Panner.PANNING_MODELS[v];\n                    }\n\n                    break;\n                case 'distancemodel':\n                    if (value === undefined) {\n                        return this.panner.distanceModel;\n                    }\n\n                    v = String(value).replace(/-/g, '').toLowerCase();\n\n                    if (v in Panner.DISTANCE_MODELS) {\n                        this.panner.distanceModel = (typeof this.panner.distanceModel === 'string') ? v : Panner.DISTANCE_MODELS[v];\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /** @override */\n    connect() {\n        // Clear connection\n        this.input.disconnect(0);\n        this.panner.disconnect(0);\n\n        if (this.isActive) {\n            // Effect ON\n\n            // GainNode (Input) -> PannerNode -> GainNode (Output)\n            this.input.connect(this.panner);\n            this.panner.connect(this.output);\n        } else {\n            // Effect OFF\n\n            // GainNode (Input) -> GainNode (Output)\n            this.input.connect(this.output);\n        }\n\n        return this;\n    }\n\n    /** @override */\n    params() {\n        const params = {\n            'state'          : this.isActive,\n            'positions'      : this.positions,\n            'orientations'   : this.orientations,\n            'refDistance'    : this.panner.refDistance,\n            'maxDistance'    : this.panner.maxDistance,\n            'rolloffFactor'  : this.panner.rolloffFactor,\n            'coneInnerAngle' : this.panner.coneInnerAngle,\n            'coneOuterAngle' : this.panner.coneOuterAngle,\n            'coneOuterGain'  : this.panner.coneOuterGain,\n            'panningModel'   : this.panner.panningModel,\n            'distanceModel'  : this.panner.distanceModel\n        };\n\n        return params;\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Panner]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Panner.js","'use strict';\n\n/**\n * This private class defines property for audio listener.\n * These properties relate to properties of `PannerNode`.\n * @constructor\n */\nexport default class Listener {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        // the instance of `AudioListener`\n        this.listener = context.listener;\n\n        // Set default value\n        this.positions = { 'x' : 0, 'y' : 0, 'z' : 0 };\n        this.fronts    = { 'x' : 0, 'y' : 0, 'z' : -1 };\n        this.ups       = { 'x' : 0, 'y' : 1, 'z' : 0 };\n\n        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Listener} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'x':\n                case 'y':\n                case 'z':\n                    if (value === undefined) {\n                        return this.positions[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.positions[k] = v;\n                        this.listener.setPosition(this.positions.x, this.positions.y, this.positions.z);\n                    }\n\n                    break;\n                case 'fx':\n                case 'fy':\n                case 'fz':\n                    if (value === undefined) {\n                        return this.fronts[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.fronts[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                case 'ux':\n                case 'uy':\n                case 'uz':\n                    if (value === undefined) {\n                        return this.ups[k.charAt(1)];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (!isNaN(v)) {\n                        this.ups[k.charAt(1)] = v;\n                        this.listener.setOrientation(this.fronts.x, this.fronts.y, this.fronts.z, this.ups.x, this.ups.y, this.ups.z);\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'positions' : this.positions,\n            'fronts'    : this.fronts,\n            'ups'       : this.ups\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule Listener]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/Listener.js","'use strict';\n\n/**\n * This private class defines properties for Envelope Generator.\n * @constructor\n */\nexport default class EnvelopeGenerator {\n    static MIN_GAIN = 1e-3;\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        /** @type {Array.<GainNode>} */\n        this.generators = [];\n\n        // for `GainNode`\n        this.activeIndexes = [];\n        this.activeCounter = 0;\n\n        this.attack  = 0.01;\n        this.decay   = 0.3;\n        this.sustain = 0.5;\n        this.release = 1.0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|EnvelopeGenerator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'attack' :\n                case 'sustain':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                case 'decay'  :\n                case 'release':\n                    if (value === undefined) {\n                        return this[k];\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v > 0) {\n                        this[k] = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects the instance of `AudioNode`.\n     * @param {number} index This argument is in order to select the instance of `GainNode` that is Envelope Generator.\n     * @param {AudioNode} input This argument is the instance of `AudioNode` as input.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    ready(index, input, output) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        input.connect(this.generators[i]);\n        this.generators[i].connect(output);\n\n        this.activeIndexes[i] = i;\n        this.activeCounter++;\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack -> Decay -> Sustain).\n     * @param {number} startTime This argument is the start time of Attack.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    start(startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Attack -> Decay -> Sustain\n        const t0      = s;\n        const t1      = t0 + this.attack;\n        const t2      = this.decay;\n        const t2Value = this.sustain;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // Start from `gain.value = 0`\n            this.generators[activeIndex].gain.cancelScheduledValues(t0);\n            this.generators[activeIndex].gain.setValueAtTime(0, t0);\n\n            // Attack : `gain.value` increases linearly until assigned time (t1)\n            this.generators[activeIndex].gain.linearRampToValueAtTime(1, t1);\n\n            // Decay -> Sustain : `gain.value` gradually decreases to value of Sustain during of Decay time (t2) from assigned time (t1)\n            this.generators[activeIndex].gain.setTargetAtTime(t2Value, t1, t2);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method changes gain (Attack or Decay or Sustain -> Release).\n     * @param {number} stopTime This argument is the start time of Release.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        let s = parseFloat(stopTime) - this.release;\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        // Sustain -> Release\n        const t3 = s;\n        const t4 = this.release;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            // in the case of mouseup on the way of Decay\n            this.generators[activeIndex].gain.cancelScheduledValues(t3);\n            this.generators[activeIndex].gain.setValueAtTime(this.generators[activeIndex].gain.value, t3);\n\n            // Release : `gain.value` gradually decreases to 0 during of Release time (t4) from assigned time (t3)\n            this.generators[activeIndex].gain.setTargetAtTime(0, t3, t4);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {GainNode} This is returned as the instance of `GainNode` for Envelope Generator.\n     */\n    getGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        return this.generators[i];\n    }\n\n    /**\n     * This method sets the instance of `GainNode` for Envelope Generator.\n     * @param {number} index This argument is the index of array that contains the instance of `GainNode` for Envelope Generator.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    setGenerator(index) {\n        const i = (parseInt(index, 10) >= 0) ? parseInt(index, 10) : 0;\n\n        this.generators[i] = this.context.createGain();\n\n        // for legacy browsers\n        this.generators[i].gain.setTargetAtTime = this.generators[i].gain.setTargetAtTime || this.generators[i].gain.setTargetValueAtTime;\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the all of gain schedulings have ended.\n     * @return {boolean} If the all of gain schedulings have ended, this value is `true`. Otherwise, this value is `false`.\n     */\n    isStop() {\n        let counter = 0;\n\n        for (const activeIndex of this.activeIndexes) {\n            if (activeIndex === undefined) {\n                continue;\n            }\n\n            if (this.generators[activeIndex].gain.value > EnvelopeGenerator.MIN_GAIN) {\n                return false;\n            }\n\n            counter++;\n\n            // the all of schedulings are stopped ?\n            if (counter === this.activeCounter) {\n                return true;\n            }\n        }\n    }\n\n    /**\n     * This method clears variables for managing the instance of `GainNode`.\n     * @param {boolean} isDisconnect This argument is in order to determine whether disconnect `AudioNode`.\n     * @return {EnvelopeGenerator} This is returned for method chain.\n     */\n    clear(isDisconnect) {\n        this.activeIndexes.length = 0;\n        this.activeCounter = 0;\n\n        for (const generator of this.generators) {\n            generator.gain.cancelScheduledValues(this.context.currentTime);\n            generator.gain.value = 1;\n\n            if (isDisconnect) {\n                generator.disconnect(0);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets effecter's parameters as associative array.\n     * @return {object}\n     */\n    params() {\n        const params = {\n            'attack'  : this.attack,\n            'decay'   : this.decay,\n            'sustain' : this.sustain,\n            'release' : this.release\n        };\n\n        return params;\n    }\n\n    /**\n     * This method gets effecter's parameters as JSON.\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this.params());\n    }\n\n    /** @override */\n    toString() {\n        return '[SoundModule EnvelopeGenerator]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/SoundModule/EnvelopeGenerator.js","'use strict';\n\n/**\n * This private class defines properties for the instance of `OscillatorNode`.\n * @constructor\n */\nexport default class Oscillator {\n    // 1 Octave = 1200 cent\n    static OCTAVE = 1200;\n\n    // for legacy browsers\n    static WAVE_TYPES = {\n        'sine'     : 0,\n        'square'   : 1,\n        'sawtooth' : 2,\n        'triangle' : 3\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     * @param {boolean} state This argument is initial state.\n     */\n    constructor(context, state) {\n        this.isActive = state;\n\n        this.context = context;\n\n        this.source = context.createOscillator();\n\n        // for legacy browsers\n        this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n        this.source.start           = this.source.start           || this.source.noteOn;\n        this.source.stop            = this.source.stop            || this.source.noteOff;\n\n        this.volume = context.createGain();\n\n        // in order to not call in duplicate `start` or `stop`  method in the instance of `OscillatorNode`\n        this.isStop = true;\n\n        this.octave  = 0;\n        this.fine    = 0;\n        this.customs = {\n            'real' : new Float32Array([0, 1]),\n            'imag' : new Float32Array([0, 1])\n        };\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number|string} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|string|Oscillator} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'type':\n                    if (value === undefined) {\n                        return this.source.type;\n                    }\n\n                    if (Object.prototype.toString.call(value) !== '[object Object]') {\n                        v = String(value).toLowerCase();\n\n                        if (v in Oscillator.WAVE_TYPES) {\n                            this.source.type = (typeof this.source.type === 'string') ? v : Oscillator.WAVE_TYPES[v];\n                        }\n                    } else {\n                        // Custom wave\n                        if (('real' in value) && ('imag' in value)) {\n                            let reals = null;\n                            let imags = null;\n\n                            if (value.real instanceof Float32Array) {\n                                reals = value.real;\n                            } else if (Array.isArray(value.real)) {\n                                reals = new Float32Array(value.real);\n                            }\n\n                            if (value.imag instanceof Float32Array) {\n                                imags = value.imag;\n                            } else if (Array.isArray(value.imag)) {\n                                imags = new Float32Array(value.imag);\n                            }\n\n                            if ((reals instanceof Float32Array) && (imags instanceof Float32Array)) {\n                                const MAX_SIZE = 4096;  // This size is defined by specification\n\n                                if (reals.length > MAX_SIZE) {reals = reals.subarray(0, MAX_SIZE);}\n                                if (imags.length > MAX_SIZE) {imags = imags.subarray(0, MAX_SIZE);}\n\n                                // The 1st value is fixed by 0 (This is is defined by specification)\n                                if (reals[0] !== 0) {reals[0] = 0;}\n                                if (imags[0] !== 0) {imags[0] = 0;}\n\n                                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                                this.source.setPeriodicWave(periodicWave);\n                                this.customs.real = reals;\n                                this.customs.imag = imags;\n                            }\n                        }\n                    }\n\n                    break;\n                case 'octave':\n                    if (value === undefined) {\n                        return this.octave;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -4800 / Oscillator.OCTAVE;\n                    max =  4800 / Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.octave = v;\n                        this.source.detune.value = this.fine + (v * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'fine':\n                    if (value === undefined) {\n                        return this.fine;\n                    }\n\n                    v   = parseFloat(value);\n                    min = -Oscillator.OCTAVE;\n                    max =  Oscillator.OCTAVE;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.fine = v;\n                        this.source.detune.value = v + (this.octave * Oscillator.OCTAVE);\n                    }\n\n                    break;\n                case 'volume':\n                case 'gain'  :\n                    if (value === undefined) {\n                        return this.volume.gain.value;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.volume.gain.value = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method connects nodes.\n     * @param {AudioNode} output This argument is the instance of `AudioNode` as output.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    ready(output) {\n        if (this.isActive) {\n            // for saving value\n            const params = {\n                'type'      : this.source.type,\n                'frequency' : this.source.frequency.value,\n                'detune'    : this.source.detune.value\n            };\n\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.source.disconnect(0);\n            }\n\n            this.source = this.context.createOscillator();\n\n            // for legacy browsers\n            this.source.setPeriodicWave = this.source.setPeriodicWave || this.source.setWaveTable;\n            this.source.start           = this.source.start           || this.source.noteOn;\n            this.source.stop            = this.source.stop            || this.source.noteOff;\n\n            if (params.type === 'custom') {\n                // Custom wave\n                const reals        = this.customs.real;\n                const imags        = this.customs.imag;\n                const periodicWave = this.context.createPeriodicWave(reals, imags);\n\n                this.source.setPeriodicWave(periodicWave);\n            } else {\n                this.source.type = params.type;\n            }\n\n            this.source.frequency.value = params.frequency;\n            this.source.detune.value    = params.detune;\n\n            this.volume.connect(output);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts sound.\n     * @param {number} startTime This argument is the start time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    start(startTime) {\n        if (this.isActive) {\n            this.source.start(startTime);\n            this.isStop = false;\n        } else {\n            if (!this.isStop) {\n                this.source.stop(this.context.currentTime);\n                this.isStop = true;\n            }\n\n            this.source.disconnect(0);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops sound.\n     * @param {number} stopTime This argument is the stop time.\n     * @return {Oscillator} This is returned for method chain.\n     */\n    stop(stopTime) {\n        if (!this.isStop) {\n            this.source.stop(stopTime);\n            this.source.disconnect(0);\n\n            this.isStop = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method toggles active state or inactive state.\n     * @param {boolean|string} state If this argument is boolean, state is changed the designated.\n     *     If this argument is 'toggle', state is changed automatically.\n     *     If this argument is omitted, this method is getter.\n     * @return {boolean|Oscillator} This is returned as current state. Otherwise, this is returned for method chain.\n     */\n    state(state) {\n        if (state === undefined) {\n            return this.isActive;\n        }\n\n        if (String(state).toLowerCase() === 'toggle') {\n            this.isActive = !this.isActive;\n        } else {\n            this.isActive = Boolean(state);\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `OscillatorNode`.\n     * @return {OscillatorNode}\n     */\n    get() {\n        return this.source;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Oscillator]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/OscillatorModule/Oscillator.js","'use strict';\n\n/**\n * This private class defines properties for Glide.\n * @constructor\n */\nexport default class Glide {\n    static LINEAR      = 'linear';\n    static EXPONENTIAL = 'exponential';\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.frequencies = {\n            'start' : -1,  // Abnormal value for the 1st sound\n            'end'   : 0\n        };\n\n        this.time = 0;             // Glide time\n        this.type = Glide.LINEAR;  // either 'linear' or 'exponential'\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|Glide} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v = null;\n\n            switch (k) {\n                case 'time':\n                    if (value === undefined) {\n                        return this.time;\n                    }\n\n                    v = parseFloat(value);\n\n                    if (v >= 0) {\n                        this.time = v;\n                    }\n\n                    break;\n                case 'type':\n                    if (value === undefined) {\n                        return this.type;\n                    }\n\n                    v = String(value).toLowerCase();\n\n                    if ((v === Glide.LINEAR) || (v === Glide.EXPONENTIAL)) {\n                        this.type = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method sets frequencies for Glide.\n     * @param {number} frequency This argument is the frequency at which glide ends.\n     * @return {Glide} This is returned for method chain.\n     */\n    ready(frequency) {\n        this.frequencies.end = frequency;\n\n        const diff = (this.frequencies.start === -1) ? 0 : (this.frequencies.end - this.frequencies.start);\n\n        if ((this.frequencies.start === -1) || (this.time === 0) || (diff === 0)) {\n            // The 1st sound or Glide OFF or The same sound\n            this.frequencies.start = this.frequencies.end;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts Glide.\n     * @param {OscillatorNode} oscillator This argument is the instance of `OscillatorNode`.\n     * @param {number} startTime This argument is the start time of Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    start(oscillator, startTime) {\n        let s = parseFloat(startTime);\n\n        if (isNaN(s) || (s < this.context.currentTime)) {\n            s = this.context.currentTime;\n        }\n\n        const t0 = s;\n        const t1 = t0 + this.time;\n\n        // Start Glide\n        oscillator.frequency.cancelScheduledValues(t0);\n        oscillator.frequency.setValueAtTime(this.frequencies.start, t0);\n        oscillator.frequency[`${this.type}RampToValueAtTime`](this.frequencies.end, t1);\n\n        return this;\n    }\n\n    /**\n     * This method stops Glide. Moreover, This method prepares for next Glide.\n     * @return {Glide} This is returned for method chain.\n     */\n    stop() {\n        // Stop Glide or on the way of Glide\n        this.frequencies.start = this.frequencies.end;\n\n        return this;\n    }\n\n    /** @override */\n    toString() {\n        return '[OscillatorModule Glide]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/OscillatorModule/Glide.js","'use strict';\n\n/**\n * This private class defines properties for Vocal Canceler.\n * @constructor\n */\nexport default class VocalCanceler {\n    constructor() {\n        this.depth = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|VocalCanceler} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'depth':\n                    if (value === undefined) {\n                        return this.depth;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.depth = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method removes vocal part in the played audio.\n     * @param {number} dataL This argument is gain level for Left channel.\n     * @param {number} dataR This argument is gain level for Right channel.\n     * @return {number} This is returned as audio data except vocal part.\n     */\n    start(dataL, dataR) {\n        return dataL - (this.depth * dataR);\n    }\n\n    /** @override */\n    toString() {\n        return '[AudioModule VocalCanceler]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/AudioModule/VocalCanceler.js","'use strict';\n\n/**\n * This private class defines properties for Noise Gate.\n * @constructor\n */\nexport default class NoiseGate {\n    constructor() {\n        this.level = 0;\n    }\n\n    /**\n     * This method is getter or setter for parameters.\n     * @param {string|object} key This argument is property name in the case of string type.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {number} value This argument is the value of designated property. If this argument is omitted, This method is getter.\n     * @return {number|NoiseGate} This is returned as the value of designated property in the case of getter. Otherwise, this is returned for method chain.\n     */\n    param(key, value) {\n        if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.param(k, arguments[0][k]);\n            }\n        } else {\n            const k = String(key).replace(/-/g, '').toLowerCase();\n\n            let v   = null;\n            let min = null;\n            let max = null;\n\n            switch (k) {\n                case 'level':\n                    if (value === undefined) {\n                        return this.level;\n                    }\n\n                    v   = parseFloat(value);\n                    min = 0;\n                    max = 1;\n\n                    if ((v >= min) && (v <= max)) {\n                        this.level = v;\n                    }\n\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method detects background noise and removes this.\n     * @param {number} data This argument is amplitude (between -1 and 1).\n     * @return {number} This is returned as 0 or the raw data.\n     */\n    start(data) {\n        const d = Math.abs(parseFloat(data));\n\n        // data : The amplitude is equal to argument.\n        // 0    : Because signal is detected as background noise, the amplitude is 0.\n        return (d > this.level) ? data : 0;\n    }\n\n    /** @override */\n    toString() {\n        return '[StreamModule NoiseGate]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/StreamModule/NoiseGate.js","'use strict';\n\nimport SoundModule from '../SoundModule';\nimport OscillatorModule from '../OscillatorModule';\nimport OneshotModule from '../OneshotModule';\nimport AudioModule from '../AudioModule';\nimport MediaModule from '../MediaModule';\nimport StreamModule from '../StreamModule';\n\n/**\n * This class defines properties for mixing sound sources that is defined in this library.\n * @constructor\n * @extends {SoundModule}\n */\nexport default class MixerModule extends SoundModule {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        super(context);\n\n        /** @type {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} */\n        this.sources = [];\n\n        this.isAnalyser = false;\n    }\n\n    /**\n     * This method mixes sound source.\n     * @param {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>} sources This argument is the array of sound source that is defined by this library.\n     * @return {MixerModule} This is returned for method chain.\n     */\n    mix(sources) {\n        if (!Array.isArray(sources)) {\n            sources = [sources];\n        }\n\n        this.sources = sources;\n\n        for (const source of this.sources) {\n            if (!((source instanceof OscillatorModule) || (source instanceof OneshotModule) || (source instanceof AudioModule) || (source instanceof MediaModule) || (source instanceof StreamModule))) {\n                return this;\n            }\n\n            const stopTime = this.context.currentTime;\n\n            this.off(stopTime, false);\n\n            source.analyser.stop('time');\n            source.analyser.stop('fft');\n            source.isAnalyser = false;\n\n            source.recorder.stop();\n            source.session.close();\n\n            // ScriptProcessorNode (each sound source) -> ScriptProcessorNode (Mix sound sources)\n            source.processor.disconnect(0);\n            source.processor.connect(this.processor);\n        }\n\n        // (... ->) ScriptProcessorNode (Mix sound sources) -> ... -> AudioDestinationNode (Output)\n        this.connect(this.processor);\n\n        const startTime = this.context.currentTime;\n\n        this.on(startTime);\n\n        if (!this.isAnalyser) {\n            this.analyser.start('time');\n            this.analyser.start('fft');\n            this.isAnalyser = true;\n        }\n\n        this.processor.onaudioprocess = event => {\n            const inputLs  = event.inputBuffer.getChannelData(0);\n            const inputRs  = event.inputBuffer.getChannelData(1);\n            const outputLs = event.outputBuffer.getChannelData(0);\n            const outputRs = event.outputBuffer.getChannelData(1);\n\n            // Stop ?\n            let isStop = false;\n\n            for (const source of sources) {\n                if ((source instanceof OscillatorModule) && source.envelopegenerator.isStop()) {\n                    isStop = true;\n                } else if ((source instanceof OneshotModule) && source.isStop) {\n                    isStop = true;\n                } else if ((source instanceof AudioModule) && source.paused) {\n                    isStop = true;\n                } else if ((source instanceof MediaModule) && source.media.paused) {\n                    isStop = true;\n                } else if ((source instanceof StreamModule) && source.isStop) {\n                    isStop = true;\n                }\n            }\n\n            if (isStop) {\n                const stopTime = this.context.currentTime;\n\n                this.on(stopTime, true);\n\n                this.analyser.stop('time');\n                this.analyser.stop('fft');\n                this.isAnalyser = false;\n\n                // Stop `onaudioprocess` event\n                this.processor.disconnect(0);\n                this.processor.onaudioprocess = null;\n            } else {\n                outputLs.set(inputLs);\n                outputRs.set(inputRs);\n            }\n        };\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of sound source that is mixed in this class.\n     * @param {number} index This argument is required in the case of designating sound source.\n     * @return {Array.<OscillatorModule>|Array.<OneshotModule>|Array.<AudioModule>|Array.<MediaModule>|Array.<StreamModule>|OscillatorModule|OneshotModule|AudioModule|MediaModule|StreamModule}\n     * @override\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sources.length)) ? this.sources[i] : this.sources;\n    }\n\n    /** @override */\n    toString() {\n        return '[MixerModule]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/MixerModule/index.js","'use strict';\n\n/**\n * This class defines properties for using Web MIDI API.\n * @constructor\n */\nexport default class MIDI {\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        this.midiAccess = null;  // for the instance of `MIDIAccess`\n        this.inputs     = [];    // for the instances of `MIDIInput`\n        this.outputs    = [];    // for the instances of `MIDIOutput`\n    }\n\n    /**\n     * This method invokes `requestMIDIAccess` and gets objects for using Web MIDI API.\n     * @param {boolean} sysex This argument is in order to select whether using system exclusive message.\n     * @param {function} successCallback This argument is invoked when `requestMIDIAccess` succeeds.\n     * @param {function} errorCallback This argument is invoked when `requestMIDIAccess` fails.\n     * @return {MIDI} This is returned for method chain.\n     */\n    setup(sysex, successCallback, errorCallback) {\n        if (!navigator.requestMIDIAccess) {\n            throw new Error('Cannot use Web MIDI API.');\n        }\n\n        navigator.requestMIDIAccess({ sysex : Boolean(sysex) }).then(midiAccess => {\n            this.midiAccess = midiAccess;\n\n            if (Object.prototype.toString.call(midiAccess) === '[object Function]') {\n                // Legacy Chrome\n                this.inputs  = midiAccess.inputs();\n                this.outputs = midiAccess.outputs();\n            } else {\n                // Chrome 39 and later\n                const inputIterator  = midiAccess.inputs.values();\n                const outputIterator = midiAccess.outputs.values();\n\n                for (let i = inputIterator.next(); !i.done; i = inputIterator.next()) {\n                    this.inputs.push(i.value);\n                }\n\n                for (let o = outputIterator.next(); !o.done; o = outputIterator.next()) {\n                    this.outputs.push(o.value);\n                }\n            }\n\n            if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n                successCallback(this.midiAccess, this.inputs, this.outputs);\n            }\n        }).catch(error => {\n            if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n                errorCallback(error);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * This method gets the instance of `MIDIAccess`.\n     * @return {MIDIAccess}\n     */\n    get() {\n        return this.midiAccess;\n    }\n\n    /** @override */\n    toString() {\n        return '[MIDI]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/MIDI/index.js","'use strict';\n\nimport OscillatorModule from '../OscillatorModule';\nimport OneshotModule from '../OneshotModule';\n\n/**\n * This class defines properties for playing the MML (Music Macro Language).\n * @constructor\n */\nexport default class MML {\n    static ONE_MINUTES       = 60;  // sec\n    static EQUAL_TEMPERAMENT = 12;\n    static QUARTER_NOTE      = 4;\n    static REGEXP_MML        = /\\s*(?:T\\d+)\\s*|\\s*(?:O\\d+)\\s*|\\s*(?:(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*\\s*/gi;\n    static REGEXP_TEMPO      = /T\\d+/i;\n    static REGEXP_OCTAVE     = /O\\d+/i;\n    static REGEXP_NOTE       = /(?:(?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)(?:&(?:[CDEFGABR][#+-]?)+(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?)*/i;\n    static REGEXP_CHORD      = /((?:[CDEFGABR][#+-]?)+)(?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*/i;\n    static REGEXP_DURATION   = /(?:[CDEFGABR][#+-]?)+((?:256|192|144|128|96|72|64|48|36|32|24|18|16|12|8|6|4|2|1)\\.?.*)/i;\n    static REST              = 'R';\n    static ERROR_STRING      = 'MML';\n    static ERROR_TEMPO       = 'TEMPO';\n    static ERROR_OCTAVE      = 'OCTAVE';\n    static ERROR_NOTE        = 'NOTE';\n\n    /**\n     * This class (static) method computes index by octave and pitch name.\n     * @param {number} octave This argument is octave.\n     * @param {string} pitchname This argument is pitch name.\n     * @return {number|string} This is returned as index that is computed by octave and pitch name.\n     */\n    static computeIndex = (octave, pitchname) => {\n        let index = 0;\n\n        switch (pitchname) {\n            case 'C':\n                index = 3;\n                break;\n            case 'D':\n                index = 5;\n                break;\n            case 'E':\n                index = 7;\n                break;\n            case 'F':\n                index = 8;\n                break;\n            case 'G':\n                index = 10;\n                break;\n            case 'A':\n                index = 12;\n                break;\n            case 'B':\n                index = 14;\n                break;\n            case MML.REST:\n                return MML.REST;\n            default :\n                break;\n        }\n\n        const computedIndex = (MML.EQUAL_TEMPERAMENT * (octave - 1)) + index;\n\n        return (computedIndex >= 0) ? computedIndex : -1;\n    };\n\n    /**\n     * This class (static) method computes frequency from the index that corresponds to the 12 equal temperament.\n     * @param {number} index This argument is the index that corresponds to the 12 equal temperament.\n     *     For example, This value is between 0 and 88 in the case of piano.\n     * @return {number} This is returned as frequency.\n     */\n    static computeFrequency = index => {\n        // The 12 equal temperament\n        //\n        // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n        //\n        // A * 1.059463 -> A# (half up)\n\n        const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n        const MIN_A           = 27.5;\n\n        return (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : -1;\n    };\n\n    /**\n     * This class (static) method converts string to ASCII string.\n     * @param {string} string This argument is string.\n     * @return {string} This is returned as string that is converted to ASCII string.\n     */\n    static toAscii = string => {\n        let converted = '';\n\n        for (let i = 0, len = string.length; i < len; i++) {\n            const charCode = string.charCodeAt(i);\n\n            if (charCode > 0xFF) {\n                converted += `&#${charCode};`;\n            } else {\n                converted += string.charAt(i);\n            }\n        }\n\n        return converted;\n    };\n\n    /**\n     * @param {AudioContext} context This argument is in order to use the interfaces of Web Audio API.\n     */\n    constructor(context) {\n        this.context = context;\n\n        // for the array of `OscillatorNode` or `OscillatorModule` or `OneshotModule`\n        this.source = null;\n\n        this.sequences = [];  /** @type {Array.<Array.<object>>} */\n        this.timerids  = [];  /** @type {Array.<number>} */\n        this.prev      = [];  /** @type {Array.<object>} */\n\n        this.callbacks = {\n            'start' : () => {},\n            'stop'  : () => {},\n            'ended' : () => {},\n            'error' : () => {}\n        };\n    }\n\n    /**\n     * This method sets callback functions.\n     * @param {string|object} key This argument is property name.\n     *     This argument is pair of property and value in the case of associative array.\n     * @param {function} value This argument is callback function.\n     * @return {MML} This is returned for method chain.\n     */\n    setup(key, value) {\n        if ((arguments.length > 0) && (Object.prototype.toString.call(arguments[0]) === '[object Object]')) {\n            // Associative array\n            for (const k in arguments[0]) {\n                this.setup(k, arguments[0][k]);\n            }\n        } else if (arguments.length > 1) {\n            const k = String(key).toLowerCase();\n\n            if (k in this.callbacks) {\n                if (Object.prototype.toString.call(value) === '[object Function]') {\n                    this.callbacks[k] = value;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method parses MML string.\n     * @param {Array.<OscillatorNode>|OscillatorModule|OneshotModule} source This argument is in order to select sound source.\n     * @param {Array.<string>} mmls This argument is MML strings.\n     * @return {Array.<Array.<object>>} This is returned as array that contains object for playing the MML.\n     */\n    ready(source, mmls) {\n        if (this.source !== null) {\n            this.stop();  // Stop the previous MML\n        }\n\n        // Clear\n        this.sequences.length = 0;\n        this.timerids.length  = 0;\n        this.prev.length      = 0;\n\n        if (Array.isArray(source)) {\n            for (const s of source) {\n                if (!(s instanceof OscillatorNode)) {\n                    return this;\n                }\n            }\n\n            this.source = source;\n        } else if (source instanceof OscillatorNode) {\n            this.source = [source];\n        } else if ((source instanceof OscillatorModule) || (source instanceof OneshotModule)) {\n            this.source = source;\n        } else {\n            return this;\n        }\n\n        if (!Array.isArray(mmls)) {\n            mmls = [mmls];\n        }\n\n        while (mmls.length > 0) {\n            const mml = String(mmls.shift());\n\n            /** @type {Array.<object>}*/\n            const sequences = [];\n\n            const notes = mml.match(MML.REGEXP_MML);\n\n            if (notes === null) {\n                this.callbacks.error(MML.ERROR_STRING, '');\n                return;\n            }\n\n            let indexes     = [];\n            let frequencies = [];\n\n            let start    = 0;\n            let duration = 0;\n            let stop     = 0;\n\n            let currentTime = 0;\n            let timeOf4note = null;\n            let octave      = null;\n\n            while (notes.length > 0) {\n                const note = notes.shift().trim();\n\n                if (MML.REGEXP_TEMPO.test(note)) {\n                    const bpm = parseInt(note.slice(1), 10);\n\n                    if (bpm > 0) {\n                        timeOf4note = MML.ONE_MINUTES / bpm;\n                    } else {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_OCTAVE.test(note)) {\n                    octave = parseInt(note.slice(1), 10);\n\n                    if (octave < 0) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n                } else if (MML.REGEXP_NOTE.test(note)) {\n                    if (timeOf4note === null) {\n                        this.callbacks.error(MML.ERROR_TEMPO, note);\n                        return;\n                    }\n\n                    if (octave === null) {\n                        this.callbacks.error(MML.ERROR_OCTAVE, note);\n                        return;\n                    }\n\n                    const chord = note.match(MML.REGEXP_CHORD)[1];\n\n                    indexes = [];\n\n                    for (let i = 0, len = chord.length; i < len; i++) {\n                        const pitchname = chord.charAt(i);\n\n                        let index = MML.computeIndex(octave, pitchname.toUpperCase());\n\n                        // Half up or Half down (Sharp or Flat) ?\n                        switch (chord.charAt(i + 1)) {\n                            case '#':\n                            case '+':\n                                // Half up (Sharp)\n                                index++;\n                                i++;\n                                break;\n                            case '-':\n                                // Half down (Flat)\n                                index--;\n                                i++;\n                                break;\n                            default:\n                                // Normal (Natural)\n                                break;\n                        }\n\n                        // in the case of chord\n                        if (index >= indexes[0]) {\n                            index -= MML.EQUAL_TEMPERAMENT;\n                        }\n\n                        // Validation\n                        if (index < 0) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        indexes.push(index);\n                    }\n\n                    frequencies = [];\n\n                    for (const index of indexes) {\n                        const frequency = (index !== MML.REST) ? MML.computeFrequency(index) : 0;\n\n                        // Validation\n                        if (frequency === -1) {\n                            this.callbacks.error(MML.ERROR_NOTE, note);\n                            return;\n                        }\n\n                        frequencies.push(frequency);\n                    }\n\n                    const durations = note.split('&');  // Tie\n\n                    while (durations.length > 0) {\n                        const d = durations.shift().match(MML.REGEXP_DURATION)[1];\n\n                        switch (parseInt(d, 10)) {\n                            case   1:\n                            case   2:\n                            case   4:\n                            case   8:\n                            case  16:\n                            case  32:\n                            case  64:\n                            case 128:\n                            case 256:\n                                const numOf4note = MML.QUARTER_NOTE / parseInt(d, 10);\n\n                                // a dotted note ?\n                                duration += (d.indexOf('.') !== -1) ? ((1.5 * numOf4note) * timeOf4note) : (numOf4note * timeOf4note);\n                                break;\n                            case   6:\n                                // Triplet of half note\n                                duration += (2 * timeOf4note) / 3;\n                                break;\n                            case  12:\n                                // Triplet of quarter note\n                                duration += timeOf4note / 3;\n                                break;\n                            case  18:\n                                // Nonuplet of half note\n                                duration += (2 * timeOf4note) / 9;\n                                break;\n                            case  24:\n                                // Triplet of 8th note\n                                duration += (0.5 * timeOf4note) / 3;\n                                break;\n                            case  36:\n                                // Nonuplet of quarter note\n                                duration += timeOf4note / 9;\n                                break;\n                            case  48:\n                                // Triplet of 16th note\n                                duration += (0.25 * timeOf4note) / 3;\n                                break;\n                            case  72:\n                                // Nonuplet of 8th note\n                                duration += (0.5 * timeOf4note) / 9;\n                                break;\n                            case  96:\n                                // Triplet of 32th note\n                                duration += (0.125 * timeOf4note) / 3;\n                                break;\n                            case 144:\n                                // Nonuplet of 16th note\n                                duration += (0.25 * timeOf4note) / 9;\n                                break;\n                            case 192:\n                                // Triplet of 64th note\n                                duration += (0.0625 * timeOf4note) / 3;\n                                break;\n                            default:\n                                this.callbacks.error(MML.ERROR_NOTE, note);\n                                break;\n                        }\n                    }\n\n                    start = currentTime;\n                    stop  = start + duration;\n\n                    currentTime += duration;\n\n                    sequences.push({\n                        'indexes'     : indexes,\n                        'frequencies' : frequencies,\n                        'start'       : start,\n                        'duration'    : duration,\n                        'stop'        : stop\n                    });\n\n                    duration = 0;\n                }\n            }\n\n            if (sequences.length > 0) {\n                // `start` method gets element by `pop` for performance\n                sequences.reverse();\n\n                this.sequences.push(sequences);\n                this.timerids.push(null);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method starts the designated MML part. Moreover, this method schedules next sound.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>|Array.<AudioNode>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    start(part, connects, processCallback) {\n        const p = parseInt(part, 10);\n\n        if ((p >= 0) && (p < this.sequences.length)) {\n            if (!Array.isArray(this.sequences[p])) {\n                return this;\n            }\n\n            // End ?\n            if (this.sequences[p].length === 0) {\n                this.stop(processCallback);\n                this.callbacks.ended();\n\n                return this;\n            }\n\n            const sequence = this.sequences[p].pop();\n\n            if (Array.isArray(this.source)) {\n                for (let i = 0, len = this.source.length; i < len; i++) {\n                    let source = this.source[i];\n\n                    const type   = source.type;\n                    const detune = source.detune.value;\n\n                    source = this.context.createOscillator();\n\n                    // for legacy browsers\n                    source.start = source.start || source.noteOn;\n                    source.stop  = source.stop  || source.noteOff;\n\n                    source.type            = type;\n                    source.frequency.value = sequence.frequencies[i];\n                    source.detune.value    = detune;\n\n                    if (Array.isArray(connects)) {\n                        // OscillatorNode (Input) -> AudioNode -> ... -> AudioNode -> AudioDestinationNode (Output)\n                        source.connect(connects[0]);\n\n                        for (let j = 0, num = connects.length; j < num; j++) {\n                            const node = connects[j];\n\n                            if (j < (num - 1)) {\n                                const next = connects[j + 1];\n\n                                if (!((node instanceof AudioNode) && (next instanceof AudioNode))) {\n                                    return this;\n                                }\n\n                                node.connect(next);\n                            } else {\n                                node.connect(this.context.destination);\n                            }\n                        }\n                    } else {\n                        // OscillatorNode (Input) -> AudioDestinationNode (Output)\n                        source.connect(this.context.destination);\n                    }\n\n                    source.start(this.context.currentTime);\n                    source.stop(this.context.currentTime + sequence.duration);\n\n                    this.source[i] = source;\n                }\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OscillatorModule) {\n                this.source.start(sequence.frequencies, connects, processCallback);\n\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    this.callbacks.start(sequence, i);\n                }\n            } else if (this.source instanceof OneshotModule) {\n                for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                    if (sequence.indexes[i] !== MML.REST) {\n                        this.source.start(sequence.indexes[i], connects, processCallback);\n                    }\n\n                    this.callbacks.start(sequence, i);\n                }\n            }\n\n            this.timerids[p] = window.setTimeout(() => {\n                if (Array.isArray(this.source)) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.start(sequence, i);\n                    }\n                } else if (this.source instanceof OscillatorModule) {\n                    this.source.stop();\n\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        this.callbacks.stop(sequence, i);\n                    }\n                } else if (this.source instanceof OneshotModule) {\n                    for (let i = 0, len = sequence.indexes.length; i < len; i++) {\n                        if (sequence.indexes[i] !== MML.REST) {\n                            this.source.stop(sequence.indexes[i], processCallback);\n                        }\n\n                        this.callbacks.stop(sequence, i);\n                    }\n                }\n\n                // for `MML#stop`\n                this.prev = sequence;\n\n                // Start next sound by recursive call\n                this.start(p, connects, processCallback);\n            }, (sequence.duration * 1000));\n        }\n\n        return this;\n    }\n\n    /**\n     * This method stops the all of MML parts.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    stop(processCallback) {\n        const sequence = this.prev;\n\n        if (sequence.length === 0) {\n            return this;\n        }\n\n        if (Array.isArray(this.source)) {\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OscillatorModule) {\n            this.source.stop();\n\n            for (const index of sequence.indexes) {\n                this.callbacks.stop(sequence, index);\n            }\n        } else if (this.source instanceof OneshotModule) {\n            for (const index of sequence.indexes) {\n                if (index !== MML.REST) {\n                    this.source.stop(index, processCallback);\n                }\n\n                this.callbacks.stop(sequence, index);\n            }\n        }\n\n        for (let i = 0, len = this.timerids.length; i < len; i++) {\n            window.clearTimeout(this.timerids[i]);\n            this.timerids[i] = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * This method gets the array that contains object for playing the MML.\n     * @param {number} index This argument is required in the case of designating sequence.\n     * @return {Array.<Array.<object>>|Array.<object>}\n     */\n    get(index) {\n        const i = parseInt(index, 10);\n\n        return ((i >= 0) && (i < this.sequences.length)) ? this.sequences[i] : this.sequences;\n    }\n\n    /**\n     * This method starts or stops MML according to state.\n     * @param {number} part This argument is the part of MML.\n     * @param {Array.<Effector>} connects This argument is the array for changing the default connection.\n     * @param {function} processCallback This argument is in order to change `onaudioprocess` event handler in the instance of `ScriptProcessorNode`.\n     * @return {MML} This is returned for method chain.\n     */\n    toggle(part, connects, processCallback) {\n        if (this.isPaused()) {\n            this.start(part, connects, processCallback);\n        } else {\n            this.stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * This method determines whether the array that is used to play the MML exists.\n     * @return {boolean} If the array exists, this value is `true`. Otherwise, this value is `false`.\n     */\n    isSequences() {\n        return Array.isArray(this.sequences[0]);\n    }\n\n    /**\n     * This method determines whether the MML is paused.\n     * @return {boolean} If the MML is paused, this value is `true`. Otherwise, this value is `false`.\n     */\n    isPaused() {\n        for (const timerid of this.timerids) {\n            if ((timerid === null) || (timerid === undefined)) {\n                // Next timer\n            } else {\n                // Playing the MML\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * This method creates text file for MML.\n     * @param {string} mml This argument is MML string.\n     * @return {string} This is returned as text file that MML is written.\n     */\n    create(mml) {\n        const base64  = window.btoa(MML.toAscii(String(mml)));\n        const dataURL = `data:text/plain;base64,${base64}`;\n\n        return dataURL;\n    }\n\n    /** @override */\n    toString() {\n        return '[MML]';\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/MML/index.js","'use strict';\n\n/**\n * This class (static) method reads file of audio or text.\n * @param {Blob} file This argument is the instance of `Blob`. This is entity of file.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n */\nexport function read(file, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('file' in properties) {\n            file = properties.file;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(file instanceof Blob)) {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(null, 'FILE_IS_NOT_BLOB');\n        }\n\n        return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    reader.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            let error = '';\n\n            switch (reader.error.code) {\n                case reader.error.NOT_FOUND_ERR:\n                    error = 'NOT_FOUND_ERR';\n                    break;\n                case reader.error.SECURITY_ERR:\n                    error = 'SECURITY_ERR';\n                    break;\n                case reader.error.ABORT_ERR:\n                    error = 'ABORT_ERR';\n                    break;\n                case reader.error.NOT_READABLE_ERR:\n                    error = 'NOT_READABLE_ERR';\n                    break;\n                case reader.error.ENCODING_ERR:\n                    error = 'ENCODING_ERR';\n                    break;\n                default:\n                    error = 'ERR';\n                    break;\n            }\n\n            errorCallback(event, error);\n        }\n    };\n\n    reader.onload = event => {\n        if (Object.prototype.toString.call(successCallback) === '[object Function]') {\n            let result = reader.result;\n\n            // Escape `<script>` in the case of text\n            if ((typeof result === 'string') && (result.indexOf('data:') === -1) && (result.indexOf('blob:') === -1)) {\n                result = result.replace(/<(\\/?script.*?)>/gi, '&lt;$1&gt;');\n            }\n\n            successCallback(event, result);\n        }\n    };\n\n    if (/arraybuffer/i.test(type)) {\n        reader.readAsArrayBuffer(file);\n    } else if (/dataurl/i.test(type)) {\n        reader.readAsDataURL(file);\n    } else if (/text/i.test(type)) {\n        reader.readAsText(file, 'UTF-8');\n    }\n}\n\n/**\n * This class (static) method gets the instance of `File` (extends `Blob`).\n * @param {Event} event This argument is the instance of Event by Drag & Drop or `<input type=\"file\">`.\n * @param {string} type This argument is one of 'ArrayBuffer', 'DataURL', 'Text'.\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when reading file failed.\n * @param {function} progressCallback This argument is invoked as `onprogress` event handler in the instance of `FileReader`.\n * @return {File} This is returned as the instance of `File` (extends `Blob`).\n */\nexport function file(event, type, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('event' in properties) {\n            event = properties.event;\n        }\n\n        if ('type' in properties) {\n            type = properties.type;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    if (!(event instanceof Event)) {\n        return;\n    }\n\n    // for the instance of `File` (extends `Blob`)\n    let file = null;\n\n    if (event.type === 'drop') {\n        // Drag & Drop\n        event.stopPropagation();\n        event.preventDefault();\n\n        file = /* ('items' in event.dataTransfer) ? event.dataTransfer.items[0].getAsFile() : */event.dataTransfer.files[0];\n    } else if ((event.type === 'change') && ('files' in event.target)) {\n        // `<input type=\"file\">`\n        file = event.target.files[0];\n    } else {\n        return;\n    }\n\n    if (!(file instanceof File)) {\n        throw new Error('Please upload file.');\n    } else if ((/text/i.test(type)) && (file.type.indexOf('text') === -1)) {\n        throw new Error('Please upload text file.');\n    } else if ((/arraybuffer|dataurl/i.test(type)) && !/audio|video/.test(file.type)) {\n        throw new Error('Please upload audio or video file.');\n    } else {\n        read({\n            'file'     : file,\n            'type'     : type,\n            'success'  : successCallback,\n            'error'    : errorCallback,\n            'progress' : progressCallback\n        });\n\n        return file;\n    }\n}\n\n/**\n * This class (static) method gets audio data as `ArrayBuffer` by Ajax.\n * @param {string} url This argument is URL for audio resource.\n * @param {number} timeout This argument is timeout of Ajax. The default value is 60000 msec (1 minutes).\n * @param {function} successCallback This argument is invoked as next process when reading file is successful.\n * @param {function} errorCallback This argument is invoked when error occurred.\n * @param {function} progressCallback This argument is invoked during receiving audio data.\n */\nexport function ajax(url, timeout, successCallback, errorCallback, progressCallback) {\n    // The argument is associative array ?\n    if (Object.prototype.toString.call(arguments[0]) === '[object Object]') {\n        const properties = arguments[0];\n\n        if ('url' in properties) {\n            url = properties.url;\n        }\n\n        if ('timeout' in properties) {\n            timeout = properties.timeout;\n        }\n\n        if ('success' in properties) {\n            successCallback = properties.success;\n        }\n\n        if ('error' in properties) {\n            errorCallback = properties.error;\n        }\n\n        if ('progress' in properties) {\n            progressCallback = properties.progress;\n        }\n    }\n\n    // for errorCallback\n    const ERROR_AJAX         = 'error';\n    const ERROR_AJAX_TIMEOUT = 'timeout';\n\n    const xhr = new XMLHttpRequest();\n\n    const t = parseInt(timeout, 10);\n\n    xhr.timeout = (t > 0) ? t : 60000;\n\n    xhr.ontimeout = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX_TIMEOUT);\n        }\n    };\n\n    xhr.onprogress = event => {\n        if (Object.prototype.toString.call(progressCallback) === '[object Function]') {\n            progressCallback(event);\n        }\n    };\n\n    xhr.onerror = event => {\n        if (Object.prototype.toString.call(errorCallback) === '[object Function]') {\n            errorCallback(event, ERROR_AJAX);\n        }\n    };\n\n    xhr.onload = event => {\n        if (xhr.status === 200) {\n            const arrayBuffer = xhr.response;\n\n            if ((arrayBuffer instanceof ArrayBuffer) && (Object.prototype.toString.call(successCallback) === '[object Function]')) {\n                successCallback(event, arrayBuffer);\n            }\n        }\n    };\n\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';  // XMLHttpRequest Level 2\n    xhr.send(null);\n}\n\n/**\n * This class (static) method creates the instance of `AudioBuffer` from `ArrayBuffer`.\n * @param {AudioContext} context This argument is the instance of `AudioContext` for `decodeAudioData` method.\n * @param {ArrayBuffer} arrayBuffer This argument is converted to the instance of `AudioBuffer`.\n * @param {function} successCallback This argument is invoked when `decodeAudioData` method is successful.\n       The 1st argument in this callback function is the instance of `AudioBuffer`.\n * @param {function} errorCallback This argument is invoked when `decodeAudioData` method failed.\n * @return {Promise} This is returned as `Promise`.\n */\nexport function decode(context, arrayBuffer, successCallback, errorCallback) {\n    if (!(context instanceof AudioContext)) {\n        return;\n    }\n\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n        return;\n    }\n\n    if (Object.prototype.toString.call(successCallback) !== '[object Function]') {\n        successCallback = () => {};\n    }\n\n    if (Object.prototype.toString.call(errorCallback) !== '[object Function]') {\n        errorCallback = () => {};\n    }\n\n    return context.decodeAudioData(arrayBuffer, successCallback, errorCallback);\n}\n\n/**\n * This class (static) method calculates frequency from the index that corresponds to the 12 equal temperament.\n * @param {Array.<number>} indexes This argument is array of index that corresponds to the 12 equal temperament.\n *     For example, This value is between 0 and 88 in the case of piano.\n * @return {Array.<number>} This is returned as array that contains frequencies.\n */\nexport function toFrequencies(indexes) {\n    // The 12 equal temperament\n    //\n    // Min -> 27.5 Hz (A), Max -> 4186 Hz (C)\n    //\n    // A * 1.059463 -> A# (half up)\n\n    const FREQUENCY_RATIO = Math.pow(2, (1 / 12));  // about 1.059463\n    const MIN_A           = 27.5;\n\n    if (!Array.isArray(indexes)) {\n        indexes = [indexes];\n    }\n\n    const frequencies = new Array(indexes.length);\n\n    for (let i = 0, len = indexes.length; i < len; i++) {\n        const index = parseInt(indexes[i], 10);\n\n        frequencies[i] = (index >= 0) ? (MIN_A * Math.pow(FREQUENCY_RATIO, index)) : 0;\n    }\n\n    return frequencies;\n}\n\n/**\n * This class (static) method calculates minutes and seconds from the designated time in seconds.\n * @param {number} time This argument is the time in seconds.\n * @return {object} This is returned as associative array that contains `minutes`, `seconds` and `milliseconds` keys.\n */\nexport function convertTime(time) {\n    const t = parseFloat(time);\n\n    if (t >= 0) {\n        const m  = Math.floor(t / 60);\n        const s  = Math.floor(t % 60);\n        const ms = t - parseInt(t, 10);\n\n        return {\n            'minutes'      : m,\n            'seconds'      : s,\n            'milliseconds' : ms\n        };\n    }\n}\n\n/**\n * This class (static) method shows the designated `Element` in full screen.\n * @param {Element} element This argument is the instance of `Element` that is the target of full screen.\n */\nexport function fullscreen(element) {\n    if (!(element instanceof Element)) {\n        return;\n    }\n\n    if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n    } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n    } else if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else {\n        throw new Error('Cannot change to full screen.');\n    }\n}\n\n/**\n * This class (static) method shows `Element` in original size from full screen.\n */\nexport function exitFullscreen() {\n    if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen();\n    } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n    } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n    } else if (document.cancelFullScreen) {\n        document.cancelFullScreen();\n    } else if (document.exitFullscreen) {\n        document.exitFullscreen();\n    } else {\n        throw new Error('Cannot exit from full screen.');\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/XSound/index.js"],"sourceRoot":""}